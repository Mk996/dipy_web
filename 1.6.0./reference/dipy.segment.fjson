{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.reconst/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst</span></code>"}, "next": {"link": "../dipy.sims/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sims</span></code>"}, "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment</span></code>", "meta": {}, "body": "<section id=\"module-dipy.segment\">\n<span id=\"segment\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment</span></code><a class=\"headerlink\" href=\"#module-dipy.segment\" title=\"Permalink to this heading\">\u00b6</a></h1>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n</tbody>\n</table>\n<section id=\"module-dipy.segment.benchmarks\">\n<span id=\"module-segment-benchmarks\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.benchmarks</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.benchmarks\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.benchmarks.bench_quickbundles\">\n<span id=\"module-segment-benchmarks-bench-quickbundles\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.benchmarks.bench_quickbundles</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.benchmarks.bench_quickbundles\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<p>Benchmarks for QuickBundles</p>\n<p>Run all benchmarks with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.segment</span> <span class=\"k\">as</span> <span class=\"nn\">dipysegment</span>\n<span class=\"n\">dipysegment</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>With Pytest, Run this benchmark with:</p>\n<blockquote>\n<div><p>pytest -svv -c bench.ini /path/to/bench_quickbundles.py</p>\n</div></blockquote>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy\" title=\"dipy.segment.benchmarks.bench_quickbundles.MDFpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MDFpy</span></code></a></p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric\" title=\"dipy.segment.benchmarks.bench_quickbundles.Metric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a></p></td>\n<td><p>Computes a distance between two sequential data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.QB_New\" title=\"dipy.segment.benchmarks.bench_quickbundles.QB_New\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QB_New</span></code></a></p></td>\n<td><p>alias of <a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundles\" title=\"dipy.segment.clustering.QuickBundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Streamlines\" title=\"dipy.segment.benchmarks.bench_quickbundles.Streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_array_equal\" title=\"dipy.segment.benchmarks.bench_quickbundles.assert_array_equal\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assert_array_equal</span></code></a>(x,\u00a0y[,\u00a0err_msg,\u00a0verbose,\u00a0...])</p></td>\n<td><p>Raises an AssertionError if two array_like objects are not equal.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_arrays_equal\" title=\"dipy.segment.benchmarks.bench_quickbundles.assert_arrays_equal\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assert_arrays_equal</span></code></a>(arrays1,\u00a0arrays2)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_equal\" title=\"dipy.segment.benchmarks.bench_quickbundles.assert_equal\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assert_equal</span></code></a>(actual,\u00a0desired[,\u00a0err_msg,\u00a0verbose])</p></td>\n<td><p>Raises an AssertionError if two objects are not equal.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.bench_quickbundles\" title=\"dipy.segment.benchmarks.bench_quickbundles.bench_quickbundles\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bench_quickbundles</span></code></a>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.get_fnames\" title=\"dipy.segment.benchmarks.bench_quickbundles.get_fnames\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_fnames</span></code></a>([name])</p></td>\n<td><p>Provide full paths to example or test datasets.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.load_tractogram\" title=\"dipy.segment.benchmarks.bench_quickbundles.load_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_tractogram</span></code></a>(filename,\u00a0reference[,\u00a0...])</p></td>\n<td><p>Load the stateful tractogram from any format (trk/tck/vtk/vtp/fib/dpy)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.measure\" title=\"dipy.segment.benchmarks.bench_quickbundles.measure\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">measure</span></code></a>(code_str[,\u00a0times,\u00a0label])</p></td>\n<td><p>Return elapsed time for executing code in the namespace of the caller.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.set_number_of_points\" title=\"dipy.segment.benchmarks.bench_quickbundles.set_number_of_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_number_of_points</span></code></a></p></td>\n<td><p>Change the number of points of streamlines</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.bundles\">\n<span id=\"module-segment-bundles\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.bundles</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.bundles\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric\" title=\"dipy.segment.bundles.BundleMinDistanceAsymmetricMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a>([num_threads])</p></td>\n<td><p>Asymmetric Bundle-based Minimum distance.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric\" title=\"dipy.segment.bundles.BundleMinDistanceMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Minimum Distance aka BMD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleSumDistanceMatrixMetric\" title=\"dipy.segment.bundles.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Sum Distance aka BMD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles\" title=\"dipy.segment.bundles.RecoBundles\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a>(streamlines[,\u00a0greater_than,\u00a0...])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration\" title=\"dipy.segment.bundles.StreamlineLinearRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a>([metric,\u00a0x0,\u00a0...])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.Streamlines\" title=\"dipy.segment.bundles.Streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.chain\" title=\"dipy.segment.bundles.chain\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">chain</span></code></a></p></td>\n<td><p>chain(<a href=\"#id1\"><span class=\"problematic\" id=\"id2\">*</span></a>iterables) --&gt; chain object</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.apply_affine\" title=\"dipy.segment.bundles.apply_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apply_affine</span></code></a>(aff,\u00a0pts[,\u00a0inplace])</p></td>\n<td><p>Apply affine matrix <cite>aff</cite> to points <cite>pts</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.ba_analysis\" title=\"dipy.segment.bundles.ba_analysis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ba_analysis</span></code></a>(recognized_bundle,\u00a0expert_bundle)</p></td>\n<td><p>Calculates bundle adjacency score between two given bundles</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.bundle_adjacency\" title=\"dipy.segment.bundles.bundle_adjacency\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_adjacency</span></code></a>(dtracks0,\u00a0dtracks1,\u00a0threshold)</p></td>\n<td><p>Find bundle adjacency between two given tracks/bundles</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.bundle_shape_similarity\" title=\"dipy.segment.bundles.bundle_shape_similarity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_shape_similarity</span></code></a>(bundle1,\u00a0bundle2,\u00a0rng)</p></td>\n<td><p>Calculates bundle shape similarity between two given bundles using bundle adjacency (BA) metric</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.bundles_distances_mam\" title=\"dipy.segment.bundles.bundles_distances_mam\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundles_distances_mam</span></code></a></p></td>\n<td><p>Calculate distances between list of tracks A and list of tracks B</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.bundles_distances_mdf\" title=\"dipy.segment.bundles.bundles_distances_mdf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundles_distances_mdf</span></code></a></p></td>\n<td><p>Calculate distances between list of tracks A and list of tracks B</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.check_range\" title=\"dipy.segment.bundles.check_range\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">check_range</span></code></a>(streamline,\u00a0gt,\u00a0lt)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.cluster_bundle\" title=\"dipy.segment.bundles.cluster_bundle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cluster_bundle</span></code></a>(bundle,\u00a0clust_thr,\u00a0rng[,\u00a0...])</p></td>\n<td><p>Clusters bundles</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.deprecated_params\" title=\"dipy.segment.bundles.deprecated_params\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">deprecated_params</span></code></a>(old_name[,\u00a0new_name,\u00a0...])</p></td>\n<td><p>Deprecate a <em>renamed</em> or <em>removed</em> function argument.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.length\" title=\"dipy.segment.bundles.length\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">length</span></code></a></p></td>\n<td><p>Euclidean length of streamlines</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.nbytes\" title=\"dipy.segment.bundles.nbytes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nbytes</span></code></a>(streamlines)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.qbx_and_merge\" title=\"dipy.segment.bundles.qbx_and_merge\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qbx_and_merge</span></code></a>(streamlines,\u00a0thresholds[,\u00a0...])</p></td>\n<td><p>Run QuickBundlesX and then run again on the centroids of the last layer</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.select_random_set_of_streamlines\" title=\"dipy.segment.bundles.select_random_set_of_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">select_random_set_of_streamlines</span></code></a>(...[,\u00a0rng])</p></td>\n<td><p>Select a random set of streamlines</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.set_number_of_points\" title=\"dipy.segment.bundles.set_number_of_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_number_of_points</span></code></a></p></td>\n<td><p>Change the number of points of streamlines</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.time\" title=\"dipy.segment.bundles.time\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">time</span></code></a>()</p></td>\n<td><p>Return the current time in seconds since the Epoch.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.clustering\">\n<span id=\"module-segment-clustering\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.clustering</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.clustering\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ABCMeta\" title=\"dipy.segment.clustering.ABCMeta\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ABCMeta</span></code></a>(name,\u00a0bases,\u00a0namespace,\u00a0**kwargs)</p></td>\n<td><p>Metaclass for defining Abstract Base Classes (ABCs).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.clustering.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a></p></td>\n<td><p>Computes the average of pointwise Euclidean distances between two sequential data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster\" title=\"dipy.segment.clustering.Cluster\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Cluster</span></code></a>([id,\u00a0indices,\u00a0refdata])</p></td>\n<td><p>Provides functionalities for interacting with a cluster.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid\" title=\"dipy.segment.clustering.ClusterCentroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a>(centroid[,\u00a0id,\u00a0indices,\u00a0refdata])</p></td>\n<td><p>Provides functionalities for interacting with a cluster.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap\" title=\"dipy.segment.clustering.ClusterMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a>([refdata])</p></td>\n<td><p>Provides functionalities for interacting with clustering outputs.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMapCentroid\" title=\"dipy.segment.clustering.ClusterMapCentroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a>([refdata])</p></td>\n<td><p>Provides functionalities for interacting with clustering outputs that have centroids.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.Clustering\" title=\"dipy.segment.clustering.Clustering\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Clustering</span></code></a>()</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.Identity\" title=\"dipy.segment.clustering.Identity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Identity</span></code></a>()</p></td>\n<td><p>Provides identity indexing functionality.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric\" title=\"dipy.segment.clustering.Metric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a></p></td>\n<td><p>Computes a distance between two sequential data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric\" title=\"dipy.segment.clustering.MinimumAverageDirectFlipMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a></p></td>\n<td><p>Computes the MDF distance (minimum average direct-flip) between two sequential data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundles\" title=\"dipy.segment.clustering.QuickBundles\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a>(threshold[,\u00a0metric,\u00a0...])</p></td>\n<td><p>Clusters streamlines using QuickBundles <a class=\"reference internal\" href=\"#r2491d57df3a8-garyfallidis12\" id=\"id3\">[Garyfallidis12]</a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundlesX\" title=\"dipy.segment.clustering.QuickBundlesX\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QuickBundlesX</span></code></a>(thresholds[,\u00a0metric])</p></td>\n<td><p>Clusters streamlines using QuickBundlesX.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ResampleFeature\" title=\"dipy.segment.clustering.ResampleFeature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ResampleFeature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeCluster\" title=\"dipy.segment.clustering.TreeCluster\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TreeCluster</span></code></a>(threshold,\u00a0centroid[,\u00a0indices])</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeClusterMap\" title=\"dipy.segment.clustering.TreeClusterMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TreeClusterMap</span></code></a>(root)</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.abstractmethod\" title=\"dipy.segment.clustering.abstractmethod\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">abstractmethod</span></code></a>(funcobj)</p></td>\n<td><p>A decorator indicating abstract methods.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.nbytes\" title=\"dipy.segment.clustering.nbytes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nbytes</span></code></a>(streamlines)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.qbx_and_merge\" title=\"dipy.segment.clustering.qbx_and_merge\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qbx_and_merge</span></code></a>(streamlines,\u00a0thresholds[,\u00a0...])</p></td>\n<td><p>Run QuickBundlesX and then run again on the centroids of the last layer</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.set_number_of_points\" title=\"dipy.segment.clustering.set_number_of_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_number_of_points</span></code></a></p></td>\n<td><p>Change the number of points of streamlines</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.time\" title=\"dipy.segment.clustering.time\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">time</span></code></a>()</p></td>\n<td><p>Return the current time in seconds since the Epoch.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.clustering_algorithms\">\n<span id=\"module-segment-clustering-algorithms\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.clustering_algorithms</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.clustering_algorithms\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid\" title=\"dipy.segment.clustering_algorithms.ClusterCentroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a>(centroid[,\u00a0id,\u00a0indices,\u00a0refdata])</p></td>\n<td><p>Provides functionalities for interacting with a cluster.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterMapCentroid\" title=\"dipy.segment.clustering_algorithms.ClusterMapCentroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a>([refdata])</p></td>\n<td><p>Provides functionalities for interacting with clustering outputs that have centroids.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.DTYPE\" title=\"dipy.segment.clustering_algorithms.DTYPE\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DTYPE</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">float32</span></code></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.clusters_centroid2clustermap_centroid\" title=\"dipy.segment.clustering_algorithms.clusters_centroid2clustermap_centroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clusters_centroid2clustermap_centroid</span></code></a></p></td>\n<td><p>Converts a <cite>ClustersCentroid</cite> object (Cython) to a <cite>ClusterMapCentroid</cite> object (Python).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.peek\" title=\"dipy.segment.clustering_algorithms.peek\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peek</span></code></a></p></td>\n<td><p>Returns the first element of an iterable and the iterator.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.quickbundles\" title=\"dipy.segment.clustering_algorithms.quickbundles\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">quickbundles</span></code></a></p></td>\n<td><p>Clusters streamlines using QuickBundles.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.quickbundlesx\" title=\"dipy.segment.clustering_algorithms.quickbundlesx\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">quickbundlesx</span></code></a></p></td>\n<td><p>Clusters streamlines using QuickBundlesX.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.clusteringspeed\">\n<span id=\"module-segment-clusteringspeed\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.clusteringspeed</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.clusteringspeed\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid\" title=\"dipy.segment.clusteringspeed.ClusterCentroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a>(centroid[,\u00a0id,\u00a0indices,\u00a0refdata])</p></td>\n<td><p>Provides functionalities for interacting with a cluster.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterMapCentroid\" title=\"dipy.segment.clusteringspeed.ClusterMapCentroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a>([refdata])</p></td>\n<td><p>Provides functionalities for interacting with clustering outputs that have centroids.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.Clusters\" title=\"dipy.segment.clusteringspeed.Clusters\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Clusters</span></code></a></p></td>\n<td><p>Provides Cython functionalities to interact with clustering outputs.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClustersCentroid\" title=\"dipy.segment.clusteringspeed.ClustersCentroid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClustersCentroid</span></code></a></p></td>\n<td><p>Provides Cython functionalities to interact with clustering outputs having the notion of cluster's centroid.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.DTYPE\" title=\"dipy.segment.clusteringspeed.DTYPE\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DTYPE</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">float32</span></code></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundles\" title=\"dipy.segment.clusteringspeed.QuickBundles\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX\" title=\"dipy.segment.clusteringspeed.QuickBundlesX\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">QuickBundlesX</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeCluster\" title=\"dipy.segment.clusteringspeed.TreeCluster\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TreeCluster</span></code></a>(threshold,\u00a0centroid[,\u00a0indices])</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap\" title=\"dipy.segment.clusteringspeed.TreeClusterMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TreeClusterMap</span></code></a>(root)</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.evaluate_aabb_checks\" title=\"dipy.segment.clusteringspeed.evaluate_aabb_checks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evaluate_aabb_checks</span></code></a></p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.cythonutils\">\n<span id=\"module-segment-cythonutils\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.cythonutils</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.cythonutils\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.featurespeed\">\n<span id=\"module-segment-featurespeed\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.featurespeed</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.featurespeed\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.ArcLengthFeature\" title=\"dipy.segment.featurespeed.ArcLengthFeature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ArcLengthFeature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CenterOfMassFeature\" title=\"dipy.segment.featurespeed.CenterOfMassFeature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CenterOfMassFeature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature\" title=\"dipy.segment.featurespeed.Feature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Feature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.IdentityFeature\" title=\"dipy.segment.featurespeed.IdentityFeature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IdentityFeature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.MidpointFeature\" title=\"dipy.segment.featurespeed.MidpointFeature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MidpointFeature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.ResampleFeature\" title=\"dipy.segment.featurespeed.ResampleFeature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ResampleFeature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.VectorOfEndpointsFeature\" title=\"dipy.segment.featurespeed.VectorOfEndpointsFeature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">VectorOfEndpointsFeature</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.extract\" title=\"dipy.segment.featurespeed.extract\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></a></p></td>\n<td><p>Extracts features from data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.infer_shape\" title=\"dipy.segment.featurespeed.infer_shape\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></a></p></td>\n<td><p>Infers shape of the features extracted from data.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.mask\">\n<span id=\"module-segment-mask\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.mask</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.mask\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.applymask\" title=\"dipy.segment.mask.applymask\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">applymask</span></code></a>(vol,\u00a0mask)</p></td>\n<td><p>Mask vol with mask.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.binary_dilation\" title=\"dipy.segment.mask.binary_dilation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_dilation</span></code></a>(input[,\u00a0structure,\u00a0...])</p></td>\n<td><p>Multidimensional binary dilation with the given structuring element.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.bounding_box\" title=\"dipy.segment.mask.bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bounding_box</span></code></a>(vol)</p></td>\n<td><p>Compute the bounding box of nonzero intensity voxels in the volume.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.clean_cc_mask\" title=\"dipy.segment.mask.clean_cc_mask\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clean_cc_mask</span></code></a>(mask)</p></td>\n<td><p>Cleans a segmentation of the corpus callosum so no random pixels are included.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.color_fa\" title=\"dipy.segment.mask.color_fa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">color_fa</span></code></a>(fa,\u00a0evecs)</p></td>\n<td><p>Color fractional anisotropy of diffusion tensor</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.crop\" title=\"dipy.segment.mask.crop\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">crop</span></code></a>(vol,\u00a0mins,\u00a0maxs)</p></td>\n<td><p>Crops the input volume.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.fractional_anisotropy\" title=\"dipy.segment.mask.fractional_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fractional_anisotropy</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Return Fractional anisotropy (FA) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.generate_binary_structure\" title=\"dipy.segment.mask.generate_binary_structure\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generate_binary_structure</span></code></a>(rank,\u00a0connectivity)</p></td>\n<td><p>Generate a binary structure for binary morphological operations.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.median_filter\" title=\"dipy.segment.mask.median_filter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">median_filter</span></code></a>(input[,\u00a0size,\u00a0footprint,\u00a0...])</p></td>\n<td><p>Calculate a multidimensional median filter.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.median_otsu\" title=\"dipy.segment.mask.median_otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">median_otsu</span></code></a>(input_volume[,\u00a0vol_idx,\u00a0...])</p></td>\n<td><p>Simple brain extraction tool method for images from DWI data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.multi_median\" title=\"dipy.segment.mask.multi_median\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">multi_median</span></code></a>(data,\u00a0median_radius,\u00a0numpass)</p></td>\n<td><p>Applies median filter multiple times on input data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.otsu\" title=\"dipy.segment.mask.otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">otsu</span></code></a>([image,\u00a0nbins,\u00a0hist])</p></td>\n<td><p>Return threshold value based on Otsu's method.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.segment_from_cfa\" title=\"dipy.segment.mask.segment_from_cfa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">segment_from_cfa</span></code></a>(tensor_fit,\u00a0roi,\u00a0threshold)</p></td>\n<td><p>Segment the cfa inside roi using the values from threshold as bounds.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mask.warn\" title=\"dipy.segment.mask.warn\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warn</span></code></a>(/,\u00a0message[,\u00a0category,\u00a0stacklevel,\u00a0source])</p></td>\n<td><p>Issue a warning, or maybe ignore it or raise an exception.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.metric\">\n<span id=\"module-segment-metric\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.metric</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.metric\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.metric.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a></p></td>\n<td><p>Computes the average of pointwise Euclidean distances between two sequential data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.CosineMetric\" title=\"dipy.segment.metric.CosineMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CosineMetric</span></code></a></p></td>\n<td><p>Computes the cosine distance between two vectors.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.EuclideanMetric\" title=\"dipy.segment.metric.EuclideanMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EuclideanMetric</span></code></a></p></td>\n<td><p>alias of <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric\" title=\"dipy.segment.metric.Metric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a></p></td>\n<td><p>Computes a distance between two sequential data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric\" title=\"dipy.segment.metric.MinimumAverageDirectFlipMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a></p></td>\n<td><p>Computes the MDF distance (minimum average direct-flip) between two sequential data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metric.SumPointwiseEuclideanMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a></p></td>\n<td><p>Computes the sum of pointwise Euclidean distances between two sequential data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.dist\" title=\"dipy.segment.metric.dist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></a></p></td>\n<td><p>Computes a distance between <cite>datum1</cite> and <cite>datum2</cite>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.mdf\" title=\"dipy.segment.metric.mdf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mdf</span></code></a>(s1,\u00a0s2)</p></td>\n<td><p>Computes the MDF (Minimum average Direct-Flip) distance <a class=\"reference internal\" href=\"#r9ec92ef08bd1-garyfallidis12\" id=\"id4\">[Garyfallidis12]</a> between two streamlines.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.metricspeed\">\n<span id=\"module-segment-metricspeed\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.metricspeed</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.metricspeed\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a></p></td>\n<td><p>Computes the average of pointwise Euclidean distances between two sequential data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CosineMetric\" title=\"dipy.segment.metricspeed.CosineMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CosineMetric</span></code></a></p></td>\n<td><p>Computes the cosine distance between two vectors.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric\" title=\"dipy.segment.metricspeed.CythonMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CythonMetric</span></code></a></p></td>\n<td><p>Computes a distance between two sequential data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric\" title=\"dipy.segment.metricspeed.Metric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a></p></td>\n<td><p>Computes a distance between two sequential data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric\" title=\"dipy.segment.metricspeed.MinimumAverageDirectFlipMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a></p></td>\n<td><p>Computes the MDF distance (minimum average direct-flip) between two sequential data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a></p></td>\n<td><p>Computes the sum of pointwise Euclidean distances between two sequential data.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.dist\" title=\"dipy.segment.metricspeed.dist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></a></p></td>\n<td><p>Computes a distance between <cite>datum1</cite> and <cite>datum2</cite>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.distance_matrix\" title=\"dipy.segment.metricspeed.distance_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance_matrix</span></code></a></p></td>\n<td><p>Computes the distance matrix between two lists of sequential data.</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.mrf\">\n<span id=\"module-segment-mrf\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.mrf</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.mrf\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel\" title=\"dipy.segment.mrf.ConstantObservationModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel</span></code></a>()</p></td>\n<td><p>Observation model assuming that the intensity of each class is constant.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes\" title=\"dipy.segment.mrf.IteratedConditionalModes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes</span></code></a>()</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.threshold\">\n<span id=\"module-segment-threshold\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.threshold</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.threshold\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.threshold.otsu\" title=\"dipy.segment.threshold.otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">otsu</span></code></a>(image[,\u00a0nbins])</p></td>\n<td><p>Return threshold value based on Otsu's method.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.threshold.upper_bound_by_percent\" title=\"dipy.segment.threshold.upper_bound_by_percent\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">upper_bound_by_percent</span></code></a>(data[,\u00a0percent])</p></td>\n<td><p>Find the upper bound for visualization of medical images</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.threshold.upper_bound_by_rate\" title=\"dipy.segment.threshold.upper_bound_by_rate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">upper_bound_by_rate</span></code></a>(data[,\u00a0rate])</p></td>\n<td><p>Adjusts upper intensity boundary using rates</p></td>\n</tr>\n</tbody>\n</table>\n</section>\n<section id=\"module-dipy.segment.tissue\">\n<span id=\"module-segment-tissue\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.tissue</span></code><a class=\"headerlink\" href=\"#module-dipy.segment.tissue\" title=\"Permalink to this heading\">\u00b6</a></h2>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel\" title=\"dipy.segment.tissue.ConstantObservationModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel</span></code></a>()</p></td>\n<td><p>Observation model assuming that the intensity of each class is constant.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes\" title=\"dipy.segment.tissue.IteratedConditionalModes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes</span></code></a>()</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.TissueClassifierHMRF\" title=\"dipy.segment.tissue.TissueClassifierHMRF\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TissueClassifierHMRF</span></code></a>([save_history,\u00a0verbose])</p></td>\n<td><p>This class contains the methods for tissue classification using the Markov Random Fields modeling approach</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.add_noise\" title=\"dipy.segment.tissue.add_noise\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_noise</span></code></a>(signal,\u00a0snr,\u00a0S0[,\u00a0noise_type])</p></td>\n<td><p>Add noise of specified distribution to the signal from a single voxel.</p></td>\n</tr>\n</tbody>\n</table>\n<section id=\"mdfpy\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy\" title=\"dipy.segment.benchmarks.bench_quickbundles.MDFpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MDFpy</span></code></a><a class=\"headerlink\" href=\"#mdfpy\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.MDFpy\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MDFpy</span></span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric\" title=\"dipy.segment.metricspeed.Metric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy.are_compatible\" title=\"dipy.segment.benchmarks.bench_quickbundles.MDFpy.are_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></a>(shape1,\u00a0shape2)</p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy.dist\" title=\"dipy.segment.benchmarks.bench_quickbundles.MDFpy.dist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></a>(features1,\u00a0features2)</p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.MDFpy.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.MDFpy.are_compatible\">\n<span class=\"sig-name descname\"><span class=\"pre\">are_compatible</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shape1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">shape2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy.are_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p>\n<p>Basically this method exists so we don\u2019t have to do this check\ninside the <cite>metric.dist</cite> function (speedup).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>shape1</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the first data point\u2019s features</p>\n</dd>\n<dt><strong>shape2</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the second data point\u2019s features</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>are_compatible</strong><span class=\"classifier\">bool</span></dt><dd><p>whether or not shapes are compatible</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.MDFpy.dist\">\n<span class=\"sig-name descname\"><span class=\"pre\">dist</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">features1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">features2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy.dist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes a distance between two data points based on their features.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>features1</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the first data point.</p>\n</dd>\n<dt><strong>features2</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the second data point.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two data points.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"metric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric\" title=\"dipy.segment.benchmarks.bench_quickbundles.Metric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><a class=\"headerlink\" href=\"#metric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.Metric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Metric</span></span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Computes a distance between two sequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between extracted features, rather\nthan directly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>When subclassing <cite>Metric</cite>, one only needs to override the <cite>dist</cite> and\n<cite>are_compatible</cite> methods.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.feature\" title=\"dipy.segment.benchmarks.bench_quickbundles.Metric.feature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></a></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.is_order_invariant\" title=\"dipy.segment.benchmarks.bench_quickbundles.Metric.is_order_invariant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></a></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.are_compatible\" title=\"dipy.segment.benchmarks.bench_quickbundles.Metric.are_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></a></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.dist\" title=\"dipy.segment.benchmarks.bench_quickbundles.Metric.dist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></a></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.Metric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.Metric.are_compatible\">\n<span class=\"sig-name descname\"><span class=\"pre\">are_compatible</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.are_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p>\n<p>Basically this method exists so we don\u2019t have to do this check\ninside the <cite>metric.dist</cite> function (speedup).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>shape1</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the first data point\u2019s features</p>\n</dd>\n<dt><strong>shape2</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the second data point\u2019s features</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>are_compatible</strong><span class=\"classifier\">bool</span></dt><dd><p>whether or not shapes are compatible</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.Metric.dist\">\n<span class=\"sig-name descname\"><span class=\"pre\">dist</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.dist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes a distance between two data points based on their features.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>features1</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the first data point.</p>\n</dd>\n<dt><strong>features2</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the second data point.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two data points.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.Metric.feature\">\n<span class=\"sig-name descname\"><span class=\"pre\">feature</span></span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.feature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.Metric.is_order_invariant\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_order_invariant</span></span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.is_order_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"qb-new\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.QB_New\" title=\"dipy.segment.benchmarks.bench_quickbundles.QB_New\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QB_New</span></code></a><a class=\"headerlink\" href=\"#qb-new\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.QB_New\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QB_New</span></span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.QB_New\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundles\" title=\"dipy.segment.clustering.QuickBundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a></p>\n</dd></dl>\n\n</section>\n<section id=\"streamlines\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Streamlines\" title=\"dipy.segment.benchmarks.bench_quickbundles.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><a class=\"headerlink\" href=\"#streamlines\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.Streamlines\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Streamlines</span></span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code></p>\n</dd></dl>\n\n</section>\n<section id=\"assert-array-equal\">\n<h3>assert_array_equal<a class=\"headerlink\" href=\"#assert-array-equal\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.assert_array_equal\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">assert_array_equal</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">err_msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">strict</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_array_equal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Raises an AssertionError if two array_like objects are not equal.</p>\n<p>Given two array_like objects, check that the shape is equal and all\nelements of these objects are equal (but see the Notes for the special\nhandling of a scalar). An exception is raised at shape mismatch or\nconflicting values. In contrast to the standard usage in numpy, NaNs\nare compared like numbers, no assertion is raised if both objects have\nNaNs in the same positions.</p>\n<p>The usual caution for verifying equality with floating point numbers is\nadvised.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">array_like</span></dt><dd><p>The actual object to check.</p>\n</dd>\n<dt><strong>y</strong><span class=\"classifier\">array_like</span></dt><dd><p>The desired, expected object.</p>\n</dd>\n<dt><strong>err_msg</strong><span class=\"classifier\">str, optional</span></dt><dd><p>The error message to be printed in case of failure.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, the conflicting values are appended to the error message.</p>\n</dd>\n<dt><strong>strict</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, raise an AssertionError when either the shape or the data\ntype of the array_like objects does not match. The special\nhandling for scalars mentioned in the Notes section is disabled.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Raises<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>AssertionError</dt><dd><p>If actual and desired objects are not equal.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assert_allclose</span></code></dt><dd><p>Compare two array_like objects for equality with desired relative and/or absolute precision.</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assert_array_almost_equal_nulp</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assert_array_max_ulp</span></code>, <a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_equal\" title=\"dipy.segment.benchmarks.bench_quickbundles.assert_equal\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assert_equal</span></code></a></dt><dd></dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>When one of <cite>x</cite> and <cite>y</cite> is a scalar and the other is array_like, the\nfunction checks that each element of the array_like object is equal to\nthe scalar. This behaviour can be disabled with the <cite>strict</cite> parameter.</p>\n<p class=\"rubric\">Examples</p>\n<p>The first assert does not raise an exception:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">assert_array_equal</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">2.33333</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                              <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"mf\">2.33333</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>Assert fails with numerical imprecision with floats:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">assert_array_equal</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                              <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"w\">    </span><span class=\"o\">...</span>\n<span class=\"gr\">AssertionError</span><span class=\"w\">:</span>\n<span class=\"go\">Arrays are not equal</span>\n\n<span class=\"go\">Mismatched elements: 1 / 3 (33.3%)</span>\n<span class=\"go\">Max absolute difference: 4.4408921e-16</span>\n<span class=\"go\">Max relative difference: 1.41357986e-16</span>\n<span class=\"go\"> x: array([1.      , 3.141593,      nan])</span>\n<span class=\"go\"> y: array([1.      , 3.141593,      nan])</span>\n</pre></div>\n</div>\n<p>Use <cite>assert_allclose</cite> or one of the nulp (number of floating point values)\nfunctions for these cases instead:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">assert_allclose</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                           <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                           <span class=\"n\">rtol</span><span class=\"o\">=</span><span class=\"mf\">1e-10</span><span class=\"p\">,</span> <span class=\"n\">atol</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As mentioned in the Notes section, <cite>assert_array_equal</cite> has special\nhandling for scalars. Here the test checks that each value in <cite>x</cite> is 3:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">assert_array_equal</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Use <cite>strict</cite> to raise an AssertionError when comparing a scalar with an\narray:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">assert_array_equal</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"w\">    </span><span class=\"o\">...</span>\n<span class=\"gr\">AssertionError</span><span class=\"w\">:</span>\n<span class=\"go\">Arrays are not equal</span>\n\n<span class=\"go\">(shapes (2, 5), () mismatch)</span>\n<span class=\"go\"> x: array([[3, 3, 3, 3, 3],</span>\n<span class=\"go\">       [3, 3, 3, 3, 3]])</span>\n<span class=\"go\"> y: array(3)</span>\n</pre></div>\n</div>\n<p>The <cite>strict</cite> parameter also ensures that the array data types match:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">assert_array_equal</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"w\">    </span><span class=\"o\">...</span>\n<span class=\"gr\">AssertionError</span><span class=\"w\">:</span>\n<span class=\"go\">Arrays are not equal</span>\n\n<span class=\"go\">(dtypes int64, float32 mismatch)</span>\n<span class=\"go\"> x: array([2, 2, 2])</span>\n<span class=\"go\"> y: array([2., 2., 2.], dtype=float32)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"assert-arrays-equal\">\n<h3>assert_arrays_equal<a class=\"headerlink\" href=\"#assert-arrays-equal\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.assert_arrays_equal\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">assert_arrays_equal</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">arrays1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">arrays2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_arrays_equal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"assert-equal\">\n<h3>assert_equal<a class=\"headerlink\" href=\"#assert-equal\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.assert_equal\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">assert_equal</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">actual</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">desired</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">err_msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_equal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Raises an AssertionError if two objects are not equal.</p>\n<p>Given two objects (scalars, lists, tuples, dictionaries or numpy arrays),\ncheck that all elements of these objects are equal. An exception is raised\nat the first conflicting values.</p>\n<p>When one of <cite>actual</cite> and <cite>desired</cite> is a scalar and the other is array_like,\nthe function checks that each element of the array_like object is equal to\nthe scalar.</p>\n<p>This function handles NaN comparisons as if NaN was a \u201cnormal\u201d number.\nThat is, AssertionError is not raised if both objects have NaNs in the same\npositions.  This is in contrast to the IEEE standard on NaNs, which says\nthat NaN compared to anything must return False.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>actual</strong><span class=\"classifier\">array_like</span></dt><dd><p>The object to check.</p>\n</dd>\n<dt><strong>desired</strong><span class=\"classifier\">array_like</span></dt><dd><p>The expected object.</p>\n</dd>\n<dt><strong>err_msg</strong><span class=\"classifier\">str, optional</span></dt><dd><p>The error message to be printed in case of failure.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, the conflicting values are appended to the error message.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Raises<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>AssertionError</dt><dd><p>If actual and desired are not equal.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">assert_equal</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"w\">    </span><span class=\"o\">...</span>\n<span class=\"gr\">AssertionError</span><span class=\"w\">:</span>\n<span class=\"go\">Items are not equal:</span>\n<span class=\"go\">item=1</span>\n<span class=\"go\"> ACTUAL: 5</span>\n<span class=\"go\"> DESIRED: 6</span>\n</pre></div>\n</div>\n<p>The following comparison does not raise an exception.  There are NaNs\nin the inputs, but they are in the same positions.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">assert_equal</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">]),</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">nan</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"bench-quickbundles\">\n<h3>bench_quickbundles<a class=\"headerlink\" href=\"#bench-quickbundles\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.bench_quickbundles\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bench_quickbundles</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.bench_quickbundles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"get-fnames\">\n<h3>get_fnames<a class=\"headerlink\" href=\"#get-fnames\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.get_fnames\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">get_fnames</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">name</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'small_64D'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.get_fnames\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Provide full paths to example or test datasets.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>name</strong><span class=\"classifier\">str</span></dt><dd><p>the filename/s of which dataset to return, one of:</p>\n<ul class=\"simple\">\n<li><p>\u2018small_64D\u2019 small region of interest nifti,bvecs,bvals 64 directions</p></li>\n<li><p>\u2018small_101D\u2019 small region of interest nifti, bvecs, bvals\n101 directions</p></li>\n<li><p>\u2018aniso_vox\u2019 volume with anisotropic voxel size as Nifti</p></li>\n<li><p>\u2018fornix\u2019 300 tracks in Trackvis format (from Pittsburgh\nBrain Competition)</p></li>\n<li><p>\u2018gqi_vectors\u2019 the scanner wave vectors needed for a GQI acquisitions\nof 101 directions tested on Siemens 3T Trio</p></li>\n<li><p>\u2018small_25\u2019 small ROI (10x8x2) DTI data (b value 2000, 25 directions)</p></li>\n<li><p>\u2018test_piesno\u2019 slice of N=8, K=14 diffusion data</p></li>\n<li><p>\u2018reg_c\u2019 small 2D image used for validating registration</p></li>\n<li><p>\u2018reg_o\u2019 small 2D image used for validation registration</p></li>\n<li><p>\u2018cb_2\u2019 two vectorized cingulum bundles</p></li>\n</ul>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>fnames</strong><span class=\"classifier\">tuple</span></dt><dd><p>filenames for dataset</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fimg</span><span class=\"p\">,</span> <span class=\"n\">fbvals</span><span class=\"p\">,</span> <span class=\"n\">fbvecs</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;small_101D&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span><span class=\"n\">fbvals</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">loadtxt</span><span class=\"p\">(</span><span class=\"n\">fbvecs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">fimg</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">102</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">102</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"load-tractogram\">\n<h3>load_tractogram<a class=\"headerlink\" href=\"#load-tractogram\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.load_tractogram\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">load_tractogram</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">filename</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reference</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">to_space</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">Space.RASMM</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">to_origin</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">Origin.NIFTI</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bbox_valid_check</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">trk_header_check</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.load_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram from any format (trk/tck/vtk/vtp/fib/dpy)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"measure\">\n<h3>measure<a class=\"headerlink\" href=\"#measure\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.measure\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">measure</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">code_str</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">times</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">label</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.measure\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return elapsed time for executing code in the namespace of the caller.</p>\n<p>The supplied code string is compiled with the Python builtin <code class=\"docutils literal notranslate\"><span class=\"pre\">compile</span></code>.\nThe precision of the timing is 10 milli-seconds. If the code will execute\nfast on this timescale, it can be executed many times to get reasonable\ntiming accuracy.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>code_str</strong><span class=\"classifier\">str</span></dt><dd><p>The code to be timed.</p>\n</dd>\n<dt><strong>times</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The number of times the code is executed. Default is 1. The code is\nonly compiled once.</p>\n</dd>\n<dt><strong>label</strong><span class=\"classifier\">str, optional</span></dt><dd><p>A label to identify <cite>code_str</cite> with. This is passed into <code class=\"docutils literal notranslate\"><span class=\"pre\">compile</span></code>\nas the second argument (for run-time error messages).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>elapsed</strong><span class=\"classifier\">float</span></dt><dd><p>Total elapsed time in seconds for executing <cite>code_str</cite> <cite>times</cite> times.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">times</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">etime</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">measure</span><span class=\"p\">(</span><span class=\"s1\">&#39;for i in range(1000): np.sqrt(i**2)&#39;</span><span class=\"p\">,</span> <span class=\"n\">times</span><span class=\"o\">=</span><span class=\"n\">times</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Time for a single execution : &quot;</span><span class=\"p\">,</span> <span class=\"n\">etime</span> <span class=\"o\">/</span> <span class=\"n\">times</span><span class=\"p\">,</span> <span class=\"s2\">&quot;s&quot;</span><span class=\"p\">)</span>  \n<span class=\"go\">Time for a single execution :  0.005 s</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"set-number-of-points\">\n<h3>set_number_of_points<a class=\"headerlink\" href=\"#set-number-of-points\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.benchmarks.bench_quickbundles.set_number_of_points\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.benchmarks.bench_quickbundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">set_number_of_points</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.benchmarks.bench_quickbundles.set_number_of_points\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Change the number of points of streamlines</dt><dd><p>(either by downsampling or upsampling)</p>\n</dd>\n</dl>\n<p>Change the number of points of streamlines in order to obtain\n<cite>nb_points</cite>-1 segments of equal length. Points of streamlines will be\nmodified along the curve.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>If ndarray, must have shape (N,3) where N is the number of points\nof the streamline.\nIf list, each item must be ndarray shape (Ni,3) where Ni is the number\nof points of streamline i.\nIf <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a>, its <cite>common_shape</cite> must be 3.</p>\n</dd>\n<dt><strong>nb_points</strong><span class=\"classifier\">int</span></dt><dd><p>integer representing number of points wanted along the curve.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>new_streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>Results of the downsampling or upsampling process.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">set_number_of_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</pre></div>\n</div>\n<p>One streamline, a semi-circle:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">modified_streamline</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">modified_streamline</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</pre></div>\n</div>\n<p>Multiple streamlines:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">streamline</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[100, 50]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">new_streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[10, 10]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"bundlemindistanceasymmetricmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric\" title=\"dipy.segment.bundles.BundleMinDistanceAsymmetricMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistanceasymmetricmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleMinDistanceAsymmetricMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a></p>\n<p>Asymmetric Bundle-based Minimum distance.</p>\n<p>This is a cost function that can be used by the\nStreamlineLinearRegistration class.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric.distance\" title=\"dipy.segment.bundles.BundleMinDistanceAsymmetricMetric.distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance</span></code></a>(xopt)</p></td>\n<td><p>Distance calculated from this Metric.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup</span></code>(static,\u00a0moving)</p></td>\n<td><p>Setup static and moving sets of streamlines.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleMinDistanceAsymmetricMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>num_threads</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id84\"><span class=\"problematic\" id=\"id85\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleMinDistanceAsymmetricMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xopt</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"bundlemindistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric\" title=\"dipy.segment.bundles.BundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancemetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleMinDistanceMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">BundleMinDistanceMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration.</p>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"rd1b9b2d12117-garyfallidis14\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis14<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al., \u201cDirect native-space fiber\nbundle alignment for group comparisons\u201d, ISMRM,\n2014.</p>\n</div>\n</div>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>setup(static, moving)</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>distance(xopt)</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleMinDistanceMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>num_threads</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id86\"><span class=\"problematic\" id=\"id87\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleMinDistanceMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xopt</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector,</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleMinDistanceMetric.setup\">\n<span class=\"sig-name descname\"><span class=\"pre\">setup</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Fixed or reference set of streamlines.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Moving streamlines.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Call this after the object is initiated and before distance.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"bundlesumdistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleSumDistanceMatrixMetric\" title=\"dipy.segment.bundles.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlesumdistancematrixmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleSumDistanceMatrixMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleSumDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a></p>\n<p>Bundle-based Sum Distance aka BMD</p>\n<p>This is a cost function that can be used by the\nStreamlineLinearRegistration class.</p>\n<p class=\"rubric\">Notes</p>\n<p>The difference with BundleMinDistanceMatrixMetric is that it uses\nuses the sum of the distance matrix and not the sum of mins.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>setup(static, moving)</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>distance(xopt)</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleSumDistanceMatrixMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleSumDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration.</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>num_threads</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id88\"><span class=\"problematic\" id=\"id89\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.BundleSumDistanceMatrixMetric.distance\">\n<span class=\"sig-name descname\"><span class=\"pre\">distance</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">xopt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.BundleSumDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xopt</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"recobundles\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles\" title=\"dipy.segment.bundles.RecoBundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a><a class=\"headerlink\" href=\"#recobundles\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.RecoBundles\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">RecoBundles</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">greater_than</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">50</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">less_than</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1000000</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cluster_map</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">clust_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb_pts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.RecoBundles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles.evaluate_results\" title=\"dipy.segment.bundles.RecoBundles.evaluate_results\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evaluate_results</span></code></a>(model_bundle,\u00a0...)</p></td>\n<td><p>Compare the similiarity between two given bundles, model bundle, and extracted bundle.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles.recognize\" title=\"dipy.segment.bundles.RecoBundles.recognize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">recognize</span></code></a>(model_bundle,\u00a0model_clust_thr[,\u00a0...])</p></td>\n<td><p>Recognize the model_bundle in self.streamlines</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles.refine\" title=\"dipy.segment.bundles.RecoBundles.refine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">refine</span></code></a>(model_bundle,\u00a0pruned_streamlines,\u00a0...)</p></td>\n<td><p>Refine and recognize the model_bundle in self.streamlines This method expects once pruned streamlines as input.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.RecoBundles.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">greater_than</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">50</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">less_than</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1000000</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cluster_map</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">clust_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">15</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb_pts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.RecoBundles.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognition of bundles</p>\n<p>Extract bundles from a participants\u2019 tractograms using model bundles\nsegmented from a different subject or an atlas of bundles.\nSee <a class=\"reference internal\" href=\"#r5023d436ddc1-garyfallidis17\" id=\"id6\">[Garyfallidis17]</a> for the details.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>The tractogram in which you want to recognize bundles.</p>\n</dd>\n<dt><strong>greater_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines have length less than this value (default 1000000)</p>\n</dd>\n<dt><strong>cluster_map</strong><span class=\"classifier\">QB map, optional.</span></dt><dd><p>Provide existing clustering to start RB faster (default None).</p>\n</dd>\n<dt><strong>clust_thr</strong><span class=\"classifier\">float, optional.</span></dt><dd><p>Distance threshold in mm for clustering <cite>streamlines</cite>.\nDefault: 15.</p>\n</dd>\n<dt><strong>nb_pts</strong><span class=\"classifier\">int, optional.</span></dt><dd><p>Number of points per streamline (default 20)</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>If None define RandomState in initialization function.\nDefault: None</p>\n</dd>\n<dt><strong>verbose: bool, optional.</strong></dt><dd><p>If True, log information.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Make sure that before creating this class that the streamlines and\nthe model bundles are roughly in the same space.\nAlso default thresholds are assumed in RAS 1mm^3 space. You may\nwant to adjust those if your streamlines are not in world coordinates.</p>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r5023d436ddc1-garyfallidis17\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id6\">Garyfallidis17</a><span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.RecoBundles.evaluate_results\">\n<span class=\"sig-name descname\"><span class=\"pre\">evaluate_results</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_bundle</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pruned_streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_select</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.RecoBundles.evaluate_results\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compare the similiarity between two given bundles, model bundle,\nand extracted bundle.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>model_bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>pruned_streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>slr_select</strong><span class=\"classifier\">tuple</span></dt><dd><p>Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>ba_value</strong><span class=\"classifier\">float</span></dt><dd><p>bundle adjacency value between model bundle and pruned bundle</p>\n</dd>\n<dt><strong>bmd_value</strong><span class=\"classifier\">float</span></dt><dd><p>bundle minimum distance value between model bundle and\npruned bundle</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.RecoBundles.recognize\">\n<span class=\"sig-name descname\"><span class=\"pre\">recognize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_bundle</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_clust_thr</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reduction_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reduction_distance</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'mdf'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_x0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_select</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(400,</span> <span class=\"pre\">600)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pruning_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">5</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pruning_distance</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'mdf'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.RecoBundles.recognize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognize the model_bundle in self.streamlines</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>model_bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>model bundle streamlines used as a reference to extract similar\nstreamlines from input tractogram</p>\n</dd>\n<dt><strong>model_clust_thr</strong><span class=\"classifier\">float</span></dt><dd><p>MDF distance threshold for the model bundles</p>\n</dd>\n<dt><strong>reduction_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Reduce search space in the target tractogram by (mm) (default 10)</p>\n</dd>\n<dt><strong>reduction_distance</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Reduction distance type can be mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>slr</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Use Streamline-based Linear Registration (SLR) locally\n(default True)</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id90\"><span class=\"problematic\" id=\"id91\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error.</p>\n</dd>\n<dt><strong>slr_metric</strong><span class=\"classifier\">BundleMinDistanceMetric</span></dt><dd></dd>\n<dt><strong>slr_x0</strong><span class=\"classifier\">array or int or str, optional</span></dt><dd><p>Transformation allowed. translation, rigid, similarity or scaling\nInitial parametrization for the optimization.</p>\n<dl>\n<dt>If 1D array with:</dt><dd><p>a) 6 elements then only rigid registration is performed with\nthe 3 first elements for translation and 3 for rotation.\nb) 7 elements also isotropic scaling is performed (similarity).\nc) 12 elements then translation, rotation (in degrees),\nscaling and shearing are performed (affine).</p>\n<p>Here is an example of x0 with 12 elements:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">x0=np.array([0,</span> <span class=\"pre\">10,</span> <span class=\"pre\">0,</span> <span class=\"pre\">40,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">2.,</span> <span class=\"pre\">1.5,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">-0.5,</span> <span class=\"pre\">0])</span></code></p>\n<p>This has translation (0, 10, 0), rotation (40, 0, 0) in\ndegrees, scaling (2., 1.5, 1) and shearing (0.1, -0.5, 0).</p>\n</dd>\n<dt>If int:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>6</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>7</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>12</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>If str:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>\u201crigid\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201csimilarity\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201caffine\u201d</dt><dd><p><a href=\"#id8\"><span class=\"problematic\" id=\"id9\">``</span></a>x0 = np.array([0, 0, 0, 0, 0, 0, 1., 1., 1, 0, 0, 0])</p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n<p>(default None)</p>\n</dd>\n<dt><strong>slr_bounds</strong><span class=\"classifier\">array, optional</span></dt><dd><p>(default None)</p>\n</dd>\n<dt><strong>slr_select</strong><span class=\"classifier\">tuple, optional</span></dt><dd><p>Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n<dt><strong>slr_method</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Optimization method \u2018L_BFGS_B\u2019 or \u2018Powell\u2019 optimizers can be used.\n(default \u2018L-BFGS-B\u2019)</p>\n</dd>\n<dt><strong>pruning_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Pruning after reducing the search space (default 5).</p>\n</dd>\n<dt><strong>pruning_distance</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Pruning distance type can be mdf or mam (default mdf)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>recognized_transf</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Recognized bundle in the space of the model tractogram</p>\n</dd>\n<dt><strong>recognized_labels</strong><span class=\"classifier\">array</span></dt><dd><p>Indices of recognized bundle in the original tractogram</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r7eb0071af658-garyfallidis17\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis17<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.RecoBundles.refine\">\n<span class=\"sig-name descname\"><span class=\"pre\">refine</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_bundle</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pruned_streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">model_clust_thr</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reduction_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">14</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">reduction_distance</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'mdf'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_x0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_select</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(400,</span> <span class=\"pre\">600)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">slr_method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pruning_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pruning_distance</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'mdf'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.RecoBundles.refine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Refine and recognize the model_bundle in self.streamlines\nThis method expects once pruned streamlines as input. It refines the\nfirst ouput of recobundle by applying second local slr (optional),\nand second pruning. This method is useful when we are dealing with\nnoisy data or when we want to extract small tracks from tractograms.\nThis time, search space is created using pruned bundle and not model\nbundle.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>model_bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>model bundle streamlines used as a reference to extract similar\nstreamlines from input tractogram</p>\n</dd>\n<dt><strong>pruned_streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Recognized bundle from target tractogram by RecoBundles.</p>\n</dd>\n<dt><strong>model_clust_thr</strong><span class=\"classifier\">float</span></dt><dd><p>MDF distance threshold for the model bundles</p>\n</dd>\n<dt><strong>reduction_thr</strong><span class=\"classifier\">float</span></dt><dd><p>Reduce search space by (mm) (default 14)</p>\n</dd>\n<dt><strong>reduction_distance</strong><span class=\"classifier\">string</span></dt><dd><p>Reduction distance type can be mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>slr</strong><span class=\"classifier\">bool</span></dt><dd><p>Use Streamline-based Linear Registration (SLR) locally\n(default True)</p>\n</dd>\n<dt><strong>slr_metric</strong><span class=\"classifier\">BundleMinDistanceMetric</span></dt><dd></dd>\n<dt><strong>slr_x0</strong><span class=\"classifier\">array or int or str</span></dt><dd><p>Transformation allowed. translation, rigid, similarity or scaling\nInitial parametrization for the optimization.</p>\n<dl>\n<dt>If 1D array with:</dt><dd><p>a) 6 elements then only rigid registration is performed with\nthe 3 first elements for translation and 3 for rotation.\nb) 7 elements also isotropic scaling is performed (similarity).\nc) 12 elements then translation, rotation (in degrees),\nscaling and shearing are performed (affine).</p>\n<p>Here is an example of x0 with 12 elements:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">x0=np.array([0,</span> <span class=\"pre\">10,</span> <span class=\"pre\">0,</span> <span class=\"pre\">40,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">2.,</span> <span class=\"pre\">1.5,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">-0.5,</span> <span class=\"pre\">0])</span></code></p>\n<p>This has translation (0, 10, 0), rotation (40, 0, 0) in\ndegrees, scaling (2., 1.5, 1) and shearing (0.1, -0.5, 0).</p>\n</dd>\n<dt>If int:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>6</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>7</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>12</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>If str:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>\u201crigid\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201csimilarity\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201caffine\u201d</dt><dd><p><a href=\"#id11\"><span class=\"problematic\" id=\"id12\">``</span></a>x0 = np.array([0, 0, 0, 0, 0, 0, 1., 1., 1, 0, 0, 0])</p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n<p>(default None)</p>\n</dd>\n<dt><strong>slr_bounds</strong><span class=\"classifier\">array</span></dt><dd><p>(default None)</p>\n</dd>\n<dt><strong>slr_select</strong><span class=\"classifier\">tuple</span></dt><dd><p>Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n<dt><strong>slr_method</strong><span class=\"classifier\">string</span></dt><dd><p>Optimization method \u2018L_BFGS_B\u2019 or \u2018Powell\u2019 optimizers can be used.\n(default \u2018L-BFGS-B\u2019)</p>\n</dd>\n<dt><strong>pruning_thr</strong><span class=\"classifier\">float</span></dt><dd><p>Pruning after reducing the search space (default 6).</p>\n</dd>\n<dt><strong>pruning_distance</strong><span class=\"classifier\">string</span></dt><dd><p>Pruning distance type can be mdf or mam (default mdf)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>recognized_transf</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Recognized bundle in the space of the model tractogram</p>\n</dd>\n<dt><strong>recognized_labels</strong><span class=\"classifier\">array</span></dt><dd><p>Indices of recognized bundle in the original tractogram</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r455259b8a2fd-garyfallidis17\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis17<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</div>\n<div class=\"citation\" id=\"r455259b8a2fd-chandio2020\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Chandio2020<span class=\"fn-bracket\">]</span></span>\n<p>Chandio, B.Q., Risacher, S.L., Pestilli, F.,</p>\n</div>\n</div>\n<p>Bullock, D., Yeh, FC., Koudoro, S., Rokem, A., Harezlak, J., and\nGaryfallidis, E. Bundle analytics, a computational framework for\ninvestigating the shapes and profiles of brain pathways across\npopulations. Sci Rep 10, 17149 (2020)</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"streamlinelinearregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration\" title=\"dipy.segment.bundles.StreamlineLinearRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><a class=\"headerlink\" href=\"#streamlinelinearregistration\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.StreamlineLinearRegistration\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">StreamlineLinearRegistration</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'rigid'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">options</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evolution</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration.optimize\" title=\"dipy.segment.bundles.StreamlineLinearRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,\u00a0moving[,\u00a0mat])</p></td>\n<td><p>Find the minimum of the provided metric.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.StreamlineLinearRegistration.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">x0</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'rigid'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">method</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'L-BFGS-B'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">options</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evolution</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">num_threads</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Linear registration of 2 sets of streamlines <a class=\"reference internal\" href=\"#r9cc75057ef44-garyfallidis15\" id=\"id15\">[Garyfallidis15]</a>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\">StreamlineDistanceMetric,</span></dt><dd><p>If None and fast is False then the BMD distance is used. If fast\nis True then a faster implementation of BMD is used. Otherwise,\nuse the given distance metric.</p>\n</dd>\n<dt><strong>x0</strong><span class=\"classifier\">array or int or str</span></dt><dd><p>Initial parametrization for the optimization.</p>\n<dl>\n<dt>If 1D array with:</dt><dd><p>a) 6 elements then only rigid registration is performed with\nthe 3 first elements for translation and 3 for rotation.\nb) 7 elements also isotropic scaling is performed (similarity).\nc) 12 elements then translation, rotation (in degrees),\nscaling and shearing is performed (affine).</p>\n<p>Here is an example of x0 with 12 elements:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">x0=np.array([0,</span> <span class=\"pre\">10,</span> <span class=\"pre\">0,</span> <span class=\"pre\">40,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">2.,</span> <span class=\"pre\">1.5,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">-0.5,</span> <span class=\"pre\">0])</span></code></p>\n<p>This has translation (0, 10, 0), rotation (40, 0, 0) in\ndegrees, scaling (2., 1.5, 1) and shearing (0.1, -0.5, 0).</p>\n</dd>\n<dt>If int:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>6</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>7</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>12</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>If str:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>\u201crigid\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201csimilarity\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201caffine\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">str,</span></dt><dd><p>\u2018L_BFGS_B\u2019 or \u2018Powell\u2019 optimizers can be used. Default is\n\u2018L_BFGS_B\u2019.</p>\n</dd>\n<dt><strong>bounds</strong><span class=\"classifier\">list of tuples or None,</span></dt><dd><p>If method == \u2018L_BFGS_B\u2019 then we can use bounded optimization.\nFor example for the six parameters of rigid rotation we can set\nthe bounds = [(-30, 30), (-30, 30), (-30, 30),</p>\n<blockquote>\n<div><p>(-45, 45), (-45, 45), (-45, 45)]</p>\n</div></blockquote>\n<p>That means that we have set the bounds for the three translations\nand three rotation axes (in degrees).</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, if True then information about the optimization is shown.\nDefault: False.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">None or dict,</span></dt><dd><p>Extra options to be used with the selected method.</p>\n</dd>\n<dt><strong>evolution</strong><span class=\"classifier\">boolean</span></dt><dd><p>If True save the transformation for each iteration of the\noptimizer. Default is False. Supported only with Scipy &gt;= 0.11.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads to be used for OpenMP parallelization. If None\n(default) the value of OMP_NUM_THREADS environment variable is used\nif it is set, otherwise all available threads are used. If &lt; 0 the\nmaximal number of threads minus <a href=\"#id92\"><span class=\"problematic\" id=\"id93\">|num_threads + 1|</span></a> is used (enter -1\nto use as many threads as possible). 0 raises an error. Only\nmetrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r9cc75057ef44-garyfallidis15\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id15\">Garyfallidis15</a><span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. \u201cRobust and efficient linear\nregistration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015</p>\n</div>\n<div class=\"citation\" id=\"r9cc75057ef44-garyfallidis14\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis14<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al., \u201cDirect native-space fiber\nbundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</div>\n<div class=\"citation\" id=\"r9cc75057ef44-garyfallidis17\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis17<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based\nregistration and clustering, Neuroimage, 2017.</p>\n</div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.StreamlineLinearRegistration.optimize\">\n<span class=\"sig-name descname\"><span class=\"pre\">optimize</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">static</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">moving</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the minimum of the provided metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Reference or fixed set of streamlines.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Moving set of streamlines.</p>\n</dd>\n<dt><strong>mat</strong><span class=\"classifier\">array</span></dt><dd><p>Transformation (4, 4) matrix to start the registration. <code class=\"docutils literal notranslate\"><span class=\"pre\">mat</span></code>\nis applied to moving. Default value None which means that initial\ntransformation will be generated by shifting the centers of moving\nand static sets of streamlines to the origin.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>map</strong><span class=\"classifier\">StreamlineRegistrationMap</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id19\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.bundles.Streamlines\" title=\"dipy.segment.bundles.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><a class=\"headerlink\" href=\"#id19\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.Streamlines\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Streamlines</span></span><a class=\"headerlink\" href=\"#dipy.segment.bundles.Streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code></p>\n</dd></dl>\n\n</section>\n<section id=\"chain\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.bundles.chain\" title=\"dipy.segment.bundles.chain\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">chain</span></code></a><a class=\"headerlink\" href=\"#chain\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.chain\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">chain</span></span><a class=\"headerlink\" href=\"#dipy.segment.bundles.chain\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>chain(<a href=\"#id20\"><span class=\"problematic\" id=\"id21\">*</span></a>iterables) \u2013&gt; chain object</p>\n<p>Return a chain object whose .__next__() method returns elements from the\nfirst iterable until it is exhausted, then elements from the next\niterable, until all of the iterables are exhausted.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.bundles.chain.from_iterable\" title=\"dipy.segment.bundles.chain.from_iterable\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_iterable</span></code></a>(iterable,\u00a0/)</p></td>\n<td><p>Alternative chain() constructor taking a single iterable argument that evaluates lazily.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.chain.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.chain.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.chain.from_iterable\">\n<span class=\"sig-name descname\"><span class=\"pre\">from_iterable</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterable</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">/</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.chain.from_iterable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Alternative chain() constructor taking a single iterable argument that evaluates lazily.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"apply-affine\">\n<h3>apply_affine<a class=\"headerlink\" href=\"#apply-affine\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.apply_affine\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">apply_affine</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">aff</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">pts</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">inplace</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.apply_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine matrix <cite>aff</cite> to points <cite>pts</cite></p>\n<p>Returns result of application of <cite>aff</cite> to the <em>right</em> of <cite>pts</cite>.  The\ncoordinate dimension of <cite>pts</cite> should be the last.</p>\n<p>For the 3D case, <cite>aff</cite> will be shape (4,4) and <cite>pts</cite> will have final axis\nlength 3 - maybe it will just be N by 3. The return value is the\ntransformed points, in this case:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,:</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">aff</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">transformed_pts</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">T</span>\n</pre></div>\n</div>\n<p>This routine is more general than 3D, in that <cite>aff</cite> can have any shape\n(N,N), and <cite>pts</cite> can have any shape, as long as the last dimension is for\nthe coordinates, and is therefore length N-1.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>aff</strong><span class=\"classifier\">(N, N) array-like</span></dt><dd><p>Homogeneous affine, for 3D points, will be 4 by 4. Contrary to first\nappearance, the affine will be applied on the left of <cite>pts</cite>.</p>\n</dd>\n<dt><strong>pts</strong><span class=\"classifier\">(\u2026, N-1) array-like</span></dt><dd><p>Points, where the last dimension contains the coordinates of each\npoint.  For 3D, the last dimension will be length 3.</p>\n</dd>\n<dt><strong>inplace</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, attempt to apply the affine directly to <code class=\"docutils literal notranslate\"><span class=\"pre\">pts</span></code>.\nIf False, or in-place application fails, a freshly allocated\narray will be returned.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed_pts</strong><span class=\"classifier\">(\u2026, N-1) array</span></dt><dd><p>transformed points</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aff</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">apply_affine</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">,</span> <span class=\"n\">pts</span><span class=\"p\">)</span> \n<span class=\"go\">array([[14, 14, 24],</span>\n<span class=\"go\">       [16, 17, 28],</span>\n<span class=\"go\">       [20, 23, 36],</span>\n<span class=\"go\">       [24, 29, 44]]...)</span>\n</pre></div>\n</div>\n<p>Just to show that in the simple 3D case, it is equivalent to:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,:</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">aff</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span> \n<span class=\"go\">array([[14, 14, 24],</span>\n<span class=\"go\">       [16, 17, 28],</span>\n<span class=\"go\">       [20, 23, 36],</span>\n<span class=\"go\">       [24, 29, 44]]...)</span>\n</pre></div>\n</div>\n<p>But <cite>pts</cite> can be a more complicated shape:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">apply_affine</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">,</span> <span class=\"n\">pts</span><span class=\"p\">)</span> \n<span class=\"go\">array([[[14, 14, 24],</span>\n<span class=\"go\">        [16, 17, 28]],</span>\n\n<span class=\"go\">       [[20, 23, 36],</span>\n<span class=\"go\">        [24, 29, 44]]]...)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"ba-analysis\">\n<h3>ba_analysis<a class=\"headerlink\" href=\"#ba-analysis\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.ba_analysis\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ba_analysis</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">recognized_bundle</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">expert_bundle</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb_pts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6.0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.ba_analysis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates bundle adjacency score between two given bundles</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>recognized_bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Extracted bundle from the whole brain tractogram (eg: AF_L)</p>\n</dd>\n<dt><strong>expert_bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Model bundle used as reference while extracting similar type bundle\nfrom inout tractogram</p>\n</dd>\n<dt><strong>nb_pts</strong><span class=\"classifier\">integer (default 20)</span></dt><dd><p>Discretizing streamlines to have nb_pts number of points</p>\n</dd>\n<dt><strong>threshold</strong><span class=\"classifier\">float (default 6)</span></dt><dd><p>Threshold used for in computing bundle adjacency. Threshold controls\nhow much strictness user wants while calculating bundle adjacency\nbetween two bundles. Smaller threshold means bundles should be strictly\nadjacent to get higher BA score.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>Bundle adjacency score between two tracts</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"rf4739dfb4d44-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"bundle-adjacency\">\n<h3>bundle_adjacency<a class=\"headerlink\" href=\"#bundle-adjacency\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.bundle_adjacency\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundle_adjacency</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dtracks0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dtracks1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.bundle_adjacency\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find bundle adjacency between two given tracks/bundles</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dtracks0</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>White matter tract from one subject</p>\n</dd>\n<dt><strong>dtracks1</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>White matter tract from another subject</p>\n</dd>\n<dt><strong>threshold</strong><span class=\"classifier\">float</span></dt><dd><p>Threshold controls\nhow much strictness user wants while calculating bundle adjacency\nbetween two bundles. Smaller threshold means bundles should be strictly\nadjacent to get higher BA score.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>res</strong><span class=\"classifier\">Float</span></dt><dd><p>Bundle adjacency score between two tracts</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r28e231c340f8-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"bundle-shape-similarity\">\n<h3>bundle_shape_similarity<a class=\"headerlink\" href=\"#bundle-shape-similarity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.bundle_shape_similarity\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundle_shape_similarity</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bundle1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bundle2</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">clust_thr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">(5,</span> <span class=\"pre\">3,</span> <span class=\"pre\">1.5)</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">6</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.bundle_shape_similarity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates bundle shape similarity between two given bundles using\nbundle adjacency (BA) metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bundle1</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>White matter tract from one subject (eg: AF_L)</p>\n</dd>\n<dt><strong>bundle2</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>White matter tract from another subject (eg: AF_L)</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd></dd>\n<dt><strong>clust_thr</strong><span class=\"classifier\">array-like, optional</span></dt><dd><p>list of clustering thresholds used in quickbundlesX</p>\n</dd>\n<dt><strong>threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used for in computing bundle adjacency. Threshold controls\nhow much strictness user wants while calculating shape similarity\nbetween two bundles. Smaller threshold means bundles should be strictly\nsimilar to get higher shape similarity score.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>ba_value</strong><span class=\"classifier\">Float</span></dt><dd><p>Bundle similarity score between two tracts</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r736da59fda80-chandio2020\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Chandio2020<span class=\"fn-bracket\">]</span></span>\n<p>Chandio, B.Q., Risacher, S.L., Pestilli, F., Bullock, D.,</p>\n</div>\n</div>\n<p>Yeh, FC., Koudoro, S., Rokem, A., Harezlak, J., and Garyfallidis, E.\nBundle analytics, a computational framework for investigating the\nshapes and profiles of brain pathways across populations.\nSci Rep 10, 17149 (2020)</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r736da59fda80-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"bundles-distances-mam\">\n<h3>bundles_distances_mam<a class=\"headerlink\" href=\"#bundles-distances-mam\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.bundles_distances_mam\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundles_distances_mam</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.bundles_distances_mam\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate distances between list of tracks A and list of tracks B</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>tracksA</strong><span class=\"classifier\">sequence</span></dt><dd><p>of tracks as arrays, shape (N1,3) .. (Nm,3)</p>\n</dd>\n<dt><strong>tracksB</strong><span class=\"classifier\">sequence</span></dt><dd><p>of tracks as arrays, shape (N1,3) .. (Nm,3)</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">str</span></dt><dd><p>\u2018avg\u2019, \u2018min\u2019, \u2018max\u2019</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>DM</strong><span class=\"classifier\">array, shape (len(tracksA), len(tracksB))</span></dt><dd><p>distances between tracksA and tracksB according to metric</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.streamline.set_number_of_points\" title=\"dipy.tracking.streamline.set_number_of_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dipy.tracking.streamline.set_number_of_points</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"bundles-distances-mdf\">\n<h3>bundles_distances_mdf<a class=\"headerlink\" href=\"#bundles-distances-mdf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.bundles_distances_mdf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bundles_distances_mdf</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.bundles_distances_mdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate distances between list of tracks A and list of tracks B</p>\n<p>All tracks need to have the same number of points</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>tracksA</strong><span class=\"classifier\">sequence</span></dt><dd><p>of tracks as arrays, [(N,3) .. (N,3)]</p>\n</dd>\n<dt><strong>tracksB</strong><span class=\"classifier\">sequence</span></dt><dd><p>of tracks as arrays, [(N,3) .. (N,3)]</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>DM</strong><span class=\"classifier\">array, shape (len(tracksA), len(tracksB))</span></dt><dd><p>distances between tracksA and tracksB according to metric</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.streamline.set_number_of_points\" title=\"dipy.tracking.streamline.set_number_of_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dipy.tracking.streamline.set_number_of_points</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"check-range\">\n<h3>check_range<a class=\"headerlink\" href=\"#check-range\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.check_range\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">check_range</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamline</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">gt</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">lt</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.check_range\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"cluster-bundle\">\n<h3>cluster_bundle<a class=\"headerlink\" href=\"#cluster-bundle\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.cluster_bundle\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">cluster_bundle</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bundle</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">clust_thr</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb_pts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">select_randomly</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">500000</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.cluster_bundle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Clusters bundles</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>White matter tract</p>\n</dd>\n<dt><strong>clust_thr</strong><span class=\"classifier\">float</span></dt><dd><p>clustering threshold used in quickbundlesX</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd></dd>\n<dt><strong>nb_pts: integer (default 20)</strong></dt><dd><p>Discretizing streamlines to have nb_points number of points</p>\n</dd>\n<dt><strong>select_randomly: integer (default 500000)</strong></dt><dd><p>Randomly select streamlines from the input bundle</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>centroids</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>clustered centroids of the input bundle</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r3991b8efb2a6-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"deprecated-params\">\n<h3>deprecated_params<a class=\"headerlink\" href=\"#deprecated-params\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.deprecated_params\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">deprecated_params</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">old_name</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">new_name=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">since=''</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">until=''</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">version_comparator=&lt;function</span> <span class=\"pre\">cmp_pkg_version&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">arg_in_kwargs=False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">warn_class=&lt;class</span> <span class=\"pre\">'dipy.utils.deprecator.ArgsDeprecationWarning'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">error_class=&lt;class</span> <span class=\"pre\">'dipy.utils.deprecator.ExpiredDeprecationError'&gt;</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">alternative=''</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.deprecated_params\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deprecate a <em>renamed</em> or <em>removed</em> function argument.</p>\n<p>The decorator assumes that the argument with the <code class=\"docutils literal notranslate\"><span class=\"pre\">old_name</span></code> was removed\nfrom the function signature and the <code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> replaced it at the\n<strong>same position</strong> in the signature.  If the <code class=\"docutils literal notranslate\"><span class=\"pre\">old_name</span></code> argument is\ngiven when calling the decorated function the decorator will catch it and\nissue a deprecation warning and pass it on as <code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> argument.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>old_name</strong><span class=\"classifier\">str or list/tuple thereof</span></dt><dd><p>The old name of the argument.</p>\n</dd>\n<dt><strong>new_name</strong><span class=\"classifier\">str or list/tuple thereof or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, optional</span></dt><dd><p>The new name of the argument. Set this to <cite>None</cite> to remove the\nargument <code class=\"docutils literal notranslate\"><span class=\"pre\">old_name</span></code> instead of renaming it.</p>\n</dd>\n<dt><strong>since</strong><span class=\"classifier\">str or number or list/tuple thereof, optional</span></dt><dd><p>The release at which the old argument became deprecated.</p>\n</dd>\n<dt><strong>until</strong><span class=\"classifier\">str or number or list/tuple thereof, optional</span></dt><dd><p>Last released version at which this function will still raise a\ndeprecation warning.  Versions higher than this will raise an\nerror.</p>\n</dd>\n<dt><strong>version_comparator</strong><span class=\"classifier\">callable</span></dt><dd><p>Callable accepting string as argument, and return 1 if string\nrepresents a higher version than encoded in the <code class=\"docutils literal notranslate\"><span class=\"pre\">version_comparator</span></code>,\n0 if the version is equal, and -1 if the version is lower. For example,\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">version_comparator</span></code> may compare the input version string to the\ncurrent package version string.</p>\n</dd>\n<dt><strong>arg_in_kwargs</strong><span class=\"classifier\">bool or list/tuple thereof, optional</span></dt><dd><p>If the argument is not a named argument (for example it\nwas meant to be consumed by <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code>) set this to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.  Otherwise the decorator will throw an Exception\nif the <code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> cannot be found in the signature of\nthe decorated function.\nDefault is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd>\n<dt><strong>warn_class</strong><span class=\"classifier\">warning, optional</span></dt><dd><p>Warning to be issued.</p>\n</dd>\n<dt><strong>error_class</strong><span class=\"classifier\">Exception, optional</span></dt><dd><p>Error to be issued</p>\n</dd>\n<dt><strong>alternative</strong><span class=\"classifier\">str, optional</span></dt><dd><p>An alternative function or class name that the user may use in\nplace of the deprecated object if <code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> is None. The deprecation\nwarning will tell the user about this alternative if provided.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Raises<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>TypeError</dt><dd><p>If the new argument name cannot be found in the function\nsignature and arg_in_kwargs was False or if it is used to\ndeprecate the name of the <code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code>-, <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code>-like arguments.\nAt runtime such an Error is raised if both the new_name\nand old_name were specified when calling the function and\n\u201crelax=False\u201d.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This function is based on the Astropy (major modification).\n<a class=\"reference external\" href=\"https://github.com/astropy/astropy\">https://github.com/astropy/astropy</a>. See COPYING file distributed along with\nthe astropy package for the copyright and license terms.</p>\n<p class=\"rubric\">Examples</p>\n<p>The deprecation warnings are not shown in the following examples.\nTo deprecate a positional or keyword argument::\n&gt;&gt;&gt; from dipy.utils.deprecator import deprecated_params\n&gt;&gt;&gt; &#64;deprecated_params(\u2018sig\u2019, \u2018sigma\u2019, \u20180.3\u2019)\n\u2026 def test(sigma):\n\u2026     return sigma\n&gt;&gt;&gt; test(2)\n2\n&gt;&gt;&gt; test(sigma=2)\n2\n&gt;&gt;&gt; test(sig=2)  # doctest: +SKIP\n2</p>\n<p>It is also possible to replace multiple arguments. The <code class=\"docutils literal notranslate\"><span class=\"pre\">old_name</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">since</span></code> have to be <cite>tuple</cite> or <cite>list</cite> and contain the\nsame number of entries::\n&gt;&gt;&gt; &#64;deprecated_params([\u2018a\u2019, \u2018b\u2019], [\u2018alpha\u2019, \u2018beta\u2019],\n\u2026                    [\u20180.2\u2019, 0.4])\n\u2026 def test(alpha, beta):\n\u2026     return alpha, beta\n&gt;&gt;&gt; test(a=2, b=3)  # doctest: +SKIP\n(2, 3)</p>\n</dd></dl>\n\n</section>\n<section id=\"length\">\n<h3>length<a class=\"headerlink\" href=\"#length\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.length\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">length</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.length\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Euclidean length of streamlines</p>\n<p>Length is in mm only if streamlines are expressed in world coordinates.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>If ndarray, must have shape (N,3) where N is the number of points\nof the streamline.\nIf list, each item must be ndarray shape (Ni,3) where Ni is the number\nof points of streamline i.\nIf <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a>, its <cite>common_shape</cite> must be 3.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>lengths</strong><span class=\"classifier\">scalar or ndarray shape (N,)</span></dt><dd><p>If there is only one streamline, a scalar representing the length of the\nstreamline.\nIf there are several streamlines, ndarray containing the length of every\nstreamline.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">length</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expected_length</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">streamline</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">expected_length</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">streamline</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expected_lengths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">expected_length</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">expected_length</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lengths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">lengths</span><span class=\"p\">,</span> <span class=\"n\">expected_lengths</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">length</span><span class=\"p\">([])</span>\n<span class=\"go\">0.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]))</span>\n<span class=\"go\">0.0</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"nbytes\">\n<h3>nbytes<a class=\"headerlink\" href=\"#nbytes\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.nbytes\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">nbytes</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.nbytes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"qbx-and-merge\">\n<h3>qbx_and_merge<a class=\"headerlink\" href=\"#qbx-and-merge\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.qbx_and_merge\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qbx_and_merge</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">thresholds</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb_pts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">select_randomly</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.qbx_and_merge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run QuickBundlesX and then run again on the centroids of the last layer</p>\n<p>Running again QuickBundles at a layer has the effect of merging\nsome of the clusters that may be originally divided because of branching.\nThis function help obtain a result at a QuickBundles quality but with\nQuickBundlesX speed. The merging phase has low cost because it is applied\nonly on the centroids rather than the entire dataset.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>thresholds</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of distance thresholds for QuickBundlesX.</p>\n</dd>\n<dt><strong>nb_pts</strong><span class=\"classifier\">int</span></dt><dd><p>Number of points for discretizing each streamline</p>\n</dd>\n<dt><strong>select_randomly</strong><span class=\"classifier\">int</span></dt><dd><p>Randomly select a specific number of streamlines. If None all the\nstreamlines are used.</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>If None then RandomState is initialized internally.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, log information. Default False.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>clusters</strong><span class=\"classifier\">obj</span></dt><dd><p>Contains the clusters of the last layer of QuickBundlesX after merging.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r5dc5efa199c0-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n<div class=\"citation\" id=\"r5dc5efa199c0-garyfallidis16\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis16<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al. QuickBundlesX: Sequential\nclustering of millions of streamlines in multiple\nlevels of detail at record execution time. Proceedings\nof the, International Society of Magnetic Resonance\nin Medicine (ISMRM). Singapore, 4187, 2016.</p>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"select-random-set-of-streamlines\">\n<h3>select_random_set_of_streamlines<a class=\"headerlink\" href=\"#select-random-set-of-streamlines\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.select_random_set_of_streamlines\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">select_random_set_of_streamlines</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">select</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.select_random_set_of_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Select a random set of streamlines</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Object of 2D ndarrays of shape[-1]==3</p>\n</dd>\n<dt><strong>select</strong><span class=\"classifier\">int</span></dt><dd><p>Number of streamlines to select. If there are less streamlines\nthan <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code> then <code class=\"docutils literal notranslate\"><span class=\"pre\">select=len(streamlines)</span></code>.</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>Default None.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>selected_streamlines</strong><span class=\"classifier\">list</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The same streamline will not be selected twice.</p>\n</dd></dl>\n\n</section>\n<section id=\"id29\">\n<h3>set_number_of_points<a class=\"headerlink\" href=\"#id29\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.set_number_of_points\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">set_number_of_points</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.bundles.set_number_of_points\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Change the number of points of streamlines</dt><dd><p>(either by downsampling or upsampling)</p>\n</dd>\n</dl>\n<p>Change the number of points of streamlines in order to obtain\n<cite>nb_points</cite>-1 segments of equal length. Points of streamlines will be\nmodified along the curve.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>If ndarray, must have shape (N,3) where N is the number of points\nof the streamline.\nIf list, each item must be ndarray shape (Ni,3) where Ni is the number\nof points of streamline i.\nIf <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a>, its <cite>common_shape</cite> must be 3.</p>\n</dd>\n<dt><strong>nb_points</strong><span class=\"classifier\">int</span></dt><dd><p>integer representing number of points wanted along the curve.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>new_streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>Results of the downsampling or upsampling process.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">set_number_of_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</pre></div>\n</div>\n<p>One streamline, a semi-circle:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">modified_streamline</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">modified_streamline</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</pre></div>\n</div>\n<p>Multiple streamlines:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">streamline</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[100, 50]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">new_streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[10, 10]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"time\">\n<h3>time<a class=\"headerlink\" href=\"#time\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.bundles.time\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.bundles.</span></span><span class=\"sig-name descname\"><span class=\"pre\">time</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">floating</span> <span class=\"pre\">point</span> <span class=\"pre\">number</span></span></span><a class=\"headerlink\" href=\"#dipy.segment.bundles.time\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.</p>\n</dd></dl>\n\n</section>\n<section id=\"abcmeta\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.ABCMeta\" title=\"dipy.segment.clustering.ABCMeta\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ABCMeta</span></code></a><a class=\"headerlink\" href=\"#abcmeta\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ABCMeta\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ABCMeta</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">name</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">bases</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">namespace</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ABCMeta\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#type\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">type</span></code></a></p>\n<p>Metaclass for defining Abstract Base Classes (ABCs).</p>\n<p>Use this metaclass to create an ABC.  An ABC can be subclassed\ndirectly, and then acts as a mix-in class.  You can also register\nunrelated concrete classes (even built-in classes) and unrelated\nABCs as \u2018virtual subclasses\u2019 \u2013 these and their descendants will\nbe considered subclasses of the registering ABC by the built-in\nissubclass() function, but the registering ABC won\u2019t show up in\ntheir MRO (Method Resolution Order) nor will method\nimplementations defined by the registering ABC be callable (not\neven via super()).</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">__call__</span></code>(*args,\u00a0**kwargs)</p></td>\n<td><p>Call self as a function.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mro</span></code>(/)</p></td>\n<td><p>Return a type's method resolution order.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ABCMeta.register\" title=\"dipy.segment.clustering.ABCMeta.register\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register</span></code></a>(subclass)</p></td>\n<td><p>Register a virtual subclass of an ABC.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ABCMeta.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ABCMeta.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ABCMeta.register\">\n<span class=\"sig-name descname\"><span class=\"pre\">register</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">subclass</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ABCMeta.register\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a virtual subclass of an ABC.</p>\n<p>Returns the subclass, to allow usage as a class decorator.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"averagepointwiseeuclideanmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.clustering.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><a class=\"headerlink\" href=\"#averagepointwiseeuclideanmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.AveragePointwiseEuclideanMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.AveragePointwiseEuclideanMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a></p>\n<p>Computes the average of pointwise Euclidean distances between two\nsequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between the features, rather than\ndirectly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two 2D sequential data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">s1</span>       <span class=\"n\">s2</span>\n\n<span class=\"mi\">0</span><span class=\"o\">*</span>   <span class=\"n\">a</span>    <span class=\"o\">*</span><span class=\"mi\">0</span>\n  \\       <span class=\"o\">|</span>\n   \\      <span class=\"o\">|</span>\n   <span class=\"mi\">1</span><span class=\"o\">*</span>     <span class=\"o\">|</span>\n    <span class=\"o\">|</span>  <span class=\"n\">b</span>  <span class=\"o\">*</span><span class=\"mi\">1</span>\n    <span class=\"o\">|</span>      \\\n    <span class=\"mi\">2</span><span class=\"o\">*</span>      \\\n        <span class=\"n\">c</span>    <span class=\"o\">*</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>is equal to <span class=\"math notranslate nohighlight\">\\((a+b+c)/3\\)</span> where <span class=\"math notranslate nohighlight\">\\(a\\)</span> is the Euclidean distance between s1[0] and\ns2[0], <span class=\"math notranslate nohighlight\">\\(b\\)</span> between s1[1] and s2[1] and <span class=\"math notranslate nohighlight\">\\(c\\)</span> between s1[2] and s2[2].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.AveragePointwiseEuclideanMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.AveragePointwiseEuclideanMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"cluster\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster\" title=\"dipy.segment.clustering.Cluster\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cluster</span></code></a><a class=\"headerlink\" href=\"#cluster\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Cluster\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Cluster</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id=0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Cluster\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Provides functionalities for interacting with a cluster.</p>\n<p>Useful container to retrieve index of elements grouped together. If\na reference to the data is provided to <cite>cluster_map</cite>, elements will\nbe returned instead of their index when possible.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>cluster_map</strong><span class=\"classifier\"><cite>ClusterMap</cite> object</span></dt><dd><p>Reference to the set of clusters this cluster is being part of.</p>\n</dd>\n<dt><strong>id</strong><span class=\"classifier\">int</span></dt><dd><p>Id of this cluster in its associated <cite>cluster_map</cite> object.</p>\n</dd>\n<dt><strong>refdata</strong><span class=\"classifier\">list (optional)</span></dt><dd><p>Actual elements that clustered indices refer to.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>A cluster does not contain actual data but instead knows how to\nretrieve them using its <cite>ClusterMap</cite> object.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster.assign\" title=\"dipy.segment.clustering.Cluster.assign\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assign</span></code></a>(*indices)</p></td>\n<td><p>Assigns indices to this cluster.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Cluster.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id=0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Cluster.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Cluster.assign\">\n<span class=\"sig-name descname\"><span class=\"pre\">assign</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">indices</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Cluster.assign\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Assigns indices to this cluster.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>*indices</strong><span class=\"classifier\">list of indices</span></dt><dd><p>Indices to add to this cluster.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"clustercentroid\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid\" title=\"dipy.segment.clustering.ClusterCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><a class=\"headerlink\" href=\"#clustercentroid\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterCentroid\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ClusterCentroid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id=0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterCentroid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster\" title=\"dipy.segment.clustering.Cluster\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cluster</span></code></a></p>\n<p>Provides functionalities for interacting with a cluster.</p>\n<p>Useful container to retrieve the indices of elements grouped together and\nthe cluster\u2019s centroid. If a reference to the data is provided to\n<cite>cluster_map</cite>, elements will be returned instead of their index when\npossible.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>cluster_map</strong><span class=\"classifier\"><cite>ClusterMapCentroid</cite> object</span></dt><dd><p>Reference to the set of clusters this cluster is being part of.</p>\n</dd>\n<dt><strong>id</strong><span class=\"classifier\">int</span></dt><dd><p>Id of this cluster in its associated <cite>cluster_map</cite> object.</p>\n</dd>\n<dt><strong>refdata</strong><span class=\"classifier\">list (optional)</span></dt><dd><p>Actual elements that clustered indices refer to.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>A cluster does not contain actual data but instead knows how to\nretrieve them using its <cite>ClusterMapCentroid</cite> object.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid.assign\" title=\"dipy.segment.clustering.ClusterCentroid.assign\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assign</span></code></a>(id_datum,\u00a0features)</p></td>\n<td><p>Assigns a data point to this cluster.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid.update\" title=\"dipy.segment.clustering.ClusterCentroid.update\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code></a>()</p></td>\n<td><p>Update centroid of this cluster.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterCentroid.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id=0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterCentroid.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterCentroid.assign\">\n<span class=\"sig-name descname\"><span class=\"pre\">assign</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id_datum</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">features</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterCentroid.assign\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Assigns a data point to this cluster.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>id_datum</strong><span class=\"classifier\">int</span></dt><dd><p>Index of the data point to add to this cluster.</p>\n</dd>\n<dt><strong>features</strong><span class=\"classifier\">2D array</span></dt><dd><p>Data point\u2019s features to modify this cluster\u2019s centroid.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterCentroid.update\">\n<span class=\"sig-name descname\"><span class=\"pre\">update</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterCentroid.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Update centroid of this cluster.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>converged</strong><span class=\"classifier\">bool</span></dt><dd><p>Tells if the centroid has moved.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"clustermap\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap\" title=\"dipy.segment.clustering.ClusterMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a><a class=\"headerlink\" href=\"#clustermap\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ClusterMap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Provides functionalities for interacting with clustering outputs.</p>\n<p>Useful container to create, remove, retrieve and filter clusters.\nIf <cite>refdata</cite> is given, elements will be returned instead of their\nindex when using <cite>Cluster</cite> objects.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>refdata</strong><span class=\"classifier\">list</span></dt><dd><p>Actual elements that clustered indices refer to.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>clusters</strong></dt><dd></dd>\n<dt><strong>refdata</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.add_cluster\" title=\"dipy.segment.clustering.ClusterMap.add_cluster\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_cluster</span></code></a>(*clusters)</p></td>\n<td><p>Adds one or multiple clusters to this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.clear\" title=\"dipy.segment.clustering.ClusterMap.clear\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clear</span></code></a>()</p></td>\n<td><p>Remove all clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.clusters_sizes\" title=\"dipy.segment.clustering.ClusterMap.clusters_sizes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clusters_sizes</span></code></a>()</p></td>\n<td><p>Gets the size of every cluster contained in this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.get_large_clusters\" title=\"dipy.segment.clustering.ClusterMap.get_large_clusters\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_large_clusters</span></code></a>(min_size)</p></td>\n<td><p>Gets clusters which contains at least <cite>min_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.get_small_clusters\" title=\"dipy.segment.clustering.ClusterMap.get_small_clusters\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_small_clusters</span></code></a>(max_size)</p></td>\n<td><p>Gets clusters which contains at most <cite>max_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.remove_cluster\" title=\"dipy.segment.clustering.ClusterMap.remove_cluster\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_cluster</span></code></a>(*clusters)</p></td>\n<td><p>Remove one or multiple clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.size\" title=\"dipy.segment.clustering.ClusterMap.size\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">size</span></code></a>()</p></td>\n<td><p>Gets number of clusters contained in this cluster map.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.add_cluster\">\n<span class=\"sig-name descname\"><span class=\"pre\">add_cluster</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">clusters</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.add_cluster\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adds one or multiple clusters to this cluster map.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>*clusters</strong><span class=\"classifier\"><cite>Cluster</cite> object, \u2026</span></dt><dd><p>Cluster(s) to be added in this cluster map.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.clear\">\n<span class=\"sig-name descname\"><span class=\"pre\">clear</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.clear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove all clusters from this cluster map.</p>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.clusters\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">clusters</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.clusters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.clusters_sizes\">\n<span class=\"sig-name descname\"><span class=\"pre\">clusters_sizes</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.clusters_sizes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Gets the size of every cluster contained in this cluster map.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt>list of int</dt><dd><p>Sizes of every cluster in this cluster map.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.get_large_clusters\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_large_clusters</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">min_size</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.get_large_clusters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Gets clusters which contains at least <cite>min_size</cite> elements.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>min_size</strong><span class=\"classifier\">int</span></dt><dd><p>Minimum number of elements a cluster needs to have to be selected.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>list of <cite>Cluster</cite> objects</dt><dd><p>Clusters having at least <cite>min_size</cite> elements.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.get_small_clusters\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_small_clusters</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_size</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.get_small_clusters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Gets clusters which contains at most <cite>max_size</cite> elements.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>max_size</strong><span class=\"classifier\">int</span></dt><dd><p>Maximum number of elements a cluster can have to be selected.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>list of <cite>Cluster</cite> objects</dt><dd><p>Clusters having at most <cite>max_size</cite> elements.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.refdata\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">refdata</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.refdata\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.remove_cluster\">\n<span class=\"sig-name descname\"><span class=\"pre\">remove_cluster</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">clusters</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.remove_cluster\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove one or multiple clusters from this cluster map.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>*clusters</strong><span class=\"classifier\"><cite>Cluster</cite> object, \u2026</span></dt><dd><p>Cluster(s) to be removed from this cluster map.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMap.size\">\n<span class=\"sig-name descname\"><span class=\"pre\">size</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMap.size\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Gets number of clusters contained in this cluster map.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"clustermapcentroid\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMapCentroid\" title=\"dipy.segment.clustering.ClusterMapCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><a class=\"headerlink\" href=\"#clustermapcentroid\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMapCentroid\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ClusterMapCentroid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMapCentroid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap\" title=\"dipy.segment.clustering.ClusterMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a></p>\n<p>Provides functionalities for interacting with clustering outputs\nthat have centroids.</p>\n<p>Allows to retrieve easily the centroid of every cluster. Also, it is\na useful container to create, remove, retrieve and filter clusters.\nIf <cite>refdata</cite> is given, elements will be returned instead of their\nindex when using <cite>ClusterCentroid</cite> objects.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>refdata</strong><span class=\"classifier\">list</span></dt><dd><p>Actual elements that clustered indices refer to.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>centroids</strong></dt><dd></dd>\n<dt><strong>clusters</strong></dt><dd></dd>\n<dt><strong>refdata</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_cluster</span></code>(*clusters)</p></td>\n<td><p>Adds one or multiple clusters to this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clear</span></code>()</p></td>\n<td><p>Remove all clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clusters_sizes</span></code>()</p></td>\n<td><p>Gets the size of every cluster contained in this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_large_clusters</span></code>(min_size)</p></td>\n<td><p>Gets clusters which contains at least <cite>min_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_small_clusters</span></code>(max_size)</p></td>\n<td><p>Gets clusters which contains at most <cite>max_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_cluster</span></code>(*clusters)</p></td>\n<td><p>Remove one or multiple clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">size</span></code>()</p></td>\n<td><p>Gets number of clusters contained in this cluster map.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMapCentroid.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMapCentroid.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ClusterMapCentroid.centroids\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">centroids</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ClusterMapCentroid.centroids\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"clustering\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.Clustering\" title=\"dipy.segment.clustering.Clustering\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Clustering</span></code></a><a class=\"headerlink\" href=\"#clustering\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Clustering\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Clustering</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Clustering\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.Clustering.cluster\" title=\"dipy.segment.clustering.Clustering.cluster\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cluster</span></code></a>(data[,\u00a0ordering])</p></td>\n<td><p>Clusters <cite>data</cite>.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Clustering.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Clustering.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Clustering.cluster\">\n<em class=\"property\"><span class=\"pre\">abstract</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">cluster</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ordering</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Clustering.cluster\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Clusters <cite>data</cite>.</p>\n<p>Subclasses will perform their clustering algorithm here.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">list of N-dimensional arrays</span></dt><dd><p>Each array represents a data point.</p>\n</dd>\n<dt><strong>ordering</strong><span class=\"classifier\">iterable of indices, optional</span></dt><dd><p>Specifies the order in which data points will be clustered.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><cite>ClusterMap</cite> object</dt><dd><p>Result of the clustering.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"identity\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.Identity\" title=\"dipy.segment.clustering.Identity\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Identity</span></code></a><a class=\"headerlink\" href=\"#identity\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Identity\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Identity</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Identity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Provides identity indexing functionality.</p>\n<p>This can replace any class supporting indexing used for referencing\n(e.g. list, tuple). Indexing an instance of this class will return the\nindex provided instead of the element. It does not support slicing.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Identity.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Identity.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id30\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric\" title=\"dipy.segment.clustering.Metric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><a class=\"headerlink\" href=\"#id30\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Metric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Metric</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Metric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Computes a distance between two sequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between extracted features, rather\nthan directly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>When subclassing <cite>Metric</cite>, one only needs to override the <cite>dist</cite> and\n<cite>are_compatible</cite> methods.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.feature\" title=\"dipy.segment.clustering.Metric.feature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></a></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.is_order_invariant\" title=\"dipy.segment.clustering.Metric.is_order_invariant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></a></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.are_compatible\" title=\"dipy.segment.clustering.Metric.are_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></a></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.dist\" title=\"dipy.segment.clustering.Metric.dist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></a></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Metric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Metric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Metric.are_compatible\">\n<span class=\"sig-name descname\"><span class=\"pre\">are_compatible</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Metric.are_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p>\n<p>Basically this method exists so we don\u2019t have to do this check\ninside the <cite>metric.dist</cite> function (speedup).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>shape1</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the first data point\u2019s features</p>\n</dd>\n<dt><strong>shape2</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the second data point\u2019s features</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>are_compatible</strong><span class=\"classifier\">bool</span></dt><dd><p>whether or not shapes are compatible</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Metric.dist\">\n<span class=\"sig-name descname\"><span class=\"pre\">dist</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Metric.dist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes a distance between two data points based on their features.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>features1</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the first data point.</p>\n</dd>\n<dt><strong>features2</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the second data point.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two data points.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Metric.feature\">\n<span class=\"sig-name descname\"><span class=\"pre\">feature</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Metric.feature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.Metric.is_order_invariant\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_order_invariant</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.Metric.is_order_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"minimumaveragedirectflipmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric\" title=\"dipy.segment.clustering.MinimumAverageDirectFlipMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><a class=\"headerlink\" href=\"#minimumaveragedirectflipmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.MinimumAverageDirectFlipMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a></p>\n<p>Computes the MDF distance (minimum average direct-flip) between two\nsequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two 2D sequential data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">s1</span>       <span class=\"n\">s2</span>\n\n<span class=\"mi\">0</span><span class=\"o\">*</span>   <span class=\"n\">a</span>    <span class=\"o\">*</span><span class=\"mi\">0</span>\n  \\       <span class=\"o\">|</span>\n   \\      <span class=\"o\">|</span>\n   <span class=\"mi\">1</span><span class=\"o\">*</span>     <span class=\"o\">|</span>\n    <span class=\"o\">|</span>  <span class=\"n\">b</span>  <span class=\"o\">*</span><span class=\"mi\">1</span>\n    <span class=\"o\">|</span>      \\\n    <span class=\"mi\">2</span><span class=\"o\">*</span>      \\\n        <span class=\"n\">c</span>    <span class=\"o\">*</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>is equal to <span class=\"math notranslate nohighlight\">\\(\\min((a+b+c)/3, (a'+b'+c')/3)\\)</span> where <span class=\"math notranslate nohighlight\">\\(a\\)</span> is the Euclidean distance\nbetween s1[0] and s2[0], <span class=\"math notranslate nohighlight\">\\(b\\)</span> between s1[1] and s2[1], <span class=\"math notranslate nohighlight\">\\(c\\)</span> between s1[2]\nand s2[2], <span class=\"math notranslate nohighlight\">\\(a'\\)</span> between s1[0] and s2[2], <span class=\"math notranslate nohighlight\">\\(b'\\)</span> between s1[1] and s2[1]\nand <span class=\"math notranslate nohighlight\">\\(c'\\)</span> between s1[2] and s2[0].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric.is_order_invariant\" title=\"dipy.segment.clustering.MinimumAverageDirectFlipMetric.is_order_invariant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></a></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.MinimumAverageDirectFlipMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.MinimumAverageDirectFlipMetric.is_order_invariant\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_order_invariant</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric.is_order_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"quickbundles\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundles\" title=\"dipy.segment.clustering.QuickBundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a><a class=\"headerlink\" href=\"#quickbundles\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.QuickBundles\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QuickBundles</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MDF_12points'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_nb_clusters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2147483647</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.QuickBundles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.Clustering\" title=\"dipy.segment.clustering.Clustering\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Clustering</span></code></a></p>\n<p>Clusters streamlines using QuickBundles <a class=\"reference internal\" href=\"#r2491d57df3a8-garyfallidis12\" id=\"id31\">[Garyfallidis12]</a>.</p>\n<p>Given a list of streamlines, the QuickBundles algorithm sequentially\nassigns each streamline to its closest bundle in <span class=\"math notranslate nohighlight\">\\(\\mathcal{O}(Nk)\\)</span> where\n<span class=\"math notranslate nohighlight\">\\(N\\)</span> is the number of streamlines and <span class=\"math notranslate nohighlight\">\\(k\\)</span> is the final number of bundles.\nIf for a given streamline its closest bundle is farther than <cite>threshold</cite>,\na new bundle is created and the streamline is assigned to it except if the\nnumber of bundles has already exceeded <cite>max_nb_clusters</cite>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>threshold</strong><span class=\"classifier\">float</span></dt><dd><p>The maximum distance from a bundle for a streamline to be still\nconsidered as part of it.</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">str or <cite>Metric</cite> object (optional)</span></dt><dd><p>The distance metric to use when comparing two streamlines. By default,\nthe Minimum average Direct-Flip (MDF) distance <a class=\"reference internal\" href=\"#r2491d57df3a8-garyfallidis12\" id=\"id32\">[Garyfallidis12]</a> is\nused and streamlines are automatically resampled so they have\n12 points.</p>\n</dd>\n<dt><strong>max_nb_clusters</strong><span class=\"classifier\">int</span></dt><dd><p>Limits the creation of bundles.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r2491d57df3a8-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<span class=\"backrefs\">(<a role=\"doc-backlink\" href=\"#id3\">1</a>,<a role=\"doc-backlink\" href=\"#id31\">2</a>,<a role=\"doc-backlink\" href=\"#id32\">3</a>)</span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.clustering</span> <span class=\"kn\">import</span> <span class=\"n\">QuickBundles</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">load_tractogram</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">Streamlines</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;fornix&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fornix</span> <span class=\"o\">=</span> <span class=\"n\">load_tractogram</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                         <span class=\"n\">bbox_valid_check</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">streamlines</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">fornix</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Segment fornix with a threshold of 10mm and streamlines resampled</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># to 12 points.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qb</span> <span class=\"o\">=</span> <span class=\"n\">QuickBundles</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">10.</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">qb</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">)</span>\n<span class=\"go\">4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">clusters</span><span class=\"p\">))</span>\n<span class=\"go\">[61, 191, 47, 1]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Resampling streamlines differently is done explicitly as follows.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note this has an impact on the speed and the accuracy (tradeoff).</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.featurespeed</span> <span class=\"kn\">import</span> <span class=\"n\">ResampleFeature</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metricspeed</span> <span class=\"kn\">import</span> <span class=\"n\">AveragePointwiseEuclideanMetric</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">ResampleFeature</span><span class=\"p\">(</span><span class=\"n\">nb_points</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">AveragePointwiseEuclideanMetric</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qb</span> <span class=\"o\">=</span> <span class=\"n\">QuickBundles</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">qb</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">)</span>\n<span class=\"go\">4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">clusters</span><span class=\"p\">))</span>\n<span class=\"go\">[58, 142, 72, 28]</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundles.cluster\" title=\"dipy.segment.clustering.QuickBundles.cluster\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cluster</span></code></a>(streamlines[,\u00a0ordering])</p></td>\n<td><p>Clusters <cite>streamlines</cite> into bundles.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.QuickBundles.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MDF_12points'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_nb_clusters</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2147483647</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.QuickBundles.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.QuickBundles.cluster\">\n<span class=\"sig-name descname\"><span class=\"pre\">cluster</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ordering</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.QuickBundles.cluster\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Clusters <cite>streamlines</cite> into bundles.</p>\n<p>Performs quickbundles algorithm using predefined metric and threshold.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list of 2D arrays</span></dt><dd><p>Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>ordering</strong><span class=\"classifier\">iterable of indices</span></dt><dd><p>Specifies the order in which data points will be clustered.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><cite>ClusterMapCentroid</cite> object</dt><dd><p>Result of the clustering.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"quickbundlesx\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundlesX\" title=\"dipy.segment.clustering.QuickBundlesX\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundlesX</span></code></a><a class=\"headerlink\" href=\"#quickbundlesx\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.QuickBundlesX\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QuickBundlesX</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">thresholds</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MDF_12points'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.QuickBundlesX\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.Clustering\" title=\"dipy.segment.clustering.Clustering\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Clustering</span></code></a></p>\n<p>Clusters streamlines using QuickBundlesX.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>thresholds</strong><span class=\"classifier\">list of float</span></dt><dd><p>Thresholds to use for each clustering layer. A threshold represents the\nmaximum distance from a cluster for a streamline to be still considered\nas part of it.</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">str or <cite>Metric</cite> object (optional)</span></dt><dd><p>The distance metric to use when comparing two streamlines. By default,\nthe Minimum average Direct-Flip (MDF) distance <a class=\"reference internal\" href=\"#r88276b257c2b-garyfallidis12\" id=\"id34\">[Garyfallidis12]</a> is\nused and streamlines are automatically resampled so they have 12\npoints.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r88276b257c2b-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id34\">Garyfallidis12</a><span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n<div class=\"citation\" id=\"r88276b257c2b-garyfallidis16\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis16<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al. QuickBundlesX: Sequential\nclustering of millions of streamlines in multiple\nlevels of detail at record execution time. Proceedings\nof the, International Society of Magnetic Resonance\nin Medicine (ISMRM). Singapore, 4187, 2016.</p>\n</div>\n</div>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundlesX.cluster\" title=\"dipy.segment.clustering.QuickBundlesX.cluster\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cluster</span></code></a>(streamlines[,\u00a0ordering])</p></td>\n<td><p>Clusters <cite>streamlines</cite> into bundles.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.QuickBundlesX.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">thresholds</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">metric</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'MDF_12points'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.QuickBundlesX.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.QuickBundlesX.cluster\">\n<span class=\"sig-name descname\"><span class=\"pre\">cluster</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">ordering</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.QuickBundlesX.cluster\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Clusters <cite>streamlines</cite> into bundles.</p>\n<p>Performs QuickbundleX using a predefined metric and thresholds.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list of 2D arrays</span></dt><dd><p>Each 2D array represents a sequence of 3D points (points, 3).</p>\n</dd>\n<dt><strong>ordering</strong><span class=\"classifier\">iterable of indices</span></dt><dd><p>Specifies the order in which data points will be clustered.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><cite>TreeClusterMap</cite> object</dt><dd><p>Result of the clustering.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"resamplefeature\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.ResampleFeature\" title=\"dipy.segment.clustering.ResampleFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResampleFeature</span></code></a><a class=\"headerlink\" href=\"#resamplefeature\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ResampleFeature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ResampleFeature</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ResampleFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p>The features being extracted are the points of the sequence once resampled.\nThis is useful for metrics requiring a constant number of points for all</p>\n<blockquote>\n<div><p>streamlines.</p>\n</div></blockquote>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.ResampleFeature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.ResampleFeature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"treecluster\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeCluster\" title=\"dipy.segment.clustering.TreeCluster\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TreeCluster</span></code></a><a class=\"headerlink\" href=\"#treecluster\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeCluster\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">TreeCluster</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeCluster\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid\" title=\"dipy.segment.clustering.ClusterCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>is_leaf</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assign</span></code>(id_datum,\u00a0features)</p></td>\n<td><p>Assigns a data point to this cluster.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code>()</p></td>\n<td><p>Update centroid of this cluster.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>add</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>return_indices</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeCluster.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeCluster.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeCluster.add\">\n<span class=\"sig-name descname\"><span class=\"pre\">add</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">child</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeCluster.add\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeCluster.is_leaf\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">is_leaf</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeCluster.is_leaf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeCluster.return_indices\">\n<span class=\"sig-name descname\"><span class=\"pre\">return_indices</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeCluster.return_indices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"treeclustermap\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeClusterMap\" title=\"dipy.segment.clustering.TreeClusterMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TreeClusterMap</span></code></a><a class=\"headerlink\" href=\"#treeclustermap\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeClusterMap\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">TreeClusterMap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeClusterMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap\" title=\"dipy.segment.clustering.ClusterMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>clusters</strong></dt><dd></dd>\n<dt><strong>refdata</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_cluster</span></code>(*clusters)</p></td>\n<td><p>Adds one or multiple clusters to this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clear</span></code>()</p></td>\n<td><p>Remove all clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clusters_sizes</span></code>()</p></td>\n<td><p>Gets the size of every cluster contained in this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_large_clusters</span></code>(min_size)</p></td>\n<td><p>Gets clusters which contains at least <cite>min_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_small_clusters</span></code>(max_size)</p></td>\n<td><p>Gets clusters which contains at most <cite>max_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_cluster</span></code>(*clusters)</p></td>\n<td><p>Remove one or multiple clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">size</span></code>()</p></td>\n<td><p>Gets number of clusters contained in this cluster map.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_clusters</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>iter_preorder</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>traverse_postorder</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeClusterMap.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeClusterMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeClusterMap.get_clusters\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_clusters</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">wanted_level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeClusterMap.get_clusters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeClusterMap.iter_preorder\">\n<span class=\"sig-name descname\"><span class=\"pre\">iter_preorder</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">node</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeClusterMap.iter_preorder\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeClusterMap.refdata\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">refdata</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeClusterMap.refdata\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.TreeClusterMap.traverse_postorder\">\n<span class=\"sig-name descname\"><span class=\"pre\">traverse_postorder</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">node</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">visit</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.TreeClusterMap.traverse_postorder\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"abstractmethod\">\n<h3>abstractmethod<a class=\"headerlink\" href=\"#abstractmethod\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.abstractmethod\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">abstractmethod</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">funcobj</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.abstractmethod\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A decorator indicating abstract methods.</p>\n<p>Requires that the metaclass is ABCMeta or derived from it.  A\nclass that has a metaclass derived from ABCMeta cannot be\ninstantiated unless all of its abstract methods are overridden.\nThe abstract methods can be called using any of the normal\n\u2018super\u2019 call mechanisms.  abstractmethod() may be used to declare\nabstract methods for properties and descriptors.</p>\n<p>Usage:</p>\n<blockquote>\n<div><dl>\n<dt>class C(metaclass=ABCMeta):</dt><dd><p>&#64;abstractmethod\ndef my_abstract_method(self, \u2026):</p>\n<blockquote>\n<div><p>\u2026</p>\n</div></blockquote>\n</dd>\n</dl>\n</div></blockquote>\n</dd></dl>\n\n</section>\n<section id=\"id37\">\n<h3>nbytes<a class=\"headerlink\" href=\"#id37\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.nbytes\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">nbytes</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.nbytes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"id38\">\n<h3>qbx_and_merge<a class=\"headerlink\" href=\"#id38\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.qbx_and_merge\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">qbx_and_merge</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">streamlines</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">thresholds</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nb_pts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">20</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">select_randomly</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rng</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.qbx_and_merge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run QuickBundlesX and then run again on the centroids of the last layer</p>\n<p>Running again QuickBundles at a layer has the effect of merging\nsome of the clusters that may be originally divided because of branching.\nThis function help obtain a result at a QuickBundles quality but with\nQuickBundlesX speed. The merging phase has low cost because it is applied\nonly on the centroids rather than the entire dataset.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>thresholds</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of distance thresholds for QuickBundlesX.</p>\n</dd>\n<dt><strong>nb_pts</strong><span class=\"classifier\">int</span></dt><dd><p>Number of points for discretizing each streamline</p>\n</dd>\n<dt><strong>select_randomly</strong><span class=\"classifier\">int</span></dt><dd><p>Randomly select a specific number of streamlines. If None all the\nstreamlines are used.</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>If None then RandomState is initialized internally.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, log information. Default False.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>clusters</strong><span class=\"classifier\">obj</span></dt><dd><p>Contains the clusters of the last layer of QuickBundlesX after merging.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"rf4116ddc3cb6-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n<div class=\"citation\" id=\"rf4116ddc3cb6-garyfallidis16\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis16<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al. QuickBundlesX: Sequential\nclustering of millions of streamlines in multiple\nlevels of detail at record execution time. Proceedings\nof the, International Society of Magnetic Resonance\nin Medicine (ISMRM). Singapore, 4187, 2016.</p>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"id41\">\n<h3>set_number_of_points<a class=\"headerlink\" href=\"#id41\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.set_number_of_points\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">set_number_of_points</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering.set_number_of_points\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Change the number of points of streamlines</dt><dd><p>(either by downsampling or upsampling)</p>\n</dd>\n</dl>\n<p>Change the number of points of streamlines in order to obtain\n<cite>nb_points</cite>-1 segments of equal length. Points of streamlines will be\nmodified along the curve.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>If ndarray, must have shape (N,3) where N is the number of points\nof the streamline.\nIf list, each item must be ndarray shape (Ni,3) where Ni is the number\nof points of streamline i.\nIf <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a>, its <cite>common_shape</cite> must be 3.</p>\n</dd>\n<dt><strong>nb_points</strong><span class=\"classifier\">int</span></dt><dd><p>integer representing number of points wanted along the curve.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>new_streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>Results of the downsampling or upsampling process.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">set_number_of_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</pre></div>\n</div>\n<p>One streamline, a semi-circle:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">modified_streamline</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">modified_streamline</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</pre></div>\n</div>\n<p>Multiple streamlines:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">streamline</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[100, 50]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">new_streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[10, 10]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"id42\">\n<h3>time<a class=\"headerlink\" href=\"#id42\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering.time\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering.</span></span><span class=\"sig-name descname\"><span class=\"pre\">time</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> <span class=\"sig-return\"><span class=\"sig-return-icon\">&#x2192;</span> <span class=\"sig-return-typehint\"><span class=\"pre\">floating</span> <span class=\"pre\">point</span> <span class=\"pre\">number</span></span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering.time\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.</p>\n</dd></dl>\n\n</section>\n<section id=\"id43\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid\" title=\"dipy.segment.clustering_algorithms.ClusterCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><a class=\"headerlink\" href=\"#id43\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.ClusterCentroid\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering_algorithms.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ClusterCentroid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id=0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster\" title=\"dipy.segment.clustering.Cluster\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cluster</span></code></a></p>\n<p>Provides functionalities for interacting with a cluster.</p>\n<p>Useful container to retrieve the indices of elements grouped together and\nthe cluster\u2019s centroid. If a reference to the data is provided to\n<cite>cluster_map</cite>, elements will be returned instead of their index when\npossible.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>cluster_map</strong><span class=\"classifier\"><cite>ClusterMapCentroid</cite> object</span></dt><dd><p>Reference to the set of clusters this cluster is being part of.</p>\n</dd>\n<dt><strong>id</strong><span class=\"classifier\">int</span></dt><dd><p>Id of this cluster in its associated <cite>cluster_map</cite> object.</p>\n</dd>\n<dt><strong>refdata</strong><span class=\"classifier\">list (optional)</span></dt><dd><p>Actual elements that clustered indices refer to.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>A cluster does not contain actual data but instead knows how to\nretrieve them using its <cite>ClusterMapCentroid</cite> object.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid.assign\" title=\"dipy.segment.clustering_algorithms.ClusterCentroid.assign\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assign</span></code></a>(id_datum,\u00a0features)</p></td>\n<td><p>Assigns a data point to this cluster.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid.update\" title=\"dipy.segment.clustering_algorithms.ClusterCentroid.update\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code></a>()</p></td>\n<td><p>Update centroid of this cluster.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.ClusterCentroid.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id=0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.ClusterCentroid.assign\">\n<span class=\"sig-name descname\"><span class=\"pre\">assign</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id_datum</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">features</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid.assign\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Assigns a data point to this cluster.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>id_datum</strong><span class=\"classifier\">int</span></dt><dd><p>Index of the data point to add to this cluster.</p>\n</dd>\n<dt><strong>features</strong><span class=\"classifier\">2D array</span></dt><dd><p>Data point\u2019s features to modify this cluster\u2019s centroid.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.ClusterCentroid.update\">\n<span class=\"sig-name descname\"><span class=\"pre\">update</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Update centroid of this cluster.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>converged</strong><span class=\"classifier\">bool</span></dt><dd><p>Tells if the centroid has moved.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id44\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterMapCentroid\" title=\"dipy.segment.clustering_algorithms.ClusterMapCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><a class=\"headerlink\" href=\"#id44\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.ClusterMapCentroid\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering_algorithms.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ClusterMapCentroid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.ClusterMapCentroid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap\" title=\"dipy.segment.clustering.ClusterMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a></p>\n<p>Provides functionalities for interacting with clustering outputs\nthat have centroids.</p>\n<p>Allows to retrieve easily the centroid of every cluster. Also, it is\na useful container to create, remove, retrieve and filter clusters.\nIf <cite>refdata</cite> is given, elements will be returned instead of their\nindex when using <cite>ClusterCentroid</cite> objects.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>refdata</strong><span class=\"classifier\">list</span></dt><dd><p>Actual elements that clustered indices refer to.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>centroids</strong></dt><dd></dd>\n<dt><strong>clusters</strong></dt><dd></dd>\n<dt><strong>refdata</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_cluster</span></code>(*clusters)</p></td>\n<td><p>Adds one or multiple clusters to this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clear</span></code>()</p></td>\n<td><p>Remove all clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clusters_sizes</span></code>()</p></td>\n<td><p>Gets the size of every cluster contained in this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_large_clusters</span></code>(min_size)</p></td>\n<td><p>Gets clusters which contains at least <cite>min_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_small_clusters</span></code>(max_size)</p></td>\n<td><p>Gets clusters which contains at most <cite>max_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_cluster</span></code>(*clusters)</p></td>\n<td><p>Remove one or multiple clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">size</span></code>()</p></td>\n<td><p>Gets number of clusters contained in this cluster map.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.ClusterMapCentroid.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.ClusterMapCentroid.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.ClusterMapCentroid.centroids\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">centroids</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.ClusterMapCentroid.centroids\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"dtype\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.DTYPE\" title=\"dipy.segment.clustering_algorithms.DTYPE\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DTYPE</span></code></a><a class=\"headerlink\" href=\"#dtype\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.DTYPE\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering_algorithms.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DTYPE</span></span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.DTYPE\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</section>\n<section id=\"clusters-centroid2clustermap-centroid\">\n<h3>clusters_centroid2clustermap_centroid<a class=\"headerlink\" href=\"#clusters-centroid2clustermap-centroid\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.clusters_centroid2clustermap_centroid\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering_algorithms.</span></span><span class=\"sig-name descname\"><span class=\"pre\">clusters_centroid2clustermap_centroid</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.clusters_centroid2clustermap_centroid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Converts a <cite>ClustersCentroid</cite> object (Cython) to a <cite>ClusterMapCentroid</cite>\nobject (Python).</p>\n<p>Only basic functionalities are provided with a <cite>Clusters</cite> object. To have\nmore flexibility, one should use <cite>ClusterMap</cite> object, hence this conversion\nfunction.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>clusters_list</strong><span class=\"classifier\"><cite>ClustersCentroid</cite> object</span></dt><dd><p>Result of the clustering contained in a Cython\u2019s object.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><cite>ClusterMapCentroid</cite> object</dt><dd><p>Result of the clustering contained in a Python\u2019s object.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"peek\">\n<h3>peek<a class=\"headerlink\" href=\"#peek\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.peek\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering_algorithms.</span></span><span class=\"sig-name descname\"><span class=\"pre\">peek</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.peek\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the first element of an iterable and the iterator.</p>\n</dd></dl>\n\n</section>\n<section id=\"id45\">\n<h3>quickbundles<a class=\"headerlink\" href=\"#id45\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.quickbundles\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering_algorithms.</span></span><span class=\"sig-name descname\"><span class=\"pre\">quickbundles</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.quickbundles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Clusters streamlines using QuickBundles.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">list of 2D arrays</span></dt><dd><p>List of streamlines to cluster.</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\"><cite>Metric</cite> object</span></dt><dd><p>Tells how to compute the distance between two streamlines.</p>\n</dd>\n<dt><strong>threshold</strong><span class=\"classifier\">double</span></dt><dd><p>The maximum distance from a cluster for a streamline to be still\nconsidered as part of it.</p>\n</dd>\n<dt><strong>max_nb_clusters</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Limits the creation of bundles. (Default: inf)</p>\n</dd>\n<dt><strong>ordering</strong><span class=\"classifier\">iterable of indices, optional</span></dt><dd><p>Iterate through <cite>data</cite> using the given ordering.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><cite>ClusterMapCentroid</cite> object</dt><dd><p>Result of the clustering.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"ra9e0802309f8-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"id47\">\n<h3>quickbundlesx<a class=\"headerlink\" href=\"#id47\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clustering_algorithms.quickbundlesx\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clustering_algorithms.</span></span><span class=\"sig-name descname\"><span class=\"pre\">quickbundlesx</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clustering_algorithms.quickbundlesx\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Clusters streamlines using QuickBundlesX.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">list of 2D arrays</span></dt><dd><p>List of streamlines to cluster.</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\"><cite>Metric</cite> object</span></dt><dd><p>Tells how to compute the distance between two streamlines.</p>\n</dd>\n<dt><strong>thresholds</strong><span class=\"classifier\">list of double</span></dt><dd><p>Thresholds to use for each clustering layer. A threshold represents the\nmaximum distance from a cluster for a streamline to be still considered\nas part of it.</p>\n</dd>\n<dt><strong>ordering</strong><span class=\"classifier\">iterable of indices, optional</span></dt><dd><p>Iterate through <cite>data</cite> using the given ordering.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><cite>TreeClusterMap</cite> object</dt><dd><p>Result of the clustering. Use get_clusters() to get the clusters at\na specific level of the hierarchy.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r427ed2a20953-garyfallidis16\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis16<span class=\"fn-bracket\">]</span></span>\n<dl class=\"simple\">\n<dt>Garyfallidis E. et al. QuickBundlesX: Sequential</dt><dd><p>clustering of millions of streamlines in multiple\nlevels of detail at record execution time. Proceedings\nof the, International Society of Magnetic Resonance\nin Medicine (ISMRM). Singapore, 4187, 2016.</p>\n</dd>\n</dl>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r427ed2a20953-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n</div>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"id49\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid\" title=\"dipy.segment.clusteringspeed.ClusterCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><a class=\"headerlink\" href=\"#id49\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClusterCentroid\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ClusterCentroid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id=0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster\" title=\"dipy.segment.clustering.Cluster\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cluster</span></code></a></p>\n<p>Provides functionalities for interacting with a cluster.</p>\n<p>Useful container to retrieve the indices of elements grouped together and\nthe cluster\u2019s centroid. If a reference to the data is provided to\n<cite>cluster_map</cite>, elements will be returned instead of their index when\npossible.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>cluster_map</strong><span class=\"classifier\"><cite>ClusterMapCentroid</cite> object</span></dt><dd><p>Reference to the set of clusters this cluster is being part of.</p>\n</dd>\n<dt><strong>id</strong><span class=\"classifier\">int</span></dt><dd><p>Id of this cluster in its associated <cite>cluster_map</cite> object.</p>\n</dd>\n<dt><strong>refdata</strong><span class=\"classifier\">list (optional)</span></dt><dd><p>Actual elements that clustered indices refer to.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>A cluster does not contain actual data but instead knows how to\nretrieve them using its <cite>ClusterMapCentroid</cite> object.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid.assign\" title=\"dipy.segment.clusteringspeed.ClusterCentroid.assign\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assign</span></code></a>(id_datum,\u00a0features)</p></td>\n<td><p>Assigns a data point to this cluster.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid.update\" title=\"dipy.segment.clusteringspeed.ClusterCentroid.update\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code></a>()</p></td>\n<td><p>Update centroid of this cluster.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClusterCentroid.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id=0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClusterCentroid.assign\">\n<span class=\"sig-name descname\"><span class=\"pre\">assign</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">id_datum</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">features</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid.assign\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Assigns a data point to this cluster.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>id_datum</strong><span class=\"classifier\">int</span></dt><dd><p>Index of the data point to add to this cluster.</p>\n</dd>\n<dt><strong>features</strong><span class=\"classifier\">2D array</span></dt><dd><p>Data point\u2019s features to modify this cluster\u2019s centroid.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClusterCentroid.update\">\n<span class=\"sig-name descname\"><span class=\"pre\">update</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Update centroid of this cluster.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>converged</strong><span class=\"classifier\">bool</span></dt><dd><p>Tells if the centroid has moved.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id50\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterMapCentroid\" title=\"dipy.segment.clusteringspeed.ClusterMapCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><a class=\"headerlink\" href=\"#id50\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClusterMapCentroid\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ClusterMapCentroid</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClusterMapCentroid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap\" title=\"dipy.segment.clustering.ClusterMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a></p>\n<p>Provides functionalities for interacting with clustering outputs\nthat have centroids.</p>\n<p>Allows to retrieve easily the centroid of every cluster. Also, it is\na useful container to create, remove, retrieve and filter clusters.\nIf <cite>refdata</cite> is given, elements will be returned instead of their\nindex when using <cite>ClusterCentroid</cite> objects.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>refdata</strong><span class=\"classifier\">list</span></dt><dd><p>Actual elements that clustered indices refer to.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>centroids</strong></dt><dd></dd>\n<dt><strong>clusters</strong></dt><dd></dd>\n<dt><strong>refdata</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_cluster</span></code>(*clusters)</p></td>\n<td><p>Adds one or multiple clusters to this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clear</span></code>()</p></td>\n<td><p>Remove all clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clusters_sizes</span></code>()</p></td>\n<td><p>Gets the size of every cluster contained in this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_large_clusters</span></code>(min_size)</p></td>\n<td><p>Gets clusters which contains at least <cite>min_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_small_clusters</span></code>(max_size)</p></td>\n<td><p>Gets clusters which contains at most <cite>max_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_cluster</span></code>(*clusters)</p></td>\n<td><p>Remove one or multiple clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">size</span></code>()</p></td>\n<td><p>Gets number of clusters contained in this cluster map.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClusterMapCentroid.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">refdata=&lt;dipy.segment.clustering.Identity</span> <span class=\"pre\">object&gt;</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClusterMapCentroid.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClusterMapCentroid.centroids\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">centroids</span></span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClusterMapCentroid.centroids\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"clusters\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.Clusters\" title=\"dipy.segment.clusteringspeed.Clusters\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Clusters</span></code></a><a class=\"headerlink\" href=\"#clusters\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.Clusters\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Clusters</span></span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.Clusters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Provides Cython functionalities to interact with clustering outputs.</p>\n<p>This class allows to create clusters and assign elements to them.\nAssignements of a cluster are represented as a list of element indices.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.Clusters.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.Clusters.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"clusterscentroid\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClustersCentroid\" title=\"dipy.segment.clusteringspeed.ClustersCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClustersCentroid</span></code></a><a class=\"headerlink\" href=\"#clusterscentroid\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClustersCentroid\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ClustersCentroid</span></span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClustersCentroid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.Clusters\" title=\"dipy.segment.clusteringspeed.Clusters\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Clusters</span></code></a></p>\n<p>Provides Cython functionalities to interact with clustering outputs\nhaving the notion of cluster\u2019s centroid.</p>\n<p>This class allows to create clusters, assign elements to them and\nupdate their centroid.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>centroid_shape</strong><span class=\"classifier\">int, tuple of int</span></dt><dd><p>Information about the shape of the centroid.</p>\n</dd>\n<dt><strong>eps</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Consider the centroid has not changed if the changes per dimension\nare less than this epsilon. (Default: 1e-6)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.ClustersCentroid.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.ClustersCentroid.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id51\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.DTYPE\" title=\"dipy.segment.clusteringspeed.DTYPE\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DTYPE</span></code></a><a class=\"headerlink\" href=\"#id51\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.DTYPE\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">DTYPE</span></span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.DTYPE\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">float32</span></code></p>\n</dd></dl>\n\n</section>\n<section id=\"id52\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundles\" title=\"dipy.segment.clusteringspeed.QuickBundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a><a class=\"headerlink\" href=\"#id52\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundles\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QuickBundles</span></span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_cluster_map</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_stats</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundles.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundles.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundles.get_cluster_map\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_cluster_map</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundles.get_cluster_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundles.get_stats\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_stats</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundles.get_stats\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id53\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX\" title=\"dipy.segment.clusteringspeed.QuickBundlesX\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundlesX</span></code></a><a class=\"headerlink\" href=\"#id53\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundlesX\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">QuickBundlesX</span></span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_stats</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_tree_cluster_map</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>insert</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundlesX.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundlesX.get_stats\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_stats</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX.get_stats\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundlesX.get_tree_cluster_map\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_tree_cluster_map</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX.get_tree_cluster_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.QuickBundlesX.insert\">\n<span class=\"sig-name descname\"><span class=\"pre\">insert</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX.insert\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id54\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeCluster\" title=\"dipy.segment.clusteringspeed.TreeCluster\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TreeCluster</span></code></a><a class=\"headerlink\" href=\"#id54\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeCluster\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">TreeCluster</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeCluster\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid\" title=\"dipy.segment.clustering.ClusterCentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>is_leaf</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">assign</span></code>(id_datum,\u00a0features)</p></td>\n<td><p>Assigns a data point to this cluster.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code>()</p></td>\n<td><p>Update centroid of this cluster.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>add</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>return_indices</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeCluster.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">centroid</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">indices</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeCluster.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeCluster.add\">\n<span class=\"sig-name descname\"><span class=\"pre\">add</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">child</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeCluster.add\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeCluster.is_leaf\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">is_leaf</span></span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeCluster.is_leaf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeCluster.return_indices\">\n<span class=\"sig-name descname\"><span class=\"pre\">return_indices</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeCluster.return_indices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id55\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap\" title=\"dipy.segment.clusteringspeed.TreeClusterMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TreeClusterMap</span></code></a><a class=\"headerlink\" href=\"#id55\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeClusterMap\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">TreeClusterMap</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap\" title=\"dipy.segment.clustering.ClusterMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>clusters</strong></dt><dd></dd>\n<dt><strong>refdata</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_cluster</span></code>(*clusters)</p></td>\n<td><p>Adds one or multiple clusters to this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clear</span></code>()</p></td>\n<td><p>Remove all clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clusters_sizes</span></code>()</p></td>\n<td><p>Gets the size of every cluster contained in this cluster map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_large_clusters</span></code>(min_size)</p></td>\n<td><p>Gets clusters which contains at least <cite>min_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_small_clusters</span></code>(max_size)</p></td>\n<td><p>Gets clusters which contains at most <cite>max_size</cite> elements.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_cluster</span></code>(*clusters)</p></td>\n<td><p>Remove one or multiple clusters from this cluster map.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">size</span></code>()</p></td>\n<td><p>Gets number of clusters contained in this cluster map.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_clusters</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>iter_preorder</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>traverse_postorder</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeClusterMap.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">root</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeClusterMap.get_clusters\">\n<span class=\"sig-name descname\"><span class=\"pre\">get_clusters</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">wanted_level</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.get_clusters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeClusterMap.iter_preorder\">\n<span class=\"sig-name descname\"><span class=\"pre\">iter_preorder</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">node</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.iter_preorder\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py property\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeClusterMap.refdata\">\n<em class=\"property\"><span class=\"pre\">property</span><span class=\"w\"> </span></em><span class=\"sig-name descname\"><span class=\"pre\">refdata</span></span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.refdata\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.TreeClusterMap.traverse_postorder\">\n<span class=\"sig-name descname\"><span class=\"pre\">traverse_postorder</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">node</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">visit</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.traverse_postorder\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"evaluate-aabb-checks\">\n<h3>evaluate_aabb_checks<a class=\"headerlink\" href=\"#evaluate-aabb-checks\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.clusteringspeed.evaluate_aabb_checks\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.clusteringspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">evaluate_aabb_checks</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.clusteringspeed.evaluate_aabb_checks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</section>\n<section id=\"arclengthfeature\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.ArcLengthFeature\" title=\"dipy.segment.featurespeed.ArcLengthFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArcLengthFeature</span></code></a><a class=\"headerlink\" href=\"#arclengthfeature\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.ArcLengthFeature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ArcLengthFeature</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.ArcLengthFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p>The feature being extracted consists of one scalar representing\nthe arc length of the sequence (i.e. the sum of the length of all segments).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.ArcLengthFeature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.ArcLengthFeature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"centerofmassfeature\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CenterOfMassFeature\" title=\"dipy.segment.featurespeed.CenterOfMassFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CenterOfMassFeature</span></code></a><a class=\"headerlink\" href=\"#centerofmassfeature\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.CenterOfMassFeature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">CenterOfMassFeature</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.CenterOfMassFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p>The feature being extracted consists of one N-dimensional point representing\nthe mean of the points, i.e. the center of mass.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.CenterOfMassFeature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.CenterOfMassFeature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"cythonfeature\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a><a class=\"headerlink\" href=\"#cythonfeature\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.CythonFeature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">CythonFeature</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature\" title=\"dipy.segment.featurespeed.Feature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feature</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>is_order_invariant</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Tells if this feature is invariant to the sequence\u2019s ordering (Default: True).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>By default, when inheriting from <cite>CythonFeature</cite>, Python methods will call their\nC version (e.g. <cite>CythonFeature.extract</cite> -&gt; <cite>self.c_extract</cite>).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature.extract\" title=\"dipy.segment.featurespeed.CythonFeature.extract\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature.infer_shape\" title=\"dipy.segment.featurespeed.CythonFeature.infer_shape\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></a></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.CythonFeature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.CythonFeature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.CythonFeature.extract\">\n<span class=\"sig-name descname\"><span class=\"pre\">extract</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.CythonFeature.extract\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts features from a sequential datum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>datum</strong><span class=\"classifier\">2D array</span></dt><dd><p>Sequence of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>2D array</dt><dd><p>Features extracted from <cite>datum</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This method calls its Cython version <cite>self.c_extract</cite> accordingly.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.CythonFeature.infer_shape\">\n<span class=\"sig-name descname\"><span class=\"pre\">infer_shape</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.CythonFeature.infer_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Infers the shape of features extracted from a sequential datum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>datum</strong><span class=\"classifier\">2D array</span></dt><dd><p>Sequence of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>tuple</dt><dd><p>Shape of the features.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This method calls its Cython version <cite>self.c_infer_shape</cite> accordingly.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"feature\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature\" title=\"dipy.segment.featurespeed.Feature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feature</span></code></a><a class=\"headerlink\" href=\"#feature\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.Feature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Feature</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.Feature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>is_order_invariant</strong><span class=\"classifier\">bool (optional)</span></dt><dd><p>tells if this feature is invariant to the sequence\u2019s ordering. This\nmeans starting from either extremities produces the same features.\n(Default: True)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>When subclassing <cite>Feature</cite>, one only needs to override the <cite>extract</cite> and\n<cite>infer_shape</cite> methods.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature.is_order_invariant\" title=\"dipy.segment.featurespeed.Feature.is_order_invariant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></a></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature.extract\" title=\"dipy.segment.featurespeed.Feature.extract\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></a></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature.infer_shape\" title=\"dipy.segment.featurespeed.Feature.infer_shape\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></a></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.Feature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.Feature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.Feature.extract\">\n<span class=\"sig-name descname\"><span class=\"pre\">extract</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.Feature.extract\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts features from a sequential datum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>datum</strong><span class=\"classifier\">2D array</span></dt><dd><p>Sequence of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>2D array</dt><dd><p>Features extracted from <cite>datum</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.Feature.infer_shape\">\n<span class=\"sig-name descname\"><span class=\"pre\">infer_shape</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.Feature.infer_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Infers the shape of features extracted from a sequential datum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>datum</strong><span class=\"classifier\">2D array</span></dt><dd><p>Sequence of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>int, 1-tuple or 2-tuple</dt><dd><p>Shape of the features.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.Feature.is_order_invariant\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_order_invariant</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.Feature.is_order_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"identityfeature\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.IdentityFeature\" title=\"dipy.segment.featurespeed.IdentityFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IdentityFeature</span></code></a><a class=\"headerlink\" href=\"#identityfeature\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.IdentityFeature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IdentityFeature</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.IdentityFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p>The features being extracted are the actual sequence\u2019s points. This is\nuseful for metric that does not require any pre-processing.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.IdentityFeature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.IdentityFeature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"midpointfeature\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.MidpointFeature\" title=\"dipy.segment.featurespeed.MidpointFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MidpointFeature</span></code></a><a class=\"headerlink\" href=\"#midpointfeature\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.MidpointFeature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MidpointFeature</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.MidpointFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p>The feature being extracted consists of one N-dimensional point representing\nthe middle point of the sequence (i.e. <a href=\"#id56\"><span class=\"problematic\" id=\"id57\">`</span></a>nb_points//2`th point).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.MidpointFeature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.MidpointFeature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id58\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.ResampleFeature\" title=\"dipy.segment.featurespeed.ResampleFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResampleFeature</span></code></a><a class=\"headerlink\" href=\"#id58\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.ResampleFeature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ResampleFeature</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.ResampleFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p>The features being extracted are the points of the sequence once resampled.\nThis is useful for metrics requiring a constant number of points for all</p>\n<blockquote>\n<div><p>streamlines.</p>\n</div></blockquote>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.ResampleFeature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.ResampleFeature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"vectorofendpointsfeature\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.VectorOfEndpointsFeature\" title=\"dipy.segment.featurespeed.VectorOfEndpointsFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">VectorOfEndpointsFeature</span></code></a><a class=\"headerlink\" href=\"#vectorofendpointsfeature\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.VectorOfEndpointsFeature\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">VectorOfEndpointsFeature</span></span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.VectorOfEndpointsFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\" title=\"dipy.segment.featurespeed.CythonFeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a></p>\n<p>Extracts features from a sequential datum.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p>The feature being extracted consists of one vector in the N-dimensional\nspace pointing from one end-point of the sequence to the other\n(i.e. <cite>S[-1]-S[0]</cite>).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this feature invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extract</span></code></p></td>\n<td><p>Extracts features from a sequential datum.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">infer_shape</span></code></p></td>\n<td><p>Infers the shape of features extracted from a sequential datum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.VectorOfEndpointsFeature.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.VectorOfEndpointsFeature.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"extract\">\n<h3>extract<a class=\"headerlink\" href=\"#extract\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.extract\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">extract</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.extract\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts features from data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object</span></dt><dd><p>Tells how to extract features from the data.</p>\n</dd>\n<dt><strong>datum</strong><span class=\"classifier\">list of 2D arrays</span></dt><dd><p>List of sequence of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>list of 2D arrays</dt><dd><p>List of features extracted from <cite>data</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"infer-shape\">\n<h3>infer_shape<a class=\"headerlink\" href=\"#infer-shape\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.featurespeed.infer_shape\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.featurespeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">infer_shape</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.featurespeed.infer_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Infers shape of the features extracted from data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object</span></dt><dd><p>Tells how to infer shape of the features.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">list of 2D arrays</span></dt><dd><p>List of sequences of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>list of tuples</dt><dd><p>Shapes of the features inferred from <cite>data</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"applymask\">\n<h3>applymask<a class=\"headerlink\" href=\"#applymask\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.applymask\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">applymask</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vol</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.applymask\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mask vol with mask.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vol</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array with <span class=\"math notranslate nohighlight\">\\(V\\)</span> dimensions</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Binary mask.  Has <span class=\"math notranslate nohighlight\">\\(M\\)</span> dimensions where <span class=\"math notranslate nohighlight\">\\(M &lt;= V\\)</span>. When <span class=\"math notranslate nohighlight\">\\(M &lt; V\\)</span>, we\nappend <span class=\"math notranslate nohighlight\">\\(V - M\\)</span> dimensions with axis length 1 to <cite>mask</cite> so that <cite>mask</cite>\nwill broadcast against <cite>vol</cite>.  In the typical case <cite>vol</cite> can be 4D,\n<cite>mask</cite> can be 3D, and we append a 1 to the mask shape which (via numpy\nbroadcasting) has the effect of appling the 3D mask to each 3D slice in\n<cite>vol</cite> (<code class=\"docutils literal notranslate\"><span class=\"pre\">vol[...,</span> <span class=\"pre\">0]</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">vol[...,</span> <span class=\"pre\">-1</span></code>).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>masked_vol</strong><span class=\"classifier\">ndarray</span></dt><dd><p><cite>vol</cite> multiplied by <cite>mask</cite> where <cite>mask</cite> may have been extended to match\nextra dimensions in <cite>vol</cite></p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"binary-dilation\">\n<h3>binary_dilation<a class=\"headerlink\" href=\"#binary-dilation\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.binary_dilation\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">binary_dilation</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">structure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">iterations</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">output</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">border_value</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">origin</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">brute_force</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.binary_dilation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multidimensional binary dilation with the given structuring element.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input</strong><span class=\"classifier\">array_like</span></dt><dd><p>Binary array_like to be dilated. Non-zero (True) elements form\nthe subset to be dilated.</p>\n</dd>\n<dt><strong>structure</strong><span class=\"classifier\">array_like, optional</span></dt><dd><p>Structuring element used for the dilation. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one.</p>\n</dd>\n<dt><strong>iterations</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The dilation is repeated <cite>iterations</cite> times (one, by default).\nIf iterations is less than 1, the dilation is repeated until the\nresult does not change anymore. Only an integer of iterations is\naccepted.</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">array_like, optional</span></dt><dd><p>If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.</p>\n</dd>\n<dt><strong>output</strong><span class=\"classifier\">ndarray, optional</span></dt><dd><p>Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.</p>\n</dd>\n<dt><strong>border_value</strong><span class=\"classifier\">int (cast to 0 or 1), optional</span></dt><dd><p>Value at the border in the output array.</p>\n</dd>\n<dt><strong>origin</strong><span class=\"classifier\">int or tuple of ints, optional</span></dt><dd><p>Placement of the filter, by default 0.</p>\n</dd>\n<dt><strong>brute_force</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated (dilated)\nin the current iteration; if True all pixels are considered as\ncandidates for dilation, regardless of what happened in the previous\niteration. False by default.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>binary_dilation</strong><span class=\"classifier\">ndarray of bools</span></dt><dd><p>Dilation of the input by the structuring element.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">grey_dilation</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_erosion</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_closing</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_opening</span></code></dt><dd></dd>\n<dt><a class=\"reference internal\" href=\"#dipy.segment.mask.generate_binary_structure\" title=\"dipy.segment.mask.generate_binary_structure\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generate_binary_structure</span></code></a></dt><dd></dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>Dilation <a class=\"reference internal\" href=\"#rb16be6b34ad7-1\" id=\"id59\">[1]</a> is a mathematical morphology operation <a class=\"reference internal\" href=\"#rb16be6b34ad7-2\" id=\"id60\">[2]</a> that uses a\nstructuring element for expanding the shapes in an image. The binary\ndilation of an image by a structuring element is the locus of the points\ncovered by the structuring element, when its center lies within the\nnon-zero points of the image.</p>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"rb16be6b34ad7-1\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id59\">1</a><span class=\"fn-bracket\">]</span></span>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Dilation_%28morphology%29\">https://en.wikipedia.org/wiki/Dilation_%28morphology%29</a></p>\n</div>\n<div class=\"citation\" id=\"rb16be6b34ad7-2\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id60\">2</a><span class=\"fn-bracket\">]</span></span>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Mathematical_morphology\">https://en.wikipedia.org/wiki/Mathematical_morphology</a></p>\n</div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"kn\">import</span> <span class=\"n\">ndimage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">array([[False, False, False, False, False],</span>\n<span class=\"go\">       [False, False,  True, False, False],</span>\n<span class=\"go\">       [False,  True,  True,  True, False],</span>\n<span class=\"go\">       [False, False,  True, False, False],</span>\n<span class=\"go\">       [False, False, False, False, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3x3 structuring element with connectivity 1, used by default</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct1</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct1</span>\n<span class=\"go\">array([[False,  True, False],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [False,  True, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3x3 structuring element with connectivity 2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct2</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct2</span>\n<span class=\"go\">array([[ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct1</span><span class=\"p\">,</span>\\\n<span class=\"gp\">... </span><span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 1.,  1.,  1.,  1.,  1.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"bounding-box\">\n<h3>bounding_box<a class=\"headerlink\" href=\"#bounding-box\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.bounding_box\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">bounding_box</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vol</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.bounding_box\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the bounding box of nonzero intensity voxels in the volume.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vol</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Volume to compute bounding box on.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>npmins</strong><span class=\"classifier\">list</span></dt><dd><p>Array containg minimum index of each dimension</p>\n</dd>\n<dt><strong>npmaxs</strong><span class=\"classifier\">list</span></dt><dd><p>Array containg maximum index of each dimension</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"clean-cc-mask\">\n<h3>clean_cc_mask<a class=\"headerlink\" href=\"#clean-cc-mask\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.clean_cc_mask\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">clean_cc_mask</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mask</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.clean_cc_mask\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Cleans a segmentation of the corpus callosum so no random pixels\nare included.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>mask</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Binary mask of the coarse segmentation.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_cc_mask</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Binary mask of the cleaned segmentation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"color-fa\">\n<h3>color_fa<a class=\"headerlink\" href=\"#color-fa\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.color_fa\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">color_fa</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">fa</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evecs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.color_fa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Color fractional anisotropy of diffusion tensor</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fa</strong><span class=\"classifier\">array-like</span></dt><dd><p>Array of the fractional anisotropy (can be 1D, 2D or 3D)</p>\n</dd>\n<dt><strong>evecs</strong><span class=\"classifier\">array-like</span></dt><dd><p>eigen vectors from the tensor model</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>rgb</strong><span class=\"classifier\">Array with 3 channels for each color as the last dimension.</span></dt><dd><p>Colormap of the FA with red for the x value, y for the green\nvalue and z for the blue value.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>It is computed from the clipped FA between 0 and 1 using the following\nformula</p>\n<div class=\"math notranslate nohighlight\">\n\\[rgb = abs(max(\\vec{e})) \\times fa\\]</div>\n</dd></dl>\n\n</section>\n<section id=\"crop\">\n<h3>crop<a class=\"headerlink\" href=\"#crop\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.crop\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">crop</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vol</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mins</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">maxs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.crop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Crops the input volume.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vol</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Volume to crop.</p>\n</dd>\n<dt><strong>mins</strong><span class=\"classifier\">array</span></dt><dd><p>Array containing minimum index of each dimension.</p>\n</dd>\n<dt><strong>maxs</strong><span class=\"classifier\">array</span></dt><dd><p>Array containing maximum index of each dimension.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>vol</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The cropped volume.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"fractional-anisotropy\">\n<h3>fractional_anisotropy<a class=\"headerlink\" href=\"#fractional-anisotropy\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.fractional_anisotropy\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">fractional_anisotropy</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">evals</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">axis</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">-1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.fractional_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return Fractional anisotropy (FA) of a diffusion tensor.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evals</strong><span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>fa</strong><span class=\"classifier\">array</span></dt><dd><p>Calculated FA. Range is 0 &lt;= FA &lt;= 1.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>FA is calculated using the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[FA = \\sqrt{\\frac{1}{2}\\frac{(\\lambda_1-\\lambda_2)^2+(\\lambda_1-\n            \\lambda_3)^2+(\\lambda_2-\\lambda_3)^2}{\\lambda_1^2+\n            \\lambda_2^2+\\lambda_3^2}}\\]</div>\n</dd></dl>\n\n</section>\n<section id=\"generate-binary-structure\">\n<h3>generate_binary_structure<a class=\"headerlink\" href=\"#generate-binary-structure\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.generate_binary_structure\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">generate_binary_structure</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rank</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">connectivity</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.generate_binary_structure\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate a binary structure for binary morphological operations.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>rank</strong><span class=\"classifier\">int</span></dt><dd><p>Number of dimensions of the array to which the structuring element\nwill be applied, as returned by <cite>np.ndim</cite>.</p>\n</dd>\n<dt><strong>connectivity</strong><span class=\"classifier\">int</span></dt><dd><p><cite>connectivity</cite> determines which elements of the output array belong\nto the structure, i.e., are considered as neighbors of the central\nelement. Elements up to a squared distance of <cite>connectivity</cite> from\nthe center are considered neighbors. <cite>connectivity</cite> may range from 1\n(no diagonal elements are neighbors) to <cite>rank</cite> (all elements are\nneighbors).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">ndarray of bools</span></dt><dd><p>Structuring element which may be used for binary morphological\noperations, with <cite>rank</cite> dimensions and all dimensions equal to 3.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">iterate_structure</span></code>, <a class=\"reference internal\" href=\"#dipy.segment.mask.binary_dilation\" title=\"dipy.segment.mask.binary_dilation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_dilation</span></code></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_erosion</span></code></dt><dd></dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p><cite>generate_binary_structure</cite> can only create structuring elements with\ndimensions equal to 3, i.e., minimal dimensions. For larger structuring\nelements, that are useful e.g., for eroding large objects, one may either\nuse <cite>iterate_structure</cite>, or create directly custom arrays with\nnumpy functions such as <cite>numpy.ones</cite>.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"kn\">import</span> <span class=\"n\">ndimage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct</span>\n<span class=\"go\">array([[False,  True, False],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [False,  True, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 1.,  1.,  1.,  1.,  1.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct</span>\n<span class=\"go\">array([[ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct</span> <span class=\"c1\"># no diagonal elements</span>\n<span class=\"go\">array([[[False, False, False],</span>\n<span class=\"go\">        [False,  True, False],</span>\n<span class=\"go\">        [False, False, False]],</span>\n<span class=\"go\">       [[False,  True, False],</span>\n<span class=\"go\">        [ True,  True,  True],</span>\n<span class=\"go\">        [False,  True, False]],</span>\n<span class=\"go\">       [[False, False, False],</span>\n<span class=\"go\">        [False,  True, False],</span>\n<span class=\"go\">        [False, False, False]]], dtype=bool)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"median-filter\">\n<h3>median_filter<a class=\"headerlink\" href=\"#median-filter\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.median_filter\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">median_filter</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">footprint</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">output</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mode</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'reflect'</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">cval</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">origin</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.median_filter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate a multidimensional median filter.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>input</strong><span class=\"classifier\">array_like</span></dt><dd><p>The input array.</p>\n</dd>\n<dt><strong>size</strong><span class=\"classifier\">scalar or tuple, optional</span></dt><dd><p>See footprint, below. Ignored if footprint is given.</p>\n</dd>\n<dt><strong>footprint</strong><span class=\"classifier\">array, optional</span></dt><dd><p>Either <cite>size</cite> or <cite>footprint</cite> must be defined. <cite>size</cite> gives\nthe shape that is taken from the input array, at every element\nposition, to define the input to the filter function.\n<cite>footprint</cite> is a boolean array that specifies (implicitly) a\nshape, but also which of the elements within this shape will get\npassed to the filter function. Thus <code class=\"docutils literal notranslate\"><span class=\"pre\">size=(n,m)</span></code> is equivalent\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">footprint=np.ones((n,m))</span></code>.  We adjust <cite>size</cite> to the number\nof dimensions of the input array, so that, if the input array is\nshape (10,10,10), and <cite>size</cite> is 2, then the actual size used is\n(2,2,2). When <cite>footprint</cite> is given, <cite>size</cite> is ignored.</p>\n</dd>\n<dt><strong>output</strong><span class=\"classifier\">array or dtype, optional</span></dt><dd><p>The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.</p>\n</dd>\n<dt><strong>mode</strong><span class=\"classifier\">{\u2018reflect\u2019, \u2018constant\u2019, \u2018nearest\u2019, \u2018mirror\u2019, \u2018wrap\u2019}, optional</span></dt><dd><p>The <cite>mode</cite> parameter determines how the input array is extended\nbeyond its boundaries. Default is \u2018reflect\u2019. Behavior for each valid\nvalue is as follows:</p>\n<dl class=\"simple\">\n<dt>\u2018reflect\u2019 (<cite>d c b a | a b c d | d c b a</cite>)</dt><dd><p>The input is extended by reflecting about the edge of the last\npixel. This mode is also sometimes referred to as half-sample\nsymmetric.</p>\n</dd>\n<dt>\u2018constant\u2019 (<cite>k k k k | a b c d | k k k k</cite>)</dt><dd><p>The input is extended by filling all values beyond the edge with\nthe same constant value, defined by the <cite>cval</cite> parameter.</p>\n</dd>\n<dt>\u2018nearest\u2019 (<cite>a a a a | a b c d | d d d d</cite>)</dt><dd><p>The input is extended by replicating the last pixel.</p>\n</dd>\n<dt>\u2018mirror\u2019 (<cite>d c b | a b c d | c b a</cite>)</dt><dd><p>The input is extended by reflecting about the center of the last\npixel. This mode is also sometimes referred to as whole-sample\nsymmetric.</p>\n</dd>\n<dt>\u2018wrap\u2019 (<cite>a b c d | a b c d | a b c d</cite>)</dt><dd><p>The input is extended by wrapping around to the opposite edge.</p>\n</dd>\n</dl>\n<p>For consistency with the interpolation functions, the following mode\nnames can also be used:</p>\n<dl class=\"simple\">\n<dt>\u2018grid-mirror\u2019</dt><dd><p>This is a synonym for \u2018reflect\u2019.</p>\n</dd>\n<dt>\u2018grid-constant\u2019</dt><dd><p>This is a synonym for \u2018constant\u2019.</p>\n</dd>\n<dt>\u2018grid-wrap\u2019</dt><dd><p>This is a synonym for \u2018wrap\u2019.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>cval</strong><span class=\"classifier\">scalar, optional</span></dt><dd><p>Value to fill past edges of input if <cite>mode</cite> is \u2018constant\u2019. Default\nis 0.0.</p>\n</dd>\n<dt><strong>origin</strong><span class=\"classifier\">int or sequence, optional</span></dt><dd><p>Controls the placement of the filter on the input array\u2019s pixels.\nA value of 0 (the default) centers the filter over the pixel, with\npositive values shifting the filter to the left, and negative ones\nto the right. By passing a sequence of origins with length equal to\nthe number of dimensions of the input array, different shifts can\nbe specified along each axis.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>median_filter</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Filtered array. Has the same shape as <cite>input</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">scipy.signal.medfilt2d</span></code></dt><dd></dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>For 2-dimensional images with <code class=\"docutils literal notranslate\"><span class=\"pre\">uint8</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float32</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">float64</span></code> dtypes\nthe specialised function <cite>scipy.signal.medfilt2d</cite> may be faster. It is\nhowever limited to constant mode with <code class=\"docutils literal notranslate\"><span class=\"pre\">cval=0</span></code>.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"kn\">import</span> <span class=\"n\">ndimage</span><span class=\"p\">,</span> <span class=\"n\">datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">()</span>  <span class=\"c1\"># show the filtered result in grayscale</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ax1</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">121</span><span class=\"p\">)</span>  <span class=\"c1\"># left side</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ax2</span> <span class=\"o\">=</span> <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">add_subplot</span><span class=\"p\">(</span><span class=\"mi\">122</span><span class=\"p\">)</span>  <span class=\"c1\"># right side</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ascent</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">ascent</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">median_filter</span><span class=\"p\">(</span><span class=\"n\">ascent</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ax1</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">ascent</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ax2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"median-otsu\">\n<h3>median_otsu<a class=\"headerlink\" href=\"#median-otsu\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.median_otsu\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">median_otsu</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input_volume</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">vol_idx</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">median_radius</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">numpass</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">4</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">autocrop</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">dilate</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.median_otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Simple brain extraction tool method for images from DWI data.</p>\n<p>It uses a median filter smoothing of the input_volumes <cite>vol_idx</cite> and an\nautomatic histogram Otsu thresholding technique, hence the name\n<em>median_otsu</em>.</p>\n<p>This function is inspired from Mrtrix\u2019s bet which has default values\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=3</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=2</span></code>. However, from tests on multiple 1.5T\nand 3T data     from GE, Philips, Siemens, the most robust choice is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=4</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=4</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_volume</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D or 4D array of the brain volume.</p>\n</dd>\n<dt><strong>vol_idx</strong><span class=\"classifier\">None or array, optional.</span></dt><dd><p>1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite>.\nNone is only an acceptable input if <code class=\"docutils literal notranslate\"><span class=\"pre\">input_volume</span></code> is 3D.</p>\n</dd>\n<dt><strong>median_radius</strong><span class=\"classifier\">int</span></dt><dd><p>Radius (in voxels) of the applied median filter (default: 4).</p>\n</dd>\n<dt><strong>numpass: int</strong></dt><dd><p>Number of pass of the median filter (default: 4).</p>\n</dd>\n<dt><strong>autocrop: bool, optional</strong></dt><dd><p>if True, the masked input_volume will also be cropped using the\nbounding box defined by the masked data. Should be on if DWI is\nupsampled to 1x1x1 resolution. (default: False).</p>\n</dd>\n<dt><strong>dilate</strong><span class=\"classifier\">None or int, optional</span></dt><dd><p>number of iterations for binary dilation</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>maskedvolume</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Masked input_volume</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>The binary brain mask</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Copyright (C) 2011, the scikit-image team\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</p></li>\n<li><p>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</p></li>\n<li><p>Neither the name of skimage nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.</p></li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id63\"><span class=\"problematic\" id=\"id64\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n</dd></dl>\n\n</section>\n<section id=\"multi-median\">\n<h3>multi_median<a class=\"headerlink\" href=\"#multi-median\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.multi_median\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">multi_median</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">median_radius</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">numpass</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.multi_median\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies median filter multiple times on input data.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The input volume to apply filter on.</p>\n</dd>\n<dt><strong>median_radius</strong><span class=\"classifier\">int</span></dt><dd><p>Radius (in voxels) of the applied median filter</p>\n</dd>\n<dt><strong>numpass: int</strong></dt><dd><p>Number of pass of the median filter</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Filtered input volume.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"otsu\">\n<h3>otsu<a class=\"headerlink\" href=\"#otsu\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.otsu\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">otsu</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nbins</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">256</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">hist</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return threshold value based on Otsu\u2019s method.</p>\n<p>Either image or hist must be provided. If hist is provided, the actual\nhistogram of the image is ignored.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">(N, M[, \u2026, P]) ndarray, optional</span></dt><dd><p>Grayscale input image.</p>\n</dd>\n<dt><strong>nbins</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of bins used to calculate histogram. This value is ignored for\ninteger arrays.</p>\n</dd>\n<dt><strong>hist</strong><span class=\"classifier\">array, or 2-tuple of arrays, optional</span></dt><dd><p>Histogram from which to determine the threshold, and optionally a\ncorresponding array of bin center intensities. If no hist provided,\nthis function will compute it from the image.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>threshold</strong><span class=\"classifier\">float</span></dt><dd><p>Upper threshold value. All pixels with an intensity higher than\nthis value are assumed to be foreground.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The input image must be grayscale.</p>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r5dc2cb558a94-1\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>1<span class=\"fn-bracket\">]</span></span>\n<p>Wikipedia, <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Otsu's_Method\">https://en.wikipedia.org/wiki/Otsu\u2019s_Method</a></p>\n</div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">skimage.data</span> <span class=\"kn\">import</span> <span class=\"n\">camera</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">camera</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">thresh</span> <span class=\"o\">=</span> <span class=\"n\">threshold_otsu</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">binary</span> <span class=\"o\">=</span> <span class=\"n\">image</span> <span class=\"o\">&lt;=</span> <span class=\"n\">thresh</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"segment-from-cfa\">\n<h3>segment_from_cfa<a class=\"headerlink\" href=\"#segment-from-cfa\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.segment_from_cfa\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">segment_from_cfa</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tensor_fit</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">roi</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">threshold</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">return_cfa</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.segment_from_cfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Segment the cfa inside roi using the values from threshold as bounds.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>tensor_fit</strong><span class=\"classifier\">TensorFit object</span></dt><dd><p>TensorFit object</p>\n</dd>\n<dt><strong>roi</strong><span class=\"classifier\">ndarray</span></dt><dd><p>A binary mask, which contains the bounding box for the segmentation.</p>\n</dd>\n<dt><strong>threshold</strong><span class=\"classifier\">array-like</span></dt><dd><p>An iterable that defines the min and max values to use for the\nthresholding.\nThe values are specified as (R_min, R_max, G_min, G_max, B_min, B_max)</p>\n</dd>\n<dt><strong>return_cfa</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, the cfa is also returned.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mask</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Binary mask of the segmentation.</p>\n</dd>\n<dt><strong>cfa</strong><span class=\"classifier\">ndarray, optional</span></dt><dd><p>Array with shape = (\u2026, 3), where \u2026 is the shape of tensor_fit.\nThe color fractional anisotropy, ordered as a nd array with the last\ndimension of size 3 for the R, G and B channels.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"warn\">\n<h3>warn<a class=\"headerlink\" href=\"#warn\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mask.warn\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mask.</span></span><span class=\"sig-name descname\"><span class=\"pre\">warn</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">/</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">message</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">category=None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">stacklevel=1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">source=None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mask.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</section>\n<section id=\"id66\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metric.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.metric.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><a class=\"headerlink\" href=\"#id66\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.AveragePointwiseEuclideanMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metric.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.AveragePointwiseEuclideanMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a></p>\n<p>Computes the average of pointwise Euclidean distances between two\nsequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between the features, rather than\ndirectly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two 2D sequential data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">s1</span>       <span class=\"n\">s2</span>\n\n<span class=\"mi\">0</span><span class=\"o\">*</span>   <span class=\"n\">a</span>    <span class=\"o\">*</span><span class=\"mi\">0</span>\n  \\       <span class=\"o\">|</span>\n   \\      <span class=\"o\">|</span>\n   <span class=\"mi\">1</span><span class=\"o\">*</span>     <span class=\"o\">|</span>\n    <span class=\"o\">|</span>  <span class=\"n\">b</span>  <span class=\"o\">*</span><span class=\"mi\">1</span>\n    <span class=\"o\">|</span>      \\\n    <span class=\"mi\">2</span><span class=\"o\">*</span>      \\\n        <span class=\"n\">c</span>    <span class=\"o\">*</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>is equal to <span class=\"math notranslate nohighlight\">\\((a+b+c)/3\\)</span> where <span class=\"math notranslate nohighlight\">\\(a\\)</span> is the Euclidean distance between s1[0] and\ns2[0], <span class=\"math notranslate nohighlight\">\\(b\\)</span> between s1[1] and s2[1] and <span class=\"math notranslate nohighlight\">\\(c\\)</span> between s1[2] and s2[2].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.AveragePointwiseEuclideanMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.AveragePointwiseEuclideanMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"cosinemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metric.CosineMetric\" title=\"dipy.segment.metric.CosineMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CosineMetric</span></code></a><a class=\"headerlink\" href=\"#cosinemetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.CosineMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metric.</span></span><span class=\"sig-name descname\"><span class=\"pre\">CosineMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.CosineMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric\" title=\"dipy.segment.metricspeed.CythonMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonMetric</span></code></a></p>\n<p>Computes the cosine distance between two vectors.</p>\n<p>A vector (i.e. a N-dimensional point) is represented as a 2D array with\nshape (1, nb_dimensions).</p>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two vectors <span class=\"math notranslate nohighlight\">\\(v_1\\)</span> and <span class=\"math notranslate nohighlight\">\\(v_2\\)</span> is equal to\n<span class=\"math notranslate nohighlight\">\\(\\frac{1}{\\pi} \\arccos\\left(\\frac{v_1 \\cdot v_2}{\\|v_1\\| \\|v_2\\|}\\right)\\)</span>\nand is bounded within <span class=\"math notranslate nohighlight\">\\([0,1]\\)</span>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.CosineMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.CosineMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"euclideanmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metric.EuclideanMetric\" title=\"dipy.segment.metric.EuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EuclideanMetric</span></code></a><a class=\"headerlink\" href=\"#euclideanmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.EuclideanMetric\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metric.</span></span><span class=\"sig-name descname\"><span class=\"pre\">EuclideanMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.EuclideanMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a></p>\n</dd></dl>\n\n</section>\n<section id=\"id67\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric\" title=\"dipy.segment.metric.Metric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><a class=\"headerlink\" href=\"#id67\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.Metric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metric.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Metric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.Metric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Computes a distance between two sequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between extracted features, rather\nthan directly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>When subclassing <cite>Metric</cite>, one only needs to override the <cite>dist</cite> and\n<cite>are_compatible</cite> methods.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.feature\" title=\"dipy.segment.metric.Metric.feature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></a></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.is_order_invariant\" title=\"dipy.segment.metric.Metric.is_order_invariant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></a></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.are_compatible\" title=\"dipy.segment.metric.Metric.are_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></a></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.dist\" title=\"dipy.segment.metric.Metric.dist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></a></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.Metric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.Metric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.Metric.are_compatible\">\n<span class=\"sig-name descname\"><span class=\"pre\">are_compatible</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.Metric.are_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p>\n<p>Basically this method exists so we don\u2019t have to do this check\ninside the <cite>metric.dist</cite> function (speedup).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>shape1</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the first data point\u2019s features</p>\n</dd>\n<dt><strong>shape2</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the second data point\u2019s features</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>are_compatible</strong><span class=\"classifier\">bool</span></dt><dd><p>whether or not shapes are compatible</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.Metric.dist\">\n<span class=\"sig-name descname\"><span class=\"pre\">dist</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.Metric.dist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes a distance between two data points based on their features.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>features1</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the first data point.</p>\n</dd>\n<dt><strong>features2</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the second data point.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two data points.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.Metric.feature\">\n<span class=\"sig-name descname\"><span class=\"pre\">feature</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.Metric.feature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.Metric.is_order_invariant\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_order_invariant</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.Metric.is_order_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id68\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric\" title=\"dipy.segment.metric.MinimumAverageDirectFlipMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><a class=\"headerlink\" href=\"#id68\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.MinimumAverageDirectFlipMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metric.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a></p>\n<p>Computes the MDF distance (minimum average direct-flip) between two\nsequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two 2D sequential data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">s1</span>       <span class=\"n\">s2</span>\n\n<span class=\"mi\">0</span><span class=\"o\">*</span>   <span class=\"n\">a</span>    <span class=\"o\">*</span><span class=\"mi\">0</span>\n  \\       <span class=\"o\">|</span>\n   \\      <span class=\"o\">|</span>\n   <span class=\"mi\">1</span><span class=\"o\">*</span>     <span class=\"o\">|</span>\n    <span class=\"o\">|</span>  <span class=\"n\">b</span>  <span class=\"o\">*</span><span class=\"mi\">1</span>\n    <span class=\"o\">|</span>      \\\n    <span class=\"mi\">2</span><span class=\"o\">*</span>      \\\n        <span class=\"n\">c</span>    <span class=\"o\">*</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>is equal to <span class=\"math notranslate nohighlight\">\\(\\min((a+b+c)/3, (a'+b'+c')/3)\\)</span> where <span class=\"math notranslate nohighlight\">\\(a\\)</span> is the Euclidean distance\nbetween s1[0] and s2[0], <span class=\"math notranslate nohighlight\">\\(b\\)</span> between s1[1] and s2[1], <span class=\"math notranslate nohighlight\">\\(c\\)</span> between s1[2]\nand s2[2], <span class=\"math notranslate nohighlight\">\\(a'\\)</span> between s1[0] and s2[2], <span class=\"math notranslate nohighlight\">\\(b'\\)</span> between s1[1] and s2[1]\nand <span class=\"math notranslate nohighlight\">\\(c'\\)</span> between s1[2] and s2[0].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric.is_order_invariant\" title=\"dipy.segment.metric.MinimumAverageDirectFlipMetric.is_order_invariant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></a></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.MinimumAverageDirectFlipMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.MinimumAverageDirectFlipMetric.is_order_invariant\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_order_invariant</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric.is_order_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"sumpointwiseeuclideanmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metric.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metric.SumPointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a><a class=\"headerlink\" href=\"#sumpointwiseeuclideanmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.SumPointwiseEuclideanMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metric.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metric.SumPointwiseEuclideanMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric\" title=\"dipy.segment.metricspeed.CythonMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonMetric</span></code></a></p>\n<p>Computes the sum of pointwise Euclidean distances between two\nsequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between the features, rather than\ndirectly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two 2D sequential data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">s1</span>       <span class=\"n\">s2</span>\n\n<span class=\"mi\">0</span><span class=\"o\">*</span>   <span class=\"n\">a</span>    <span class=\"o\">*</span><span class=\"mi\">0</span>\n  \\       <span class=\"o\">|</span>\n   \\      <span class=\"o\">|</span>\n   <span class=\"mi\">1</span><span class=\"o\">*</span>     <span class=\"o\">|</span>\n    <span class=\"o\">|</span>  <span class=\"n\">b</span>  <span class=\"o\">*</span><span class=\"mi\">1</span>\n    <span class=\"o\">|</span>      \\\n    <span class=\"mi\">2</span><span class=\"o\">*</span>      \\\n        <span class=\"n\">c</span>    <span class=\"o\">*</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>is equal to <span class=\"math notranslate nohighlight\">\\(a+b+c\\)</span> where <span class=\"math notranslate nohighlight\">\\(a\\)</span> is the Euclidean distance between s1[0] and\ns2[0], <span class=\"math notranslate nohighlight\">\\(b\\)</span> between s1[1] and s2[1] and <span class=\"math notranslate nohighlight\">\\(c\\)</span> between s1[2] and s2[2].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.SumPointwiseEuclideanMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.SumPointwiseEuclideanMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"dist\">\n<h3>dist<a class=\"headerlink\" href=\"#dist\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.dist\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metric.</span></span><span class=\"sig-name descname\"><span class=\"pre\">dist</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.dist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes a distance between <cite>datum1</cite> and <cite>datum2</cite>.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\"><cite>Metric</cite> object</span></dt><dd><p>Tells how to compute the distance between <cite>datum1</cite> and <cite>datum2</cite>.</p>\n</dd>\n<dt><strong>datum1</strong><span class=\"classifier\">2D array</span></dt><dd><p>Sequence of N-dimensional points.</p>\n</dd>\n<dt><strong>datum2</strong><span class=\"classifier\">2D array</span></dt><dd><p>Sequence of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two data points.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"mdf\">\n<h3>mdf<a class=\"headerlink\" href=\"#mdf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metric.mdf\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metric.</span></span><span class=\"sig-name descname\"><span class=\"pre\">mdf</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s1</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">s2</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metric.mdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the MDF (Minimum average Direct-Flip) distance\n<a class=\"reference internal\" href=\"#r9ec92ef08bd1-garyfallidis12\" id=\"id69\">[Garyfallidis12]</a> between two streamlines.</p>\n<p>Streamlines must have the same number of points.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>s1</strong><span class=\"classifier\">2D array</span></dt><dd><p>A streamline (sequence of N-dimensional points).</p>\n</dd>\n<dt><strong>s2</strong><span class=\"classifier\">2D array</span></dt><dd><p>A streamline (sequence of N-dimensional points).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two streamlines.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r9ec92ef08bd1-garyfallidis12\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span>Garyfallidis12<span class=\"fn-bracket\">]</span></span>\n<span class=\"backrefs\">(<a role=\"doc-backlink\" href=\"#id4\">1</a>,<a role=\"doc-backlink\" href=\"#id69\">2</a>)</span>\n<p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</div>\n</div>\n</dd></dl>\n\n</section>\n<section id=\"id71\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><a class=\"headerlink\" href=\"#id71\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metricspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a></p>\n<p>Computes the average of pointwise Euclidean distances between two\nsequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between the features, rather than\ndirectly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two 2D sequential data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">s1</span>       <span class=\"n\">s2</span>\n\n<span class=\"mi\">0</span><span class=\"o\">*</span>   <span class=\"n\">a</span>    <span class=\"o\">*</span><span class=\"mi\">0</span>\n  \\       <span class=\"o\">|</span>\n   \\      <span class=\"o\">|</span>\n   <span class=\"mi\">1</span><span class=\"o\">*</span>     <span class=\"o\">|</span>\n    <span class=\"o\">|</span>  <span class=\"n\">b</span>  <span class=\"o\">*</span><span class=\"mi\">1</span>\n    <span class=\"o\">|</span>      \\\n    <span class=\"mi\">2</span><span class=\"o\">*</span>      \\\n        <span class=\"n\">c</span>    <span class=\"o\">*</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>is equal to <span class=\"math notranslate nohighlight\">\\((a+b+c)/3\\)</span> where <span class=\"math notranslate nohighlight\">\\(a\\)</span> is the Euclidean distance between s1[0] and\ns2[0], <span class=\"math notranslate nohighlight\">\\(b\\)</span> between s1[1] and s2[1] and <span class=\"math notranslate nohighlight\">\\(c\\)</span> between s1[2] and s2[2].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.AveragePointwiseEuclideanMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id72\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CosineMetric\" title=\"dipy.segment.metricspeed.CosineMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CosineMetric</span></code></a><a class=\"headerlink\" href=\"#id72\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.CosineMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metricspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">CosineMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.CosineMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric\" title=\"dipy.segment.metricspeed.CythonMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonMetric</span></code></a></p>\n<p>Computes the cosine distance between two vectors.</p>\n<p>A vector (i.e. a N-dimensional point) is represented as a 2D array with\nshape (1, nb_dimensions).</p>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two vectors <span class=\"math notranslate nohighlight\">\\(v_1\\)</span> and <span class=\"math notranslate nohighlight\">\\(v_2\\)</span> is equal to\n<span class=\"math notranslate nohighlight\">\\(\\frac{1}{\\pi} \\arccos\\left(\\frac{v_1 \\cdot v_2}{\\|v_1\\| \\|v_2\\|}\\right)\\)</span>\nand is bounded within <span class=\"math notranslate nohighlight\">\\([0,1]\\)</span>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.CosineMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.CosineMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"cythonmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric\" title=\"dipy.segment.metricspeed.CythonMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonMetric</span></code></a><a class=\"headerlink\" href=\"#cythonmetric\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.CythonMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metricspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">CythonMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.CythonMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric\" title=\"dipy.segment.metricspeed.Metric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a></p>\n<p>Computes a distance between two sequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between extracted features, rather\nthan directly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>When subclassing <cite>CythonMetric</cite>, one only needs to override the <cite>c_dist</cite> and\n<cite>c_are_compatible</cite> methods.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric.are_compatible\" title=\"dipy.segment.metricspeed.CythonMetric.are_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></a></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric.dist\" title=\"dipy.segment.metricspeed.CythonMetric.dist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></a></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.CythonMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.CythonMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.CythonMetric.are_compatible\">\n<span class=\"sig-name descname\"><span class=\"pre\">are_compatible</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.CythonMetric.are_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p>\n<p>Basically this method exists so we don\u2019t have to do this check\ninside method <cite>dist</cite> (speedup).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>shape1</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>Shape of the first data point\u2019s features.</p>\n</dd>\n<dt><strong>shape2</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>Shape of the second data point\u2019s features.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>bool</dt><dd><p>Whether or not shapes are compatible.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This method calls its Cython version <cite>self.c_are_compatible</cite> accordingly.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.CythonMetric.dist\">\n<span class=\"sig-name descname\"><span class=\"pre\">dist</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.CythonMetric.dist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes a distance between two data points based on their features.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>features1</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the first data point.</p>\n</dd>\n<dt><strong>features2</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the second data point.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two data points.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This method calls its Cython version <cite>self.c_dist</cite> accordingly.</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id73\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric\" title=\"dipy.segment.metricspeed.Metric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><a class=\"headerlink\" href=\"#id73\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.Metric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metricspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">Metric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.Metric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Computes a distance between two sequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between extracted features, rather\nthan directly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>When subclassing <cite>Metric</cite>, one only needs to override the <cite>dist</cite> and\n<cite>are_compatible</cite> methods.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.feature\" title=\"dipy.segment.metricspeed.Metric.feature\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></a></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.is_order_invariant\" title=\"dipy.segment.metricspeed.Metric.is_order_invariant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></a></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.are_compatible\" title=\"dipy.segment.metricspeed.Metric.are_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></a></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.dist\" title=\"dipy.segment.metricspeed.Metric.dist\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></a></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.Metric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.Metric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.Metric.are_compatible\">\n<span class=\"sig-name descname\"><span class=\"pre\">are_compatible</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.Metric.are_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p>\n<p>Basically this method exists so we don\u2019t have to do this check\ninside the <cite>metric.dist</cite> function (speedup).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>shape1</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the first data point\u2019s features</p>\n</dd>\n<dt><strong>shape2</strong><span class=\"classifier\">int, 1-tuple or 2-tuple</span></dt><dd><p>shape of the second data point\u2019s features</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>are_compatible</strong><span class=\"classifier\">bool</span></dt><dd><p>whether or not shapes are compatible</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.Metric.dist\">\n<span class=\"sig-name descname\"><span class=\"pre\">dist</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.Metric.dist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes a distance between two data points based on their features.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>features1</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the first data point.</p>\n</dd>\n<dt><strong>features2</strong><span class=\"classifier\">2D array</span></dt><dd><p>Features of the second data point.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two data points.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.Metric.feature\">\n<span class=\"sig-name descname\"><span class=\"pre\">feature</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.Metric.feature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.Metric.is_order_invariant\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_order_invariant</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.Metric.is_order_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id74\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric\" title=\"dipy.segment.metricspeed.MinimumAverageDirectFlipMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><a class=\"headerlink\" href=\"#id74\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.MinimumAverageDirectFlipMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metricspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a></p>\n<p>Computes the MDF distance (minimum average direct-flip) between two\nsequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two 2D sequential data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">s1</span>       <span class=\"n\">s2</span>\n\n<span class=\"mi\">0</span><span class=\"o\">*</span>   <span class=\"n\">a</span>    <span class=\"o\">*</span><span class=\"mi\">0</span>\n  \\       <span class=\"o\">|</span>\n   \\      <span class=\"o\">|</span>\n   <span class=\"mi\">1</span><span class=\"o\">*</span>     <span class=\"o\">|</span>\n    <span class=\"o\">|</span>  <span class=\"n\">b</span>  <span class=\"o\">*</span><span class=\"mi\">1</span>\n    <span class=\"o\">|</span>      \\\n    <span class=\"mi\">2</span><span class=\"o\">*</span>      \\\n        <span class=\"n\">c</span>    <span class=\"o\">*</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>is equal to <span class=\"math notranslate nohighlight\">\\(\\min((a+b+c)/3, (a'+b'+c')/3)\\)</span> where <span class=\"math notranslate nohighlight\">\\(a\\)</span> is the Euclidean distance\nbetween s1[0] and s2[0], <span class=\"math notranslate nohighlight\">\\(b\\)</span> between s1[1] and s2[1], <span class=\"math notranslate nohighlight\">\\(c\\)</span> between s1[2]\nand s2[2], <span class=\"math notranslate nohighlight\">\\(a'\\)</span> between s1[0] and s2[2], <span class=\"math notranslate nohighlight\">\\(b'\\)</span> between s1[1] and s2[1]\nand <span class=\"math notranslate nohighlight\">\\(c'\\)</span> between s1[2] and s2[0].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric.is_order_invariant\" title=\"dipy.segment.metricspeed.MinimumAverageDirectFlipMetric.is_order_invariant\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></a></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.MinimumAverageDirectFlipMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.MinimumAverageDirectFlipMetric.is_order_invariant\">\n<span class=\"sig-name descname\"><span class=\"pre\">is_order_invariant</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric.is_order_invariant\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id75\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\" title=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a><a class=\"headerlink\" href=\"#id75\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metricspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric\" title=\"dipy.segment.metricspeed.CythonMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonMetric</span></code></a></p>\n<p>Computes the sum of pointwise Euclidean distances between two\nsequential data.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions). A <cite>feature</cite> object can be specified\nin order to calculate the distance between the features, rather than\ndirectly between the sequential data.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>feature</strong><span class=\"classifier\"><cite>Feature</cite> object, optional</span></dt><dd><p>It is used to extract features before computing the distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The distance between two 2D sequential data:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">s1</span>       <span class=\"n\">s2</span>\n\n<span class=\"mi\">0</span><span class=\"o\">*</span>   <span class=\"n\">a</span>    <span class=\"o\">*</span><span class=\"mi\">0</span>\n  \\       <span class=\"o\">|</span>\n   \\      <span class=\"o\">|</span>\n   <span class=\"mi\">1</span><span class=\"o\">*</span>     <span class=\"o\">|</span>\n    <span class=\"o\">|</span>  <span class=\"n\">b</span>  <span class=\"o\">*</span><span class=\"mi\">1</span>\n    <span class=\"o\">|</span>      \\\n    <span class=\"mi\">2</span><span class=\"o\">*</span>      \\\n        <span class=\"n\">c</span>    <span class=\"o\">*</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>is equal to <span class=\"math notranslate nohighlight\">\\(a+b+c\\)</span> where <span class=\"math notranslate nohighlight\">\\(a\\)</span> is the Euclidean distance between s1[0] and\ns2[0], <span class=\"math notranslate nohighlight\">\\(b\\)</span> between s1[1] and s2[1] and <span class=\"math notranslate nohighlight\">\\(c\\)</span> between s1[2] and s2[2].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">feature</span></code></dt><dd><p><cite>Feature</cite> object used to extract features from sequential data</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_order_invariant</span></code></dt><dd><p>Is this metric invariant to the sequence\u2019s ordering</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></p></td>\n<td><p>Checks if features can be used by <cite>metric.dist</cite> based on their shape.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist</span></code></p></td>\n<td><p>Computes a distance between two data points based on their features.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.SumPointwiseEuclideanMetric.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em class=\"sig-param\"><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id76\">\n<h3>dist<a class=\"headerlink\" href=\"#id76\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.dist\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metricspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">dist</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.dist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes a distance between <cite>datum1</cite> and <cite>datum2</cite>.</p>\n<p>A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\"><cite>Metric</cite> object</span></dt><dd><p>Tells how to compute the distance between <cite>datum1</cite> and <cite>datum2</cite>.</p>\n</dd>\n<dt><strong>datum1</strong><span class=\"classifier\">2D array</span></dt><dd><p>Sequence of N-dimensional points.</p>\n</dd>\n<dt><strong>datum2</strong><span class=\"classifier\">2D array</span></dt><dd><p>Sequence of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>double</dt><dd><p>Distance between two data points.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"distance-matrix\">\n<h3>distance_matrix<a class=\"headerlink\" href=\"#distance-matrix\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.metricspeed.distance_matrix\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.metricspeed.</span></span><span class=\"sig-name descname\"><span class=\"pre\">distance_matrix</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.metricspeed.distance_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the distance matrix between two lists of sequential data.</p>\n<p>The distance matrix is obtained by computing the pairwise distance of all\ntuples spawn by the Cartesian product of <cite>data1</cite> with <cite>data2</cite>. If <cite>data2</cite>\nis not provided, the Cartesian product of <cite>data1</cite> with itself is used\ninstead. A sequence of N-dimensional points is represented as a 2D array with\nshape (nb_points, nb_dimensions).</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\"><cite>Metric</cite> object</span></dt><dd><p>Tells how to compute the distance between two sequential data.</p>\n</dd>\n<dt><strong>data1</strong><span class=\"classifier\">list of 2D arrays</span></dt><dd><p>List of sequences of N-dimensional points.</p>\n</dd>\n<dt><strong>data2</strong><span class=\"classifier\">list of 2D arrays</span></dt><dd><p>Llist of sequences of N-dimensional points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>2D array (double)</dt><dd><p>Distance matrix.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"constantobservationmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel\" title=\"dipy.segment.mrf.ConstantObservationModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel</span></code></a><a class=\"headerlink\" href=\"#constantobservationmodel\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.ConstantObservationModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mrf.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ConstantObservationModel</span></span><a class=\"headerlink\" href=\"#dipy.segment.mrf.ConstantObservationModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Observation model assuming that the intensity of each class is constant.\nThe model parameters are the means <span class=\"math notranslate nohighlight\">\\(\\mu_{k}\\)</span> and variances <span class=\"math notranslate nohighlight\">\\(\\sigma_{k}\\)</span>\nassociated with each tissue class. According to this model, the observed\nintensity at voxel <span class=\"math notranslate nohighlight\">\\(x\\)</span> is given by <span class=\"math notranslate nohighlight\">\\(I(x) = \\mu_{k} + \\eta_{k}\\)</span> where <span class=\"math notranslate nohighlight\">\\(k\\)</span>\nis the tissue class of voxel <span class=\"math notranslate nohighlight\">\\(x\\)</span>, and <span class=\"math notranslate nohighlight\">\\(\\eta_{k}\\)</span> is a Gaussian random\nvariable with zero mean and variance <span class=\"math notranslate nohighlight\">\\(\\sigma_{k}^{2}\\)</span>. The observation\nmodel is responsible for computing the negative log-likelihood of\nobserving any given intensity <span class=\"math notranslate nohighlight\">\\(z\\)</span> at each voxel <span class=\"math notranslate nohighlight\">\\(x\\)</span> assuming the voxel\nbelongs to each class <span class=\"math notranslate nohighlight\">\\(k\\)</span>. It also provides a default parameter\ninitialization.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.initialize_param_uniform\" title=\"dipy.segment.mrf.ConstantObservationModel.initialize_param_uniform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_param_uniform</span></code></a>(image,\u00a0nclasses)</p></td>\n<td><p>Initializes the means and variances uniformly</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.negloglikelihood\" title=\"dipy.segment.mrf.ConstantObservationModel.negloglikelihood\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">negloglikelihood</span></code></a>(image,\u00a0mu,\u00a0sigmasq,\u00a0nclasses)</p></td>\n<td><p>Computes the gaussian negative log-likelihood of each class at each voxel of <cite>image</cite> assuming a gaussian distribution with means and variances given by <cite>mu</cite> and <cite>sigmasq</cite>, respectively (constant models along the full volume).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.prob_image\" title=\"dipy.segment.mrf.ConstantObservationModel.prob_image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">prob_image</span></code></a>(img,\u00a0nclasses,\u00a0mu,\u00a0sigmasq,\u00a0P_L_N)</p></td>\n<td><p>Conditional probability of the label given the image</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.seg_stats\" title=\"dipy.segment.mrf.ConstantObservationModel.seg_stats\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">seg_stats</span></code></a>(input_image,\u00a0seg_image,\u00a0nclass)</p></td>\n<td><p>Mean and standard variation for N desired  tissue classes</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.update_param\" title=\"dipy.segment.mrf.ConstantObservationModel.update_param\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_param</span></code></a>(image,\u00a0P_L_Y,\u00a0mu,\u00a0nclasses)</p></td>\n<td><p>Updates the means and the variances in each iteration for all the labels.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.ConstantObservationModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.ConstantObservationModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes an instance of the ConstantObservationModel class</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.ConstantObservationModel.initialize_param_uniform\">\n<span class=\"sig-name descname\"><span class=\"pre\">initialize_param_uniform</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.ConstantObservationModel.initialize_param_uniform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes the means and variances uniformly</p>\n<p>The means are initialized uniformly along the dynamic range of\n<cite>image</cite>. The variances are set to 1 for all classes</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array</span></dt><dd><p>3D structural image</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of desired classes</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mu</strong><span class=\"classifier\">array</span></dt><dd><p>1 x nclasses, mean for each class</p>\n</dd>\n<dt><strong>sigma</strong><span class=\"classifier\">array</span></dt><dd><p>1 x nclasses, standard deviation for each class.\nSet up to 1.0 for all classes.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.ConstantObservationModel.negloglikelihood\">\n<span class=\"sig-name descname\"><span class=\"pre\">negloglikelihood</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmasq</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.ConstantObservationModel.negloglikelihood\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the gaussian negative log-likelihood of each class at\neach voxel of <cite>image</cite> assuming a gaussian distribution with means and\nvariances given by <cite>mu</cite> and <cite>sigmasq</cite>, respectively (constant models\nalong the full volume). The negative log-likelihood will be written\nin <cite>nloglike</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D gray scale structural image</p>\n</dd>\n<dt><strong>mu</strong><span class=\"classifier\">ndarray</span></dt><dd><p>mean of each class</p>\n</dd>\n<dt><strong>sigmasq</strong><span class=\"classifier\">ndarray</span></dt><dd><p>variance of each class</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of classes</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>nloglike</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D negloglikelihood for each class in each volume</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.ConstantObservationModel.prob_image\">\n<span class=\"sig-name descname\"><span class=\"pre\">prob_image</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">img</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmasq</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">P_L_N</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.ConstantObservationModel.prob_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Conditional probability of the label given the image</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>img</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D structural gray-scale image</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of tissue classes</p>\n</dd>\n<dt><strong>mu</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, current estimate of the mean of each tissue class</p>\n</dd>\n<dt><strong>sigmasq</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, current estimate of the variance of each\ntissue class</p>\n</dd>\n<dt><strong>P_L_N</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D probability map of the label given the neighborhood.</p>\n</dd>\n<dt><strong>Previously computed by function prob_neighborhood</strong></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>P_L_Y</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D probability of the label given the input image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.ConstantObservationModel.seg_stats\">\n<span class=\"sig-name descname\"><span class=\"pre\">seg_stats</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seg_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclass</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.ConstantObservationModel.seg_stats\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean and standard variation for N desired  tissue classes</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_image</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D structural image</p>\n</dd>\n<dt><strong>seg_image</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D segmented image</p>\n</dd>\n<dt><strong>nclass</strong><span class=\"classifier\">int</span></dt><dd><p>number of classes (3 in most cases)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mu, var</strong><span class=\"classifier\">ndarrays</span></dt><dd><p>1 x nclasses dimension\nMean and variance for each class</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.ConstantObservationModel.update_param\">\n<span class=\"sig-name descname\"><span class=\"pre\">update_param</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">P_L_Y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.ConstantObservationModel.update_param\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Updates the means and the variances in each iteration for all\nthe labels. This is for equations 25 and 26 of Zhang et. al.,\nIEEE Trans. Med. Imag, Vol. 20, No. 1, Jan 2001.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D structural gray-scale image</p>\n</dd>\n<dt><strong>P_L_Y</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D probability map of the label given the input image\ncomputed by the expectation maximization (EM) algorithm</p>\n</dd>\n<dt><strong>mu</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, current estimate of the mean of each tissue\nclass.</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of tissue classes</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mu_upd</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, updated mean of each tissue class</p>\n</dd>\n<dt><strong>var_upd</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, updated variance of each tissue class</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"iteratedconditionalmodes\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes\" title=\"dipy.segment.mrf.IteratedConditionalModes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes</span></code></a><a class=\"headerlink\" href=\"#iteratedconditionalmodes\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.IteratedConditionalModes\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.mrf.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IteratedConditionalModes</span></span><a class=\"headerlink\" href=\"#dipy.segment.mrf.IteratedConditionalModes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes.icm_ising\" title=\"dipy.segment.mrf.IteratedConditionalModes.icm_ising\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">icm_ising</span></code></a>(nloglike,\u00a0beta,\u00a0seg)</p></td>\n<td><p>Executes one iteration of the ICM algorithm for MRF MAP estimation.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes.initialize_maximum_likelihood\" title=\"dipy.segment.mrf.IteratedConditionalModes.initialize_maximum_likelihood\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_maximum_likelihood</span></code></a>(nloglike)</p></td>\n<td><p>Initializes the segmentation of an image with given</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes.prob_neighborhood\" title=\"dipy.segment.mrf.IteratedConditionalModes.prob_neighborhood\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">prob_neighborhood</span></code></a>(seg,\u00a0beta,\u00a0nclasses)</p></td>\n<td><p>Conditional probability of the label given the neighborhood Equation 2.18 of the Stan Z.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.IteratedConditionalModes.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.IteratedConditionalModes.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.IteratedConditionalModes.icm_ising\">\n<span class=\"sig-name descname\"><span class=\"pre\">icm_ising</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nloglike</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seg</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.IteratedConditionalModes.icm_ising\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Executes one iteration of the ICM algorithm for MRF MAP\nestimation. The prior distribution of the MRF is a Gibbs\ndistribution with the Potts/Ising model with parameter <cite>beta</cite>:</p>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Potts_model\">https://en.wikipedia.org/wiki/Potts_model</a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>nloglike</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D shape, nloglike[x, y, z, k] is the negative log likelihood\nof class k at voxel (x, y, z)</p>\n</dd>\n<dt><strong>beta</strong><span class=\"classifier\">float</span></dt><dd><p>positive scalar, it is the parameter of the Potts/Ising\nmodel. Determines the smoothness of the output segmentation.</p>\n</dd>\n<dt><strong>seg</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D initial segmentation. This segmentation will change by one\niteration of the ICM algorithm</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_seg</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D final segmentation</p>\n</dd>\n<dt><strong>energy</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D final energy</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.IteratedConditionalModes.initialize_maximum_likelihood\">\n<span class=\"sig-name descname\"><span class=\"pre\">initialize_maximum_likelihood</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nloglike</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.IteratedConditionalModes.initialize_maximum_likelihood\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Initializes the segmentation of an image with given</dt><dd><p>neg-loglikelihood</p>\n</dd>\n</dl>\n<p>Initializes the segmentation of an image with neglog-likelihood field\ngiven by <cite>nloglike</cite>. The class of each voxel is selected as the one\nwith the minimum neglog-likelihood (i.e. maximum-likelihood\nsegmentation).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>nloglike</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D shape, nloglike[x, y, z, k] is the likelihhood of class k\nfor voxel (x, y, z)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>seg</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D initial segmentation</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.mrf.IteratedConditionalModes.prob_neighborhood\">\n<span class=\"sig-name descname\"><span class=\"pre\">prob_neighborhood</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seg</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.mrf.IteratedConditionalModes.prob_neighborhood\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Conditional probability of the label given the neighborhood\nEquation 2.18 of the Stan Z. Li book (Stan Z. Li, Markov Random Field\nModeling in Image Analysis, 3rd ed., Advances in Pattern Recognition\nSeries, Springer Verlag 2009.)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>seg</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D tissue segmentation derived from the ICM model</p>\n</dd>\n<dt><strong>beta</strong><span class=\"classifier\">float</span></dt><dd><p>scalar that determines the importance of the neighborhood and\nthe spatial smoothness of the segmentation.\nUsually between 0 to 0.5</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of tissue classes</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>PLN</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D probability map of the label given the neighborhood of the\nvoxel.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id77\">\n<h3>otsu<a class=\"headerlink\" href=\"#id77\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.threshold.otsu\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.threshold.</span></span><span class=\"sig-name descname\"><span class=\"pre\">otsu</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nbins</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">256</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.threshold.otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return threshold value based on Otsu\u2019s method.\nCopied from scikit-image to remove dependency.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array</span></dt><dd><p>Input image.</p>\n</dd>\n<dt><strong>nbins</strong><span class=\"classifier\">int</span></dt><dd><p>Number of bins used to calculate histogram. This value is ignored for\ninteger arrays.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>threshold</strong><span class=\"classifier\">float</span></dt><dd><p>Threshold value.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"upper-bound-by-percent\">\n<h3>upper_bound_by_percent<a class=\"headerlink\" href=\"#upper-bound-by-percent\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.threshold.upper_bound_by_percent\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.threshold.</span></span><span class=\"sig-name descname\"><span class=\"pre\">upper_bound_by_percent</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">percent</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.threshold.upper_bound_by_percent\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the upper bound for visualization of medical images</p>\n<p>Calculate the histogram of the image and go right to left until you find\nthe bound that contains more than a percentage of the image.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd></dd>\n<dt><strong>percent</strong><span class=\"classifier\">float</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>upper_bound</strong><span class=\"classifier\">float</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"upper-bound-by-rate\">\n<h3>upper_bound_by_rate<a class=\"headerlink\" href=\"#upper-bound-by-rate\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.threshold.upper_bound_by_rate\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.threshold.</span></span><span class=\"sig-name descname\"><span class=\"pre\">upper_bound_by_rate</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">rate</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.05</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.threshold.upper_bound_by_rate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjusts upper intensity boundary using rates</p>\n<p>It calculates the image intensity histogram, and based on the rate value it\ndecide what is the upperbound value for intensity normalization, usually\nlower bound is 0. The rate is the ratio between the amount of pixels in\nevery bins and the bins with highest pixel amount</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">float</span></dt><dd><p>Input intensity value data</p>\n</dd>\n<dt><strong>rate</strong><span class=\"classifier\">float</span></dt><dd><p>representing the threshold whether a spicific histogram bin that should\nbe count in the normalization range</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>high</strong><span class=\"classifier\">float</span></dt><dd><p>the upper_bound value for normalization</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</section>\n<section id=\"id78\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel\" title=\"dipy.segment.tissue.ConstantObservationModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel</span></code></a><a class=\"headerlink\" href=\"#id78\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.ConstantObservationModel\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.tissue.</span></span><span class=\"sig-name descname\"><span class=\"pre\">ConstantObservationModel</span></span><a class=\"headerlink\" href=\"#dipy.segment.tissue.ConstantObservationModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Observation model assuming that the intensity of each class is constant.\nThe model parameters are the means <span class=\"math notranslate nohighlight\">\\(\\mu_{k}\\)</span> and variances <span class=\"math notranslate nohighlight\">\\(\\sigma_{k}\\)</span>\nassociated with each tissue class. According to this model, the observed\nintensity at voxel <span class=\"math notranslate nohighlight\">\\(x\\)</span> is given by <span class=\"math notranslate nohighlight\">\\(I(x) = \\mu_{k} + \\eta_{k}\\)</span> where <span class=\"math notranslate nohighlight\">\\(k\\)</span>\nis the tissue class of voxel <span class=\"math notranslate nohighlight\">\\(x\\)</span>, and <span class=\"math notranslate nohighlight\">\\(\\eta_{k}\\)</span> is a Gaussian random\nvariable with zero mean and variance <span class=\"math notranslate nohighlight\">\\(\\sigma_{k}^{2}\\)</span>. The observation\nmodel is responsible for computing the negative log-likelihood of\nobserving any given intensity <span class=\"math notranslate nohighlight\">\\(z\\)</span> at each voxel <span class=\"math notranslate nohighlight\">\\(x\\)</span> assuming the voxel\nbelongs to each class <span class=\"math notranslate nohighlight\">\\(k\\)</span>. It also provides a default parameter\ninitialization.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.initialize_param_uniform\" title=\"dipy.segment.tissue.ConstantObservationModel.initialize_param_uniform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_param_uniform</span></code></a>(image,\u00a0nclasses)</p></td>\n<td><p>Initializes the means and variances uniformly</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.negloglikelihood\" title=\"dipy.segment.tissue.ConstantObservationModel.negloglikelihood\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">negloglikelihood</span></code></a>(image,\u00a0mu,\u00a0sigmasq,\u00a0nclasses)</p></td>\n<td><p>Computes the gaussian negative log-likelihood of each class at each voxel of <cite>image</cite> assuming a gaussian distribution with means and variances given by <cite>mu</cite> and <cite>sigmasq</cite>, respectively (constant models along the full volume).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.prob_image\" title=\"dipy.segment.tissue.ConstantObservationModel.prob_image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">prob_image</span></code></a>(img,\u00a0nclasses,\u00a0mu,\u00a0sigmasq,\u00a0P_L_N)</p></td>\n<td><p>Conditional probability of the label given the image</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.seg_stats\" title=\"dipy.segment.tissue.ConstantObservationModel.seg_stats\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">seg_stats</span></code></a>(input_image,\u00a0seg_image,\u00a0nclass)</p></td>\n<td><p>Mean and standard variation for N desired  tissue classes</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.update_param\" title=\"dipy.segment.tissue.ConstantObservationModel.update_param\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_param</span></code></a>(image,\u00a0P_L_Y,\u00a0mu,\u00a0nclasses)</p></td>\n<td><p>Updates the means and the variances in each iteration for all the labels.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.ConstantObservationModel.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.ConstantObservationModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes an instance of the ConstantObservationModel class</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.ConstantObservationModel.initialize_param_uniform\">\n<span class=\"sig-name descname\"><span class=\"pre\">initialize_param_uniform</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.ConstantObservationModel.initialize_param_uniform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initializes the means and variances uniformly</p>\n<p>The means are initialized uniformly along the dynamic range of\n<cite>image</cite>. The variances are set to 1 for all classes</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array</span></dt><dd><p>3D structural image</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of desired classes</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mu</strong><span class=\"classifier\">array</span></dt><dd><p>1 x nclasses, mean for each class</p>\n</dd>\n<dt><strong>sigma</strong><span class=\"classifier\">array</span></dt><dd><p>1 x nclasses, standard deviation for each class.\nSet up to 1.0 for all classes.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.ConstantObservationModel.negloglikelihood\">\n<span class=\"sig-name descname\"><span class=\"pre\">negloglikelihood</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmasq</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.ConstantObservationModel.negloglikelihood\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the gaussian negative log-likelihood of each class at\neach voxel of <cite>image</cite> assuming a gaussian distribution with means and\nvariances given by <cite>mu</cite> and <cite>sigmasq</cite>, respectively (constant models\nalong the full volume). The negative log-likelihood will be written\nin <cite>nloglike</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D gray scale structural image</p>\n</dd>\n<dt><strong>mu</strong><span class=\"classifier\">ndarray</span></dt><dd><p>mean of each class</p>\n</dd>\n<dt><strong>sigmasq</strong><span class=\"classifier\">ndarray</span></dt><dd><p>variance of each class</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of classes</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>nloglike</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D negloglikelihood for each class in each volume</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.ConstantObservationModel.prob_image\">\n<span class=\"sig-name descname\"><span class=\"pre\">prob_image</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">img</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">sigmasq</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">P_L_N</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.ConstantObservationModel.prob_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Conditional probability of the label given the image</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>img</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D structural gray-scale image</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of tissue classes</p>\n</dd>\n<dt><strong>mu</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, current estimate of the mean of each tissue class</p>\n</dd>\n<dt><strong>sigmasq</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, current estimate of the variance of each\ntissue class</p>\n</dd>\n<dt><strong>P_L_N</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D probability map of the label given the neighborhood.</p>\n</dd>\n<dt><strong>Previously computed by function prob_neighborhood</strong></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>P_L_Y</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D probability of the label given the input image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.ConstantObservationModel.seg_stats\">\n<span class=\"sig-name descname\"><span class=\"pre\">seg_stats</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">input_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seg_image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclass</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.ConstantObservationModel.seg_stats\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean and standard variation for N desired  tissue classes</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_image</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D structural image</p>\n</dd>\n<dt><strong>seg_image</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D segmented image</p>\n</dd>\n<dt><strong>nclass</strong><span class=\"classifier\">int</span></dt><dd><p>number of classes (3 in most cases)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mu, var</strong><span class=\"classifier\">ndarrays</span></dt><dd><p>1 x nclasses dimension\nMean and variance for each class</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.ConstantObservationModel.update_param\">\n<span class=\"sig-name descname\"><span class=\"pre\">update_param</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">P_L_Y</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">mu</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.ConstantObservationModel.update_param\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Updates the means and the variances in each iteration for all\nthe labels. This is for equations 25 and 26 of Zhang et. al.,\nIEEE Trans. Med. Imag, Vol. 20, No. 1, Jan 2001.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D structural gray-scale image</p>\n</dd>\n<dt><strong>P_L_Y</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D probability map of the label given the input image\ncomputed by the expectation maximization (EM) algorithm</p>\n</dd>\n<dt><strong>mu</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, current estimate of the mean of each tissue\nclass.</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of tissue classes</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mu_upd</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, updated mean of each tissue class</p>\n</dd>\n<dt><strong>var_upd</strong><span class=\"classifier\">ndarray</span></dt><dd><p>1 x nclasses, updated variance of each tissue class</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"id79\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes\" title=\"dipy.segment.tissue.IteratedConditionalModes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes</span></code></a><a class=\"headerlink\" href=\"#id79\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.IteratedConditionalModes\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.tissue.</span></span><span class=\"sig-name descname\"><span class=\"pre\">IteratedConditionalModes</span></span><a class=\"headerlink\" href=\"#dipy.segment.tissue.IteratedConditionalModes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes.icm_ising\" title=\"dipy.segment.tissue.IteratedConditionalModes.icm_ising\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">icm_ising</span></code></a>(nloglike,\u00a0beta,\u00a0seg)</p></td>\n<td><p>Executes one iteration of the ICM algorithm for MRF MAP estimation.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes.initialize_maximum_likelihood\" title=\"dipy.segment.tissue.IteratedConditionalModes.initialize_maximum_likelihood\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_maximum_likelihood</span></code></a>(nloglike)</p></td>\n<td><p>Initializes the segmentation of an image with given</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes.prob_neighborhood\" title=\"dipy.segment.tissue.IteratedConditionalModes.prob_neighborhood\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">prob_neighborhood</span></code></a>(seg,\u00a0beta,\u00a0nclasses)</p></td>\n<td><p>Conditional probability of the label given the neighborhood Equation 2.18 of the Stan Z.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.IteratedConditionalModes.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.IteratedConditionalModes.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.IteratedConditionalModes.icm_ising\">\n<span class=\"sig-name descname\"><span class=\"pre\">icm_ising</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nloglike</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seg</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.IteratedConditionalModes.icm_ising\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Executes one iteration of the ICM algorithm for MRF MAP\nestimation. The prior distribution of the MRF is a Gibbs\ndistribution with the Potts/Ising model with parameter <cite>beta</cite>:</p>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Potts_model\">https://en.wikipedia.org/wiki/Potts_model</a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>nloglike</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D shape, nloglike[x, y, z, k] is the negative log likelihood\nof class k at voxel (x, y, z)</p>\n</dd>\n<dt><strong>beta</strong><span class=\"classifier\">float</span></dt><dd><p>positive scalar, it is the parameter of the Potts/Ising\nmodel. Determines the smoothness of the output segmentation.</p>\n</dd>\n<dt><strong>seg</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D initial segmentation. This segmentation will change by one\niteration of the ICM algorithm</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_seg</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D final segmentation</p>\n</dd>\n<dt><strong>energy</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D final energy</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.IteratedConditionalModes.initialize_maximum_likelihood\">\n<span class=\"sig-name descname\"><span class=\"pre\">initialize_maximum_likelihood</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nloglike</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.IteratedConditionalModes.initialize_maximum_likelihood\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Initializes the segmentation of an image with given</dt><dd><p>neg-loglikelihood</p>\n</dd>\n</dl>\n<p>Initializes the segmentation of an image with neglog-likelihood field\ngiven by <cite>nloglike</cite>. The class of each voxel is selected as the one\nwith the minimum neglog-likelihood (i.e. maximum-likelihood\nsegmentation).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>nloglike</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D shape, nloglike[x, y, z, k] is the likelihhood of class k\nfor voxel (x, y, z)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>seg</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D initial segmentation</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.IteratedConditionalModes.prob_neighborhood\">\n<span class=\"sig-name descname\"><span class=\"pre\">prob_neighborhood</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">seg</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.IteratedConditionalModes.prob_neighborhood\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Conditional probability of the label given the neighborhood\nEquation 2.18 of the Stan Z. Li book (Stan Z. Li, Markov Random Field\nModeling in Image Analysis, 3rd ed., Advances in Pattern Recognition\nSeries, Springer Verlag 2009.)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>seg</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D tissue segmentation derived from the ICM model</p>\n</dd>\n<dt><strong>beta</strong><span class=\"classifier\">float</span></dt><dd><p>scalar that determines the importance of the neighborhood and\nthe spatial smoothness of the segmentation.\nUsually between 0 to 0.5</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int</span></dt><dd><p>number of tissue classes</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>PLN</strong><span class=\"classifier\">ndarray</span></dt><dd><p>4D probability map of the label given the neighborhood of the\nvoxel.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"tissueclassifierhmrf\">\n<h3><a class=\"reference internal\" href=\"#dipy.segment.tissue.TissueClassifierHMRF\" title=\"dipy.segment.tissue.TissueClassifierHMRF\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TissueClassifierHMRF</span></code></a><a class=\"headerlink\" href=\"#tissueclassifierhmrf\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.TissueClassifierHMRF\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.tissue.</span></span><span class=\"sig-name descname\"><span class=\"pre\">TissueClassifierHMRF</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">save_history</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.TissueClassifierHMRF\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>This class contains the methods for tissue classification using the Markov\nRandom Fields modeling approach</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"autosummary longtable docutils align-default\">\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.segment.tissue.TissueClassifierHMRF.classify\" title=\"dipy.segment.tissue.TissueClassifierHMRF.classify\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">classify</span></code></a>(image,\u00a0nclasses,\u00a0beta[,\u00a0tolerance,\u00a0...])</p></td>\n<td><p>This method uses the Maximum a posteriori - Markov Random Field approach for segmentation by using the Iterative Conditional Modes and Expectation Maximization to estimate the parameters.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.TissueClassifierHMRF.__init__\">\n<span class=\"sig-name descname\"><span class=\"pre\">__init__</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">save_history</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">verbose</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.TissueClassifierHMRF.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.TissueClassifierHMRF.classify\">\n<span class=\"sig-name descname\"><span class=\"pre\">classify</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">image</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">nclasses</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">beta</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">tolerance</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">max_iter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.TissueClassifierHMRF.classify\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This method uses the Maximum a posteriori - Markov Random Field\napproach for segmentation by using the Iterative Conditional Modes and\nExpectation Maximization to estimate the parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">ndarray,</span></dt><dd><p>3D structural image.</p>\n</dd>\n<dt><strong>nclasses</strong><span class=\"classifier\">int,</span></dt><dd><p>number of desired classes.</p>\n</dd>\n<dt><strong>beta</strong><span class=\"classifier\">float,</span></dt><dd><p>smoothing parameter, the higher this number the smoother the\noutput will be.</p>\n</dd>\n<dt><strong>tolerance: float,</strong></dt><dd><p>value that defines the percentage of change tolerated to\nprevent the ICM loop to stop. Default is 1e-05.</p>\n</dd>\n<dt><strong>max_iter</strong><span class=\"classifier\">float,</span></dt><dd><p>fixed number of desired iterations. Default is 100.\nIf the user only specifies this parameter, the tolerance\nvalue will not be considered. If none of these two\nparameters</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>initial_segmentation</strong><span class=\"classifier\">ndarray,</span></dt><dd><p>3D segmented image with all tissue types\nspecified in nclasses.</p>\n</dd>\n<dt><strong>final_segmentation</strong><span class=\"classifier\">ndarray,</span></dt><dd><p>3D final refined segmentation containing all\ntissue types.</p>\n</dd>\n<dt><strong>PVE</strong><span class=\"classifier\">ndarray,</span></dt><dd><p>3D probability map of each tissue type.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</section>\n<section id=\"add-noise\">\n<h3>add_noise<a class=\"headerlink\" href=\"#add-noise\" title=\"Permalink to this heading\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"dipy.segment.tissue.add_noise\">\n<span class=\"sig-prename descclassname\"><span class=\"pre\">dipy.segment.tissue.</span></span><span class=\"sig-name descname\"><span class=\"pre\">add_noise</span></span><span class=\"sig-paren\">(</span><em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">signal</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">snr</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">S0</span></span></em>, <em class=\"sig-param\"><span class=\"n\"><span class=\"pre\">noise_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'rician'</span></span></em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.segment.tissue.add_noise\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Add noise of specified distribution to the signal from a single voxel.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters<span class=\"colon\">:</span></dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>signal</strong><span class=\"classifier\">1-d ndarray</span></dt><dd><p>The signal in the voxel.</p>\n</dd>\n<dt><strong>snr</strong><span class=\"classifier\">float</span></dt><dd><p>The desired signal-to-noise ratio. (See notes below.)\nIf <cite>snr</cite> is None, return the signal as-is.</p>\n</dd>\n<dt><strong>S0</strong><span class=\"classifier\">float</span></dt><dd><p>Reference signal for specifying <cite>snr</cite>.</p>\n</dd>\n<dt><strong>noise_type</strong><span class=\"classifier\">string, optional</span></dt><dd><p>The distribution of noise added. Can be either \u2018gaussian\u2019 for Gaussian\ndistributed noise, \u2018rician\u2019 for Rice-distributed noise (default) or\n\u2018rayleigh\u2019 for a Rayleigh distribution.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns<span class=\"colon\">:</span></dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>signal</strong><span class=\"classifier\">array, same shape as the input</span></dt><dd><p>Signal with added noise.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>SNR is defined here, following <a class=\"reference internal\" href=\"#r71e340ddaf7d-1\" id=\"id80\">[1]</a>, as <code class=\"docutils literal notranslate\"><span class=\"pre\">S0</span> <span class=\"pre\">/</span> <span class=\"pre\">sigma</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">sigma</span></code> is\nthe standard deviation of the two Gaussian distributions forming the real\nand imaginary components of the Rician noise distribution (see <a class=\"reference internal\" href=\"#r71e340ddaf7d-2\" id=\"id81\">[2]</a>).</p>\n<p class=\"rubric\">References</p>\n<div role=\"list\" class=\"citation-list\">\n<div class=\"citation\" id=\"r71e340ddaf7d-1\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id80\">1</a><span class=\"fn-bracket\">]</span></span>\n<p>Descoteaux, Angelino, Fitzgibbons and Deriche (2007) Regularized,\nfast and robust q-ball imaging. MRM, 58: 497-510</p>\n</div>\n<div class=\"citation\" id=\"r71e340ddaf7d-2\" role=\"doc-biblioentry\">\n<span class=\"label\"><span class=\"fn-bracket\">[</span><a role=\"doc-backlink\" href=\"#id81\">2</a><span class=\"fn-bracket\">]</span></span>\n<p>Gudbjartson and Patz (2008). The Rician distribution of noisy MRI\ndata. MRM 34: 910-914.</p>\n</div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signal</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signal_w_noise</span> <span class=\"o\">=</span> <span class=\"n\">add_noise</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">,</span> <span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"mf\">100.</span><span class=\"p\">,</span> <span class=\"n\">noise_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;rician&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</section>\n</section>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.19: https://docutils.sourceforge.io/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.sims", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sims</span></code>", "N", "next"], ["reference/dipy.reconst", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst</span></code>", "P", "previous"]], "sourcename": "reference/dipy.segment.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.benchmarks\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.benchmarks</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.benchmarks.bench_quickbundles\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.benchmarks.bench_quickbundles</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.bundles\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.bundles</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.clustering\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.clustering</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.clustering_algorithms\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.clustering_algorithms</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.clusteringspeed\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.clusteringspeed</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.cythonutils\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.cythonutils</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.featurespeed\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.featurespeed</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.mask\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.mask</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.metric\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.metric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.metricspeed\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.metricspeed</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.mrf\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.mrf</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.threshold\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.threshold</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.segment.tissue\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">segment.tissue</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#mdfpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MDFpy</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MDFpy</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MDFpy.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy.are_compatible\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MDFpy.are_compatible()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.MDFpy.dist\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MDFpy.dist()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#metric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.are_compatible\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.are_compatible()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.dist\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.dist()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.feature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.feature</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Metric.is_order_invariant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.is_order_invariant</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qb-new\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QB_New</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.QB_New\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QB_New</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.Streamlines\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#assert-array-equal\">assert_array_equal</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_array_equal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">assert_array_equal()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#assert-arrays-equal\">assert_arrays_equal</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_arrays_equal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">assert_arrays_equal()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#assert-equal\">assert_equal</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.assert_equal\"><code class=\"docutils literal notranslate\"><span class=\"pre\">assert_equal()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bench-quickbundles\">bench_quickbundles</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.bench_quickbundles\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bench_quickbundles()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#get-fnames\">get_fnames</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.get_fnames\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_fnames()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#load-tractogram\">load_tractogram</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.load_tractogram\"><code class=\"docutils literal notranslate\"><span class=\"pre\">load_tractogram()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#measure\">measure</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.measure\"><code class=\"docutils literal notranslate\"><span class=\"pre\">measure()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#set-number-of-points\">set_number_of_points</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.benchmarks.bench_quickbundles.set_number_of_points\"><code class=\"docutils literal notranslate\"><span class=\"pre\">set_number_of_points()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlemindistanceasymmetricmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceAsymmetricMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric.distance()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancemetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric.distance()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleMinDistanceMetric.setup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric.setup()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundlesumdistancematrixmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleSumDistanceMatrixMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleSumDistanceMatrixMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.BundleSumDistanceMatrixMetric.distance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric.distance()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#recobundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundles.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles.evaluate_results\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundles.evaluate_results()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles.recognize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundles.recognize()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.RecoBundles.refine\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RecoBundles.refine()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#streamlinelinearregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.StreamlineLinearRegistration.optimize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration.optimize()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id19\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.Streamlines\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#chain\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">chain</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.chain\"><code class=\"docutils literal notranslate\"><span class=\"pre\">chain</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.chain.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">chain.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.chain.from_iterable\"><code class=\"docutils literal notranslate\"><span class=\"pre\">chain.from_iterable()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#apply-affine\">apply_affine</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.apply_affine\"><code class=\"docutils literal notranslate\"><span class=\"pre\">apply_affine()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ba-analysis\">ba_analysis</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.ba_analysis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ba_analysis()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundle-adjacency\">bundle_adjacency</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.bundle_adjacency\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundle_adjacency()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundle-shape-similarity\">bundle_shape_similarity</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.bundle_shape_similarity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundle_shape_similarity()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundles-distances-mam\">bundles_distances_mam</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.bundles_distances_mam\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundles_distances_mam()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bundles-distances-mdf\">bundles_distances_mdf</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.bundles_distances_mdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bundles_distances_mdf()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#check-range\">check_range</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.check_range\"><code class=\"docutils literal notranslate\"><span class=\"pre\">check_range()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cluster-bundle\">cluster_bundle</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.cluster_bundle\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cluster_bundle()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#deprecated-params\">deprecated_params</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.deprecated_params\"><code class=\"docutils literal notranslate\"><span class=\"pre\">deprecated_params()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#length\">length</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.length\"><code class=\"docutils literal notranslate\"><span class=\"pre\">length()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#nbytes\">nbytes</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.nbytes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">nbytes()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#qbx-and-merge\">qbx_and_merge</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.qbx_and_merge\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qbx_and_merge()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#select-random-set-of-streamlines\">select_random_set_of_streamlines</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.select_random_set_of_streamlines\"><code class=\"docutils literal notranslate\"><span class=\"pre\">select_random_set_of_streamlines()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id29\">set_number_of_points</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.set_number_of_points\"><code class=\"docutils literal notranslate\"><span class=\"pre\">set_number_of_points()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#time\">time</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.bundles.time\"><code class=\"docutils literal notranslate\"><span class=\"pre\">time()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#abcmeta\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ABCMeta</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ABCMeta\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ABCMeta</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ABCMeta.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ABCMeta.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ABCMeta.register\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ABCMeta.register()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#averagepointwiseeuclideanmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.AveragePointwiseEuclideanMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.AveragePointwiseEuclideanMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cluster\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Cluster</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Cluster</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Cluster.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Cluster.assign\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Cluster.assign()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#clustercentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid.assign\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.assign()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterCentroid.update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.update()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#clustermap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.add_cluster\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.add_cluster()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.clear\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.clear()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.clusters\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.clusters</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.clusters_sizes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.clusters_sizes()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.get_large_clusters\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.get_large_clusters()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.get_small_clusters\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.get_small_clusters()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.refdata\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.refdata</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.remove_cluster\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.remove_cluster()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMap.size\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMap.size()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#clustermapcentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMapCentroid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMapCentroid.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ClusterMapCentroid.centroids\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid.centroids</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#clustering\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Clustering</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Clustering\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Clustering</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Clustering.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Clustering.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Clustering.cluster\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Clustering.cluster()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#identity\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Identity</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Identity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Identity</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Identity.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Identity.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id30\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.are_compatible\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.are_compatible()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.dist\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.dist()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.feature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.feature</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.Metric.is_order_invariant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.is_order_invariant</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#minimumaveragedirectflipmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.MinimumAverageDirectFlipMetric.is_order_invariant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric.is_order_invariant</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#quickbundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundles\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundles.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundles.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundles.cluster\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundles.cluster()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#quickbundlesx\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundlesX</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundlesX\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundlesX</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundlesX.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundlesX.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.QuickBundlesX.cluster\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundlesX.cluster()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#resamplefeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResampleFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ResampleFeature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ResampleFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.ResampleFeature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ResampleFeature.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#treecluster\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TreeCluster</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeCluster\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeCluster.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeCluster.add\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster.add()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeCluster.is_leaf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster.is_leaf</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeCluster.return_indices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster.return_indices()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#treeclustermap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TreeClusterMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeClusterMap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeClusterMap.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeClusterMap.get_clusters\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.get_clusters()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeClusterMap.iter_preorder\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.iter_preorder()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeClusterMap.refdata\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.refdata</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.TreeClusterMap.traverse_postorder\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.traverse_postorder()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#abstractmethod\">abstractmethod</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.abstractmethod\"><code class=\"docutils literal notranslate\"><span class=\"pre\">abstractmethod()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id37\">nbytes</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.nbytes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">nbytes()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id38\">qbx_and_merge</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.qbx_and_merge\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qbx_and_merge()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id41\">set_number_of_points</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.set_number_of_points\"><code class=\"docutils literal notranslate\"><span class=\"pre\">set_number_of_points()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id42\">time</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering.time\"><code class=\"docutils literal notranslate\"><span class=\"pre\">time()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id43\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid.assign\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.assign()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterCentroid.update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.update()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id44\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterMapCentroid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterMapCentroid.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.ClusterMapCentroid.centroids\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid.centroids</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#dtype\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DTYPE</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.DTYPE\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DTYPE</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#clusters-centroid2clustermap-centroid\">clusters_centroid2clustermap_centroid</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.clusters_centroid2clustermap_centroid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">clusters_centroid2clustermap_centroid()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#peek\">peek</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.peek\"><code class=\"docutils literal notranslate\"><span class=\"pre\">peek()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id45\">quickbundles</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.quickbundles\"><code class=\"docutils literal notranslate\"><span class=\"pre\">quickbundles()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id47\">quickbundlesx</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clustering_algorithms.quickbundlesx\"><code class=\"docutils literal notranslate\"><span class=\"pre\">quickbundlesx()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id49\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid.assign\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.assign()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterCentroid.update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterCentroid.update()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id50\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterMapCentroid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterMapCentroid.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClusterMapCentroid.centroids\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClusterMapCentroid.centroids</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#clusters\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Clusters</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.Clusters\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Clusters</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.Clusters.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Clusters.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#clusterscentroid\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClustersCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClustersCentroid\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClustersCentroid</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.ClustersCentroid.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ClustersCentroid.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id51\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DTYPE</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.DTYPE\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DTYPE</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id52\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundles\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundles</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundles.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundles.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundles.get_cluster_map\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundles.get_cluster_map()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundles.get_stats\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundles.get_stats()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id53\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuickBundlesX</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundlesX</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundlesX.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX.get_stats\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundlesX.get_stats()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX.get_tree_cluster_map\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundlesX.get_tree_cluster_map()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.QuickBundlesX.insert\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuickBundlesX.insert()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id54\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TreeCluster</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeCluster\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeCluster.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeCluster.add\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster.add()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeCluster.is_leaf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster.is_leaf</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeCluster.return_indices\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeCluster.return_indices()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id55\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TreeClusterMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.get_clusters\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.get_clusters()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.iter_preorder\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.iter_preorder()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.refdata\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.refdata</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.TreeClusterMap.traverse_postorder\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TreeClusterMap.traverse_postorder()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#evaluate-aabb-checks\">evaluate_aabb_checks</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.clusteringspeed.evaluate_aabb_checks\"><code class=\"docutils literal notranslate\"><span class=\"pre\">evaluate_aabb_checks()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#arclengthfeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArcLengthFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.ArcLengthFeature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ArcLengthFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.ArcLengthFeature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ArcLengthFeature.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#centerofmassfeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CenterOfMassFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CenterOfMassFeature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CenterOfMassFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CenterOfMassFeature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CenterOfMassFeature.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cythonfeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CythonFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CythonFeature.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature.extract\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CythonFeature.extract()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.CythonFeature.infer_shape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CythonFeature.infer_shape()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#feature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Feature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Feature.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature.extract\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Feature.extract()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature.infer_shape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Feature.infer_shape()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.Feature.is_order_invariant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Feature.is_order_invariant</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#identityfeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IdentityFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.IdentityFeature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IdentityFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.IdentityFeature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IdentityFeature.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#midpointfeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MidpointFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.MidpointFeature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MidpointFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.MidpointFeature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MidpointFeature.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id58\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResampleFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.ResampleFeature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ResampleFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.ResampleFeature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ResampleFeature.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#vectorofendpointsfeature\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">VectorOfEndpointsFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.VectorOfEndpointsFeature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">VectorOfEndpointsFeature</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.VectorOfEndpointsFeature.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">VectorOfEndpointsFeature.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#extract\">extract</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.extract\"><code class=\"docutils literal notranslate\"><span class=\"pre\">extract()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#infer-shape\">infer_shape</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.featurespeed.infer_shape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">infer_shape()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#applymask\">applymask</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.applymask\"><code class=\"docutils literal notranslate\"><span class=\"pre\">applymask()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#binary-dilation\">binary_dilation</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.binary_dilation\"><code class=\"docutils literal notranslate\"><span class=\"pre\">binary_dilation()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bounding-box\">bounding_box</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.bounding_box\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bounding_box()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#clean-cc-mask\">clean_cc_mask</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.clean_cc_mask\"><code class=\"docutils literal notranslate\"><span class=\"pre\">clean_cc_mask()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#color-fa\">color_fa</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.color_fa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">color_fa()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#crop\">crop</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.crop\"><code class=\"docutils literal notranslate\"><span class=\"pre\">crop()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#fractional-anisotropy\">fractional_anisotropy</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.fractional_anisotropy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">fractional_anisotropy()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#generate-binary-structure\">generate_binary_structure</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.generate_binary_structure\"><code class=\"docutils literal notranslate\"><span class=\"pre\">generate_binary_structure()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#median-filter\">median_filter</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.median_filter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">median_filter()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#median-otsu\">median_otsu</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.median_otsu\"><code class=\"docutils literal notranslate\"><span class=\"pre\">median_otsu()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multi-median\">multi_median</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.multi_median\"><code class=\"docutils literal notranslate\"><span class=\"pre\">multi_median()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#otsu\">otsu</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.otsu\"><code class=\"docutils literal notranslate\"><span class=\"pre\">otsu()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#segment-from-cfa\">segment_from_cfa</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.segment_from_cfa\"><code class=\"docutils literal notranslate\"><span class=\"pre\">segment_from_cfa()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#warn\">warn</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mask.warn\"><code class=\"docutils literal notranslate\"><span class=\"pre\">warn()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id66\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.AveragePointwiseEuclideanMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.AveragePointwiseEuclideanMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cosinemetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CosineMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.CosineMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CosineMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.CosineMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CosineMetric.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#euclideanmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.EuclideanMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EuclideanMetric</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id67\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.are_compatible\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.are_compatible()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.dist\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.dist()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.feature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.feature</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.Metric.is_order_invariant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.is_order_invariant</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id68\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.MinimumAverageDirectFlipMetric.is_order_invariant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric.is_order_invariant</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sumpointwiseeuclideanmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.SumPointwiseEuclideanMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.SumPointwiseEuclideanMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#dist\">dist</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.dist\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dist()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mdf\">mdf</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metric.mdf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mdf()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id71\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.AveragePointwiseEuclideanMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AveragePointwiseEuclideanMetric.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id72\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CosineMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CosineMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CosineMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CosineMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CosineMetric.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cythonmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CythonMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CythonMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CythonMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric.are_compatible\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CythonMetric.are_compatible()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.CythonMetric.dist\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CythonMetric.dist()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id73\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.are_compatible\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.are_compatible()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.dist\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.dist()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.feature\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.feature</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.Metric.is_order_invariant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Metric.is_order_invariant</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id74\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.MinimumAverageDirectFlipMetric.is_order_invariant\"><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumAverageDirectFlipMetric.is_order_invariant</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id75\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.SumPointwiseEuclideanMetric.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SumPointwiseEuclideanMetric.__init__()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id76\">dist</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.dist\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dist()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#distance-matrix\">distance_matrix</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.metricspeed.distance_matrix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">distance_matrix()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#constantobservationmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.initialize_param_uniform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.initialize_param_uniform()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.negloglikelihood\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.negloglikelihood()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.prob_image\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.prob_image()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.seg_stats\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.seg_stats()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.ConstantObservationModel.update_param\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.update_param()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#iteratedconditionalmodes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes.icm_ising\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes.icm_ising()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes.initialize_maximum_likelihood\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes.initialize_maximum_likelihood()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.mrf.IteratedConditionalModes.prob_neighborhood\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes.prob_neighborhood()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id77\">otsu</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.threshold.otsu\"><code class=\"docutils literal notranslate\"><span class=\"pre\">otsu()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#upper-bound-by-percent\">upper_bound_by_percent</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.threshold.upper_bound_by_percent\"><code class=\"docutils literal notranslate\"><span class=\"pre\">upper_bound_by_percent()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#upper-bound-by-rate\">upper_bound_by_rate</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.threshold.upper_bound_by_rate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">upper_bound_by_rate()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id78\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.initialize_param_uniform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.initialize_param_uniform()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.negloglikelihood\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.negloglikelihood()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.prob_image\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.prob_image()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.seg_stats\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.seg_stats()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.ConstantObservationModel.update_param\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ConstantObservationModel.update_param()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id79\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes.icm_ising\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes.icm_ising()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes.initialize_maximum_likelihood\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes.initialize_maximum_likelihood()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.IteratedConditionalModes.prob_neighborhood\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IteratedConditionalModes.prob_neighborhood()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#tissueclassifierhmrf\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TissueClassifierHMRF</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.TissueClassifierHMRF\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TissueClassifierHMRF</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.TissueClassifierHMRF.__init__\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TissueClassifierHMRF.__init__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.TissueClassifierHMRF.classify\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TissueClassifierHMRF.classify()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#add-noise\">add_noise</a><ul>\n<li><a class=\"reference internal\" href=\"#dipy.segment.tissue.add_noise\"><code class=\"docutils literal notranslate\"><span class=\"pre\">add_noise()</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.segment", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}