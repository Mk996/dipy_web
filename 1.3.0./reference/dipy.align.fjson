{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.__config__/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__config__</span></code>"}, "next": {"link": "../dipy.boots/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">boots</span></code>"}, "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.align\">\n<span id=\"align\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align</span></code><a class=\"headerlink\" href=\"#module-dipy.align\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.Bunch\" title=\"dipy.align.Bunch\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a>(**kwds)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.floating\" title=\"dipy.align.floating\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">floating</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">numpy.float32</span></code></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.affine\" title=\"dipy.align.affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></a>(moving,\u00a0static[,\u00a0static_affine,\u00a0\u2026])</p></td>\n<td><p>Implements a translation transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.affine_registration\" title=\"dipy.align.affine_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine_registration</span></code></a>(moving,\u00a0static[,\u00a0\u2026])</p></td>\n<td><p>Find the affine transformation between two 3D images.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.center_of_mass\" title=\"dipy.align.center_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">center_of_mass</span></code></a>(moving,\u00a0static[,\u00a0\u2026])</p></td>\n<td><p>Implements a center of mass transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.read_mapping\" title=\"dipy.align.read_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_mapping</span></code></a>(disp,\u00a0domain_img,\u00a0codomain_img)</p></td>\n<td><p>Read a syn registration mapping from a nifti file</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.register_dwi_series\" title=\"dipy.align.register_dwi_series\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_dwi_series</span></code></a>(data,\u00a0gtab[,\u00a0affine,\u00a0\u2026])</p></td>\n<td><p>Register a DWI series to the mean of the B0 images in that series (all first registered to the first B0 volume)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.register_dwi_to_template\" title=\"dipy.align.register_dwi_to_template\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_dwi_to_template</span></code></a>(dwi,\u00a0gtab[,\u00a0\u2026])</p></td>\n<td><p>Register DWI data to a template through the B0 volumes.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.register_series\" title=\"dipy.align.register_series\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_series</span></code></a>(series,\u00a0ref[,\u00a0pipeline,\u00a0\u2026])</p></td>\n<td><p>Register a series to a reference image.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.resample\" title=\"dipy.align.resample\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">resample</span></code></a>(moving,\u00a0static[,\u00a0moving_affine,\u00a0\u2026])</p></td>\n<td><p>Resample an image (moving) from one space to another (static).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.rigid\" title=\"dipy.align.rigid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rigid</span></code></a>(moving,\u00a0static[,\u00a0static_affine,\u00a0\u2026])</p></td>\n<td><p>Implements a rigid transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamline_registration\" title=\"dipy.align.streamline_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">streamline_registration</span></code></a>(moving,\u00a0static[,\u00a0\u2026])</p></td>\n<td><p>Register two collections of streamlines (\u2018bundles\u2019) to each other</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.syn_registration\" title=\"dipy.align.syn_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">syn_registration</span></code></a>(moving,\u00a0static[,\u00a0\u2026])</p></td>\n<td><p>Register a 2D/3D source image (moving) to a 2D/3D target image (static).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.translation\" title=\"dipy.align.translation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">translation</span></code></a>(moving,\u00a0static[,\u00a0static_affine,\u00a0\u2026])</p></td>\n<td><p>Implements a translation transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.write_mapping\" title=\"dipy.align.write_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_mapping</span></code></a>(mapping,\u00a0fname)</p></td>\n<td><p>Write out a syn registration mapping to a nifti file</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.align._public\">\n<span id=\"module-align-public\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align._public</span></code><a class=\"headerlink\" href=\"#module-dipy.align._public\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Registration API: simplified API for registration of MRI data and of\nstreamlines.</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.AffineMap\" title=\"dipy.align._public.AffineMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a>(affine[,\u00a0domain_grid_shape,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.AffineRegistration\" title=\"dipy.align._public.AffineRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a>([metric,\u00a0level_iters,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.AffineTransform3D\" title=\"dipy.align._public.AffineTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.CCMetric\" title=\"dipy.align._public.CCMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a>(dim[,\u00a0sigma_diff,\u00a0radius])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap\" title=\"dipy.align._public.DiffeomorphicMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a>(dim,\u00a0disp_shape[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric\" title=\"dipy.align._public.EMMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a>(dim[,\u00a0smooth,\u00a0inner_iter,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.MutualInformationMetric\" title=\"dipy.align._public.MutualInformationMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a>([nbins,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.RigidTransform3D\" title=\"dipy.align._public.RigidTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric\" title=\"dipy.align._public.SSDMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a>(dim[,\u00a0smooth,\u00a0inner_iter,\u00a0step_type])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.StreamlineLinearRegistration\" title=\"dipy.align._public.StreamlineLinearRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a>([metric,\u00a0x0,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration\" title=\"dipy.align._public.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a>(metric[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.TranslationTransform3D\" title=\"dipy.align._public.TranslationTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.affine\" title=\"dipy.align._public.affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></a>(moving,\u00a0static[,\u00a0static_affine,\u00a0\u2026])</p></td>\n<td><p>Implements a translation transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.affine_registration\" title=\"dipy.align._public.affine_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine_registration</span></code></a>(moving,\u00a0static[,\u00a0\u2026])</p></td>\n<td><p>Find the affine transformation between two 3D images.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.center_of_mass\" title=\"dipy.align._public.center_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">center_of_mass</span></code></a>(moving,\u00a0static[,\u00a0\u2026])</p></td>\n<td><p>Implements a center of mass transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.load_nifti\" title=\"dipy.align._public.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.load_trk\" title=\"dipy.align._public.load_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_trk</span></code></a>(filename,\u00a0reference[,\u00a0to_space,\u00a0\u2026])</p></td>\n<td><p>Load the stateful tractogram of the .trk format</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.read_img_arr_or_path\" title=\"dipy.align._public.read_img_arr_or_path\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_img_arr_or_path</span></code></a>(data[,\u00a0affine])</p></td>\n<td><p>Helper function that handles inputs that can be paths, nifti img or arrays</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.read_mapping\" title=\"dipy.align._public.read_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_mapping</span></code></a>(disp,\u00a0domain_img,\u00a0codomain_img)</p></td>\n<td><p>Read a syn registration mapping from a nifti file</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.register_dwi_series\" title=\"dipy.align._public.register_dwi_series\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_dwi_series</span></code></a>(data,\u00a0gtab[,\u00a0affine,\u00a0\u2026])</p></td>\n<td><p>Register a DWI series to the mean of the B0 images in that series (all first registered to the first B0 volume)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.register_dwi_to_template\" title=\"dipy.align._public.register_dwi_to_template\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_dwi_to_template</span></code></a>(dwi,\u00a0gtab[,\u00a0\u2026])</p></td>\n<td><p>Register DWI data to a template through the B0 volumes.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.register_series\" title=\"dipy.align._public.register_series\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register_series</span></code></a>(series,\u00a0ref[,\u00a0pipeline,\u00a0\u2026])</p></td>\n<td><p>Register a series to a reference image.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.resample\" title=\"dipy.align._public.resample\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">resample</span></code></a>(moving,\u00a0static[,\u00a0moving_affine,\u00a0\u2026])</p></td>\n<td><p>Resample an image (moving) from one space to another (static).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.rigid\" title=\"dipy.align._public.rigid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rigid</span></code></a>(moving,\u00a0static[,\u00a0static_affine,\u00a0\u2026])</p></td>\n<td><p>Implements a rigid transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.save_nifti\" title=\"dipy.align._public.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.set_number_of_points\" title=\"dipy.align._public.set_number_of_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_number_of_points</span></code></a></p></td>\n<td><p>Change the number of points of streamlines</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.streamline_registration\" title=\"dipy.align._public.streamline_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">streamline_registration</span></code></a>(moving,\u00a0static[,\u00a0\u2026])</p></td>\n<td><p>Register two collections of streamlines (\u2018bundles\u2019) to each other</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\" title=\"dipy.align._public.syn_registration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">syn_registration</span></code></a>(moving,\u00a0static[,\u00a0\u2026])</p></td>\n<td><p>Register a 2D/3D source image (moving) to a 2D/3D target image (static).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.transform_centers_of_mass\" title=\"dipy.align._public.transform_centers_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_centers_of_mass</span></code></a>(static,\u00a0\u2026)</p></td>\n<td><p>Transformation to align the center of mass of the input images.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.transform_tracking_output\" title=\"dipy.align._public.transform_tracking_output\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_tracking_output</span></code></a>(tracking_output,\u00a0\u2026)</p></td>\n<td><p>Applies a linear transformation, given by affine, to streamlines.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.translation\" title=\"dipy.align._public.translation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">translation</span></code></a>(moving,\u00a0static[,\u00a0static_affine,\u00a0\u2026])</p></td>\n<td><p>Implements a translation transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.write_mapping\" title=\"dipy.align._public.write_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_mapping</span></code></a>(mapping,\u00a0fname)</p></td>\n<td><p>Write out a syn registration mapping to a nifti file</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.imaffine\">\n<span id=\"module-align-imaffine\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.imaffine</span></code><a class=\"headerlink\" href=\"#module-dipy.align.imaffine\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Affine image registration module consisting of the following classes:</p>\n<dl class=\"simple\">\n<dt>AffineMap: encapsulates the necessary information to perform affine</dt><dd><p>transforms between two domains, defined by a <cite>static</cite> and a <cite>moving</cite>\nimage. The <cite>domain</cite> of the transform is the set of points in the\n<cite>static</cite> image\u2019s grid, and the <cite>codomain</cite> is the set of points in\nthe <cite>moving</cite> image. When we call the <cite>transform</cite> method, <cite>AffineMap</cite>\nmaps each point <cite>x</cite> of the domain (<cite>static</cite> grid) to the codomain\n(<cite>moving</cite> grid) and interpolates the <cite>moving</cite> image at that point\nto obtain the intensity value to be placed at <cite>x</cite> in the resulting\ngrid. The <cite>transform_inverse</cite> method performs the opposite operation\nmapping points in the codomain to points in the domain.</p>\n</dd>\n<dt>ParzenJointHistogram: computes the marginal and joint distributions of</dt><dd><p>intensities of a pair of images, using Parzen windows [Parzen62]\nwith a cubic spline kernel, as proposed by Mattes et al. [Mattes03].\nIt also computes the gradient of the joint histogram w.r.t. the\nparameters of a given transform.</p>\n</dd>\n<dt>MutualInformationMetric: computes the value and gradient of the mutual</dt><dd><p>information metric the way <cite>Optimizer</cite> needs them. That is, given\na set of transform parameters, it will use <cite>ParzenJointHistogram</cite>\nto compute the value and gradient of the joint intensity histogram\nevaluated at the given parameters, and evaluate the the value and\ngradient of the histogram\u2019s mutual information.</p>\n</dd>\n<dt>AffineRegistration: it runs the multi-resolution registration, putting</dt><dd><p>all the pieces together. It needs to create the scale space of the\nimages and run the multi-resolution registration by using the Metric\nand the Optimizer at each level of the Gaussian pyramid. At each\nlevel, it will setup the metric to compute value and gradient of the\nmetric with the input images with different levels of smoothing.</p>\n</dd>\n</dl>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"simple\">\n<dt>[Parzen62] E. Parzen. On the estimation of a probability density</dt><dd><p>function and the mode. Annals of Mathematical Statistics,\n33(3), 1065-1076, 1962.</p>\n</dd>\n<dt>[Mattes03] Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,</dt><dd><p>&amp; Eubank, W. PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical\nImaging, 22(1), 120-8, 2003.</p>\n</dd>\n</dl>\n</div>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInvalidValuesError\" title=\"dipy.align.imaffine.AffineInvalidValuesError\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineInvalidValuesError</span></code></a></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"dipy.align.imaffine.AffineInversionError\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineInversionError</span></code></a></p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\" title=\"dipy.align.imaffine.AffineMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a>(affine[,\u00a0domain_grid_shape,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"dipy.align.imaffine.AffineRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a>([metric,\u00a0level_iters,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"dipy.align.imaffine.IsotropicScaleSpace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a>(image,\u00a0factors,\u00a0sigmas)</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"dipy.align.imaffine.MutualInformationMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a>([nbins,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.Optimizer\" title=\"dipy.align.imaffine.Optimizer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a>(fun,\u00a0x0[,\u00a0args,\u00a0method,\u00a0jac,\u00a0\u2026])</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"dipy.align.imaffine.ParzenJointHistogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ParzenJointHistogram</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"dipy.align.imaffine.ScaleSpace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a>(image,\u00a0num_levels[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.compute_parzen_mi\" title=\"dipy.align.imaffine.compute_parzen_mi\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_parzen_mi</span></code></a></p></td>\n<td><p>Computes the mutual information and its gradient (if requested)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.deprecated_params\" title=\"dipy.align.imaffine.deprecated_params\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">deprecated_params</span></code></a>(old_name[,\u00a0new_name,\u00a0\u2026])</p></td>\n<td><p>Deprecate a <em>renamed</em> or <em>removed</em> function argument.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.get_direction_and_spacings\" title=\"dipy.align.imaffine.get_direction_and_spacings\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_direction_and_spacings</span></code></a>(affine,\u00a0dim)</p></td>\n<td><p>Extracts the rotational and spacing components from a matrix</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.interpolate_scalar_2d\" title=\"dipy.align.imaffine.interpolate_scalar_2d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">interpolate_scalar_2d</span></code></a></p></td>\n<td><p>Bilinear interpolation of a 2D scalar image</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.interpolate_scalar_3d\" title=\"dipy.align.imaffine.interpolate_scalar_3d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">interpolate_scalar_3d</span></code></a></p></td>\n<td><p>Trilinear interpolation of a 3D scalar image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.sample_domain_regular\" title=\"dipy.align.imaffine.sample_domain_regular\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sample_domain_regular</span></code></a></p></td>\n<td><p>Take floor(total_voxels/k) samples from a (2D or 3D) grid</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_centers_of_mass\" title=\"dipy.align.imaffine.transform_centers_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_centers_of_mass</span></code></a>(static,\u00a0\u2026)</p></td>\n<td><p>Transformation to align the center of mass of the input images.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_geometric_centers\" title=\"dipy.align.imaffine.transform_geometric_centers\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_geometric_centers</span></code></a>(static,\u00a0\u2026)</p></td>\n<td><p>Transformation to align the geometric center of the input images.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.transform_origins\" title=\"dipy.align.imaffine.transform_origins\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_origins</span></code></a>(static,\u00a0static_grid2world,\u00a0\u2026)</p></td>\n<td><p>Transformation to align the origins of the input images.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.imwarp\">\n<span id=\"module-align-imwarp\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.imwarp</span></code><a class=\"headerlink\" href=\"#module-dipy.align.imwarp\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Classes and functions for Symmetric Diffeomorphic Registration</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.Bunch\" title=\"dipy.align.imwarp.Bunch\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a>(**kwds)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"dipy.align.imwarp.DiffeomorphicMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a>(dim,\u00a0disp_shape[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a>([metric])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"dipy.align.imwarp.ScaleSpace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a>(image,\u00a0num_levels[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a>(metric[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.floating\" title=\"dipy.align.imwarp.floating\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">floating</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">numpy.float32</span></code></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.get_direction_and_spacings\" title=\"dipy.align.imwarp.get_direction_and_spacings\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_direction_and_spacings</span></code></a>(affine,\u00a0dim)</p></td>\n<td><p>Extracts the rotational and spacing components from a matrix</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.mult_aff\" title=\"dipy.align.imwarp.mult_aff\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mult_aff</span></code></a>(A,\u00a0B)</p></td>\n<td><p>Returns the matrix product A.dot(B) considering None as the identity</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.metrics\">\n<span id=\"module-align-metrics\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.metrics</span></code><a class=\"headerlink\" href=\"#module-dipy.align.metrics\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Metrics for Symmetric Diffeomorphic Registration</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\" title=\"dipy.align.metrics.CCMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a>(dim[,\u00a0sigma_diff,\u00a0radius])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\" title=\"dipy.align.metrics.EMMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a>(dim[,\u00a0smooth,\u00a0inner_iter,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\" title=\"dipy.align.metrics.SSDMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a>(dim[,\u00a0smooth,\u00a0inner_iter,\u00a0step_type])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a>(dim)</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.floating\" title=\"dipy.align.metrics.floating\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">floating</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">numpy.float32</span></code></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.gradient\" title=\"dipy.align.metrics.gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient</span></code></a>(f,\u00a0*varargs[,\u00a0axis,\u00a0edge_order])</p></td>\n<td><p>Return the gradient of an N-dimensional array.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_2d\" title=\"dipy.align.metrics.v_cycle_2d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">v_cycle_2d</span></code></a>(n,\u00a0k,\u00a0delta_field,\u00a0\u2026[,\u00a0depth])</p></td>\n<td><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.v_cycle_3d\" title=\"dipy.align.metrics.v_cycle_3d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">v_cycle_3d</span></code></a>(n,\u00a0k,\u00a0delta_field,\u00a0\u2026[,\u00a0depth])</p></td>\n<td><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.reslice\">\n<span id=\"module-align-reslice\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.reslice</span></code><a class=\"headerlink\" href=\"#module-dipy.align.reslice\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.reslice.Pool\" title=\"dipy.align.reslice.Pool\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Pool</span></code></a>([processes,\u00a0initializer,\u00a0initargs,\u00a0\u2026])</p></td>\n<td><p>Returns a process pool object</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.reslice.affine_transform\" title=\"dipy.align.reslice.affine_transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine_transform</span></code></a>(input,\u00a0matrix[,\u00a0offset,\u00a0\u2026])</p></td>\n<td><p>Apply an affine transformation.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.reslice.cpu_count\" title=\"dipy.align.reslice.cpu_count\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cpu_count</span></code></a>()</p></td>\n<td><p>Returns the number of CPUs in the system</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.reslice.reslice\" title=\"dipy.align.reslice.reslice\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reslice</span></code></a>(data,\u00a0affine,\u00a0zooms,\u00a0new_zooms[,\u00a0\u2026])</p></td>\n<td><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.scalespace\">\n<span id=\"module-align-scalespace\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.scalespace</span></code><a class=\"headerlink\" href=\"#module-dipy.align.scalespace\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a>(image,\u00a0factors,\u00a0sigmas)</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a>(image,\u00a0num_levels[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.floating\" title=\"dipy.align.scalespace.floating\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">floating</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">numpy.float32</span></code></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.align.streamlinear\">\n<span id=\"module-align-streamlinear\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.streamlinear</span></code><a class=\"headerlink\" href=\"#module-dipy.align.streamlinear\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a>([num_threads])</p></td>\n<td><p>Asymmetric Bundle-based Minimum distance</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Minimum Distance aka BMD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Minimum Distance aka BMD</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a>([num_threads])</p></td>\n<td><p>Bundle-based Sum Distance aka BMD</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"dipy.align.streamlinear.Optimizer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a>(fun,\u00a0x0[,\u00a0args,\u00a0method,\u00a0jac,\u00a0\u2026])</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a>([num_threads])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a>([metric,\u00a0x0,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a>(matopt,\u00a0xopt,\u00a0\u2026)</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Streamlines\" title=\"dipy.align.streamlinear.Streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance\" title=\"dipy.align.streamlinear.bundle_min_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_min_distance</span></code></a>(t,\u00a0static,\u00a0moving)</p></td>\n<td><p>MDF-based pairwise distance optimization function (MIN)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\" title=\"dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_min_distance_asymmetric_fast</span></code></a>(t,\u00a0\u2026)</p></td>\n<td><p>MDF-based pairwise distance optimization function (MIN)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\" title=\"dipy.align.streamlinear.bundle_min_distance_fast\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_min_distance_fast</span></code></a>(t,\u00a0static,\u00a0moving,\u00a0\u2026)</p></td>\n<td><p>MDF-based pairwise distance optimization function (MIN)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.bundle_sum_distance\" title=\"dipy.align.streamlinear.bundle_sum_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_sum_distance</span></code></a>(t,\u00a0static,\u00a0moving[,\u00a0\u2026])</p></td>\n<td><p>MDF distance optimization function (SUM)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.center_streamlines\" title=\"dipy.align.streamlinear.center_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">center_streamlines</span></code></a>(streamlines)</p></td>\n<td><p>Move streamlines to the origin</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_matrix\" title=\"dipy.align.streamlinear.compose_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compose_matrix</span></code></a>([scale,\u00a0shear,\u00a0angles,\u00a0\u2026])</p></td>\n<td><p>Return 4x4 transformation matrix from sequence of transformations.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_matrix44\" title=\"dipy.align.streamlinear.compose_matrix44\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compose_matrix44</span></code></a>(t[,\u00a0dtype])</p></td>\n<td><p>Compose a 4x4 transformation matrix</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.compose_transformations\" title=\"dipy.align.streamlinear.compose_transformations\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compose_transformations</span></code></a>(*mats)</p></td>\n<td><p>Compose multiple 4x4 affine transformations in one 4x4 matrix</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.decompose_matrix\" title=\"dipy.align.streamlinear.decompose_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">decompose_matrix</span></code></a>(matrix)</p></td>\n<td><p>Return sequence of transformations from transformation matrix.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.decompose_matrix44\" title=\"dipy.align.streamlinear.decompose_matrix44\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">decompose_matrix44</span></code></a>(mat[,\u00a0size])</p></td>\n<td><p>Given a 4x4 homogeneous matrix return the parameter vector</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.distance_matrix_mdf\" title=\"dipy.align.streamlinear.distance_matrix_mdf\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance_matrix_mdf</span></code></a></p></td>\n<td><p>Minimum direct flipped distance matrix between two streamline sets</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.length\" title=\"dipy.align.streamlinear.length\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">length</span></code></a></p></td>\n<td><p>Euclidean length of streamlines</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.progressive_slr\" title=\"dipy.align.streamlinear.progressive_slr\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">progressive_slr</span></code></a>(static,\u00a0moving,\u00a0metric,\u00a0x0,\u00a0\u2026)</p></td>\n<td><p>Progressive SLR</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.qbx_and_merge\" title=\"dipy.align.streamlinear.qbx_and_merge\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">qbx_and_merge</span></code></a>(streamlines,\u00a0thresholds[,\u00a0\u2026])</p></td>\n<td><p>Run QuickBundlesX and then run again on the centroids of the last layer</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.remove_clusters_by_size\" title=\"dipy.align.streamlinear.remove_clusters_by_size\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_clusters_by_size</span></code></a>(clusters[,\u00a0min_size])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.select_random_set_of_streamlines\" title=\"dipy.align.streamlinear.select_random_set_of_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">select_random_set_of_streamlines</span></code></a>(\u2026[,\u00a0rng])</p></td>\n<td><p>Select a random set of streamlines</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.set_number_of_points\" title=\"dipy.align.streamlinear.set_number_of_points\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_number_of_points</span></code></a></p></td>\n<td><p>Change the number of points of streamlines</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.slr_with_qbx\" title=\"dipy.align.streamlinear.slr_with_qbx\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slr_with_qbx</span></code></a>(static,\u00a0moving[,\u00a0x0,\u00a0\u2026])</p></td>\n<td><p>Utility function for registering large tractograms.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.time\" title=\"dipy.align.streamlinear.time\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">time</span></code></a>()</p></td>\n<td><p>Return the current time in seconds since the Epoch.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.transform_streamlines\" title=\"dipy.align.streamlinear.transform_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_streamlines</span></code></a>(streamlines,\u00a0mat[,\u00a0\u2026])</p></td>\n<td><p>Apply affine transformation to streamlines</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.unlist_streamlines\" title=\"dipy.align.streamlinear.unlist_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">unlist_streamlines</span></code></a>(streamlines)</p></td>\n<td><p>Return the streamlines not as a list but as an array and an offset</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.whole_brain_slr\" title=\"dipy.align.streamlinear.whole_brain_slr\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">whole_brain_slr</span></code></a>(static,\u00a0moving[,\u00a0x0,\u00a0\u2026])</p></td>\n<td><p>Utility function for registering large tractograms.</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"bunch\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.Bunch\" title=\"dipy.align.Bunch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a><a class=\"headerlink\" href=\"#bunch\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.Bunch\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">Bunch</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.Bunch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.align.Bunch.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.Bunch.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A \u2018bunch\u2019 of values (a replacement of Enum)</p>\n<p>This is a temporary replacement of Enum, which is not available\non all versions of Python 2</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"floating\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.floating\" title=\"dipy.align.floating\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#floating\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.floating\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">numpy.float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affine\">\n<h3>affine<a class=\"headerlink\" href=\"#affine\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.affine\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">reg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a translation transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.</p>\n</dd>\n<dt><strong>reg</strong><span class=\"classifier\">AffineRegistration class instance.</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, transform.affine</strong><span class=\"classifier\">array with moving data resampled to the</span></dt><dd></dd>\n<dt>static space after computing the affine transformation and the affine</dt><dd></dd>\n<dt>4x4 associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affine-registration\">\n<h3>affine_registration<a class=\"headerlink\" href=\"#affine-registration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.affine_registration\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">affine_registration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">pipeline=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">metric='MI'</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">sigmas=None</em>, <em class=\"sig-param\">factors=None</em>, <em class=\"sig-param\">**metric_kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.affine_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the affine transformation between two 3D images.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>pipeline</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>Sequence of transforms to use in the gradual fitting of the full\naffine. Default: (executed from left to right):\n<cite>[center_of_mass, translation, rigid, affine]</cite></p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.\nDefault: identity.</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">str, optional.</span></dt><dd><p>Currently only supports \u2018MI\u2019 for MutualInformationMetric.</p>\n</dd>\n<dt><strong>nbins</strong><span class=\"classifier\">int, optional</span></dt><dd><p>MutualInformationMetric key-word argument: the number of bins to be\nused for computing the intensity histograms. The default is 32.</p>\n</dd>\n<dt><strong>sampling_proportion</strong><span class=\"classifier\">None or float in interval (0, 1], optional</span></dt><dd><p>MutualInformationMetric key-word argument: There are two types of\nsampling: dense and sparse. Dense sampling uses all voxels for\nestimating the (joint and marginal) intensity histograms, while\nsparse sampling uses a subset of them. If <cite>sampling_proportion</cite> is\nNone, then dense sampling is used. If <cite>sampling_proportion</cite> is a\nfloating point value in (0,1] then sparse sampling is used,\nwhere <cite>sampling_proportion</cite> specifies the proportion of voxels to\nbe used. The default is None (dense sampling).</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>AffineRegistration key-word argument: the number of iterations at each\nscale of the scale space. <cite>level_iters[0]</cite> corresponds to the coarsest\nscale, <cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</dd>\n<dt><strong>sigmas</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>AffineRegistration key-word argument: custom smoothing parameter to\nbuild the scale space (one parameter for each scale). By default,\nthe sequence of sigmas will be [3, 1, 0].</p>\n</dd>\n<dt><strong>factors</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>AffineRegistration key-word argument: custom scale factors to build the\nscale space (one factor for each scale). By default, the sequence of\nfactors will be [4, 2, 1].</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, affine</strong><span class=\"classifier\">array with moving data resampled to the static space</span></dt><dd></dd>\n<dt>after computing the affine transformation and the affine 4x4</dt><dd></dd>\n<dt>associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Performs a gradual registration between the two inputs, using a pipeline\nthat gradually approximates the final registration. If the final default\nstep (<cite>affine</cite>) is ommitted, the resulting affine may not have all 12\ndegrees of freedom adjusted.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"center-of-mass\">\n<h3>center_of_mass<a class=\"headerlink\" href=\"#center-of-mass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.center_of_mass\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">center_of_mass</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">reg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.center_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a center of mass transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.</p>\n</dd>\n<dt><strong>reg</strong><span class=\"classifier\">not needed here. Use None</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, transform.affine</strong><span class=\"classifier\">array with moving data resampled to the</span></dt><dd></dd>\n<dt>static space after computing the center of mass transformation and the</dt><dd></dd>\n<dt>affine 4x4 associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-mapping\">\n<h3>read_mapping<a class=\"headerlink\" href=\"#read-mapping\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.read_mapping\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">read_mapping</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">disp</em>, <em class=\"sig-param\">domain_img</em>, <em class=\"sig-param\">codomain_img</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.read_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read a syn registration mapping from a nifti file</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>disp</strong><span class=\"classifier\">str or Nifti1Image</span></dt><dd><p>A file of image containing the mapping displacement field in each voxel\nShape (x, y, z, 3, 2)</p>\n</dd>\n<dt><strong>domain_img</strong><span class=\"classifier\">str or Nifti1Image</span></dt><dd></dd>\n<dt><strong>codomain_img</strong><span class=\"classifier\">str or Nifti1Image</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code> object.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See <a class=\"reference internal\" href=\"#dipy.align.write_mapping\" title=\"dipy.align.write_mapping\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">write_mapping()</span></code></a> for the data format expected.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"register-dwi-series\">\n<h3>register_dwi_series<a class=\"headerlink\" href=\"#register-dwi-series\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.register_dwi_series\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">register_dwi_series</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">data</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">affine=None</em>, <em class=\"sig-param\">b0_ref=0</em>, <em class=\"sig-param\">pipeline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.register_dwi_series\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a DWI series to the mean of the B0 images in that series (all\nfirst registered to the first B0 volume)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">4D array or nibabel Nifti1Image class instance or str</span></dt><dd><p>Diffusion data. Either as a 4D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt><strong>gtab</strong><span class=\"classifier\">a GradientTable class instance or tuple of strings</span></dt><dd><p>If provided as a tuple of strings, these are assumed to be full paths\nto the bvals and bvecs files (in that order).</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n<dt><strong>b0_ref</strong><span class=\"classifier\">int, optional.</span></dt><dd><p>Which b0 volume to use as reference. Default: 0</p>\n</dd>\n<dt><strong>pipeline</strong><span class=\"classifier\">list of callables, optional.</span></dt><dd><p>The transformations to perform in sequence (from left to right):\nDefault: <cite>[center_of_mass, translation, rigid, affine]</cite></p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>xform_img, affine_array: a Nifti1Image containing the registered data and</dt><dd></dd>\n<dt>using the affine of the original data and a list containing the affine</dt><dd></dd>\n<dt>transforms associated with each of the</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"register-dwi-to-template\">\n<h3>register_dwi_to_template<a class=\"headerlink\" href=\"#register-dwi-to-template\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.register_dwi_to_template\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">register_dwi_to_template</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dwi</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">dwi_affine=None</em>, <em class=\"sig-param\">template=None</em>, <em class=\"sig-param\">template_affine=None</em>, <em class=\"sig-param\">reg_method='syn'</em>, <em class=\"sig-param\">**reg_kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.register_dwi_to_template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register DWI data to a template through the B0 volumes.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>dwi</strong><span class=\"classifier\">4D array, nifti image or str</span></dt><dd><p>Containing the DWI data, or full path to a nifti file with DWI.</p>\n</dd>\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable or sequence of strings</span></dt><dd><p>The gradients associated with the DWI data, or a sequence with\n(fbval, fbvec), full paths to bvals and bvecs files.</p>\n</dd>\n<dt><strong>dwi_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the DWI. Required if data\nis provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>template</strong><span class=\"classifier\">3D array, nifti image or str</span></dt><dd><p>Containing the data for the template, or full path to a nifti file\nwith the template data.</p>\n</dd>\n<dt><strong>template_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the template. Required if data\nis provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>reg_method</strong><span class=\"classifier\">str,</span></dt><dd><p>One of \u201csyn\u201d or \u201caff\u201d, which designates which registration method is\nused. Either syn, which uses the <a class=\"reference internal\" href=\"#dipy.align.syn_registration\" title=\"dipy.align.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a> function\nor <a class=\"reference internal\" href=\"#dipy.align.affine_registration\" title=\"dipy.align.affine_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">affine_registration()</span></code></a> function. Default: \u201csyn\u201d.</p>\n</dd>\n<dt><strong>reg_kwargs</strong><span class=\"classifier\">key-word arguments for <a class=\"reference internal\" href=\"#dipy.align.syn_registration\" title=\"dipy.align.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a> or</span></dt><dd><p><a class=\"reference internal\" href=\"#dipy.align.affine_registration\" title=\"dipy.align.affine_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">affine_registration()</span></code></a></p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>warped_b0, mapping: The fist is an array with the b0 volume warped to the</dt><dd></dd>\n<dt>template. If reg_method is \u201csyn\u201d, the second is a DiffeomorphicMap class</dt><dd></dd>\n<dt>instance that can be used to transform between the two spaces. Otherwise,</dt><dd></dd>\n<dt>if reg_method is \u201caff\u201d, this is a 4x4 matrix encoding the affine transform.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This function assumes that the DWI data is already internally registered.\nSee <a class=\"reference internal\" href=\"#dipy.align.register_dwi_series\" title=\"dipy.align.register_dwi_series\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">register_dwi_series()</span></code></a>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"register-series\">\n<h3>register_series<a class=\"headerlink\" href=\"#register-series\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.register_series\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">register_series</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">series</em>, <em class=\"sig-param\">ref</em>, <em class=\"sig-param\">pipeline=None</em>, <em class=\"sig-param\">series_affine=None</em>, <em class=\"sig-param\">ref_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.register_series\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a series to a reference image.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>series</strong><span class=\"classifier\">4D array or nib.Nifti1Image class instance or str</span></dt><dd><p>The data is 4D with the last dimension separating different 3D volumes</p>\n</dd>\n<dt><strong>ref</strong><span class=\"classifier\">int or 3D array or nib.Nifti1Image class instance or str</span></dt><dd><p>If this is an int, this is the index of the reference image within the\nseries. Otherwise it is an array of data to register with (associated\nwith a <cite>ref_affine</cite> required) or a nifti img or full path to a file\ncontaining one.</p>\n</dd>\n<dt><strong>pipeline</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>Sequence of transforms to do for each volume in the series.\nDefault: (executed from left to right):\n<cite>[center_of_mass, translation, rigid, affine]</cite></p>\n</dd>\n<dt><strong>series_affine, ref_affine</strong><span class=\"classifier\">4x4 arrays, optional.</span></dt><dd><p>The affine. If provided, this input will over-ride the affine provided\ntogether with the nifti img or file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>xformed, affines</strong><span class=\"classifier\">4D array with transformed data and a (4,4,n) array</span></dt><dd></dd>\n<dt>with 4x4 matrices associated with each of the volumes of the input moving</dt><dd></dd>\n<dt>data that was used to transform it into register with the static data.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"resample\">\n<h3>resample<a class=\"headerlink\" href=\"#resample\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.resample\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">resample</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">between_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.resample\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Resample an image (moving) from one space to another (static).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>between_affine: 4x4 array, optional</strong></dt><dd><p>If an additional affine is needed betweeen the two spaces.\nDefault: identity (no additional registration).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A Nifti1Image class instance with the data from the moving object</dt><dd></dd>\n<dt>resampled into the space of the static object.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"rigid\">\n<h3>rigid<a class=\"headerlink\" href=\"#rigid\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.rigid\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">rigid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">reg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.rigid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a rigid transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.</p>\n</dd>\n<dt><strong>reg</strong><span class=\"classifier\">AffineRegistration class instance.</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, transform.affine</strong><span class=\"classifier\">array with moving data resampled to the</span></dt><dd></dd>\n<dt>static space after computing the rigid transformation and the affine 4x4</dt><dd></dd>\n<dt>associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamline-registration\">\n<h3>streamline_registration<a class=\"headerlink\" href=\"#streamline-registration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamline_registration\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">streamline_registration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">n_points=100</em>, <em class=\"sig-param\">native_resampled=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamline_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register two collections of streamlines (\u2018bundles\u2019) to each other</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving, static</strong><span class=\"classifier\">lists of 3 by n, or str</span></dt><dd><p>The two bundles to be registered. Given either as lists of arrays with\n3D coordinates, or strings containing full paths to these files.</p>\n</dd>\n<dt><strong>n_points</strong><span class=\"classifier\">int, optional</span></dt><dd><p>How many points to resample to. Default: 100.</p>\n</dd>\n<dt><strong>native_resampled</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the moving bundle in the original space, but\nresampled in the static space to n_points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>aligned</strong><span class=\"classifier\">list</span></dt><dd><p>Streamlines from the moving group, moved to be closely matched to\nthe static group.</p>\n</dd>\n<dt><strong>matrix</strong><span class=\"classifier\">array (4, 4)</span></dt><dd><p>The affine transformation that takes us from \u2018moving\u2019 to \u2018static\u2019</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"syn-registration\">\n<h3>syn_registration<a class=\"headerlink\" href=\"#syn-registration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.syn_registration\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">syn_registration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">step_length=0.25</em>, <em class=\"sig-param\">metric='CC'</em>, <em class=\"sig-param\">dim=3</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">prealign=None</em>, <em class=\"sig-param\">**metric_kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.syn_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a 2D/3D source image (moving) to a 2D/3D target image (static).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving, static</strong><span class=\"classifier\">array or nib.Nifti1Image or str.</span></dt><dd><p>Either as a 2D/3D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt><strong>moving_affine, static_affine</strong><span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">string, optional</span></dt><dd><p>The metric to be optimized. One of <cite>CC</cite>, <cite>EM</cite>, <cite>SSD</cite>,\nDefault: \u2018CC\u2019 =&gt; CCMetric.</p>\n</dd>\n<dt><strong>dim: int (either 2 or 3), optional</strong></dt><dd><p>The dimensions of the image domain. Default: 3</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">list of int, optional</span></dt><dd><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused). Default: [10, 10, 5].</p>\n</dd>\n<dt><strong>metric_kwargs</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Parameters for initialization of the metric object. If not provided,\nuses the default settings of each metric.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>warped_moving</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The data in <cite>moving</cite>, warped towards the <cite>static</cite> data.</p>\n</dd>\n<dt><strong>forward</strong><span class=\"classifier\">ndarray (\u2026, 3)</span></dt><dd><p>The vector field describing the forward warping from the source to the\ntarget.</p>\n</dd>\n<dt><strong>backward</strong><span class=\"classifier\">ndarray (\u2026, 3)</span></dt><dd><p>The vector field describing the backward warping from the target to the\nsource.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"translation\">\n<h3>translation<a class=\"headerlink\" href=\"#translation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.translation\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">translation</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">reg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.translation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a translation transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.</p>\n</dd>\n<dt><strong>reg</strong><span class=\"classifier\">AffineRegistration class instance.</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, transform.affine</strong><span class=\"classifier\">array with moving data resampled to the</span></dt><dd></dd>\n<dt>static space after computing the translation transformation and the</dt><dd></dd>\n<dt>affine 4x4 associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"write-mapping\">\n<h3>write_mapping<a class=\"headerlink\" href=\"#write-mapping\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.write_mapping\">\n<code class=\"sig-prename descclassname\">dipy.align.</code><code class=\"sig-name descname\">write_mapping</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">mapping</em>, <em class=\"sig-param\">fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.write_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write out a syn registration mapping to a nifti file</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>mapping</strong><span class=\"classifier\">a DiffeomorphicMap object derived from <a class=\"reference internal\" href=\"#dipy.align.syn_registration\" title=\"dipy.align.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a></span></dt><dd></dd>\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to the nifti file storing the mapping</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The data in the file is organized with shape (X, Y, Z, 2, 3, 3), such\nthat the forward mapping in each voxel is in <cite>data[i, j, k, 0, :, :]</cite> and\nthe backward mapping in each voxel is in <cite>data[i, j, k, 0, :, :]</cite>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affinemap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.AffineMap\" title=\"dipy.align._public.AffineMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a><a class=\"headerlink\" href=\"#affinemap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.AffineMap\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">AffineMap</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">domain_grid_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_grid_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.AffineMap.get_affine\" title=\"dipy.align._public.AffineMap.get_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code></a>()</p></td>\n<td><p>Return the value of the transformation, not a reference.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.AffineMap.set_affine\" title=\"dipy.align._public.AffineMap.set_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_affine</span></code></a>(affine)</p></td>\n<td><p>Set the affine transform (operating in physical space).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.AffineMap.transform\" title=\"dipy.align._public.AffineMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Transform the input image from co-domain to domain space.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.AffineMap.transform_inverse\" title=\"dipy.align._public.AffineMap.transform_inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_inverse</span></code></a>(image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Transform the input image from domain to co-domain space.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.AffineMap.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">domain_grid_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_grid_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>AffineMap</p>\n<p>Implements an affine transformation whose domain is given by\n<cite>domain_grid</cite> and <cite>domain_grid2world</cite>, and whose co-domain is\ngiven by <cite>codomain_grid</cite> and <cite>codomain_grid2world</cite>.</p>\n<p>The actual transform is represented by the <cite>affine</cite> matrix, which\noperate in world coordinates. Therefore, to transform a moving image\ntowards a static image, we first map each voxel (i,j,k) of the static\nimage to world coordinates (x,y,z) by applying <cite>domain_grid2world</cite>.\nThen we apply the <cite>affine</cite> transform to (x,y,z) obtaining (x\u2019, y\u2019, z\u2019)\nin moving image\u2019s world coordinates. Finally, (x\u2019, y\u2019, z\u2019) is mapped\nto voxel coordinates (i\u2019, j\u2019, k\u2019) in the moving image by multiplying\n(x\u2019, y\u2019, z\u2019) by the inverse of <cite>codomain_grid2world</cite>. The\n<cite>codomain_grid_shape</cite> is used analogously to transform the static\nimage towards the moving image when calling <cite>transform_inverse</cite>.</p>\n<p>If the domain/co-domain information is not provided (None) then the\nsampling information needs to be specified each time the <cite>transform</cite>\nor <cite>transform_inverse</cite> is called to transform images. Note that such\nsampling information is not necessary to transform points defined in\nphysical space, such as stream lines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the matrix defining the affine transform, where <cite>dim</cite> is the\ndimension of the space this map operates in (2 for 2D images,\n3 for 3D images). If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n<dt><strong>domain_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the default domain sampling grid. When <cite>transform</cite>\nis called to transform an image, the resulting image will have\nthis shape, unless a different sampling information is provided.\nIf None, then the sampling grid shape must be specified each time\nthe <cite>transform</cite> method is called.</p>\n</dd>\n<dt><strong>domain_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>codomain_grid_shape</strong><span class=\"classifier\">sequence of integers, shape (dim,)</span></dt><dd><p>the shape of the default co-domain sampling grid. When\n<cite>transform_inverse</cite> is called to transform an image, the resulting\nimage will have this shape, unless a different sampling\ninformation is provided. If None (the default), then the sampling\ngrid shape must be specified each time the <cite>transform_inverse</cite>\nmethod is called.</p>\n</dd>\n<dt><strong>codomain_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the grid-to-world transform associated with the co-domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.AffineMap.get_affine\">\n<code class=\"sig-name descname\">get_affine</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineMap.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the value of the transformation, not a reference.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Copy of the transform, not a reference.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.AffineMap.set_affine\">\n<code class=\"sig-name descname\">set_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineMap.set_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Set the affine transform (operating in physical space).</p>\n<p>Also sets <cite>self.affine_inv</cite> - the inverse of <cite>affine</cite>, or None if\nthere is no inverse.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the matrix representing the affine transform operating in\nphysical space. The domain and co-domain information\nremains unchanged. If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.AffineMap.transform\">\n<code class=\"sig-name descname\">transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">sampling_grid_shape=None</em>, <em class=\"sig-param\">sampling_grid2world=None</em>, <em class=\"sig-param\">resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform the input image from co-domain to domain space.</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.domain_shape</cite> and <cite>self.domain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be transformed</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>sampling_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt><strong>sampling_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt><strong>resample_only</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>transformed</strong><span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt><dd><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.AffineMap.transform_inverse\">\n<code class=\"sig-name descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">sampling_grid_shape=None</em>, <em class=\"sig-param\">sampling_grid2world=None</em>, <em class=\"sig-param\">resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform the input image from domain to co-domain space.</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.codomain_shape</cite> and <cite>self.codomain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be transformed</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>sampling_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt><strong>sampling_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt><strong>resample_only</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>transformed</strong><span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt><dd><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.AffineRegistration\" title=\"dipy.align._public.AffineRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a><a class=\"headerlink\" href=\"#affineregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.AffineRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">AffineRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">sigmas=None</em>, <em class=\"sig-param\">factors=None</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">ss_sigma_factor=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.AffineRegistration.optimize\" title=\"dipy.align._public.AffineRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,\u00a0moving,\u00a0transform,\u00a0params0)</p></td>\n<td><p>Start the optimization process.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.AffineRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">sigmas=None</em>, <em class=\"sig-param\">factors=None</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">ss_sigma_factor=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an instance of the AffineRegistration class.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\">None or object, optional</span></dt><dd><p>an instance of a metric. The default is None, implying\nthe Mutual Information metric with default settings.</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>the number of iterations at each scale of the scale space.\n<cite>level_iters[0]</cite> corresponds to the coarsest scale,\n<cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</dd>\n<dt><strong>sigmas</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale). By default, the sequence of sigmas will be\n[3, 1, 0].</p>\n</dd>\n<dt><strong>factors</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>custom scale factors to build the scale space (one factor for each\nscale). By default, the sequence of factors will be [4, 2, 1].</p>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">string, optional</span></dt><dd><p>optimization method to be used. If Scipy version &lt; 0.12, then\nonly L-BFGS-B is available. Otherwise, <cite>method</cite> can be any\ngradient-based method available in <cite>dipy.core.Optimize</cite>: CG, BFGS,\nNewton-CG, dogleg or trust-ncg.\nThe default is \u2018L-BFGS-B\u2019.</p>\n</dd>\n<dt><strong>ss_sigma_factor</strong><span class=\"classifier\">float, optional</span></dt><dd><p>If None, this parameter is not used and an isotropic scale\nspace with the given <cite>factors</cite> and <cite>sigmas</cite> will be built.\nIf not None, an anisotropic scale space will be used by\nautomatically selecting the smoothing sigmas along each axis\naccording to the voxel dimensions of the given image.\nThe <cite>ss_sigma_factor</cite> is used to scale the automatically computed\nsigmas. For example, in the isotropic case, the sigma of the\nkernel will be <span class=\"math notranslate nohighlight\">\\(factor * (2 ^ i)\\)</span> where\n<span class=\"math notranslate nohighlight\">\\(i = 1, 2, ..., n_scales - 1\\)</span> is the scale (the finest resolution\nimage <span class=\"math notranslate nohighlight\">\\(i=0\\)</span> is never smoothed). The default is None.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>extra optimization options. The default is None, implying\nno extra options are passed to the optimizer.</p>\n</dd>\n<dt><strong>verbosity: int (one of {0, 1, 2, 3}), optional</strong></dt><dd><p>Set the verbosity level of the algorithm:\n0 : do not print anything\n1 : print information about the current status of the algorithm\n2 : print high level information of the components involved in</p>\n<blockquote>\n<div><p>the registration that can be used to detect a failing\ncomponent.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>3<span class=\"classifier\">print as much information as possible to isolate the cause</span></dt><dd><p>of a bug.</p>\n</dd>\n</dl>\n<p>Default: 1</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align._public.AffineRegistration.docstring_addendum\">\n<code class=\"sig-name descname\">docstring_addendum</code><em class=\"property\"> = 'verbosity: int (one of {0, 1, 2, 3}), optional\\n            Set the verbosity level of the algorithm:\\n            0 : do not print anything\\n            1 : print information about the current status of the algorithm\\n            2 : print high level information of the components involved in\\n                the registration that can be used to detect a failing\\n                component.\\n            3 : print as much information as possible to isolate the cause\\n                of a bug.\\n            Default: 1\\n    '</em><a class=\"headerlink\" href=\"#dipy.align._public.AffineRegistration.docstring_addendum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.AffineRegistration.optimize\">\n<code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">transform</em>, <em class=\"sig-param\">params0</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">ret_metric=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Start the optimization process.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>transform</strong><span class=\"classifier\">instance of Transform</span></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>params0</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>starting_affine</strong><span class=\"classifier\">string, or matrix, or None, optional</span></dt><dd><dl class=\"simple\">\n<dt>If string:</dt><dd><p>\u2018mass\u2019: align centers of gravity\n\u2018voxel-origin\u2019: align physical coordinates of voxel (0,0,0)\n\u2018centers\u2019: align physical coordinates of central voxels</p>\n</dd>\n<dt>If matrix:</dt><dd><p>array, shape (dim+1, dim+1).</p>\n</dd>\n<dt>If None:</dt><dd><p>Start from identity.</p>\n</dd>\n</dl>\n<p>The default is None.</p>\n</dd>\n<dt><strong>ret_metric</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>if True, it returns the parameters for measuring the\nsimilarity between the images (default \u2018False\u2019).\nThe metric containing optimal parameters and\nthe distance between the images.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_map</strong><span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine resulting affine transformation</p>\n</dd>\n<dt><strong>xopt</strong><span class=\"classifier\">optimal parameters</span></dt><dd><p>the optimal parameters (translation, rotation shear etc.)</p>\n</dd>\n<dt><strong>fopt</strong><span class=\"classifier\">Similarity metric</span></dt><dd><p>the value of the function at the optimal parameters.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affinetransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.AffineTransform3D\" title=\"dipy.align._public.AffineTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a><a class=\"headerlink\" href=\"#affinetransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.AffineTransform3D\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">AffineTransform3D</code><a class=\"headerlink\" href=\"#dipy.align._public.AffineTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code></p></td>\n<td><p>Parameter values corresponding to the identity transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code></p></td>\n<td><p>Jacobian function of this transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code></p></td>\n<td><p>Matrix representation of this transform with the given parameters</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 74%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_dim</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_number_of_parameters</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.AffineTransform3D.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.AffineTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Affine transform in 3D</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ccmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.CCMetric\" title=\"dipy.align._public.CCMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a><a class=\"headerlink\" href=\"#ccmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.CCMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">CCMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">sigma_diff=2.0</em>, <em class=\"sig-param\">radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.CCMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.CCMetric.compute_backward\" title=\"dipy.align._public.CCMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.CCMetric.compute_forward\" title=\"dipy.align._public.CCMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the moving image towards the static.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.CCMetric.free_iteration\" title=\"dipy.align._public.CCMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</p></td>\n<td><p>Frees the resources allocated during initialization</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.CCMetric.get_energy\" title=\"dipy.align._public.CCMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</p></td>\n<td><p>Numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.CCMetric.initialize_iteration\" title=\"dipy.align._public.CCMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.CCMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">sigma_diff=2.0</em>, <em class=\"sig-param\">radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.CCMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized Cross-Correlation Similarity metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>sigma_diff</strong><span class=\"classifier\">the standard deviation of the Gaussian smoothing kernel to</span></dt><dd><p>be applied to the update field at each iteration</p>\n</dd>\n<dt><strong>radius</strong><span class=\"classifier\">int</span></dt><dd><p>the radius of the squared (cubic) neighborhood at each voxel to be\nconsidered to compute the cross correlation</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.CCMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.CCMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.CCMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.CCMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the moving image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.CCMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.CCMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.CCMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.CCMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Cross Correlation (data term) energy computed at the\nlargest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.CCMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.CCMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the cross-correlation factors for efficient computation\nof the gradient of the Cross Correlation w.r.t. the displacement field.\nIt also pre-computes the image gradients in the physical space by\nre-orienting the gradients in the voxel space using the corresponding\naffine transformations.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffeomorphicmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap\" title=\"dipy.align._public.DiffeomorphicMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicmap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.DiffeomorphicMap\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">DiffeomorphicMap</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">disp_shape</em>, <em class=\"sig-param\">disp_grid2world=None</em>, <em class=\"sig-param\">domain_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.allocate\" title=\"dipy.align._public.DiffeomorphicMap.allocate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">allocate</span></code></a>()</p></td>\n<td><p>Creates a zero displacement field</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.compute_inversion_error\" title=\"dipy.align._public.DiffeomorphicMap.compute_inversion_error\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_inversion_error</span></code></a>()</p></td>\n<td><p>Inversion error of the displacement fields</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.expand_fields\" title=\"dipy.align._public.DiffeomorphicMap.expand_fields\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">expand_fields</span></code></a>(expand_factors,\u00a0new_shape)</p></td>\n<td><p>Expands the displacement fields from current shape to new_shape</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.get_backward_field\" title=\"dipy.align._public.DiffeomorphicMap.get_backward_field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_backward_field</span></code></a>()</p></td>\n<td><p>Deformation field to transform an image in the backward direction</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.get_forward_field\" title=\"dipy.align._public.DiffeomorphicMap.get_forward_field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_forward_field</span></code></a>()</p></td>\n<td><p>Deformation field to transform an image in the forward direction</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.get_simplified_transform\" title=\"dipy.align._public.DiffeomorphicMap.get_simplified_transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_simplified_transform</span></code></a>()</p></td>\n<td><p>Constructs a simplified version of this Diffeomorhic Map</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.interpret_matrix\" title=\"dipy.align._public.DiffeomorphicMap.interpret_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">interpret_matrix</span></code></a>(obj)</p></td>\n<td><p>Try to interpret <cite>obj</cite> as a matrix</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.inverse\" title=\"dipy.align._public.DiffeomorphicMap.inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">inverse</span></code></a>()</p></td>\n<td><p>Inverse of this DiffeomorphicMap instance</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.shallow_copy\" title=\"dipy.align._public.DiffeomorphicMap.shallow_copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shallow_copy</span></code></a>()</p></td>\n<td><p>Shallow copy of this DiffeomorphicMap instance</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.transform\" title=\"dipy.align._public.DiffeomorphicMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Warps an image in the forward direction</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.transform_inverse\" title=\"dipy.align._public.DiffeomorphicMap.transform_inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_inverse</span></code></a>(image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Warps an image in the backward direction</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap.warp_endomorphism\" title=\"dipy.align._public.DiffeomorphicMap.warp_endomorphism\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warp_endomorphism</span></code></a>(phi)</p></td>\n<td><p>Composition of this DiffeomorphicMap with a given endomorphism</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">disp_shape</em>, <em class=\"sig-param\">disp_grid2world=None</em>, <em class=\"sig-param\">domain_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DiffeomorphicMap</p>\n<p>Implements a diffeomorphic transformation on the physical space. The\ndeformation fields encoding the direct and inverse transformations\nshare the same domain discretization (both the discretization grid\nshape and voxel-to-space matrix). The input coordinates (physical\ncoordinates) are first aligned using prealign, and then displaced\nusing the corresponding vector field interpolated at the aligned\ncoordinates.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int, 2 or 3</span></dt><dd><p>the transformation\u2019s dimension</p>\n</dd>\n<dt><strong>disp_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the deformation\nfield\u2019s discretization</p>\n</dd>\n<dt><strong>disp_grid2world</strong><span class=\"classifier\">the voxel-to-space transform between the def. fields</span></dt><dd><p>grid and space</p>\n</dd>\n<dt><strong>domain_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the default\ndiscretization of this map\u2019s domain</p>\n</dd>\n<dt><strong>domain_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the default voxel-to-space transformation between this map\u2019s\ndiscretization and physical space</p>\n</dd>\n<dt><strong>codomain_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the images that\nare \u2018normally\u2019 warped using this transformation in the forward\ndirection (this will provide default transformation parameters to\nwarp images under this transformation). By default, we assume that\nthe inverse transformation is \u2018normally\u2019 used to warp images with\nthe same discretization and voxel-to-space transformation as the\ndeformation field grid.</p>\n</dd>\n<dt><strong>codomain_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of images that are \u2018normally\u2019\nwarped using this transformation (in the forward direction).</p>\n</dd>\n<dt><strong>prealign</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the linear transformation to be applied to align input images to\nthe reference space before warping under the deformation field.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.allocate\">\n<code class=\"sig-name descname\">allocate</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.allocate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a zero displacement field</p>\n<p>Creates a zero displacement field (the identity transformation).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.compute_inversion_error\">\n<code class=\"sig-name descname\">compute_inversion_error</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.compute_inversion_error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inversion error of the displacement fields</p>\n<p>Estimates the inversion error of the displacement fields by computing\nstatistics of the residual vectors obtained after composing the forward\nand backward displacement fields.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>residual</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the displacement field resulting from composing the forward and\nbackward displacement fields of this transformation (the residual\nshould be zero for a perfect diffeomorphism)</p>\n</dd>\n<dt><strong>stats</strong><span class=\"classifier\">array, shape (3,)</span></dt><dd><p>statistics from the norms of the vectors of the residual\ndisplacement field: maximum, mean and standard deviation</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Since the forward and backward displacement fields have the same\ndiscretization, the final composition is given by</p>\n<p>comp[i] = forward[ i + Dinv * backward[i]]</p>\n<p>where Dinv is the space-to-grid transformation of the displacement\nfields</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.expand_fields\">\n<code class=\"sig-name descname\">expand_fields</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">expand_factors</em>, <em class=\"sig-param\">new_shape</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.expand_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expands the displacement fields from current shape to new_shape</p>\n<p>Up-samples the discretization of the displacement fields to be of\nnew_shape shape.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>expand_factors</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the factors scaling current spacings (voxel sizes) to spacings in\nthe expanded discretization.</p>\n</dd>\n<dt><strong>new_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the shape of the arrays holding the up-sampled discretization</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.get_backward_field\">\n<code class=\"sig-name descname\">get_backward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.get_backward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the backward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the backward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.get_forward_field\">\n<code class=\"sig-name descname\">get_forward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.get_forward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the forward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the forward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.get_simplified_transform\">\n<code class=\"sig-name descname\">get_simplified_transform</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.get_simplified_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs a simplified version of this Diffeomorhic Map</p>\n<p>The simplified version incorporates the pre-align transform, as well as\nthe domain and codomain affine transforms into the displacement field.\nThe resulting transformation may be regarded as operating on the\nimage spaces given by the domain and codomain discretization. As a\nresult, self.prealign, self.disp_grid2world, self.domain_grid2world and\nself.codomain affine will be None (denoting Identity) in the resulting\ndiffeomorphic map.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.interpret_matrix\">\n<code class=\"sig-name descname\">interpret_matrix</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">obj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.interpret_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Try to interpret <cite>obj</cite> as a matrix</p>\n<p>Some operations are performed faster if we know in advance if a matrix\nis the identity (so we can skip the actual matrix-vector\nmultiplication). This function returns None if the given object\nis None or the \u2018identity\u2019 string. It returns the same object if it is\na numpy array. It raises an exception otherwise.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>obj</strong><span class=\"classifier\">object</span></dt><dd><p>any object</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>obj</strong><span class=\"classifier\">object</span></dt><dd><p>the same object given as argument if <cite>obj</cite> is None or a numpy\narray. None if <cite>obj</cite> is the \u2018identity\u2019 string.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.inverse\">\n<code class=\"sig-name descname\">inverse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inverse of this DiffeomorphicMap instance</p>\n<p>Returns a diffeomorphic map object representing the inverse of this\ntransformation. The internal arrays are not copied but just referenced.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>inv</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the inverse of this diffeomorphic map.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.shallow_copy\">\n<code class=\"sig-name descname\">shallow_copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.shallow_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shallow copy of this DiffeomorphicMap instance</p>\n<p>Creates a shallow copy of this diffeomorphic map (the arrays are not\ncopied but just referenced)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>new_map</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the shallow copy of this diffeomorphic map</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.transform\">\n<code class=\"sig-name descname\">transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_world2grid=None</em>, <em class=\"sig-param\">out_shape=None</em>, <em class=\"sig-param\">out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the forward direction</p>\n<p>Transforms the input image under this transformation in the forward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform(\u2026) warps the\nimage forwards, else it warps the image backwards).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt><dd><p>the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt><strong>out_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices, rows and columns of the desired warped image</p>\n</dd>\n<dt><strong>out_grid2world</strong><span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt><dd><p>warped image to physical space</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>warped</strong><span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt><dd><p>the warped image under this transformation in the forward direction</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.transform_inverse\">\n<code class=\"sig-name descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_world2grid=None</em>, <em class=\"sig-param\">out_shape=None</em>, <em class=\"sig-param\">out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the backward direction</p>\n<p>Transforms the input image under this transformation in the backward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform_inverse(\u2026)\nwarps the image backwards, else it warps the image forwards)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt><dd><p>the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt><strong>out_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices, rows, and columns of the desired warped image</p>\n</dd>\n<dt><strong>out_grid2world</strong><span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt><dd><p>warped image to physical space</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>warped</strong><span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt><dd><p>warped image under this transformation in the backward direction</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.DiffeomorphicMap.warp_endomorphism\">\n<code class=\"sig-name descname\">warp_endomorphism</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.DiffeomorphicMap.warp_endomorphism\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of this DiffeomorphicMap with a given endomorphism</p>\n<p>Creates a new DiffeomorphicMap C with the same properties as self and\ncomposes its displacement fields with phi\u2019s corresponding fields.\nThe resulting diffeomorphism is of the form C(x) = phi(self(x)) with\ninverse C^{-1}(y) = self^{-1}(phi^{-1}(y)). We assume that phi is an\nendomorphism with the same discretization and domain affine as self\nto ensure that the composition inherits self\u2019s properties (we also\nassume that the pre-aligning matrix of phi is None or identity).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>phi</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the endomorphism to be warped by this diffeomorphic map</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>composition</strong><span class=\"classifier\">the composition of this diffeomorphic map with the</span></dt><dd><p>endomorphism given as input</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The problem with our current representation of a DiffeomorphicMap is\nthat the set of Diffeomorphism that can be represented this way (a\npre-aligning matrix followed by a non-linear endomorphism given as a\ndisplacement field) is not closed under the composition operation.</p>\n<p>Supporting a general DiffeomorphicMap class, closed under composition,\nmay be extremely costly computationally, and the kind of\ntransformations we actually need for Avants\u2019 mid-point algorithm (SyN)\nare much simpler.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"emmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric\" title=\"dipy.align._public.EMMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a><a class=\"headerlink\" href=\"#emmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.EMMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">EMMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=1.0</em>, <em class=\"sig-param\">inner_iter=5</em>, <em class=\"sig-param\">q_levels=256</em>, <em class=\"sig-param\">double_gradient=True</em>, <em class=\"sig-param\">step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.compute_backward\" title=\"dipy.align._public.EMMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.compute_demons_step\" title=\"dipy.align._public.EMMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</p></td>\n<td><p>Demons step for EM metric</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.compute_forward\" title=\"dipy.align._public.EMMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the reference image towards the static.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.compute_gauss_newton_step\" title=\"dipy.align._public.EMMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</p></td>\n<td><p>Computes the Gauss-Newton energy minimization step</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.free_iteration\" title=\"dipy.align._public.EMMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</p></td>\n<td><p>Frees the resources allocated during initialization</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.get_energy\" title=\"dipy.align._public.EMMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</p></td>\n<td><p>The numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.initialize_iteration\" title=\"dipy.align._public.EMMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.use_moving_image_dynamics\" title=\"dipy.align._public.EMMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.EMMetric.use_static_image_dynamics\" title=\"dipy.align._public.EMMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=1.0</em>, <em class=\"sig-param\">inner_iter=5</em>, <em class=\"sig-param\">q_levels=256</em>, <em class=\"sig-param\">double_gradient=True</em>, <em class=\"sig-param\">step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expectation-Maximization Metric</p>\n<p>Similarity metric based on the Expectation-Maximization algorithm to\nhandle multi-modal images. The transfer function is modeled as a set of\nhidden random variables that are estimated at each iteration of the\nalgorithm.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>smooth</strong><span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt><strong>inner_iter</strong><span class=\"classifier\">int</span></dt><dd><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt><strong>q_levels</strong><span class=\"classifier\">number of quantization levels (equal to the number of hidden</span></dt><dd><p>variables in the EM algorithm)</p>\n</dd>\n<dt><strong>double_gradient</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</dd>\n<dt><strong>step_type</strong><span class=\"classifier\">string (\u2018gauss_newton\u2019, \u2018demons\u2019)</span></dt><dd><p>the optimization schedule to be used in the multi-resolution\nGauss-Seidel optimization algorithm (not used if Demons Step is\nselected)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.compute_demons_step\">\n<code class=\"sig-name descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for EM metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Demons step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.compute_gauss_newton_step\">\n<code class=\"sig-name descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Computes the Newton step to minimize this energy, i.e., minimizes the\nlinearized energy function with respect to the\nregularized displacement field (this step does not require\npost-smoothing, as opposed to the demons step, which does not include\nregularization). To accelerate convergence we use the multi-grid\nGauss-Seidel algorithm proposed by Bruhn and Weickert et al [Bruhn05]</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Newton step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"simple\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion</dt><dd><p>estimation: combining highest accuracy with real-time\nperformance\u201d, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the EM (data term) energy computed at the largest\niteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the transfer functions (hidden random variables) and\nvariances of the estimators. Also pre-computes the gradient of both\ninput images. Note that once the images are transformed to the opposite\nmodality, the gradient of the transformed images can be used with the\ngradient of the corresponding modality in the same fashion as\ndiff-demons does for mono-modality images. If the flag\nself.use_double_gradient is True these gradients are averaged.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.use_moving_image_dynamics\">\n<code class=\"sig-name descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">original_moving_image</em>, <em class=\"sig-param\">transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent moving image mask from the original_moving_image mask (warped\nby nearest neighbor interpolation)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>original_moving_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the original moving image from which the current moving image was\ngenerated, the current moving image is the one that was provided\nvia \u2018set_moving_image(\u2026)\u2019, which may not be the same as the\noriginal moving image but a warped version of it.</p>\n</dd>\n<dt><strong>transformation</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original_moving_image\nto generate the current moving image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.EMMetric.use_static_image_dynamics\">\n<code class=\"sig-name descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">original_static_image</em>, <em class=\"sig-param\">transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.EMMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent static image mask from the originalstaticImage mask (warped\nby nearest neighbor interpolation)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>original_static_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the original static image from which the current static image was\ngenerated, the current static image is the one that was provided\nvia \u2018set_static_image(\u2026)\u2019, which may not be the same as the\noriginal static image but a warped version of it (even the static\nimage changes during Symmetric Normalization, not only the moving\none).</p>\n</dd>\n<dt><strong>transformation</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original_static_image\nto generate the current static image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mutualinformationmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.MutualInformationMetric\" title=\"dipy.align._public.MutualInformationMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a><a class=\"headerlink\" href=\"#mutualinformationmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.MutualInformationMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">MutualInformationMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">nbins=32</em>, <em class=\"sig-param\">sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.MutualInformationMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.MutualInformationMetric.distance\" title=\"dipy.align._public.MutualInformationMetric.distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance</span></code></a>(params)</p></td>\n<td><p>Numeric value of the negative Mutual Information.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.MutualInformationMetric.distance_and_gradient\" title=\"dipy.align._public.MutualInformationMetric.distance_and_gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance_and_gradient</span></code></a>(params)</p></td>\n<td><p>Numeric value of the metric and its gradient at given parameters.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.MutualInformationMetric.gradient\" title=\"dipy.align._public.MutualInformationMetric.gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient</span></code></a>(params)</p></td>\n<td><p>Numeric value of the metric\u2019s gradient at the given parameters.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.MutualInformationMetric.setup\" title=\"dipy.align._public.MutualInformationMetric.setup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup</span></code></a>(transform,\u00a0static,\u00a0moving[,\u00a0\u2026])</p></td>\n<td><p>Prepare the metric to compute intensity densities and gradients.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.MutualInformationMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">nbins=32</em>, <em class=\"sig-param\">sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.MutualInformationMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an instance of the Mutual Information metric.</p>\n<p>This class implements the methods required by Optimizer to drive the\nregistration process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>nbins</strong><span class=\"classifier\">int, optional</span></dt><dd><p>the number of bins to be used for computing the intensity\nhistograms. The default is 32.</p>\n</dd>\n<dt><strong>sampling_proportion</strong><span class=\"classifier\">None or float in interval (0, 1], optional</span></dt><dd><p>There are two types of sampling: dense and sparse. Dense sampling\nuses all voxels for estimating the (joint and marginal) intensity\nhistograms, while sparse sampling uses a subset of them. If\n<cite>sampling_proportion</cite> is None, then dense sampling is\nused. If <cite>sampling_proportion</cite> is a floating point value in (0,1]\nthen sparse sampling is used, where <cite>sampling_proportion</cite>\nspecifies the proportion of voxels to be used. The default is\nNone.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Since we use linear interpolation, images are not, in general,\ndifferentiable at exact voxel coordinates, but they are differentiable\nbetween voxel coordinates. When using sparse sampling, selected voxels\nare slightly moved by adding a small random displacement within one\nvoxel to prevent sampling points from being located exactly at voxel\ncoordinates. When using dense sampling, this random displacement is\nnot applied.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.MutualInformationMetric.distance\">\n<code class=\"sig-name descname\">distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.MutualInformationMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the negative Mutual Information.</p>\n<p>We need to change the sign so we can use standard minimization\nalgorithms.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>neg_mi</strong><span class=\"classifier\">float</span></dt><dd><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.MutualInformationMetric.distance_and_gradient\">\n<code class=\"sig-name descname\">distance_and_gradient</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.MutualInformationMetric.distance_and_gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric and its gradient at given parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>neg_mi</strong><span class=\"classifier\">float</span></dt><dd><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n<dt><strong>neg_mi_grad</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.MutualInformationMetric.gradient\">\n<code class=\"sig-name descname\">gradient</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.MutualInformationMetric.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric\u2019s gradient at the given parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>grad</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.MutualInformationMetric.setup\">\n<code class=\"sig-name descname\">setup</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">transform</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">starting_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.MutualInformationMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepare the metric to compute intensity densities and gradients.</p>\n<p>The histograms will be setup to compute probability densities of\nintensities within the minimum and maximum values of <cite>static</cite> and\n<cite>moving</cite></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>transform: instance of Transform</strong></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S\u2019, R\u2019, C\u2019) or (R\u2019, C\u2019)</span></dt><dd><p>moving image. The dimensions of the static (S, R, C) and moving\n(S\u2019, R\u2019, C\u2019) images do not need to be the same.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array (dim+1, dim+1), optional</span></dt><dd><p>the grid-to-space transform of the static image. The default is\nNone, implying the transform is the identity.</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array (dim+1, dim+1)</span></dt><dd><p>the grid-to-space transform of the moving image. The default is\nNone, implying the spacing along all axes is 1.</p>\n</dd>\n<dt><strong>starting_affine</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the pre-aligning matrix (an affine transform) that roughly aligns\nthe moving image towards the static image. If None, no\npre-alignment is performed. If a pre-alignment matrix is available,\nit is recommended to provide this matrix as <cite>starting_affine</cite>\ninstead of manually transforming the moving image to reduce\ninterpolation artifacts. The default is None, implying no\npre-alignment is performed.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"rigidtransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.RigidTransform3D\" title=\"dipy.align._public.RigidTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a><a class=\"headerlink\" href=\"#rigidtransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.RigidTransform3D\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">RigidTransform3D</code><a class=\"headerlink\" href=\"#dipy.align._public.RigidTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code></p></td>\n<td><p>Parameter values corresponding to the identity transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code></p></td>\n<td><p>Jacobian function of this transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code></p></td>\n<td><p>Matrix representation of this transform with the given parameters</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 74%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_dim</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_number_of_parameters</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.RigidTransform3D.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.RigidTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Rigid transform in 3D (rotation + translation)\nThe parameter vector theta of length 6 is interpreted as follows:\ntheta[0] : rotation about the x axis\ntheta[1] : rotation about the y axis\ntheta[2] : rotation about the z axis\ntheta[3] : translation along the x axis\ntheta[4] : translation along the y axis\ntheta[5] : translation along the z axis</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ssdmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric\" title=\"dipy.align._public.SSDMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a><a class=\"headerlink\" href=\"#ssdmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.SSDMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">SSDMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=4</em>, <em class=\"sig-param\">inner_iter=10</em>, <em class=\"sig-param\">step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric.compute_backward\" title=\"dipy.align._public.SSDMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric.compute_demons_step\" title=\"dipy.align._public.SSDMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</p></td>\n<td><p>Demons step for SSD metric</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric.compute_forward\" title=\"dipy.align._public.SSDMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the reference image towards the static.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric.compute_gauss_newton_step\" title=\"dipy.align._public.SSDMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</p></td>\n<td><p>Computes the Gauss-Newton energy minimization step</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric.free_iteration\" title=\"dipy.align._public.SSDMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</p></td>\n<td><p>Nothing to free for the SSD metric</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric.get_energy\" title=\"dipy.align._public.SSDMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</p></td>\n<td><p>The numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SSDMetric.initialize_iteration\" title=\"dipy.align._public.SSDMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SSDMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=4</em>, <em class=\"sig-param\">inner_iter=10</em>, <em class=\"sig-param\">step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sum of Squared Differences (SSD) Metric</p>\n<p>Similarity metric for (mono-modal) nonlinear image registration defined\nby the sum of squared differences (SSD)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>smooth</strong><span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt><strong>inner_iter</strong><span class=\"classifier\">int</span></dt><dd><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt><strong>step_type</strong><span class=\"classifier\">string</span></dt><dd><p>the displacement field step to be computed when \u2018compute_forward\u2019\nand \u2018compute_backward\u2019 are called. Either \u2018demons\u2019 or\n\u2018gauss_newton\u2019</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SSDMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the updated displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SSDMetric.compute_demons_step\">\n<code class=\"sig-name descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for SSD metric</p>\n<p>Computes the demons step proposed by Vercauteren et al.[Vercauteren09]\nfor the SSD metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Demons step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"simple\">\n<dt>[Vercauteren09] Tom Vercauteren, Xavier Pennec, Aymeric Perchant,</dt><dd><p>Nicholas Ayache, \u201cDiffeomorphic Demons: Efficient\nNon-parametric Image Registration\u201d, Neuroimage 2009</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SSDMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SSDMetric.compute_gauss_newton_step\">\n<code class=\"sig-name descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Minimizes the linearized energy function (Newton step) defined by the\nsum of squared differences of corresponding pixels of the input images\nwith respect to the displacement field.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape = static_image.shape + (3,)</span></dt><dd><p>if forward_step==True, the forward SSD Gauss-Newton step,\nelse, the backward step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SSDMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Nothing to free for the SSD metric</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SSDMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Sum of Squared Differences (data term) energy computed at\nthe largest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SSDMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SSDMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the gradient of the input images to be used in the\ncomputation of the forward and backward steps.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlinelinearregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.StreamlineLinearRegistration\" title=\"dipy.align._public.StreamlineLinearRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><a class=\"headerlink\" href=\"#streamlinelinearregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.StreamlineLinearRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">StreamlineLinearRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">x0='rigid'</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">verbose=False</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em>, <em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.StreamlineLinearRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.StreamlineLinearRegistration.optimize\" title=\"dipy.align._public.StreamlineLinearRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,\u00a0moving[,\u00a0mat])</p></td>\n<td><p>Find the minimum of the provided metric.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.StreamlineLinearRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">x0='rigid'</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">verbose=False</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em>, <em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.StreamlineLinearRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Linear registration of 2 sets of streamlines <a class=\"reference internal\" href=\"#rcc6aae026f5b-garyfallidis15\" id=\"id1\">[Garyfallidis15]</a>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\">StreamlineDistanceMetric,</span></dt><dd><p>If None and fast is False then the BMD distance is used. If fast\nis True then a faster implementation of BMD is used. Otherwise,\nuse the given distance metric.</p>\n</dd>\n<dt><strong>x0</strong><span class=\"classifier\">array or int or str</span></dt><dd><p>Initial parametrization for the optimization.</p>\n<dl>\n<dt>If 1D array with:</dt><dd><p>a) 6 elements then only rigid registration is performed with\nthe 3 first elements for translation and 3 for rotation.\nb) 7 elements also isotropic scaling is performed (similarity).\nc) 12 elements then translation, rotation (in degrees),\nscaling and shearing is performed (affine).</p>\n<p>Here is an example of x0 with 12 elements:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">x0=np.array([0,</span> <span class=\"pre\">10,</span> <span class=\"pre\">0,</span> <span class=\"pre\">40,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">2.,</span> <span class=\"pre\">1.5,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">-0.5,</span> <span class=\"pre\">0])</span></code></p>\n<p>This has translation (0, 10, 0), rotation (40, 0, 0) in\ndegrees, scaling (2., 1.5, 1) and shearing (0.1, -0.5, 0).</p>\n</dd>\n<dt>If int:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>6</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>7</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>12</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>If str:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>\u201crigid\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201csimilarity\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201caffine\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">str,</span></dt><dd><p>\u2018L_BFGS_B\u2019 or \u2018Powell\u2019 optimizers can be used. Default is\n\u2018L_BFGS_B\u2019.</p>\n</dd>\n<dt><strong>bounds</strong><span class=\"classifier\">list of tuples or None,</span></dt><dd><p>If method == \u2018L_BFGS_B\u2019 then we can use bounded optimization.\nFor example for the six parameters of rigid rotation we can set\nthe bounds = [(-30, 30), (-30, 30), (-30, 30),</p>\n<blockquote>\n<div><p>(-45, 45), (-45, 45), (-45, 45)]</p>\n</div></blockquote>\n<p>That means that we have set the bounds for the three translations\nand three rotation axes (in degrees).</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, if True then information about the optimization is shown.\nDefault: False.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">None or dict,</span></dt><dd><p>Extra options to be used with the selected method.</p>\n</dd>\n<dt><strong>evolution</strong><span class=\"classifier\">boolean</span></dt><dd><p>If True save the transformation for each iteration of the\noptimizer. Default is False. Supported only with Scipy &gt;= 0.11.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rcc6aae026f5b-garyfallidis15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id1\">Garyfallidis15</a></span></dt>\n<dd><p>Garyfallidis et al. \u201cRobust and efficient linear\nregistration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015</p>\n</dd>\n<dt class=\"label\" id=\"rcc6aae026f5b-garyfallidis14\"><span class=\"brackets\">Garyfallidis14</span></dt>\n<dd><p>Garyfallidis et al., \u201cDirect native-space fiber\nbundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</dd>\n<dt class=\"label\" id=\"rcc6aae026f5b-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based\nregistration and clustering, Neuroimage, 2017.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.StreamlineLinearRegistration.optimize\">\n<code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">mat=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.StreamlineLinearRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the minimum of the provided metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Reference or fixed set of streamlines.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Moving set of streamlines.</p>\n</dd>\n<dt><strong>mat</strong><span class=\"classifier\">array</span></dt><dd><p>Transformation (4, 4) matrix to start the registration. <code class=\"docutils literal notranslate\"><span class=\"pre\">mat</span></code>\nis applied to moving. Default value None which means that initial\ntransformation will be generated by shifting the centers of moving\nand static sets of streamlines to the origin.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>map</strong><span class=\"classifier\">StreamlineRegistrationMap</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"symmetricdiffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration\" title=\"dipy.align._public.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#symmetricdiffeomorphicregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.SymmetricDiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">SymmetricDiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">step_length=0.25</em>, <em class=\"sig-param\">ss_sigma_factor=0.2</em>, <em class=\"sig-param\">opt_tol=1e-05</em>, <em class=\"sig-param\">inv_iter=20</em>, <em class=\"sig-param\">inv_tol=0.001</em>, <em class=\"sig-param\">callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.imwarp.DiffeomorphicRegistration</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration.get_map\" title=\"dipy.align._public.SymmetricDiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_map</span></code></a>()</p></td>\n<td><p>Return the resulting diffeomorphic map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration.optimize\" title=\"dipy.align._public.SymmetricDiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,\u00a0moving[,\u00a0\u2026])</p></td>\n<td><p>Starts the optimization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_level_iters</span></code>(level_iters)</p></td>\n<td><p>Sets the number of iterations at each pyramid level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration.update\" title=\"dipy.align._public.SymmetricDiffeomorphicRegistration.update\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code></a>(current_displacement,\u00a0\u2026)</p></td>\n<td><p>Composition of the current displacement field with the given field</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SymmetricDiffeomorphicRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">step_length=0.25</em>, <em class=\"sig-param\">ss_sigma_factor=0.2</em>, <em class=\"sig-param\">opt_tol=1e-05</em>, <em class=\"sig-param\">inv_iter=20</em>, <em class=\"sig-param\">inv_tol=0.001</em>, <em class=\"sig-param\">callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Symmetric Diffeomorphic Registration (SyN) Algorithm</p>\n<p>Performs the multi-resolution optimization algorithm for non-linear\nregistration using a given similarity metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>metric</strong><span class=\"classifier\">SimilarityMetric object</span></dt><dd><p>the metric to be optimized</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">list of int</span></dt><dd><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused)</p>\n</dd>\n<dt><strong>opt_tol</strong><span class=\"classifier\">float</span></dt><dd><p>the optimization will stop when the estimated derivative of the\nenergy profile w.r.t. time falls below this threshold</p>\n</dd>\n<dt><strong>inv_iter</strong><span class=\"classifier\">int</span></dt><dd><p>the number of iterations to be performed by the displacement field\ninversion algorithm</p>\n</dd>\n<dt><strong>step_length</strong><span class=\"classifier\">float</span></dt><dd><p>the length of the maximum displacement vector of the update\ndisplacement field at each iteration</p>\n</dd>\n<dt><strong>ss_sigma_factor</strong><span class=\"classifier\">float</span></dt><dd><p>parameter of the scale-space smoothing kernel. For example, the\nstd. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, \u2026, n_scales is the scale</p>\n</dd>\n<dt><strong>inv_tol</strong><span class=\"classifier\">float</span></dt><dd><p>the displacement field inversion algorithm will stop iterating\nwhen the inversion error falls below this threshold</p>\n</dd>\n<dt><strong>callback</strong><span class=\"classifier\">function(SymmetricDiffeomorphicRegistration)</span></dt><dd><p>a function receiving a SymmetricDiffeomorphicRegistration object\nto be called after each iteration (this optimizer will call this\nfunction passing self as parameter)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SymmetricDiffeomorphicRegistration.get_map\">\n<code class=\"sig-name descname\">get_map</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the resulting diffeomorphic map.</p>\n<p>Returns the DiffeomorphicMap registering the moving image towards\nthe static image.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SymmetricDiffeomorphicRegistration.optimize\">\n<code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>the image to be used as reference during optimization. The\ndisplacement fields will have the same discretization as the static\nimage.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. Since the\ndeformation fields\u2019 discretization is the same as the static image,\nit is necessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the \u2018prealign\u2019\nmatrix</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation associated to the static image</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation associated to the moving image</p>\n</dd>\n<dt><strong>prealign</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the affine transformation (operating on the physical space)\npre-aligning the moving image towards the static</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>static_to_ref</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the diffeomorphic map that brings the moving image towards the\nstatic one in the forward direction (i.e. by calling\nstatic_to_ref.transform) and the static image towards the\nmoving one in the backward direction (i.e. by calling\nstatic_to_ref.transform_inverse).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align._public.SymmetricDiffeomorphicRegistration.update\">\n<code class=\"sig-name descname\">update</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">current_displacement</em>, <em class=\"sig-param\">new_displacement</em>, <em class=\"sig-param\">disp_world2grid</em>, <em class=\"sig-param\">time_scaling</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.SymmetricDiffeomorphicRegistration.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of the current displacement field with the given field</p>\n<p>Interpolates new displacement at the locations defined by\ncurrent_displacement. Equivalently, computes the composition C of the\ngiven displacement fields as C(x) = B(A(x)), where A is\ncurrent_displacement and B is new_displacement. This function is\nintended to be used with deformation fields of the same sampling\n(e.g. to be called by a registration algorithm).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>current_displacement</strong><span class=\"classifier\">array, shape (R\u2019, C\u2019, 2) or (S\u2019, R\u2019, C\u2019, 3)</span></dt><dd><p>the displacement field defining where to interpolate\nnew_displacement</p>\n</dd>\n<dt><strong>new_displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the displacement field to be warped by current_displacement</p>\n</dd>\n<dt><strong>disp_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the space-to-grid transform associated with the displacements\u2019\ngrid (we assume that both displacements are discretized over the\nsame grid)</p>\n</dd>\n<dt><strong>time_scaling</strong><span class=\"classifier\">float</span></dt><dd><p>scaling factor applied to d2. The effect may be interpreted as\nmoving d1 displacements along a factor (<cite>time_scaling</cite>) of d2.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>updated</strong><span class=\"classifier\">array, shape (the same as new_displacement)</span></dt><dd><p>the warped displacement field</p>\n</dd>\n<dt><strong>mean_norm</strong><span class=\"classifier\">the mean norm of all vectors in current_displacement</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"translationtransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.align._public.TranslationTransform3D\" title=\"dipy.align._public.TranslationTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a><a class=\"headerlink\" href=\"#translationtransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align._public.TranslationTransform3D\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">TranslationTransform3D</code><a class=\"headerlink\" href=\"#dipy.align._public.TranslationTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code></p></td>\n<td><p>Parameter values corresponding to the identity transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code></p></td>\n<td><p>Jacobian function of this transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code></p></td>\n<td><p>Matrix representation of this transform with the given parameters</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 74%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_dim</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_number_of_parameters</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align._public.TranslationTransform3D.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.TranslationTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Translation transform in 3D</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id5\">\n<h3>affine<a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.affine\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">reg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a translation transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.</p>\n</dd>\n<dt><strong>reg</strong><span class=\"classifier\">AffineRegistration class instance.</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, transform.affine</strong><span class=\"classifier\">array with moving data resampled to the</span></dt><dd></dd>\n<dt>static space after computing the affine transformation and the affine</dt><dd></dd>\n<dt>4x4 associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id6\">\n<h3>affine_registration<a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.affine_registration\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">affine_registration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">pipeline=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">metric='MI'</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">sigmas=None</em>, <em class=\"sig-param\">factors=None</em>, <em class=\"sig-param\">**metric_kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.affine_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the affine transformation between two 3D images.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>pipeline</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>Sequence of transforms to use in the gradual fitting of the full\naffine. Default: (executed from left to right):\n<cite>[center_of_mass, translation, rigid, affine]</cite></p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.\nDefault: identity.</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">str, optional.</span></dt><dd><p>Currently only supports \u2018MI\u2019 for MutualInformationMetric.</p>\n</dd>\n<dt><strong>nbins</strong><span class=\"classifier\">int, optional</span></dt><dd><p>MutualInformationMetric key-word argument: the number of bins to be\nused for computing the intensity histograms. The default is 32.</p>\n</dd>\n<dt><strong>sampling_proportion</strong><span class=\"classifier\">None or float in interval (0, 1], optional</span></dt><dd><p>MutualInformationMetric key-word argument: There are two types of\nsampling: dense and sparse. Dense sampling uses all voxels for\nestimating the (joint and marginal) intensity histograms, while\nsparse sampling uses a subset of them. If <cite>sampling_proportion</cite> is\nNone, then dense sampling is used. If <cite>sampling_proportion</cite> is a\nfloating point value in (0,1] then sparse sampling is used,\nwhere <cite>sampling_proportion</cite> specifies the proportion of voxels to\nbe used. The default is None (dense sampling).</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>AffineRegistration key-word argument: the number of iterations at each\nscale of the scale space. <cite>level_iters[0]</cite> corresponds to the coarsest\nscale, <cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</dd>\n<dt><strong>sigmas</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>AffineRegistration key-word argument: custom smoothing parameter to\nbuild the scale space (one parameter for each scale). By default,\nthe sequence of sigmas will be [3, 1, 0].</p>\n</dd>\n<dt><strong>factors</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>AffineRegistration key-word argument: custom scale factors to build the\nscale space (one factor for each scale). By default, the sequence of\nfactors will be [4, 2, 1].</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, affine</strong><span class=\"classifier\">array with moving data resampled to the static space</span></dt><dd></dd>\n<dt>after computing the affine transformation and the affine 4x4</dt><dd></dd>\n<dt>associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Performs a gradual registration between the two inputs, using a pipeline\nthat gradually approximates the final registration. If the final default\nstep (<cite>affine</cite>) is ommitted, the resulting affine may not have all 12\ndegrees of freedom adjusted.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id7\">\n<h3>center_of_mass<a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.center_of_mass\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">center_of_mass</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">reg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.center_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a center of mass transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.</p>\n</dd>\n<dt><strong>reg</strong><span class=\"classifier\">not needed here. Use None</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, transform.affine</strong><span class=\"classifier\">array with moving data resampled to the</span></dt><dd></dd>\n<dt>static space after computing the center of mass transformation and the</dt><dd></dd>\n<dt>affine 4x4 associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#load-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-trk\">\n<h3>load_trk<a class=\"headerlink\" href=\"#load-trk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.load_trk\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">load_trk</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">to_space=&lt;Space.RASMM: 'rasmm'&gt;</em>, <em class=\"sig-param\">to_origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">bbox_valid_check=True</em>, <em class=\"sig-param\">trk_header_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.load_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram of the .trk format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-img-arr-or-path\">\n<h3>read_img_arr_or_path<a class=\"headerlink\" href=\"#read-img-arr-or-path\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.read_img_arr_or_path\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">read_img_arr_or_path</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.read_img_arr_or_path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Helper function that handles inputs that can be paths, nifti img or arrays</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">array or nib.Nifti1Image or str.</span></dt><dd><p>Either as a 3D/4D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>data, affine</strong><span class=\"classifier\">ndarray and 4x4 array</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id8\">\n<h3>read_mapping<a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.read_mapping\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">read_mapping</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">disp</em>, <em class=\"sig-param\">domain_img</em>, <em class=\"sig-param\">codomain_img</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.read_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read a syn registration mapping from a nifti file</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>disp</strong><span class=\"classifier\">str or Nifti1Image</span></dt><dd><p>A file of image containing the mapping displacement field in each voxel\nShape (x, y, z, 3, 2)</p>\n</dd>\n<dt><strong>domain_img</strong><span class=\"classifier\">str or Nifti1Image</span></dt><dd></dd>\n<dt><strong>codomain_img</strong><span class=\"classifier\">str or Nifti1Image</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A <a class=\"reference internal\" href=\"#dipy.align._public.DiffeomorphicMap\" title=\"dipy.align._public.DiffeomorphicMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a> object.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See <a class=\"reference internal\" href=\"#dipy.align._public.write_mapping\" title=\"dipy.align._public.write_mapping\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">write_mapping()</span></code></a> for the data format expected.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id9\">\n<h3>register_dwi_series<a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.register_dwi_series\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">register_dwi_series</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">data</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">affine=None</em>, <em class=\"sig-param\">b0_ref=0</em>, <em class=\"sig-param\">pipeline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.register_dwi_series\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a DWI series to the mean of the B0 images in that series (all\nfirst registered to the first B0 volume)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">4D array or nibabel Nifti1Image class instance or str</span></dt><dd><p>Diffusion data. Either as a 4D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt><strong>gtab</strong><span class=\"classifier\">a GradientTable class instance or tuple of strings</span></dt><dd><p>If provided as a tuple of strings, these are assumed to be full paths\nto the bvals and bvecs files (in that order).</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n<dt><strong>b0_ref</strong><span class=\"classifier\">int, optional.</span></dt><dd><p>Which b0 volume to use as reference. Default: 0</p>\n</dd>\n<dt><strong>pipeline</strong><span class=\"classifier\">list of callables, optional.</span></dt><dd><p>The transformations to perform in sequence (from left to right):\nDefault: <cite>[center_of_mass, translation, rigid, affine]</cite></p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>xform_img, affine_array: a Nifti1Image containing the registered data and</dt><dd></dd>\n<dt>using the affine of the original data and a list containing the affine</dt><dd></dd>\n<dt>transforms associated with each of the</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id10\">\n<h3>register_dwi_to_template<a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.register_dwi_to_template\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">register_dwi_to_template</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dwi</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">dwi_affine=None</em>, <em class=\"sig-param\">template=None</em>, <em class=\"sig-param\">template_affine=None</em>, <em class=\"sig-param\">reg_method='syn'</em>, <em class=\"sig-param\">**reg_kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.register_dwi_to_template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register DWI data to a template through the B0 volumes.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>dwi</strong><span class=\"classifier\">4D array, nifti image or str</span></dt><dd><p>Containing the DWI data, or full path to a nifti file with DWI.</p>\n</dd>\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable or sequence of strings</span></dt><dd><p>The gradients associated with the DWI data, or a sequence with\n(fbval, fbvec), full paths to bvals and bvecs files.</p>\n</dd>\n<dt><strong>dwi_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the DWI. Required if data\nis provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>template</strong><span class=\"classifier\">3D array, nifti image or str</span></dt><dd><p>Containing the data for the template, or full path to a nifti file\nwith the template data.</p>\n</dd>\n<dt><strong>template_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the template. Required if data\nis provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>reg_method</strong><span class=\"classifier\">str,</span></dt><dd><p>One of \u201csyn\u201d or \u201caff\u201d, which designates which registration method is\nused. Either syn, which uses the <a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\" title=\"dipy.align._public.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a> function\nor <a class=\"reference internal\" href=\"#dipy.align._public.affine_registration\" title=\"dipy.align._public.affine_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">affine_registration()</span></code></a> function. Default: \u201csyn\u201d.</p>\n</dd>\n<dt><strong>reg_kwargs</strong><span class=\"classifier\">key-word arguments for <a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\" title=\"dipy.align._public.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a> or</span></dt><dd><p><a class=\"reference internal\" href=\"#dipy.align._public.affine_registration\" title=\"dipy.align._public.affine_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">affine_registration()</span></code></a></p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>warped_b0, mapping: The fist is an array with the b0 volume warped to the</dt><dd></dd>\n<dt>template. If reg_method is \u201csyn\u201d, the second is a DiffeomorphicMap class</dt><dd></dd>\n<dt>instance that can be used to transform between the two spaces. Otherwise,</dt><dd></dd>\n<dt>if reg_method is \u201caff\u201d, this is a 4x4 matrix encoding the affine transform.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This function assumes that the DWI data is already internally registered.\nSee <a class=\"reference internal\" href=\"#dipy.align._public.register_dwi_series\" title=\"dipy.align._public.register_dwi_series\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">register_dwi_series()</span></code></a>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id11\">\n<h3>register_series<a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.register_series\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">register_series</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">series</em>, <em class=\"sig-param\">ref</em>, <em class=\"sig-param\">pipeline=None</em>, <em class=\"sig-param\">series_affine=None</em>, <em class=\"sig-param\">ref_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.register_series\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a series to a reference image.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>series</strong><span class=\"classifier\">4D array or nib.Nifti1Image class instance or str</span></dt><dd><p>The data is 4D with the last dimension separating different 3D volumes</p>\n</dd>\n<dt><strong>ref</strong><span class=\"classifier\">int or 3D array or nib.Nifti1Image class instance or str</span></dt><dd><p>If this is an int, this is the index of the reference image within the\nseries. Otherwise it is an array of data to register with (associated\nwith a <cite>ref_affine</cite> required) or a nifti img or full path to a file\ncontaining one.</p>\n</dd>\n<dt><strong>pipeline</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>Sequence of transforms to do for each volume in the series.\nDefault: (executed from left to right):\n<cite>[center_of_mass, translation, rigid, affine]</cite></p>\n</dd>\n<dt><strong>series_affine, ref_affine</strong><span class=\"classifier\">4x4 arrays, optional.</span></dt><dd><p>The affine. If provided, this input will over-ride the affine provided\ntogether with the nifti img or file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>xformed, affines</strong><span class=\"classifier\">4D array with transformed data and a (4,4,n) array</span></dt><dd></dd>\n<dt>with 4x4 matrices associated with each of the volumes of the input moving</dt><dd></dd>\n<dt>data that was used to transform it into register with the static data.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id12\">\n<h3>resample<a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.resample\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">resample</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">between_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.resample\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Resample an image (moving) from one space to another (static).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>between_affine: 4x4 array, optional</strong></dt><dd><p>If an additional affine is needed betweeen the two spaces.\nDefault: identity (no additional registration).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A Nifti1Image class instance with the data from the moving object</dt><dd></dd>\n<dt>resampled into the space of the static object.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id13\">\n<h3>rigid<a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.rigid\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">rigid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">reg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.rigid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a rigid transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.</p>\n</dd>\n<dt><strong>reg</strong><span class=\"classifier\">AffineRegistration class instance.</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, transform.affine</strong><span class=\"classifier\">array with moving data resampled to the</span></dt><dd></dd>\n<dt>static space after computing the rigid transformation and the affine 4x4</dt><dd></dd>\n<dt>associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-nifti\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#save-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"set-number-of-points\">\n<h3>set_number_of_points<a class=\"headerlink\" href=\"#set-number-of-points\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.set_number_of_points\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">set_number_of_points</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.set_number_of_points\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Change the number of points of streamlines</dt><dd><p>(either by downsampling or upsampling)</p>\n</dd>\n</dl>\n<p>Change the number of points of streamlines in order to obtain\n<cite>nb_points</cite>-1 segments of equal length. Points of streamlines will be\nmodified along the curve.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>If ndarray, must have shape (N,3) where N is the number of points\nof the streamline.\nIf list, each item must be ndarray shape (Ni,3) where Ni is the number\nof points of streamline i.\nIf <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a>, its <cite>common_shape</cite> must be 3.</p>\n</dd>\n<dt><strong>nb_points</strong><span class=\"classifier\">int</span></dt><dd><p>integer representing number of points wanted along the curve.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>new_streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>Results of the downsampling or upsampling process.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"k\">import</span> <span class=\"n\">set_number_of_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</pre></div>\n</div>\n<p>One streamline, a semi-circle:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">modified_streamline</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">modified_streamline</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</pre></div>\n</div>\n<p>Multiple streamlines:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">streamline</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[100, 50]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">new_streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[10, 10]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id14\">\n<h3>streamline_registration<a class=\"headerlink\" href=\"#id14\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.streamline_registration\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">streamline_registration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">n_points=100</em>, <em class=\"sig-param\">native_resampled=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.streamline_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register two collections of streamlines (\u2018bundles\u2019) to each other</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving, static</strong><span class=\"classifier\">lists of 3 by n, or str</span></dt><dd><p>The two bundles to be registered. Given either as lists of arrays with\n3D coordinates, or strings containing full paths to these files.</p>\n</dd>\n<dt><strong>n_points</strong><span class=\"classifier\">int, optional</span></dt><dd><p>How many points to resample to. Default: 100.</p>\n</dd>\n<dt><strong>native_resampled</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the moving bundle in the original space, but\nresampled in the static space to n_points.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>aligned</strong><span class=\"classifier\">list</span></dt><dd><p>Streamlines from the moving group, moved to be closely matched to\nthe static group.</p>\n</dd>\n<dt><strong>matrix</strong><span class=\"classifier\">array (4, 4)</span></dt><dd><p>The affine transformation that takes us from \u2018moving\u2019 to \u2018static\u2019</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id15\">\n<h3>syn_registration<a class=\"headerlink\" href=\"#id15\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.syn_registration\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">syn_registration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">step_length=0.25</em>, <em class=\"sig-param\">metric='CC'</em>, <em class=\"sig-param\">dim=3</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">prealign=None</em>, <em class=\"sig-param\">**metric_kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.syn_registration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Register a 2D/3D source image (moving) to a 2D/3D target image (static).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving, static</strong><span class=\"classifier\">array or nib.Nifti1Image or str.</span></dt><dd><p>Either as a 2D/3D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt><strong>moving_affine, static_affine</strong><span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">string, optional</span></dt><dd><p>The metric to be optimized. One of <cite>CC</cite>, <cite>EM</cite>, <cite>SSD</cite>,\nDefault: \u2018CC\u2019 =&gt; CCMetric.</p>\n</dd>\n<dt><strong>dim: int (either 2 or 3), optional</strong></dt><dd><p>The dimensions of the image domain. Default: 3</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">list of int, optional</span></dt><dd><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused). Default: [10, 10, 5].</p>\n</dd>\n<dt><strong>metric_kwargs</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Parameters for initialization of the metric object. If not provided,\nuses the default settings of each metric.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>warped_moving</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The data in <cite>moving</cite>, warped towards the <cite>static</cite> data.</p>\n</dd>\n<dt><strong>forward</strong><span class=\"classifier\">ndarray (\u2026, 3)</span></dt><dd><p>The vector field describing the forward warping from the source to the\ntarget.</p>\n</dd>\n<dt><strong>backward</strong><span class=\"classifier\">ndarray (\u2026, 3)</span></dt><dd><p>The vector field describing the backward warping from the target to the\nsource.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-centers-of-mass\">\n<h3>transform_centers_of_mass<a class=\"headerlink\" href=\"#transform-centers-of-mass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.transform_centers_of_mass\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">transform_centers_of_mass</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.transform_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the center of mass of the input images.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_map</strong><span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine transformation (translation only, in this case) aligning\nthe center of mass of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-tracking-output\">\n<h3>transform_tracking_output<a class=\"headerlink\" href=\"#transform-tracking-output\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.transform_tracking_output\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">transform_tracking_output</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tracking_output</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">save_seeds=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.transform_tracking_output\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies a linear transformation, given by affine, to streamlines.\nParameters\n\u2014\u2014\u2014-\nstreamlines : Streamlines generator</p>\n<blockquote>\n<div><p>Either streamlines (list, ArraySequence) or a tuple with streamlines\nand seeds together</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>affine<span class=\"classifier\">array (4, 4)</span></dt><dd><p>The mapping between voxel indices and the point space for seeds.\nThe voxel_to_rasmm matrix, typically from a NIFTI file.</p>\n</dd>\n<dt>save_seeds<span class=\"classifier\">bool, optional</span></dt><dd><p>If set, seeds associated to streamlines will be also moved and returned</p>\n</dd>\n</dl>\n<dl class=\"simple\">\n<dt>streamlines<span class=\"classifier\">generator</span></dt><dd><p>A generator for the sequence of transformed streamlines.\nIf save_seeds is True, also return a generator for the\ntransformed seeds.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id16\">\n<h3>translation<a class=\"headerlink\" href=\"#id16\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.translation\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">translation</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_affine=None</em>, <em class=\"sig-param\">moving_affine=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">reg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.translation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements a translation transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the moving object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>moving_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the moving object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, nifti image or str</span></dt><dd><p>Containing the data for the static object, or full path to a nifti file\nwith the moving data.</p>\n</dd>\n<dt><strong>static_affine</strong><span class=\"classifier\">4x4 array, optional</span></dt><dd><p>An affine transformation associated with the static object. Required if\ndata is provided as an array. If provided together with nifti/path,\nwill over-ride the affine that is in the nifti.</p>\n</dd>\n<dt><strong>starting_affine: 4x4 array, optional</strong></dt><dd><p>Initial guess for the transformation between the spaces.</p>\n</dd>\n<dt><strong>reg</strong><span class=\"classifier\">AffineRegistration class instance.</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed, transform.affine</strong><span class=\"classifier\">array with moving data resampled to the</span></dt><dd></dd>\n<dt>static space after computing the translation transformation and the</dt><dd></dd>\n<dt>affine 4x4 associated with the transformation.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id17\">\n<h3>write_mapping<a class=\"headerlink\" href=\"#id17\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align._public.write_mapping\">\n<code class=\"sig-prename descclassname\">dipy.align._public.</code><code class=\"sig-name descname\">write_mapping</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">mapping</em>, <em class=\"sig-param\">fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align._public.write_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write out a syn registration mapping to a nifti file</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>mapping</strong><span class=\"classifier\">a DiffeomorphicMap object derived from <a class=\"reference internal\" href=\"#dipy.align._public.syn_registration\" title=\"dipy.align._public.syn_registration\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">syn_registration()</span></code></a></span></dt><dd></dd>\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to the nifti file storing the mapping</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The data in the file is organized with shape (X, Y, Z, 2, 3, 3), such\nthat the forward mapping in each voxel is in <cite>data[i, j, k, 0, :, :]</cite> and\nthe backward mapping in each voxel is in <cite>data[i, j, k, 0, :, :]</cite>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineinvalidvalueserror\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInvalidValuesError\" title=\"dipy.align.imaffine.AffineInvalidValuesError\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineInvalidValuesError</span></code></a><a class=\"headerlink\" href=\"#affineinvalidvalueserror\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineInvalidValuesError\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">AffineInvalidValuesError</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInvalidValuesError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#Exception\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Exception</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>args</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">with_traceback</span></code></p></td>\n<td><p>Exception.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineInvalidValuesError.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInvalidValuesError.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineinversionerror\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"dipy.align.imaffine.AffineInversionError\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineInversionError</span></code></a><a class=\"headerlink\" href=\"#affineinversionerror\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineInversionError\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">AffineInversionError</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInversionError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#Exception\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Exception</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>args</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">with_traceback</span></code></p></td>\n<td><p>Exception.with_traceback(tb) \u2013 set self.__traceback__ to tb and return self.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineInversionError.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineInversionError.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id18\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap\" title=\"dipy.align.imaffine.AffineMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a><a class=\"headerlink\" href=\"#id18\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineMap\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">AffineMap</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">domain_grid_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_grid_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.get_affine\" title=\"dipy.align.imaffine.AffineMap.get_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code></a>()</p></td>\n<td><p>Return the value of the transformation, not a reference.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.set_affine\" title=\"dipy.align.imaffine.AffineMap.set_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_affine</span></code></a>(affine)</p></td>\n<td><p>Set the affine transform (operating in physical space).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.transform\" title=\"dipy.align.imaffine.AffineMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Transform the input image from co-domain to domain space.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineMap.transform_inverse\" title=\"dipy.align.imaffine.AffineMap.transform_inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_inverse</span></code></a>(image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Transform the input image from domain to co-domain space.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">domain_grid_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_grid_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>AffineMap</p>\n<p>Implements an affine transformation whose domain is given by\n<cite>domain_grid</cite> and <cite>domain_grid2world</cite>, and whose co-domain is\ngiven by <cite>codomain_grid</cite> and <cite>codomain_grid2world</cite>.</p>\n<p>The actual transform is represented by the <cite>affine</cite> matrix, which\noperate in world coordinates. Therefore, to transform a moving image\ntowards a static image, we first map each voxel (i,j,k) of the static\nimage to world coordinates (x,y,z) by applying <cite>domain_grid2world</cite>.\nThen we apply the <cite>affine</cite> transform to (x,y,z) obtaining (x\u2019, y\u2019, z\u2019)\nin moving image\u2019s world coordinates. Finally, (x\u2019, y\u2019, z\u2019) is mapped\nto voxel coordinates (i\u2019, j\u2019, k\u2019) in the moving image by multiplying\n(x\u2019, y\u2019, z\u2019) by the inverse of <cite>codomain_grid2world</cite>. The\n<cite>codomain_grid_shape</cite> is used analogously to transform the static\nimage towards the moving image when calling <cite>transform_inverse</cite>.</p>\n<p>If the domain/co-domain information is not provided (None) then the\nsampling information needs to be specified each time the <cite>transform</cite>\nor <cite>transform_inverse</cite> is called to transform images. Note that such\nsampling information is not necessary to transform points defined in\nphysical space, such as stream lines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the matrix defining the affine transform, where <cite>dim</cite> is the\ndimension of the space this map operates in (2 for 2D images,\n3 for 3D images). If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n<dt><strong>domain_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the default domain sampling grid. When <cite>transform</cite>\nis called to transform an image, the resulting image will have\nthis shape, unless a different sampling information is provided.\nIf None, then the sampling grid shape must be specified each time\nthe <cite>transform</cite> method is called.</p>\n</dd>\n<dt><strong>domain_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>codomain_grid_shape</strong><span class=\"classifier\">sequence of integers, shape (dim,)</span></dt><dd><p>the shape of the default co-domain sampling grid. When\n<cite>transform_inverse</cite> is called to transform an image, the resulting\nimage will have this shape, unless a different sampling\ninformation is provided. If None (the default), then the sampling\ngrid shape must be specified each time the <cite>transform_inverse</cite>\nmethod is called.</p>\n</dd>\n<dt><strong>codomain_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the grid-to-world transform associated with the co-domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.get_affine\">\n<code class=\"sig-name descname\">get_affine</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the value of the transformation, not a reference.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Copy of the transform, not a reference.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.set_affine\">\n<code class=\"sig-name descname\">set_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.set_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Set the affine transform (operating in physical space).</p>\n<p>Also sets <cite>self.affine_inv</cite> - the inverse of <cite>affine</cite>, or None if\nthere is no inverse.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the matrix representing the affine transform operating in\nphysical space. The domain and co-domain information\nremains unchanged. If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.transform\">\n<code class=\"sig-name descname\">transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">sampling_grid_shape=None</em>, <em class=\"sig-param\">sampling_grid2world=None</em>, <em class=\"sig-param\">resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform the input image from co-domain to domain space.</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.domain_shape</cite> and <cite>self.domain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be transformed</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>sampling_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt><strong>sampling_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt><strong>resample_only</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>transformed</strong><span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt><dd><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineMap.transform_inverse\">\n<code class=\"sig-name descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">sampling_grid_shape=None</em>, <em class=\"sig-param\">sampling_grid2world=None</em>, <em class=\"sig-param\">resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform the input image from domain to co-domain space.</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.codomain_shape</cite> and <cite>self.codomain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be transformed</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>sampling_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt><strong>sampling_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt><strong>resample_only</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>transformed</strong><span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt><dd><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id19\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"dipy.align.imaffine.AffineRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a><a class=\"headerlink\" href=\"#id19\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.AffineRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">AffineRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">sigmas=None</em>, <em class=\"sig-param\">factors=None</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">ss_sigma_factor=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.AffineRegistration.optimize\" title=\"dipy.align.imaffine.AffineRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,\u00a0moving,\u00a0transform,\u00a0params0)</p></td>\n<td><p>Start the optimization process.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">sigmas=None</em>, <em class=\"sig-param\">factors=None</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">ss_sigma_factor=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an instance of the AffineRegistration class.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\">None or object, optional</span></dt><dd><p>an instance of a metric. The default is None, implying\nthe Mutual Information metric with default settings.</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>the number of iterations at each scale of the scale space.\n<cite>level_iters[0]</cite> corresponds to the coarsest scale,\n<cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</dd>\n<dt><strong>sigmas</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale). By default, the sequence of sigmas will be\n[3, 1, 0].</p>\n</dd>\n<dt><strong>factors</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>custom scale factors to build the scale space (one factor for each\nscale). By default, the sequence of factors will be [4, 2, 1].</p>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">string, optional</span></dt><dd><p>optimization method to be used. If Scipy version &lt; 0.12, then\nonly L-BFGS-B is available. Otherwise, <cite>method</cite> can be any\ngradient-based method available in <cite>dipy.core.Optimize</cite>: CG, BFGS,\nNewton-CG, dogleg or trust-ncg.\nThe default is \u2018L-BFGS-B\u2019.</p>\n</dd>\n<dt><strong>ss_sigma_factor</strong><span class=\"classifier\">float, optional</span></dt><dd><p>If None, this parameter is not used and an isotropic scale\nspace with the given <cite>factors</cite> and <cite>sigmas</cite> will be built.\nIf not None, an anisotropic scale space will be used by\nautomatically selecting the smoothing sigmas along each axis\naccording to the voxel dimensions of the given image.\nThe <cite>ss_sigma_factor</cite> is used to scale the automatically computed\nsigmas. For example, in the isotropic case, the sigma of the\nkernel will be <span class=\"math notranslate nohighlight\">\\(factor * (2 ^ i)\\)</span> where\n<span class=\"math notranslate nohighlight\">\\(i = 1, 2, ..., n_scales - 1\\)</span> is the scale (the finest resolution\nimage <span class=\"math notranslate nohighlight\">\\(i=0\\)</span> is never smoothed). The default is None.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>extra optimization options. The default is None, implying\nno extra options are passed to the optimizer.</p>\n</dd>\n<dt><strong>verbosity: int (one of {0, 1, 2, 3}), optional</strong></dt><dd><p>Set the verbosity level of the algorithm:\n0 : do not print anything\n1 : print information about the current status of the algorithm\n2 : print high level information of the components involved in</p>\n<blockquote>\n<div><p>the registration that can be used to detect a failing\ncomponent.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>3<span class=\"classifier\">print as much information as possible to isolate the cause</span></dt><dd><p>of a bug.</p>\n</dd>\n</dl>\n<p>Default: 1</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.docstring_addendum\">\n<code class=\"sig-name descname\">docstring_addendum</code><em class=\"property\"> = 'verbosity: int (one of {0, 1, 2, 3}), optional\\n            Set the verbosity level of the algorithm:\\n            0 : do not print anything\\n            1 : print information about the current status of the algorithm\\n            2 : print high level information of the components involved in\\n                the registration that can be used to detect a failing\\n                component.\\n            3 : print as much information as possible to isolate the cause\\n                of a bug.\\n            Default: 1\\n    '</em><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.docstring_addendum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.AffineRegistration.optimize\">\n<code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">transform</em>, <em class=\"sig-param\">params0</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">ret_metric=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.AffineRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Start the optimization process.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>transform</strong><span class=\"classifier\">instance of Transform</span></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>params0</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>starting_affine</strong><span class=\"classifier\">string, or matrix, or None, optional</span></dt><dd><dl class=\"simple\">\n<dt>If string:</dt><dd><p>\u2018mass\u2019: align centers of gravity\n\u2018voxel-origin\u2019: align physical coordinates of voxel (0,0,0)\n\u2018centers\u2019: align physical coordinates of central voxels</p>\n</dd>\n<dt>If matrix:</dt><dd><p>array, shape (dim+1, dim+1).</p>\n</dd>\n<dt>If None:</dt><dd><p>Start from identity.</p>\n</dd>\n</dl>\n<p>The default is None.</p>\n</dd>\n<dt><strong>ret_metric</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>if True, it returns the parameters for measuring the\nsimilarity between the images (default \u2018False\u2019).\nThe metric containing optimal parameters and\nthe distance between the images.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_map</strong><span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine resulting affine transformation</p>\n</dd>\n<dt><strong>xopt</strong><span class=\"classifier\">optimal parameters</span></dt><dd><p>the optimal parameters (translation, rotation shear etc.)</p>\n</dd>\n<dt><strong>fopt</strong><span class=\"classifier\">Similarity metric</span></dt><dd><p>the value of the function at the optimal parameters.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"isotropicscalespace\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"dipy.align.imaffine.IsotropicScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><a class=\"headerlink\" href=\"#isotropicscalespace\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.IsotropicScaleSpace\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">IsotropicScaleSpace</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">factors</em>, <em class=\"sig-param\">sigmas</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.IsotropicScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.scalespace.ScaleSpace</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code>(level)</p></td>\n<td><p>Voxel-to-space transformation at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine_inv</span></code>(level)</p></td>\n<td><p>Space-to-voxel transformation at a given level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_domain_shape</span></code>(level)</p></td>\n<td><p>Shape the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_expand_factors</span></code>(from_level,\u00a0to_level)</p></td>\n<td><p>Ratio of voxel size from pyramid level from_level to to_level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_image</span></code>(level)</p></td>\n<td><p>Smoothed image at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_scaling</span></code>(level)</p></td>\n<td><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sigmas</span></code>(level)</p></td>\n<td><p>Smoothing parameters used at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_spacing</span></code>(level)</p></td>\n<td><p>Spacings the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_level</span></code>(level)</p></td>\n<td><p>Prints properties of a pyramid level</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.IsotropicScaleSpace.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">factors</em>, <em class=\"sig-param\">sigmas</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.IsotropicScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>IsotropicScaleSpace</p>\n<p>Computes the Scale Space representation of an image using isotropic\nsmoothing kernels for all scales. The scale space is simply a list\nof images produced by smoothing the input image with a Gaussian\nkernel with different smoothing parameters.</p>\n<p>This specialization of ScaleSpace allows the user to provide custom\nscale and smoothing factors for all scales.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (r,c) or (s, r, c) where s is the number of</span></dt><dd><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</dd>\n<dt><strong>factors</strong><span class=\"classifier\">list of floats</span></dt><dd><p>custom scale factors to build the scale space (one factor for each\nscale).</p>\n</dd>\n<dt><strong>sigmas</strong><span class=\"classifier\">list of floats</span></dt><dd><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale).</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix.</p>\n</dd>\n<dt><strong>input_spacing</strong><span class=\"classifier\">array, shape (dim,), optional</span></dt><dd><p>the spacing (voxel size) between voxels in physical space. The\ndefault if 1.0 along all axes.</p>\n</dd>\n<dt><strong>mask0</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id20\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"dipy.align.imaffine.MutualInformationMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a><a class=\"headerlink\" href=\"#id20\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">MutualInformationMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">nbins=32</em>, <em class=\"sig-param\">sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance\" title=\"dipy.align.imaffine.MutualInformationMetric.distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance</span></code></a>(params)</p></td>\n<td><p>Numeric value of the negative Mutual Information.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\" title=\"dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance_and_gradient</span></code></a>(params)</p></td>\n<td><p>Numeric value of the metric and its gradient at given parameters.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.gradient\" title=\"dipy.align.imaffine.MutualInformationMetric.gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient</span></code></a>(params)</p></td>\n<td><p>Numeric value of the metric\u2019s gradient at the given parameters.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.MutualInformationMetric.setup\" title=\"dipy.align.imaffine.MutualInformationMetric.setup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup</span></code></a>(transform,\u00a0static,\u00a0moving[,\u00a0\u2026])</p></td>\n<td><p>Prepare the metric to compute intensity densities and gradients.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">nbins=32</em>, <em class=\"sig-param\">sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an instance of the Mutual Information metric.</p>\n<p>This class implements the methods required by Optimizer to drive the\nregistration process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>nbins</strong><span class=\"classifier\">int, optional</span></dt><dd><p>the number of bins to be used for computing the intensity\nhistograms. The default is 32.</p>\n</dd>\n<dt><strong>sampling_proportion</strong><span class=\"classifier\">None or float in interval (0, 1], optional</span></dt><dd><p>There are two types of sampling: dense and sparse. Dense sampling\nuses all voxels for estimating the (joint and marginal) intensity\nhistograms, while sparse sampling uses a subset of them. If\n<cite>sampling_proportion</cite> is None, then dense sampling is\nused. If <cite>sampling_proportion</cite> is a floating point value in (0,1]\nthen sparse sampling is used, where <cite>sampling_proportion</cite>\nspecifies the proportion of voxels to be used. The default is\nNone.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Since we use linear interpolation, images are not, in general,\ndifferentiable at exact voxel coordinates, but they are differentiable\nbetween voxel coordinates. When using sparse sampling, selected voxels\nare slightly moved by adding a small random displacement within one\nvoxel to prevent sampling points from being located exactly at voxel\ncoordinates. When using dense sampling, this random displacement is\nnot applied.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.distance\">\n<code class=\"sig-name descname\">distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the negative Mutual Information.</p>\n<p>We need to change the sign so we can use standard minimization\nalgorithms.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>neg_mi</strong><span class=\"classifier\">float</span></dt><dd><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\">\n<code class=\"sig-name descname\">distance_and_gradient</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.distance_and_gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric and its gradient at given parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>neg_mi</strong><span class=\"classifier\">float</span></dt><dd><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n<dt><strong>neg_mi_grad</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.gradient\">\n<code class=\"sig-name descname\">gradient</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric\u2019s gradient at the given parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>grad</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.MutualInformationMetric.setup\">\n<code class=\"sig-name descname\">setup</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">transform</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">starting_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.MutualInformationMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepare the metric to compute intensity densities and gradients.</p>\n<p>The histograms will be setup to compute probability densities of\nintensities within the minimum and maximum values of <cite>static</cite> and\n<cite>moving</cite></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>transform: instance of Transform</strong></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S\u2019, R\u2019, C\u2019) or (R\u2019, C\u2019)</span></dt><dd><p>moving image. The dimensions of the static (S, R, C) and moving\n(S\u2019, R\u2019, C\u2019) images do not need to be the same.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array (dim+1, dim+1), optional</span></dt><dd><p>the grid-to-space transform of the static image. The default is\nNone, implying the transform is the identity.</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array (dim+1, dim+1)</span></dt><dd><p>the grid-to-space transform of the moving image. The default is\nNone, implying the spacing along all axes is 1.</p>\n</dd>\n<dt><strong>starting_affine</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the pre-aligning matrix (an affine transform) that roughly aligns\nthe moving image towards the static image. If None, no\npre-alignment is performed. If a pre-alignment matrix is available,\nit is recommended to provide this matrix as <cite>starting_affine</cite>\ninstead of manually transforming the moving image to reduce\ninterpolation artifacts. The default is None, implying no\npre-alignment is performed.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optimizer\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.Optimizer\" title=\"dipy.align.imaffine.Optimizer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a><a class=\"headerlink\" href=\"#optimizer\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.Optimizer\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">Optimizer</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fun</em>, <em class=\"sig-param\">x0</em>, <em class=\"sig-param\">args=()</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">jac=None</em>, <em class=\"sig-param\">hess=None</em>, <em class=\"sig-param\">hessp=None</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">constraints=()</em>, <em class=\"sig-param\">tol=None</em>, <em class=\"sig-param\">callback=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evolution</strong></dt><dd></dd>\n<dt><strong>fopt</strong></dt><dd></dd>\n<dt><strong>message</strong></dt><dd></dd>\n<dt><strong>nfev</strong></dt><dd></dd>\n<dt><strong>nit</strong></dt><dd></dd>\n<dt><strong>xopt</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 63%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>print_summary</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fun</em>, <em class=\"sig-param\">x0</em>, <em class=\"sig-param\">args=()</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">jac=None</em>, <em class=\"sig-param\">hess=None</em>, <em class=\"sig-param\">hessp=None</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">constraints=()</em>, <em class=\"sig-param\">tol=None</em>, <em class=\"sig-param\">callback=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class for handling minimization of scalar function of one or more\nvariables.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>fun</strong><span class=\"classifier\">callable</span></dt><dd><p>Objective function.</p>\n</dd>\n<dt><strong>x0</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Initial guess.</p>\n</dd>\n<dt><strong>args</strong><span class=\"classifier\">tuple, optional</span></dt><dd><p>Extra arguments passed to the objective function and its\nderivatives (Jacobian, Hessian).</p>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">str, optional</span></dt><dd><p>Type of solver.  Should be one of</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>\u2018Nelder-Mead\u2019</p></li>\n<li><p>\u2018Powell\u2019</p></li>\n<li><p>\u2018CG\u2019</p></li>\n<li><p>\u2018BFGS\u2019</p></li>\n<li><p>\u2018Newton-CG\u2019</p></li>\n<li><p>\u2018Anneal\u2019</p></li>\n<li><p>\u2018L-BFGS-B\u2019</p></li>\n<li><p>\u2018TNC\u2019</p></li>\n<li><p>\u2018COBYLA\u2019</p></li>\n<li><p>\u2018SLSQP\u2019</p></li>\n<li><p>\u2018dogleg\u2019</p></li>\n<li><p>\u2018trust-ncg\u2019</p></li>\n</ul>\n</div></blockquote>\n</dd>\n<dt><strong>jac</strong><span class=\"classifier\">bool or callable, optional</span></dt><dd><p>Jacobian of objective function. Only for CG, BFGS, Newton-CG,\ndogleg, trust-ncg.\nIf <cite>jac</cite> is a Boolean and is True, <cite>fun</cite> is assumed to return the\nvalue of Jacobian along with the objective function. If False, the\nJacobian will be estimated numerically.\n<cite>jac</cite> can also be a callable returning the Jacobian of the\nobjective. In this case, it must accept the same arguments\nas <cite>fun</cite>.</p>\n</dd>\n<dt><strong>hess, hessp</strong><span class=\"classifier\">callable, optional</span></dt><dd><p>Hessian of objective function or Hessian of objective function\ntimes an arbitrary vector p.  Only for Newton-CG,\ndogleg, trust-ncg.\nOnly one of <cite>hessp</cite> or <cite>hess</cite> needs to be given.  If <cite>hess</cite> is\nprovided, then <cite>hessp</cite> will be ignored.  If neither <cite>hess</cite> nor\n<cite>hessp</cite> is provided, then the hessian product will be approximated\nusing finite differences on <cite>jac</cite>. <cite>hessp</cite> must compute the Hessian\ntimes an arbitrary vector.</p>\n</dd>\n<dt><strong>bounds</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>Bounds for variables (only for L-BFGS-B, TNC and SLSQP).\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(min,</span> <span class=\"pre\">max)</span></code> pairs for each element in <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code>, defining\nthe bounds on that parameter. Use None for one of <code class=\"docutils literal notranslate\"><span class=\"pre\">min</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">max</span></code> when there is no bound in that direction.</p>\n</dd>\n<dt><strong>constraints</strong><span class=\"classifier\">dict or sequence of dict, optional</span></dt><dd><p>Constraints definition (only for COBYLA and SLSQP).\nEach constraint is defined in a dictionary with fields:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>type<span class=\"classifier\">str</span></dt><dd><p>Constraint type: \u2018eq\u2019 for equality, \u2018ineq\u2019 for inequality.</p>\n</dd>\n<dt>fun<span class=\"classifier\">callable</span></dt><dd><p>The function defining the constraint.</p>\n</dd>\n<dt>jac<span class=\"classifier\">callable, optional</span></dt><dd><p>The Jacobian of <cite>fun</cite> (only for SLSQP).</p>\n</dd>\n<dt>args<span class=\"classifier\">sequence, optional</span></dt><dd><p>Extra arguments to be passed to the function and Jacobian.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Equality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.\nNote that COBYLA only supports inequality constraints.</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance for termination. For detailed control, use\nsolver-specific options.</p>\n</dd>\n<dt><strong>callback</strong><span class=\"classifier\">callable, optional</span></dt><dd><p>Called after each iteration, as <code class=\"docutils literal notranslate\"><span class=\"pre\">callback(xk)</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">xk</span></code> is\nthe current parameter vector. Only available using Scipy &gt;= 0.12.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>A dictionary of solver options. All methods accept the following\ngeneric options:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>maxiter<span class=\"classifier\">int</span></dt><dd><p>Maximum number of iterations to perform.</p>\n</dd>\n<dt>disp<span class=\"classifier\">bool</span></dt><dd><p>Set to True to print convergence messages.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For method-specific options, see\n<cite>show_options(\u2018minimize\u2019, method)</cite>.</p>\n</dd>\n<dt><strong>evolution</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>save history of x for each iteration. Only available using Scipy\n&gt;= 0.12.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">scipy.optimize.minimize</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.evolution\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">evolution</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.evolution\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.fopt\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">fopt</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.fopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.message\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">message</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.nfev\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">nfev</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.nfev\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.nit\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">nit</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.nit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.print_summary\">\n<code class=\"sig-name descname\">print_summary</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.print_summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.Optimizer.xopt\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">xopt</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.Optimizer.xopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"parzenjointhistogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"dipy.align.imaffine.ParzenJointHistogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ParzenJointHistogram</span></code></a><a class=\"headerlink\" href=\"#parzenjointhistogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">ParzenJointHistogram</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_index\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_index\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bin_index</span></code></a></p></td>\n<td><p>Bin index associated with the given normalized intensity</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bin_normalize_moving</span></code></a></p></td>\n<td><p>Maps intensity x to the range covered by the moving histogram</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\" title=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bin_normalize_static</span></code></a></p></td>\n<td><p>Maps intensity x to the range covered by the static histogram</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.setup\" title=\"dipy.align.imaffine.ParzenJointHistogram.setup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup</span></code></a></p></td>\n<td><p>Compute histogram settings to store the PDF of input images</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_gradient_dense</span></code></a></p></td>\n<td><p>Computes the Gradient of the joint PDF w.r.t.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_gradient_sparse</span></code></a></p></td>\n<td><p>Computes the Gradient of the joint PDF w.r.t.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_pdfs_dense</span></code></a></p></td>\n<td><p>Computes the Probability Density Functions of two images</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\" title=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_pdfs_sparse</span></code></a></p></td>\n<td><p>Computes the Probability Density Functions from a set of samples</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes joint histogram and derivatives with Parzen windows</p>\n<p>Base class to compute joint and marginal probability density\nfunctions and their derivatives with respect to a transform\u2019s\nparameters. The smooth histograms are computed by using Parzen\nwindows [Parzen62] with a cubic spline kernel, as proposed by\nMattes et al. [Mattes03]. This implementation is not tied to any\noptimization (registration) method, the idea is that\ninformation-theoretic matching functionals (such as Mutual\nInformation) can inherit from this class to perform the low-level\ncomputations of the joint intensity distributions and its gradient\nw.r.t. the transform parameters. The derived class can then compute\nthe similarity/dissimilarity measure and gradient, and finally\ncommunicate the results to the appropriate optimizer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>nbins</strong><span class=\"classifier\">int</span></dt><dd><p>the number of bins of the joint and marginal probability density\nfunctions (the actual number of bins of the joint PDF is nbins**2)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>We need this class in cython to allow _joint_pdf_gradient_dense_2d and\n_joint_pdf_gradient_dense_3d to use a nogil Jacobian function (obtained\nfrom an instance of the Transform class), which allows us to evaluate\nJacobians at all the sampling points (maybe the full grid) inside a\nnogil loop.</p>\n<p>The reason we need a class is to encapsulate all the parameters related\nto the joint and marginal distributions.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"simple\">\n<dt>[Parzen62] E. Parzen. On the estimation of a probability density</dt><dd><p>function and the mode. Annals of Mathematical Statistics,\n33(3), 1065-1076, 1962.</p>\n</dd>\n<dt>[Mattes03] Mattes, D., Haynor, D. R., Vesselle, H., Lewellen, T. K.,</dt><dd><p>&amp; Eubank, W. PET-CT image registration in the chest using\nfree-form deformations. IEEE Transactions on Medical\nImaging, 22(1), 120-8, 2003.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_index\">\n<code class=\"sig-name descname\">bin_index</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bin index associated with the given normalized intensity</p>\n<p>The return value is an integer in [padding, nbins - 1 - padding]</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xnorm</strong><span class=\"classifier\">float</span></dt><dd><p>intensity value normalized to the range covered by the histogram</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>bin</strong><span class=\"classifier\">int</span></dt><dd><p>the bin index associated with the given normalized intensity</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\">\n<code class=\"sig-name descname\">bin_normalize_moving</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_moving\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Maps intensity x to the range covered by the moving histogram</p>\n<p>If the input intensity is in [self.mmin, self.mmax] then the normalized\nintensity will be in [self.padding, self.nbins - self.padding]</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">float</span></dt><dd><p>the intensity to be normalized</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>xnorm</strong><span class=\"classifier\">float</span></dt><dd><p>normalized intensity to the range covered by the moving histogram</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\">\n<code class=\"sig-name descname\">bin_normalize_static</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.bin_normalize_static\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Maps intensity x to the range covered by the static histogram</p>\n<p>If the input intensity is in [self.smin, self.smax] then the normalized\nintensity will be in [self.padding, self.nbins - self.padding]</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">float</span></dt><dd><p>the intensity to be normalized</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>xnorm</strong><span class=\"classifier\">float</span></dt><dd><p>normalized intensity to the range covered by the static histogram</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.setup\">\n<code class=\"sig-name descname\">setup</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute histogram settings to store the PDF of input images</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array</span></dt><dd><p>moving image</p>\n</dd>\n<dt><strong>smask</strong><span class=\"classifier\">array</span></dt><dd><p>mask of static object being registered (a binary array with 1\u2019s\ninside the object of interest and 0\u2019s along the background).\nIf None, the behaviour is equivalent to smask=ones_like(static)</p>\n</dd>\n<dt><strong>mmask</strong><span class=\"classifier\">array</span></dt><dd><p>mask of moving object being registered (a binary array with 1\u2019s\ninside the object of interest and 0\u2019s along the background).\nIf None, the behaviour is equivalent to mmask=ones_like(static)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\">\n<code class=\"sig-name descname\">update_gradient_dense</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_dense\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gradient of the joint PDF w.r.t. transform parameters</p>\n<p>Computes the vector of partial derivatives of the joint histogram\nw.r.t. each transformation parameter.</p>\n<p>The gradient is stored in self.joint_grad.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>theta</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters of the transformation to compute the gradient from</p>\n</dd>\n<dt><strong>transform</strong><span class=\"classifier\">instance of Transform</span></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt><strong>grid2world</strong><span class=\"classifier\">array, shape (4, 4)</span></dt><dd><p>we assume that both images have already been sampled at a common\ngrid. This transform must map voxel coordinates of this common grid\nto physical coordinates of its corresponding voxel in the moving\nimage. For example, if the moving image was sampled on the static\nimage\u2019s grid (this is the typical setting) using an aligning\nmatrix A, then</p>\n<ol class=\"arabic simple\">\n<li><p>grid2world = A.dot(static_affine)</p></li>\n</ol>\n<p>where static_affine is the transformation mapping static image\u2019s\ngrid coordinates to physical space.</p>\n</dd>\n<dt><strong>mgradient</strong><span class=\"classifier\">array, shape (S, R, C, 3)</span></dt><dd><p>the gradient of the moving image</p>\n</dd>\n<dt><strong>smask</strong><span class=\"classifier\">array, shape (S, R, C), optional</span></dt><dd><p>mask of static object being registered (a binary array with 1\u2019s\ninside the object of interest and 0\u2019s along the background).\nThe default is None, indicating all voxels are considered.</p>\n</dd>\n<dt><strong>mmask</strong><span class=\"classifier\">array, shape (S, R, C), optional</span></dt><dd><p>mask of moving object being registered (a binary array with 1\u2019s\ninside the object of interest and 0\u2019s along the background).\nThe default is None, indicating all voxels are considered.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\">\n<code class=\"sig-name descname\">update_gradient_sparse</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_gradient_sparse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gradient of the joint PDF w.r.t. transform parameters</p>\n<p>Computes the vector of partial derivatives of the joint histogram\nw.r.t. each transformation parameter.</p>\n<p>The list of intensities <cite>sval</cite> and <cite>mval</cite> are assumed to be sampled\nfrom the static and moving images, respectively, at the same\nphysical points. Of course, the images may not be perfectly aligned\nat the moment the sampling was performed. The resulting  gradient\ncorresponds to the paired intensities according to the alignment at the\nmoment the images were sampled.</p>\n<p>The gradient is stored in self.joint_grad.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>theta</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters to compute the gradient at</p>\n</dd>\n<dt><strong>transform</strong><span class=\"classifier\">instance of Transform</span></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>sval</strong><span class=\"classifier\">array, shape (m,)</span></dt><dd><p>sampled intensities from the static image at sampled_points</p>\n</dd>\n<dt><strong>mval</strong><span class=\"classifier\">array, shape (m,)</span></dt><dd><p>sampled intensities from the moving image at sampled_points</p>\n</dd>\n<dt><strong>sample_points</strong><span class=\"classifier\">array, shape (m, 3)</span></dt><dd><p>coordinates (in physical space) of the points the images were\nsampled at</p>\n</dd>\n<dt><strong>mgradient</strong><span class=\"classifier\">array, shape (m, 3)</span></dt><dd><p>the gradient of the moving image at the sample points</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\">\n<code class=\"sig-name descname\">update_pdfs_dense</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_dense\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Probability Density Functions of two images</p>\n<p>The joint PDF is stored in self.joint. The marginal distributions\ncorresponding to the static and moving images are computed and\nstored in self.smarginal and self.mmarginal, respectively.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt><strong>smask</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>mask of static object being registered (a binary array with 1\u2019s\ninside the object of interest and 0\u2019s along the background).\nIf None, ones_like(static) is used as mask.</p>\n</dd>\n<dt><strong>mmask</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>mask of moving object being registered (a binary array with 1\u2019s\ninside the object of interest and 0\u2019s along the background).\nIf None, ones_like(moving) is used as mask.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\">\n<code class=\"sig-name descname\">update_pdfs_sparse</code><a class=\"headerlink\" href=\"#dipy.align.imaffine.ParzenJointHistogram.update_pdfs_sparse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Probability Density Functions from a set of samples</p>\n<p>The list of intensities <cite>sval</cite> and <cite>mval</cite> are assumed to be sampled\nfrom the static and moving images, respectively, at the same\nphysical points. Of course, the images may not be perfectly aligned\nat the moment the sampling was performed. The resulting  distributions\ncorresponds to the paired intensities according to the alignment at the\nmoment the images were sampled.</p>\n<p>The joint PDF is stored in self.joint. The marginal distributions\ncorresponding to the static and moving images are computed and\nstored in self.smarginal and self.mmarginal, respectively.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sval</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>sampled intensities from the static image at sampled_points</p>\n</dd>\n<dt><strong>mval</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>sampled intensities from the moving image at sampled_points</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"scalespace\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"dipy.align.imaffine.ScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#scalespace\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imaffine.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">num_levels</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">sigma_factor=0.2</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine\" title=\"dipy.align.imaffine.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code></a>(level)</p></td>\n<td><p>Voxel-to-space transformation at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine_inv\" title=\"dipy.align.imaffine.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</p></td>\n<td><p>Space-to-voxel transformation at a given level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_domain_shape\" title=\"dipy.align.imaffine.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</p></td>\n<td><p>Shape the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_expand_factors\" title=\"dipy.align.imaffine.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,\u00a0to_level)</p></td>\n<td><p>Ratio of voxel size from pyramid level from_level to to_level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_image\" title=\"dipy.align.imaffine.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_image</span></code></a>(level)</p></td>\n<td><p>Smoothed image at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_scaling\" title=\"dipy.align.imaffine.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_scaling</span></code></a>(level)</p></td>\n<td><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_sigmas\" title=\"dipy.align.imaffine.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sigmas</span></code></a>(level)</p></td>\n<td><p>Smoothing parameters used at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.get_spacing\" title=\"dipy.align.imaffine.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_spacing</span></code></a>(level)</p></td>\n<td><p>Spacings the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imaffine.ScaleSpace.print_level\" title=\"dipy.align.imaffine.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_level</span></code></a>(level)</p></td>\n<td><p>Prints properties of a pyramid level</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">num_levels</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">sigma_factor=0.2</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image\u2019s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, \u2026, the sigma is given by\n<span class=\"math notranslate nohighlight\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (r,c) or (s, r, c) where s is the number of</span></dt><dd><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</dd>\n<dt><strong>num_levels</strong><span class=\"classifier\">int</span></dt><dd><p>the desired number of levels (resolutions) of the scale space</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</dd>\n<dt><strong>input_spacing</strong><span class=\"classifier\">array, shape (dim,), optional</span></dt><dd><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</dd>\n<dt><strong>sigma_factor</strong><span class=\"classifier\">float, optional</span></dt><dd><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</dd>\n<dt><strong>mask0</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_affine\">\n<code class=\"sig-name descname\">get_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get affine transform from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the affine (voxel-to-space) transform at the requested resolution</dt><dd><p>or None if an invalid level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_affine_inv\">\n<code class=\"sig-name descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the inverse transform from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the inverse (space-to-voxel) transform at the requested resolution or</dt><dd></dd>\n<dt>None if an invalid level was requested</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_domain_shape\">\n<code class=\"sig-name descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the sub-sampled shape from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the sub-sampled shape at the requested resolution or None if an</dt><dd><p>invalid level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_expand_factors\">\n<code class=\"sig-name descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">from_level</em>, <em class=\"sig-param\">to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n\u2018expand\u2019 them to level b).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>from_level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the resolution to expand voxels from</p>\n</dd>\n<dt><strong>to_level</strong><span class=\"classifier\">int, 0 &lt;= to_level &lt; from_level</span></dt><dd><p>the resolution to expand voxels to</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>factors</strong><span class=\"classifier\">array, shape (k,), k = 2, 3</span></dt><dd><p>the expand factors (a scalar for each voxel dimension)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_image\">\n<code class=\"sig-name descname\">get_image</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the smooth image from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the smooth image at the requested resolution or None if an invalid</dt><dd><p>level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_scaling\">\n<code class=\"sig-name descname\">get_scaling</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the scalings from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the scaling factors from the original spacing to the spacings at the</dt><dd></dd>\n<dt>requested level</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_sigmas\">\n<code class=\"sig-name descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the smoothing parameters from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the smoothing parameters at the requested level</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.get_spacing\">\n<code class=\"sig-name descname\">get_spacing</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the sub-sampled shape from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the spacings (voxel sizes) at the requested resolution or None if an</dt><dd></dd>\n<dt>invalid level was requested</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imaffine.ScaleSpace.print_level\">\n<code class=\"sig-name descname\">print_level</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to be printed</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compute-parzen-mi\">\n<h3>compute_parzen_mi<a class=\"headerlink\" href=\"#compute-parzen-mi\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.compute_parzen_mi\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">compute_parzen_mi</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.compute_parzen_mi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the mutual information and its gradient (if requested)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>joint</strong><span class=\"classifier\">array, shape (nbins, nbins)</span></dt><dd><p>the joint intensity distribution</p>\n</dd>\n<dt><strong>joint_gradient</strong><span class=\"classifier\">array, shape (nbins, nbins, n)</span></dt><dd><p>the gradient of the joint distribution w.r.t. the transformation\nparameters</p>\n</dd>\n<dt><strong>smarginal</strong><span class=\"classifier\">array, shape (nbins,)</span></dt><dd><p>the marginal intensity distribution of the static image</p>\n</dd>\n<dt><strong>mmarginal</strong><span class=\"classifier\">array, shape (nbins,)</span></dt><dd><p>the marginal intensity distribution of the moving image</p>\n</dd>\n<dt><strong>mi_gradient</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the buffer in which to write the gradient of the mutual information.\nIf None, the gradient is not computed</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"deprecated-params\">\n<h3>deprecated_params<a class=\"headerlink\" href=\"#deprecated-params\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.deprecated_params\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">deprecated_params</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">old_name</em>, <em class=\"sig-param\">new_name=None</em>, <em class=\"sig-param\">since=''</em>, <em class=\"sig-param\">until=''</em>, <em class=\"sig-param\">version_comparator=&lt;function cmp_pkg_version&gt;</em>, <em class=\"sig-param\">arg_in_kwargs=False</em>, <em class=\"sig-param\">warn_class=&lt;class 'dipy.utils.deprecator.ArgsDeprecationWarning'&gt;</em>, <em class=\"sig-param\">error_class=&lt;class 'dipy.utils.deprecator.ExpiredDeprecationError'&gt;</em>, <em class=\"sig-param\">alternative=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.deprecated_params\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deprecate a <em>renamed</em> or <em>removed</em> function argument.</p>\n<p>The decorator assumes that the argument with the <code class=\"docutils literal notranslate\"><span class=\"pre\">old_name</span></code> was removed\nfrom the function signature and the <code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> replaced it at the\n<strong>same position</strong> in the signature.  If the <code class=\"docutils literal notranslate\"><span class=\"pre\">old_name</span></code> argument is\ngiven when calling the decorated function the decorator will catch it and\nissue a deprecation warning and pass it on as <code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> argument.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>old_name</strong><span class=\"classifier\">str or list/tuple thereof</span></dt><dd><p>The old name of the argument.</p>\n</dd>\n<dt><strong>new_name</strong><span class=\"classifier\">str or list/tuple thereof or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, optional</span></dt><dd><p>The new name of the argument. Set this to <cite>None</cite> to remove the\nargument <code class=\"docutils literal notranslate\"><span class=\"pre\">old_name</span></code> instead of renaming it.</p>\n</dd>\n<dt><strong>since</strong><span class=\"classifier\">str or number or list/tuple thereof, optional</span></dt><dd><p>The release at which the old argument became deprecated.</p>\n</dd>\n<dt><strong>until</strong><span class=\"classifier\">str or number or list/tuple thereof, optional</span></dt><dd><p>Last released version at which this function will still raise a\ndeprecation warning.  Versions higher than this will raise an\nerror.</p>\n</dd>\n<dt><strong>version_comparator</strong><span class=\"classifier\">callable</span></dt><dd><p>Callable accepting string as argument, and return 1 if string\nrepresents a higher version than encoded in the <code class=\"docutils literal notranslate\"><span class=\"pre\">version_comparator</span></code>,\n0 if the version is equal, and -1 if the version is lower. For example,\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">version_comparator</span></code> may compare the input version string to the\ncurrent package version string.</p>\n</dd>\n<dt><strong>arg_in_kwargs</strong><span class=\"classifier\">bool or list/tuple thereof, optional</span></dt><dd><p>If the argument is not a named argument (for example it\nwas meant to be consumed by <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code>) set this to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.  Otherwise the decorator will throw an Exception\nif the <code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> cannot be found in the signature of\nthe decorated function.\nDefault is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd>\n<dt><strong>warn_class</strong><span class=\"classifier\">warning, optional</span></dt><dd><p>Warning to be issued.</p>\n</dd>\n<dt><strong>error_class</strong><span class=\"classifier\">Exception, optional</span></dt><dd><p>Error to be issued</p>\n</dd>\n<dt><strong>alternative</strong><span class=\"classifier\">str, optional</span></dt><dd><p>An alternative function or class name that the user may use in\nplace of the deprecated object if <code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> is None. The deprecation\nwarning will tell the user about this alternative if provided.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Raises</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>TypeError</dt><dd><p>If the new argument name cannot be found in the function\nsignature and arg_in_kwargs was False or if it is used to\ndeprecate the name of the <code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code>-, <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code>-like arguments.\nAt runtime such an Error is raised if both the new_name\nand old_name were specified when calling the function and\n\u201crelax=False\u201d.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This function is based on the Astropy (major modification).\n<a class=\"reference external\" href=\"https://github.com/astropy/astropy\">https://github.com/astropy/astropy</a>. See COPYING file distributed along with\nthe astropy package for the copyright and license terms.</p>\n<p class=\"rubric\">Examples</p>\n<p>The deprecation warnings are not shown in the following examples.\nTo deprecate a positional or keyword argument::\n&gt;&gt;&gt; from dipy.utils.deprecator import deprecated_params\n&gt;&gt;&gt; &#64;deprecated_params(\u2018sig\u2019, \u2018sigma\u2019, \u20180.3\u2019)\n\u2026 def test(sigma):\n\u2026     return sigma\n&gt;&gt;&gt; test(2)\n2\n&gt;&gt;&gt; test(sigma=2)\n2\n&gt;&gt;&gt; test(sig=2)  # doctest: +SKIP\n2</p>\n<p>It is also possible to replace multiple arguments. The <code class=\"docutils literal notranslate\"><span class=\"pre\">old_name</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">new_name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">since</span></code> have to be <cite>tuple</cite> or <cite>list</cite> and contain the\nsame number of entries::\n&gt;&gt;&gt; &#64;deprecated_params([\u2018a\u2019, \u2018b\u2019], [\u2018alpha\u2019, \u2018beta\u2019],\n\u2026                    [\u20180.2\u2019, 0.4])\n\u2026 def test(alpha, beta):\n\u2026     return alpha, beta\n&gt;&gt;&gt; test(a=2, b=3)  # doctest: +SKIP\n(2, 3)</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-direction-and-spacings\">\n<h3>get_direction_and_spacings<a class=\"headerlink\" href=\"#get-direction-and-spacings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.get_direction_and_spacings\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">get_direction_and_spacings</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.get_direction_and_spacings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the rotational and spacing components from a matrix</p>\n<p>Extracts the rotational and spacing (voxel dimensions) components from a\nmatrix. An image gradient represents the local variation of the image\u2019s\ngray values per voxel. Since we are iterating on the physical space, we\nneed to compute the gradients as variation per millimeter, so we need to\ndivide each gradient\u2019s component by the voxel size along the corresponding\naxis, that\u2019s what the spacings are used for. Since the image\u2019s gradients\nare oriented along the grid axes, we also need to re-orient the gradients\nto be given in physical space coordinates.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (k, k), k = 3, 4</span></dt><dd><p>the matrix transforming grid coordinates to physical space.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>direction</strong><span class=\"classifier\">array, shape (k-1, k-1)</span></dt><dd><p>the rotational component of the input matrix</p>\n</dd>\n<dt><strong>spacings</strong><span class=\"classifier\">array, shape (k-1,)</span></dt><dd><p>the scaling component (voxel size) of the matrix</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"interpolate-scalar-2d\">\n<h3>interpolate_scalar_2d<a class=\"headerlink\" href=\"#interpolate-scalar-2d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.interpolate_scalar_2d\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">interpolate_scalar_2d</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.interpolate_scalar_2d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bilinear interpolation of a 2D scalar image</p>\n<p>Interpolates the 2D image at the given locations. This function is\na wrapper for _interpolate_scalar_2d for testing purposes, it is\nequivalent to scipy.ndimage.interpolation.map_coordinates with\nbilinear interpolation</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>field</strong><span class=\"classifier\">array, shape (S, R)</span></dt><dd><p>the 2D image to be interpolated</p>\n</dd>\n<dt><strong>locations</strong><span class=\"classifier\">array, shape (n, 2)</span></dt><dd><p>(locations[i,0], locations[i,1]), 0&lt;=i&lt;n must contain the row and\ncolumn coordinates to interpolate the image at</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>out</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>out[i], 0&lt;=i&lt;n will be the interpolated scalar at coordinates\nlocations[i,:], or 0 if locations[i,:] is outside the image</p>\n</dd>\n<dt><strong>inside</strong><span class=\"classifier\">array, (n,)</span></dt><dd><p>if locations[i:] is inside the image then inside[i]=1, else\ninside[i]=0</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"interpolate-scalar-3d\">\n<h3>interpolate_scalar_3d<a class=\"headerlink\" href=\"#interpolate-scalar-3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.interpolate_scalar_3d\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">interpolate_scalar_3d</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.interpolate_scalar_3d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Trilinear interpolation of a 3D scalar image</p>\n<p>Interpolates the 3D image at the given locations. This function is\na wrapper for _interpolate_scalar_3d for testing purposes, it is\nequivalent to scipy.ndimage.interpolation.map_coordinates with\ntrilinear interpolation</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>field</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>the 3D image to be interpolated</p>\n</dd>\n<dt><strong>locations</strong><span class=\"classifier\">array, shape (n, 3)</span></dt><dd><p>(locations[i,0], locations[i,1], locations[i,2), 0&lt;=i&lt;n must contain\nthe coordinates to interpolate the image at</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>out</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>out[i], 0&lt;=i&lt;n will be the interpolated scalar at coordinates\nlocations[i,:], or 0 if locations[i,:] is outside the image</p>\n</dd>\n<dt><strong>inside</strong><span class=\"classifier\">array, (n,)</span></dt><dd><p>if locations[i,:] is inside the image then inside[i]=1, else\ninside[i]=0</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sample-domain-regular\">\n<h3>sample_domain_regular<a class=\"headerlink\" href=\"#sample-domain-regular\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.sample_domain_regular\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">sample_domain_regular</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.sample_domain_regular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take floor(total_voxels/k) samples from a (2D or 3D) grid</p>\n<p>The sampling is made by taking all pixels whose index (in lexicographical\norder) is a multiple of k. Each selected point is slightly perturbed by\nadding a realization of a normally distributed random variable and then\nmapped to physical space by the given grid-to-space transform.</p>\n<p>The lexicographical order of a pixels in a grid of shape (a, b, c) is\ndefined by assigning to each voxel position (i, j, k) the integer index</p>\n<p>F((i, j, k)) = i * (b * c) + j * (c) + k</p>\n<p>and sorting increasingly by this index.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>k</strong><span class=\"classifier\">int</span></dt><dd><p>the sampling rate, as described before</p>\n</dd>\n<dt><strong>shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the shape of the grid to be sampled</p>\n</dd>\n<dt><strong>grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the grid-to-space transform</p>\n</dd>\n<dt><strong>sigma</strong><span class=\"classifier\">float</span></dt><dd><p>the standard deviation of the Normal random distortion to be applied\nto the sampled points</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>samples</strong><span class=\"classifier\">array, shape (total_pixels//k, dim)</span></dt><dd><p>the matrix whose rows are the sampled points</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.parzenhist</span> <span class=\"k\">import</span> <span class=\"n\">sample_domain_regular</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dipy.align.vector_fields</span> <span class=\"k\">as</span> <span class=\"nn\">vf</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">((</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dim</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">grid2world</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">samples</span> <span class=\"o\">=</span> <span class=\"n\">sample_domain_regular</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"p\">,</span> <span class=\"n\">grid2world</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">samples</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">//</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">dim</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">isamples</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">samples</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int32</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">indices</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">isamples</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">isamples</span><span class=\"p\">[:,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">))</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">indices</span><span class=\"o\">%</span><span class=\"n\">k</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"go\">0</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id21\">\n<h3>transform_centers_of_mass<a class=\"headerlink\" href=\"#id21\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_centers_of_mass\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">transform_centers_of_mass</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the center of mass of the input images.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_map</strong><span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine transformation (translation only, in this case) aligning\nthe center of mass of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-geometric-centers\">\n<h3>transform_geometric_centers<a class=\"headerlink\" href=\"#transform-geometric-centers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_geometric_centers\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">transform_geometric_centers</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_geometric_centers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the geometric center of the input images.</p>\n<p>With \u201cgeometric center\u201d of a volume we mean the physical coordinates of\nits central voxel</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_map</strong><span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine transformation (translation only, in this case) aligning\nthe geometric center of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-origins\">\n<h3>transform_origins<a class=\"headerlink\" href=\"#transform-origins\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imaffine.transform_origins\">\n<code class=\"sig-prename descclassname\">dipy.align.imaffine.</code><code class=\"sig-name descname\">transform_origins</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imaffine.transform_origins\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the origins of the input images.</p>\n<p>With \u201corigin\u201d of a volume we mean the physical coordinates of\nvoxel (0,0,0)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_map</strong><span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine transformation (translation only, in this case) aligning\nthe origin of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id22\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.Bunch\" title=\"dipy.align.imwarp.Bunch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a><a class=\"headerlink\" href=\"#id22\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.Bunch\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imwarp.</code><code class=\"sig-name descname\">Bunch</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.Bunch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.Bunch.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">**kwds</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.Bunch.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A \u2018bunch\u2019 of values (a replacement of Enum)</p>\n<p>This is a temporary replacement of Enum, which is not available\non all versions of Python 2</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id23\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"dipy.align.imwarp.DiffeomorphicMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a><a class=\"headerlink\" href=\"#id23\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imwarp.</code><code class=\"sig-name descname\">DiffeomorphicMap</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">disp_shape</em>, <em class=\"sig-param\">disp_grid2world=None</em>, <em class=\"sig-param\">domain_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.allocate\" title=\"dipy.align.imwarp.DiffeomorphicMap.allocate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">allocate</span></code></a>()</p></td>\n<td><p>Creates a zero displacement field</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\" title=\"dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_inversion_error</span></code></a>()</p></td>\n<td><p>Inversion error of the displacement fields</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.expand_fields\" title=\"dipy.align.imwarp.DiffeomorphicMap.expand_fields\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">expand_fields</span></code></a>(expand_factors,\u00a0new_shape)</p></td>\n<td><p>Expands the displacement fields from current shape to new_shape</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_backward_field\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_backward_field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_backward_field</span></code></a>()</p></td>\n<td><p>Deformation field to transform an image in the backward direction</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_forward_field\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_forward_field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_forward_field</span></code></a>()</p></td>\n<td><p>Deformation field to transform an image in the forward direction</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\" title=\"dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_simplified_transform</span></code></a>()</p></td>\n<td><p>Constructs a simplified version of this Diffeomorhic Map</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\" title=\"dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">interpret_matrix</span></code></a>(obj)</p></td>\n<td><p>Try to interpret <cite>obj</cite> as a matrix</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.inverse\" title=\"dipy.align.imwarp.DiffeomorphicMap.inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">inverse</span></code></a>()</p></td>\n<td><p>Inverse of this DiffeomorphicMap instance</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.shallow_copy\" title=\"dipy.align.imwarp.DiffeomorphicMap.shallow_copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shallow_copy</span></code></a>()</p></td>\n<td><p>Shallow copy of this DiffeomorphicMap instance</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform\" title=\"dipy.align.imwarp.DiffeomorphicMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Warps an image in the forward direction</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_inverse\" title=\"dipy.align.imwarp.DiffeomorphicMap.transform_inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_inverse</span></code></a>(image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Warps an image in the backward direction</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\" title=\"dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warp_endomorphism</span></code></a>(phi)</p></td>\n<td><p>Composition of this DiffeomorphicMap with a given endomorphism</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">disp_shape</em>, <em class=\"sig-param\">disp_grid2world=None</em>, <em class=\"sig-param\">domain_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DiffeomorphicMap</p>\n<p>Implements a diffeomorphic transformation on the physical space. The\ndeformation fields encoding the direct and inverse transformations\nshare the same domain discretization (both the discretization grid\nshape and voxel-to-space matrix). The input coordinates (physical\ncoordinates) are first aligned using prealign, and then displaced\nusing the corresponding vector field interpolated at the aligned\ncoordinates.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int, 2 or 3</span></dt><dd><p>the transformation\u2019s dimension</p>\n</dd>\n<dt><strong>disp_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the deformation\nfield\u2019s discretization</p>\n</dd>\n<dt><strong>disp_grid2world</strong><span class=\"classifier\">the voxel-to-space transform between the def. fields</span></dt><dd><p>grid and space</p>\n</dd>\n<dt><strong>domain_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the default\ndiscretization of this map\u2019s domain</p>\n</dd>\n<dt><strong>domain_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the default voxel-to-space transformation between this map\u2019s\ndiscretization and physical space</p>\n</dd>\n<dt><strong>codomain_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the images that\nare \u2018normally\u2019 warped using this transformation in the forward\ndirection (this will provide default transformation parameters to\nwarp images under this transformation). By default, we assume that\nthe inverse transformation is \u2018normally\u2019 used to warp images with\nthe same discretization and voxel-to-space transformation as the\ndeformation field grid.</p>\n</dd>\n<dt><strong>codomain_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of images that are \u2018normally\u2019\nwarped using this transformation (in the forward direction).</p>\n</dd>\n<dt><strong>prealign</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the linear transformation to be applied to align input images to\nthe reference space before warping under the deformation field.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.allocate\">\n<code class=\"sig-name descname\">allocate</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.allocate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a zero displacement field</p>\n<p>Creates a zero displacement field (the identity transformation).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\">\n<code class=\"sig-name descname\">compute_inversion_error</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.compute_inversion_error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inversion error of the displacement fields</p>\n<p>Estimates the inversion error of the displacement fields by computing\nstatistics of the residual vectors obtained after composing the forward\nand backward displacement fields.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>residual</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the displacement field resulting from composing the forward and\nbackward displacement fields of this transformation (the residual\nshould be zero for a perfect diffeomorphism)</p>\n</dd>\n<dt><strong>stats</strong><span class=\"classifier\">array, shape (3,)</span></dt><dd><p>statistics from the norms of the vectors of the residual\ndisplacement field: maximum, mean and standard deviation</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Since the forward and backward displacement fields have the same\ndiscretization, the final composition is given by</p>\n<p>comp[i] = forward[ i + Dinv * backward[i]]</p>\n<p>where Dinv is the space-to-grid transformation of the displacement\nfields</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.expand_fields\">\n<code class=\"sig-name descname\">expand_fields</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">expand_factors</em>, <em class=\"sig-param\">new_shape</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.expand_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expands the displacement fields from current shape to new_shape</p>\n<p>Up-samples the discretization of the displacement fields to be of\nnew_shape shape.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>expand_factors</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the factors scaling current spacings (voxel sizes) to spacings in\nthe expanded discretization.</p>\n</dd>\n<dt><strong>new_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the shape of the arrays holding the up-sampled discretization</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_backward_field\">\n<code class=\"sig-name descname\">get_backward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_backward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the backward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the backward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_forward_field\">\n<code class=\"sig-name descname\">get_forward_field</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_forward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the forward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the forward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\">\n<code class=\"sig-name descname\">get_simplified_transform</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.get_simplified_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs a simplified version of this Diffeomorhic Map</p>\n<p>The simplified version incorporates the pre-align transform, as well as\nthe domain and codomain affine transforms into the displacement field.\nThe resulting transformation may be regarded as operating on the\nimage spaces given by the domain and codomain discretization. As a\nresult, self.prealign, self.disp_grid2world, self.domain_grid2world and\nself.codomain affine will be None (denoting Identity) in the resulting\ndiffeomorphic map.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\">\n<code class=\"sig-name descname\">interpret_matrix</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">obj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.interpret_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Try to interpret <cite>obj</cite> as a matrix</p>\n<p>Some operations are performed faster if we know in advance if a matrix\nis the identity (so we can skip the actual matrix-vector\nmultiplication). This function returns None if the given object\nis None or the \u2018identity\u2019 string. It returns the same object if it is\na numpy array. It raises an exception otherwise.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>obj</strong><span class=\"classifier\">object</span></dt><dd><p>any object</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>obj</strong><span class=\"classifier\">object</span></dt><dd><p>the same object given as argument if <cite>obj</cite> is None or a numpy\narray. None if <cite>obj</cite> is the \u2018identity\u2019 string.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.inverse\">\n<code class=\"sig-name descname\">inverse</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inverse of this DiffeomorphicMap instance</p>\n<p>Returns a diffeomorphic map object representing the inverse of this\ntransformation. The internal arrays are not copied but just referenced.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>inv</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the inverse of this diffeomorphic map.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.shallow_copy\">\n<code class=\"sig-name descname\">shallow_copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.shallow_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shallow copy of this DiffeomorphicMap instance</p>\n<p>Creates a shallow copy of this diffeomorphic map (the arrays are not\ncopied but just referenced)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>new_map</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the shallow copy of this diffeomorphic map</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.transform\">\n<code class=\"sig-name descname\">transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_world2grid=None</em>, <em class=\"sig-param\">out_shape=None</em>, <em class=\"sig-param\">out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the forward direction</p>\n<p>Transforms the input image under this transformation in the forward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform(\u2026) warps the\nimage forwards, else it warps the image backwards).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt><dd><p>the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt><strong>out_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices, rows and columns of the desired warped image</p>\n</dd>\n<dt><strong>out_grid2world</strong><span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt><dd><p>warped image to physical space</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>warped</strong><span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt><dd><p>the warped image under this transformation in the forward direction</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.transform_inverse\">\n<code class=\"sig-name descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_world2grid=None</em>, <em class=\"sig-param\">out_shape=None</em>, <em class=\"sig-param\">out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the backward direction</p>\n<p>Transforms the input image under this transformation in the backward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform_inverse(\u2026)\nwarps the image backwards, else it warps the image forwards)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt><dd><p>the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt><strong>out_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices, rows, and columns of the desired warped image</p>\n</dd>\n<dt><strong>out_grid2world</strong><span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt><dd><p>warped image to physical space</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>warped</strong><span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt><dd><p>warped image under this transformation in the backward direction</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\">\n<code class=\"sig-name descname\">warp_endomorphism</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicMap.warp_endomorphism\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of this DiffeomorphicMap with a given endomorphism</p>\n<p>Creates a new DiffeomorphicMap C with the same properties as self and\ncomposes its displacement fields with phi\u2019s corresponding fields.\nThe resulting diffeomorphism is of the form C(x) = phi(self(x)) with\ninverse C^{-1}(y) = self^{-1}(phi^{-1}(y)). We assume that phi is an\nendomorphism with the same discretization and domain affine as self\nto ensure that the composition inherits self\u2019s properties (we also\nassume that the pre-aligning matrix of phi is None or identity).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>phi</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the endomorphism to be warped by this diffeomorphic map</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>composition</strong><span class=\"classifier\">the composition of this diffeomorphic map with the</span></dt><dd><p>endomorphism given as input</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The problem with our current representation of a DiffeomorphicMap is\nthat the set of Diffeomorphism that can be represented this way (a\npre-aligning matrix followed by a non-linear endomorphism given as a\ndisplacement field) is not closed under the composition operation.</p>\n<p>Supporting a general DiffeomorphicMap class, closed under composition,\nmay be extremely costly computationally, and the kind of\ntransformations we actually need for Avants\u2019 mid-point algorithm (SyN)\nare much simpler.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imwarp.</code><code class=\"sig-name descname\">DiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.get_map\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_map</span></code></a>()</p></td>\n<td><p>Returns the resulting diffeomorphic map after optimization</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.optimize\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>()</p></td>\n<td><p>Starts the metric optimization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\" title=\"dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_level_iters</span></code></a>(level_iters)</p></td>\n<td><p>Sets the number of iterations at each pyramid level</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffeomorphic Registration</p>\n<p>This abstract class defines the interface to be implemented by any\noptimization algorithm for diffeomorphic registration.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>metric</strong><span class=\"classifier\">SimilarityMetric object</span></dt><dd><p>the object measuring the similarity of the two images. The\nregistration algorithm will minimize (or maximize) the provided\nsimilarity.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.get_map\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">get_map</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the resulting diffeomorphic map after optimization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.optimize\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the metric optimization</p>\n<p>This is the main function each specialized class derived from this must\nimplement. Upon completion, the deformation field must be available\nfrom the forward transformation model.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\">\n<code class=\"sig-name descname\">set_level_iters</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level_iters</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration.set_level_iters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the number of iterations at each pyramid level</p>\n<p>Establishes the maximum number of iterations to be performed at each\nlevel of the Gaussian pyramid, similar to ANTS.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level_iters</strong><span class=\"classifier\">list</span></dt><dd><p>the number of iterations at each level of the Gaussian pyramid.\nlevel_iters[0] corresponds to the finest level, level_iters[n-1]\nthe coarsest, where n is the length of the list</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id24\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"dipy.align.imwarp.ScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id24\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imwarp.</code><code class=\"sig-name descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">num_levels</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">sigma_factor=0.2</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine\" title=\"dipy.align.imwarp.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code></a>(level)</p></td>\n<td><p>Voxel-to-space transformation at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine_inv\" title=\"dipy.align.imwarp.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</p></td>\n<td><p>Space-to-voxel transformation at a given level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_domain_shape\" title=\"dipy.align.imwarp.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</p></td>\n<td><p>Shape the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_expand_factors\" title=\"dipy.align.imwarp.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,\u00a0to_level)</p></td>\n<td><p>Ratio of voxel size from pyramid level from_level to to_level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_image\" title=\"dipy.align.imwarp.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_image</span></code></a>(level)</p></td>\n<td><p>Smoothed image at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_scaling\" title=\"dipy.align.imwarp.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_scaling</span></code></a>(level)</p></td>\n<td><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_sigmas\" title=\"dipy.align.imwarp.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sigmas</span></code></a>(level)</p></td>\n<td><p>Smoothing parameters used at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.get_spacing\" title=\"dipy.align.imwarp.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_spacing</span></code></a>(level)</p></td>\n<td><p>Spacings the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.ScaleSpace.print_level\" title=\"dipy.align.imwarp.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_level</span></code></a>(level)</p></td>\n<td><p>Prints properties of a pyramid level</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">num_levels</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">sigma_factor=0.2</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image\u2019s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, \u2026, the sigma is given by\n<span class=\"math notranslate nohighlight\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (r,c) or (s, r, c) where s is the number of</span></dt><dd><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</dd>\n<dt><strong>num_levels</strong><span class=\"classifier\">int</span></dt><dd><p>the desired number of levels (resolutions) of the scale space</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</dd>\n<dt><strong>input_spacing</strong><span class=\"classifier\">array, shape (dim,), optional</span></dt><dd><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</dd>\n<dt><strong>sigma_factor</strong><span class=\"classifier\">float, optional</span></dt><dd><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</dd>\n<dt><strong>mask0</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_affine\">\n<code class=\"sig-name descname\">get_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get affine transform from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the affine (voxel-to-space) transform at the requested resolution</dt><dd><p>or None if an invalid level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_affine_inv\">\n<code class=\"sig-name descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the inverse transform from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the inverse (space-to-voxel) transform at the requested resolution or</dt><dd></dd>\n<dt>None if an invalid level was requested</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_domain_shape\">\n<code class=\"sig-name descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the sub-sampled shape from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the sub-sampled shape at the requested resolution or None if an</dt><dd><p>invalid level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_expand_factors\">\n<code class=\"sig-name descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">from_level</em>, <em class=\"sig-param\">to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n\u2018expand\u2019 them to level b).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>from_level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the resolution to expand voxels from</p>\n</dd>\n<dt><strong>to_level</strong><span class=\"classifier\">int, 0 &lt;= to_level &lt; from_level</span></dt><dd><p>the resolution to expand voxels to</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>factors</strong><span class=\"classifier\">array, shape (k,), k = 2, 3</span></dt><dd><p>the expand factors (a scalar for each voxel dimension)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_image\">\n<code class=\"sig-name descname\">get_image</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the smooth image from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the smooth image at the requested resolution or None if an invalid</dt><dd><p>level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_scaling\">\n<code class=\"sig-name descname\">get_scaling</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the scalings from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the scaling factors from the original spacing to the spacings at the</dt><dd></dd>\n<dt>requested level</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_sigmas\">\n<code class=\"sig-name descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the smoothing parameters from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the smoothing parameters at the requested level</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.get_spacing\">\n<code class=\"sig-name descname\">get_spacing</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the sub-sampled shape from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the spacings (voxel sizes) at the requested resolution or None if an</dt><dd></dd>\n<dt>invalid level was requested</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.ScaleSpace.print_level\">\n<code class=\"sig-name descname\">print_level</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to be printed</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id25\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#id25\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.imwarp.</code><code class=\"sig-name descname\">SymmetricDiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">step_length=0.25</em>, <em class=\"sig-param\">ss_sigma_factor=0.2</em>, <em class=\"sig-param\">opt_tol=1e-05</em>, <em class=\"sig-param\">inv_iter=20</em>, <em class=\"sig-param\">inv_tol=0.001</em>, <em class=\"sig-param\">callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.imwarp.DiffeomorphicRegistration</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_map</span></code></a>()</p></td>\n<td><p>Return the resulting diffeomorphic map.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,\u00a0moving[,\u00a0\u2026])</p></td>\n<td><p>Starts the optimization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_level_iters</span></code>(level_iters)</p></td>\n<td><p>Sets the number of iterations at each pyramid level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\" title=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code></a>(current_displacement,\u00a0\u2026)</p></td>\n<td><p>Composition of the current displacement field with the given field</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">step_length=0.25</em>, <em class=\"sig-param\">ss_sigma_factor=0.2</em>, <em class=\"sig-param\">opt_tol=1e-05</em>, <em class=\"sig-param\">inv_iter=20</em>, <em class=\"sig-param\">inv_tol=0.001</em>, <em class=\"sig-param\">callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Symmetric Diffeomorphic Registration (SyN) Algorithm</p>\n<p>Performs the multi-resolution optimization algorithm for non-linear\nregistration using a given similarity metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>metric</strong><span class=\"classifier\">SimilarityMetric object</span></dt><dd><p>the metric to be optimized</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">list of int</span></dt><dd><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused)</p>\n</dd>\n<dt><strong>opt_tol</strong><span class=\"classifier\">float</span></dt><dd><p>the optimization will stop when the estimated derivative of the\nenergy profile w.r.t. time falls below this threshold</p>\n</dd>\n<dt><strong>inv_iter</strong><span class=\"classifier\">int</span></dt><dd><p>the number of iterations to be performed by the displacement field\ninversion algorithm</p>\n</dd>\n<dt><strong>step_length</strong><span class=\"classifier\">float</span></dt><dd><p>the length of the maximum displacement vector of the update\ndisplacement field at each iteration</p>\n</dd>\n<dt><strong>ss_sigma_factor</strong><span class=\"classifier\">float</span></dt><dd><p>parameter of the scale-space smoothing kernel. For example, the\nstd. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, \u2026, n_scales is the scale</p>\n</dd>\n<dt><strong>inv_tol</strong><span class=\"classifier\">float</span></dt><dd><p>the displacement field inversion algorithm will stop iterating\nwhen the inversion error falls below this threshold</p>\n</dd>\n<dt><strong>callback</strong><span class=\"classifier\">function(SymmetricDiffeomorphicRegistration)</span></dt><dd><p>a function receiving a SymmetricDiffeomorphicRegistration object\nto be called after each iteration (this optimizer will call this\nfunction passing self as parameter)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\">\n<code class=\"sig-name descname\">get_map</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the resulting diffeomorphic map.</p>\n<p>Returns the DiffeomorphicMap registering the moving image towards\nthe static image.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\">\n<code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>the image to be used as reference during optimization. The\ndisplacement fields will have the same discretization as the static\nimage.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. Since the\ndeformation fields\u2019 discretization is the same as the static image,\nit is necessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the \u2018prealign\u2019\nmatrix</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation associated to the static image</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation associated to the moving image</p>\n</dd>\n<dt><strong>prealign</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the affine transformation (operating on the physical space)\npre-aligning the moving image towards the static</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>static_to_ref</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the diffeomorphic map that brings the moving image towards the\nstatic one in the forward direction (i.e. by calling\nstatic_to_ref.transform) and the static image towards the\nmoving one in the backward direction (i.e. by calling\nstatic_to_ref.transform_inverse).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\">\n<code class=\"sig-name descname\">update</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">current_displacement</em>, <em class=\"sig-param\">new_displacement</em>, <em class=\"sig-param\">disp_world2grid</em>, <em class=\"sig-param\">time_scaling</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.SymmetricDiffeomorphicRegistration.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of the current displacement field with the given field</p>\n<p>Interpolates new displacement at the locations defined by\ncurrent_displacement. Equivalently, computes the composition C of the\ngiven displacement fields as C(x) = B(A(x)), where A is\ncurrent_displacement and B is new_displacement. This function is\nintended to be used with deformation fields of the same sampling\n(e.g. to be called by a registration algorithm).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>current_displacement</strong><span class=\"classifier\">array, shape (R\u2019, C\u2019, 2) or (S\u2019, R\u2019, C\u2019, 3)</span></dt><dd><p>the displacement field defining where to interpolate\nnew_displacement</p>\n</dd>\n<dt><strong>new_displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the displacement field to be warped by current_displacement</p>\n</dd>\n<dt><strong>disp_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the space-to-grid transform associated with the displacements\u2019\ngrid (we assume that both displacements are discretized over the\nsame grid)</p>\n</dd>\n<dt><strong>time_scaling</strong><span class=\"classifier\">float</span></dt><dd><p>scaling factor applied to d2. The effect may be interpreted as\nmoving d1 displacements along a factor (<cite>time_scaling</cite>) of d2.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>updated</strong><span class=\"classifier\">array, shape (the same as new_displacement)</span></dt><dd><p>the warped displacement field</p>\n</dd>\n<dt><strong>mean_norm</strong><span class=\"classifier\">the mean norm of all vectors in current_displacement</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id26\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.imwarp.floating\" title=\"dipy.align.imwarp.floating\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id26\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.imwarp.floating\">\n<code class=\"sig-prename descclassname\">dipy.align.imwarp.</code><code class=\"sig-name descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.imwarp.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">numpy.float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id27\">\n<h3>get_direction_and_spacings<a class=\"headerlink\" href=\"#id27\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imwarp.get_direction_and_spacings\">\n<code class=\"sig-prename descclassname\">dipy.align.imwarp.</code><code class=\"sig-name descname\">get_direction_and_spacings</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.get_direction_and_spacings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extracts the rotational and spacing components from a matrix</p>\n<p>Extracts the rotational and spacing (voxel dimensions) components from a\nmatrix. An image gradient represents the local variation of the image\u2019s\ngray values per voxel. Since we are iterating on the physical space, we\nneed to compute the gradients as variation per millimeter, so we need to\ndivide each gradient\u2019s component by the voxel size along the corresponding\naxis, that\u2019s what the spacings are used for. Since the image\u2019s gradients\nare oriented along the grid axes, we also need to re-orient the gradients\nto be given in physical space coordinates.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (k, k), k = 3, 4</span></dt><dd><p>the matrix transforming grid coordinates to physical space.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>direction</strong><span class=\"classifier\">array, shape (k-1, k-1)</span></dt><dd><p>the rotational component of the input matrix</p>\n</dd>\n<dt><strong>spacings</strong><span class=\"classifier\">array, shape (k-1,)</span></dt><dd><p>the scaling component (voxel size) of the matrix</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mult-aff\">\n<h3>mult_aff<a class=\"headerlink\" href=\"#mult-aff\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.imwarp.mult_aff\">\n<code class=\"sig-prename descclassname\">dipy.align.imwarp.</code><code class=\"sig-name descname\">mult_aff</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">A</em>, <em class=\"sig-param\">B</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.imwarp.mult_aff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the matrix product A.dot(B) considering None as the identity</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>A</strong><span class=\"classifier\">array, shape (n,k)</span></dt><dd></dd>\n<dt><strong>B</strong><span class=\"classifier\">array, shape (k,m)</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>The matrix product A.dot(B). If any of the input matrices is None, it is</dt><dd></dd>\n<dt>treated as the identity matrix. If both matrices are None, None is returned</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id28\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric\" title=\"dipy.align.metrics.CCMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a><a class=\"headerlink\" href=\"#id28\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.CCMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.metrics.</code><code class=\"sig-name descname\">CCMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">sigma_diff=2.0</em>, <em class=\"sig-param\">radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.compute_backward\" title=\"dipy.align.metrics.CCMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.compute_forward\" title=\"dipy.align.metrics.CCMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the moving image towards the static.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.free_iteration\" title=\"dipy.align.metrics.CCMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</p></td>\n<td><p>Frees the resources allocated during initialization</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.get_energy\" title=\"dipy.align.metrics.CCMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</p></td>\n<td><p>Numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.CCMetric.initialize_iteration\" title=\"dipy.align.metrics.CCMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">sigma_diff=2.0</em>, <em class=\"sig-param\">radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized Cross-Correlation Similarity metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>sigma_diff</strong><span class=\"classifier\">the standard deviation of the Gaussian smoothing kernel to</span></dt><dd><p>be applied to the update field at each iteration</p>\n</dd>\n<dt><strong>radius</strong><span class=\"classifier\">int</span></dt><dd><p>the radius of the squared (cubic) neighborhood at each voxel to be\nconsidered to compute the cross correlation</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the moving image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Cross Correlation (data term) energy computed at the\nlargest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.CCMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.CCMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the cross-correlation factors for efficient computation\nof the gradient of the Cross Correlation w.r.t. the displacement field.\nIt also pre-computes the image gradients in the physical space by\nre-orienting the gradients in the voxel space using the corresponding\naffine transformations.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id29\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric\" title=\"dipy.align.metrics.EMMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a><a class=\"headerlink\" href=\"#id29\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.EMMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.metrics.</code><code class=\"sig-name descname\">EMMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=1.0</em>, <em class=\"sig-param\">inner_iter=5</em>, <em class=\"sig-param\">q_levels=256</em>, <em class=\"sig-param\">double_gradient=True</em>, <em class=\"sig-param\">step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_backward\" title=\"dipy.align.metrics.EMMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_demons_step\" title=\"dipy.align.metrics.EMMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</p></td>\n<td><p>Demons step for EM metric</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_forward\" title=\"dipy.align.metrics.EMMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the reference image towards the static.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.compute_gauss_newton_step\" title=\"dipy.align.metrics.EMMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</p></td>\n<td><p>Computes the Gauss-Newton energy minimization step</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.free_iteration\" title=\"dipy.align.metrics.EMMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</p></td>\n<td><p>Frees the resources allocated during initialization</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.get_energy\" title=\"dipy.align.metrics.EMMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</p></td>\n<td><p>The numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.initialize_iteration\" title=\"dipy.align.metrics.EMMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.use_moving_image_dynamics\" title=\"dipy.align.metrics.EMMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.EMMetric.use_static_image_dynamics\" title=\"dipy.align.metrics.EMMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=1.0</em>, <em class=\"sig-param\">inner_iter=5</em>, <em class=\"sig-param\">q_levels=256</em>, <em class=\"sig-param\">double_gradient=True</em>, <em class=\"sig-param\">step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expectation-Maximization Metric</p>\n<p>Similarity metric based on the Expectation-Maximization algorithm to\nhandle multi-modal images. The transfer function is modeled as a set of\nhidden random variables that are estimated at each iteration of the\nalgorithm.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>smooth</strong><span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt><strong>inner_iter</strong><span class=\"classifier\">int</span></dt><dd><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt><strong>q_levels</strong><span class=\"classifier\">number of quantization levels (equal to the number of hidden</span></dt><dd><p>variables in the EM algorithm)</p>\n</dd>\n<dt><strong>double_gradient</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</dd>\n<dt><strong>step_type</strong><span class=\"classifier\">string (\u2018gauss_newton\u2019, \u2018demons\u2019)</span></dt><dd><p>the optimization schedule to be used in the multi-resolution\nGauss-Seidel optimization algorithm (not used if Demons Step is\nselected)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_demons_step\">\n<code class=\"sig-name descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for EM metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Demons step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.compute_gauss_newton_step\">\n<code class=\"sig-name descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Computes the Newton step to minimize this energy, i.e., minimizes the\nlinearized energy function with respect to the\nregularized displacement field (this step does not require\npost-smoothing, as opposed to the demons step, which does not include\nregularization). To accelerate convergence we use the multi-grid\nGauss-Seidel algorithm proposed by Bruhn and Weickert et al [Bruhn05]</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Newton step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"simple\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion</dt><dd><p>estimation: combining highest accuracy with real-time\nperformance\u201d, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the EM (data term) energy computed at the largest\niteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the transfer functions (hidden random variables) and\nvariances of the estimators. Also pre-computes the gradient of both\ninput images. Note that once the images are transformed to the opposite\nmodality, the gradient of the transformed images can be used with the\ngradient of the corresponding modality in the same fashion as\ndiff-demons does for mono-modality images. If the flag\nself.use_double_gradient is True these gradients are averaged.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.use_moving_image_dynamics\">\n<code class=\"sig-name descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">original_moving_image</em>, <em class=\"sig-param\">transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent moving image mask from the original_moving_image mask (warped\nby nearest neighbor interpolation)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>original_moving_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the original moving image from which the current moving image was\ngenerated, the current moving image is the one that was provided\nvia \u2018set_moving_image(\u2026)\u2019, which may not be the same as the\noriginal moving image but a warped version of it.</p>\n</dd>\n<dt><strong>transformation</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original_moving_image\nto generate the current moving image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.EMMetric.use_static_image_dynamics\">\n<code class=\"sig-name descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">original_static_image</em>, <em class=\"sig-param\">transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.EMMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent static image mask from the originalstaticImage mask (warped\nby nearest neighbor interpolation)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>original_static_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the original static image from which the current static image was\ngenerated, the current static image is the one that was provided\nvia \u2018set_static_image(\u2026)\u2019, which may not be the same as the\noriginal static image but a warped version of it (even the static\nimage changes during Symmetric Normalization, not only the moving\none).</p>\n</dd>\n<dt><strong>transformation</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original_static_image\nto generate the current static image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id30\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric\" title=\"dipy.align.metrics.SSDMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a><a class=\"headerlink\" href=\"#id30\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.SSDMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.metrics.</code><code class=\"sig-name descname\">SSDMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=4</em>, <em class=\"sig-param\">inner_iter=10</em>, <em class=\"sig-param\">step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_backward\" title=\"dipy.align.metrics.SSDMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_demons_step\" title=\"dipy.align.metrics.SSDMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_demons_step</span></code></a>([forward_step])</p></td>\n<td><p>Demons step for SSD metric</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_forward\" title=\"dipy.align.metrics.SSDMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the reference image towards the static.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.compute_gauss_newton_step\" title=\"dipy.align.metrics.SSDMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>([forward_step])</p></td>\n<td><p>Computes the Gauss-Newton energy minimization step</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.free_iteration\" title=\"dipy.align.metrics.SSDMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</p></td>\n<td><p>Nothing to free for the SSD metric</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.get_energy\" title=\"dipy.align.metrics.SSDMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</p></td>\n<td><p>The numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SSDMetric.initialize_iteration\" title=\"dipy.align.metrics.SSDMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=4</em>, <em class=\"sig-param\">inner_iter=10</em>, <em class=\"sig-param\">step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sum of Squared Differences (SSD) Metric</p>\n<p>Similarity metric for (mono-modal) nonlinear image registration defined\nby the sum of squared differences (SSD)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>smooth</strong><span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt><strong>inner_iter</strong><span class=\"classifier\">int</span></dt><dd><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt><strong>step_type</strong><span class=\"classifier\">string</span></dt><dd><p>the displacement field step to be computed when \u2018compute_forward\u2019\nand \u2018compute_backward\u2019 are called. Either \u2018demons\u2019 or\n\u2018gauss_newton\u2019</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the updated displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_demons_step\">\n<code class=\"sig-name descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for SSD metric</p>\n<p>Computes the demons step proposed by Vercauteren et al.[Vercauteren09]\nfor the SSD metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Demons step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"simple\">\n<dt>[Vercauteren09] Tom Vercauteren, Xavier Pennec, Aymeric Perchant,</dt><dd><p>Nicholas Ayache, \u201cDiffeomorphic Demons: Efficient\nNon-parametric Image Registration\u201d, Neuroimage 2009</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.compute_gauss_newton_step\">\n<code class=\"sig-name descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Minimizes the linearized energy function (Newton step) defined by the\nsum of squared differences of corresponding pixels of the input images\nwith respect to the displacement field.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape = static_image.shape + (3,)</span></dt><dd><p>if forward_step==True, the forward SSD Gauss-Newton step,\nelse, the backward step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Nothing to free for the SSD metric</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Sum of Squared Differences (data term) energy computed at\nthe largest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SSDMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SSDMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the gradient of the input images to be used in the\ncomputation of the forward and backward steps.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"similaritymetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a><a class=\"headerlink\" href=\"#similaritymetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.metrics.SimilarityMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.metrics.</code><code class=\"sig-name descname\">SimilarityMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.compute_backward\" title=\"dipy.align.metrics.SimilarityMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.compute_forward\" title=\"dipy.align.metrics.SimilarityMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>()</p></td>\n<td><p>Computes one step bringing the reference image towards the static.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.free_iteration\" title=\"dipy.align.metrics.SimilarityMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>()</p></td>\n<td><p>Releases the resources no longer needed by the metric</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.get_energy\" title=\"dipy.align.metrics.SimilarityMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>()</p></td>\n<td><p>Numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.initialize_iteration\" title=\"dipy.align.metrics.SimilarityMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>()</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_above\" title=\"dipy.align.metrics.SimilarityMetric.set_levels_above\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code></a>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_below\" title=\"dipy.align.metrics.SimilarityMetric.set_levels_below\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code></a>(levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_moving_image\" title=\"dipy.align.metrics.SimilarityMetric.set_moving_image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code></a>(moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.set_static_image\" title=\"dipy.align.metrics.SimilarityMetric.set_static_image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code></a>(static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\" title=\"dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\" title=\"dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Similarity Metric abstract class</p>\n<p>A similarity metric is in charge of keeping track of the numerical\nvalue of the similarity (or distance) between the two given images. It\nalso computes the update field for the forward and inverse displacement\nfields to be used in a gradient-based optimization algorithm. Note that\nthis metric does not depend on any transformation (affine or\nnon-linear) so it assumes the static and moving images are already\nwarped</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.compute_backward\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the backward update field to register the static image towards\nthe moving image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.compute_forward\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.free_iteration\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Releases the resources no longer needed by the metric</p>\n<p>This method is called by the RegistrationOptimizer after the required\niterations have been computed (forward and / or backward) so that the\nSimilarityMetric can safely delete any data it computed as part of the\ninitialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.get_energy\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Must return the numeric value of the similarity between the given\nstatic and moving images</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.initialize_iteration\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>This method will be called before any compute_forward or\ncompute_backward call, this allows the Metric to pre-compute any useful\ninformation for speeding up the update computations. This\ninitialization was needed in ANTS because the updates are called once\nper voxel. In Python this is unpractical, though.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_levels_above\">\n<code class=\"sig-name descname\">set_levels_above</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">levels</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_above\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs the metric how many pyramid levels are above the current one</p>\n<p>Informs this metric the number of pyramid levels above the current one.\nThe metric may change its behavior (e.g. number of inner iterations)\naccordingly</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>levels</strong><span class=\"classifier\">int</span></dt><dd><p>the number of levels above the current Gaussian Pyramid level</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_levels_below\">\n<code class=\"sig-name descname\">set_levels_below</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">levels</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_levels_below\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs the metric how many pyramid levels are below the current one</p>\n<p>Informs this metric the number of pyramid levels below the current one.\nThe metric may change its behavior (e.g. number of inner iterations)\naccordingly</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>levels</strong><span class=\"classifier\">int</span></dt><dd><p>the number of levels below the current Gaussian Pyramid level</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_moving_image\">\n<code class=\"sig-name descname\">set_moving_image</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving_image</em>, <em class=\"sig-param\">moving_affine</em>, <em class=\"sig-param\">moving_spacing</em>, <em class=\"sig-param\">moving_direction</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_moving_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the moving image being compared against the static one.</p>\n<p>Sets the moving image. The default behavior (of this abstract class) is\nsimply to assign the reference to an attribute, but\ngeneralizations of the metric may need to perform other operations</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the moving image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.set_static_image\">\n<code class=\"sig-name descname\">set_static_image</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static_image</em>, <em class=\"sig-param\">static_affine</em>, <em class=\"sig-param\">static_spacing</em>, <em class=\"sig-param\">static_direction</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.set_static_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the static image being compared against the moving one.</p>\n<p>Sets the static image. The default behavior (of this abstract class) is\nsimply to assign the reference to an attribute, but\ngeneralizations of the metric may need to perform other operations</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the static image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\">\n<code class=\"sig-name descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">original_moving_image</em>, <em class=\"sig-param\">transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image</p>\n<p>This method allows the metric to compute any useful\ninformation from knowing how the current static image was generated\n(as the transformation of an original static image). This method is\ncalled by the optimizer just after it sets the static image.\nTransformation will be an instance of DiffeomorficMap or None if\nthe original_moving_image equals self.moving_image.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>original_moving_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>original image from which the current moving image was generated</p>\n</dd>\n<dt><strong>transformation</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original image to generate\nthe current moving image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\">\n<code class=\"sig-name descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">original_static_image</em>, <em class=\"sig-param\">transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.SimilarityMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>This method allows the metric to compute any useful\ninformation from knowing how the current static image was generated\n(as the transformation of an original static image). This method is\ncalled by the optimizer just after it sets the static image.\nTransformation will be an instance of DiffeomorficMap or None\nif the original_static_image equals self.moving_image.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>original_static_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>original image from which the current static image was generated</p>\n</dd>\n<dt><strong>transformation</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to original image to generate\nthe current static image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id31\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.metrics.floating\" title=\"dipy.align.metrics.floating\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id31\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.metrics.floating\">\n<code class=\"sig-prename descclassname\">dipy.align.metrics.</code><code class=\"sig-name descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.metrics.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">numpy.float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient\">\n<h3>gradient<a class=\"headerlink\" href=\"#gradient\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.gradient\">\n<code class=\"sig-prename descclassname\">dipy.align.metrics.</code><code class=\"sig-name descname\">gradient</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">f</em>, <em class=\"sig-param\">*varargs</em>, <em class=\"sig-param\">axis=None</em>, <em class=\"sig-param\">edge_order=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the gradient of an N-dimensional array.</p>\n<p>The gradient is computed using second order accurate central differences\nin the interior points and either first or second order accurate one-sides\n(forward or backwards) differences at the boundaries.\nThe returned gradient hence has the same shape as the input array.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>f</strong><span class=\"classifier\">array_like</span></dt><dd><p>An N-dimensional array containing samples of a scalar function.</p>\n</dd>\n<dt><strong>varargs</strong><span class=\"classifier\">list of scalar or array, optional</span></dt><dd><p>Spacing between f values. Default unitary spacing for all dimensions.\nSpacing can be specified using:</p>\n<ol class=\"arabic simple\">\n<li><p>single scalar to specify a sample distance for all dimensions.</p></li>\n<li><p>N scalars to specify a constant sample distance for each dimension.\ni.e. <cite>dx</cite>, <cite>dy</cite>, <cite>dz</cite>, \u2026</p></li>\n<li><p>N arrays to specify the coordinates of the values along each\ndimension of F. The length of the array must match the size of\nthe corresponding dimension</p></li>\n<li><p>Any combination of N scalars/arrays with the meaning of 2. and 3.</p></li>\n</ol>\n<p>If <cite>axis</cite> is given, the number of varargs must equal the number of axes.\nDefault: 1.</p>\n</dd>\n<dt><strong>edge_order</strong><span class=\"classifier\">{1, 2}, optional</span></dt><dd><p>Gradient is calculated using N-th order accurate differences\nat the boundaries. Default: 1.</p>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified added\">New in version 1.9.1.</span></p>\n</div>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">None or int or tuple of ints, optional</span></dt><dd><p>Gradient is calculated only along the given axis or axes\nThe default (axis = None) is to calculate the gradient for all the axes\nof the input array. axis may be negative, in which case it counts from\nthe last to the first axis.</p>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified added\">New in version 1.11.0.</span></p>\n</div>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gradient</strong><span class=\"classifier\">ndarray or list of ndarray</span></dt><dd><p>A set of ndarrays (or a single ndarray if there is only one dimension)\ncorresponding to the derivatives of f with respect to each dimension.\nEach derivative has the same shape as f.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Assuming that <span class=\"math notranslate nohighlight\">\\(f\\in C^{3}\\)</span> (i.e., <span class=\"math notranslate nohighlight\">\\(f\\)</span> has at least 3 continuous\nderivatives) and let <span class=\"math notranslate nohighlight\">\\(h_{*}\\)</span> be a non-homogeneous stepsize, we\nminimize the \u201cconsistency error\u201d <span class=\"math notranslate nohighlight\">\\(\\eta_{i}\\)</span> between the true gradient\nand its estimate from a linear combination of the neighboring grid-points:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\eta_{i} = f_{i}^{\\left(1\\right)} -\n            \\left[ \\alpha f\\left(x_{i}\\right) +\n                    \\beta f\\left(x_{i} + h_{d}\\right) +\n                    \\gamma f\\left(x_{i}-h_{s}\\right)\n            \\right]\\]</div>\n<p>By substituting <span class=\"math notranslate nohighlight\">\\(f(x_{i} + h_{d})\\)</span> and <span class=\"math notranslate nohighlight\">\\(f(x_{i} - h_{s})\\)</span>\nwith their Taylor series expansion, this translates into solving\nthe following the linear system:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\begin{split}\\left\\{\n    \\begin{array}{r}\n        \\alpha+\\beta+\\gamma=0 \\\\\n        \\beta h_{d}-\\gamma h_{s}=1 \\\\\n        \\beta h_{d}^{2}+\\gamma h_{s}^{2}=0\n    \\end{array}\n\\right.\\end{split}\\]</div>\n<p>The resulting approximation of <span class=\"math notranslate nohighlight\">\\(f_{i}^{(1)}\\)</span> is the following:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\hat f_{i}^{(1)} =\n    \\frac{\n        h_{s}^{2}f\\left(x_{i} + h_{d}\\right)\n        + \\left(h_{d}^{2} - h_{s}^{2}\\right)f\\left(x_{i}\\right)\n        - h_{d}^{2}f\\left(x_{i}-h_{s}\\right)}\n        { h_{s}h_{d}\\left(h_{d} + h_{s}\\right)}\n    + \\mathcal{O}\\left(\\frac{h_{d}h_{s}^{2}\n                        + h_{s}h_{d}^{2}}{h_{d}\n                        + h_{s}}\\right)\\]</div>\n<p>It is worth noting that if <span class=\"math notranslate nohighlight\">\\(h_{s}=h_{d}\\)</span>\n(i.e., data are evenly spaced)\nwe find the standard second order approximation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\hat f_{i}^{(1)}=\n    \\frac{f\\left(x_{i+1}\\right) - f\\left(x_{i-1}\\right)}{2h}\n    + \\mathcal{O}\\left(h^{2}\\right)\\]</div>\n<p>With a similar procedure the forward/backward approximations used for\nboundaries can be derived.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rb7b40ce2a3e3-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Quarteroni A., Sacco R., Saleri F. (2007) Numerical Mathematics\n(Texts in Applied Mathematics). New York: Springer.</p>\n</dd>\n<dt class=\"label\" id=\"rb7b40ce2a3e3-2\"><span class=\"brackets\">2</span></dt>\n<dd><p>Durran D. R. (1999) Numerical Methods for Wave Equations\nin Geophysical Fluid Dynamics. New York: Springer.</p>\n</dd>\n<dt class=\"label\" id=\"rb7b40ce2a3e3-3\"><span class=\"brackets\">3</span></dt>\n<dd><p>Fornberg B. (1988) Generation of Finite Difference Formulas on\nArbitrarily Spaced Grids,\nMathematics of Computation 51, no. 184 : 699-706.\n<a class=\"reference external\" href=\"http://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf\">PDF</a>.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"go\">array([1. , 1.5, 2.5, 3.5, 4.5, 5. ])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">array([0.5 ,  0.75,  1.25,  1.75,  2.25,  2.5 ])</span>\n</pre></div>\n</div>\n<p>Spacing can be also specified with an array that represents the coordinates\nof the values F along the dimensions.\nFor instance a uniform spacing:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">array([1. ,  1.5,  2.5,  3.5,  4.5,  5. ])</span>\n</pre></div>\n</div>\n<p>Or a non uniform one:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"mf\">4.</span><span class=\"p\">,</span> <span class=\"mf\">6.</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"go\">array([1. ,  3. ,  3.5,  6.7,  6.9,  2.5])</span>\n</pre></div>\n</div>\n<p>For two dimensional arrays, the return will be two arrays ordered by\naxis. In this example the first array stands for the gradient in\nrows and the second one in columns direction:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">))</span>\n<span class=\"go\">[array([[ 2.,  2., -1.],</span>\n<span class=\"go\">       [ 2.,  2., -1.]]), array([[1. , 2.5, 4. ],</span>\n<span class=\"go\">       [1. , 1. , 1. ]])]</span>\n</pre></div>\n</div>\n<p>In this example the spacing is also specified:\nuniform for axis=0 and non uniform for axis=1</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"mf\">2.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">),</span> <span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"go\">[array([[ 1. ,  1. , -0.5],</span>\n<span class=\"go\">       [ 1. ,  1. , -0.5]]), array([[2. , 2. , 2. ],</span>\n<span class=\"go\">       [2. , 1.7, 0.5]])]</span>\n</pre></div>\n</div>\n<p>It is possible to specify how boundaries are treated using <cite>edge_order</cite></p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">edge_order</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([1.,  2.,  4.,  6.,  7.])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">edge_order</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">array([0., 2., 4., 6., 8.])</span>\n</pre></div>\n</div>\n<p>The <cite>axis</cite> keyword can be used to specify a subset of axes of which the\ngradient is calculated</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 2.,  2., -1.],</span>\n<span class=\"go\">       [ 2.,  2., -1.]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"v-cycle-2d\">\n<h3>v_cycle_2d<a class=\"headerlink\" href=\"#v-cycle-2d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.v_cycle_2d\">\n<code class=\"sig-prename descclassname\">dipy.align.metrics.</code><code class=\"sig-name descname\">v_cycle_2d</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">n</em>, <em class=\"sig-param\">k</em>, <em class=\"sig-param\">delta_field</em>, <em class=\"sig-param\">sigma_sq_field</em>, <em class=\"sig-param\">gradient_field</em>, <em class=\"sig-param\">target</em>, <em class=\"sig-param\">lambda_param</em>, <em class=\"sig-param\">displacement</em>, <em class=\"sig-param\">depth=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.v_cycle_2d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p>\n<p>Multi-resolution Gauss-Seidel solver: solves the Gauss-Newton linear system\nby first filtering (GS-iterate) the current level, then solves for the\nresidual at a coarser resolution and finally refines the solution at the\ncurrent resolution. This scheme corresponds to the V-cycle proposed by\nBruhn and Weickert[Bruhn05].</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>n</strong><span class=\"classifier\">int</span></dt><dd><p>number of levels of the multi-resolution algorithm (it will be called\nrecursively until level n == 0)</p>\n</dd>\n<dt><strong>k</strong><span class=\"classifier\">int</span></dt><dd><p>the number of iterations at each multi-resolution level</p>\n</dd>\n<dt><strong>delta_field</strong><span class=\"classifier\">array, shape (R, C)</span></dt><dd><p>the difference between the static and moving image (the \u2018derivative\nw.r.t. time\u2019 in the optical flow model)</p>\n</dd>\n<dt><strong>sigma_sq_field</strong><span class=\"classifier\">array, shape (R, C)</span></dt><dd><p>the variance of the gray level value at each voxel, according to the\nEM model (for SSD, it is 1 for all voxels). Inf and 0 values\nare processed specially to support infinite and zero variance.</p>\n</dd>\n<dt><strong>gradient_field</strong><span class=\"classifier\">array, shape (R, C, 2)</span></dt><dd><p>the gradient of the moving image</p>\n</dd>\n<dt><strong>target</strong><span class=\"classifier\">array, shape (R, C, 2)</span></dt><dd><p>right-hand side of the linear system to be solved in the Weickert\u2019s\nmulti-resolution algorithm</p>\n</dd>\n<dt><strong>lambda_param</strong><span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger its value the smoother the\ndisplacement field</p>\n</dd>\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2)</span></dt><dd><p>the displacement field to start the optimization from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>energy</strong><span class=\"classifier\">the energy of the EM (or SSD if sigmafield[\u2026]==1) metric at this</span></dt><dd><p>iteration</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"simple\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion</dt><dd><p>estimation: combining the highest accuracy with real-time\nperformance\u201d, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"v-cycle-3d\">\n<h3>v_cycle_3d<a class=\"headerlink\" href=\"#v-cycle-3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.metrics.v_cycle_3d\">\n<code class=\"sig-prename descclassname\">dipy.align.metrics.</code><code class=\"sig-name descname\">v_cycle_3d</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">n</em>, <em class=\"sig-param\">k</em>, <em class=\"sig-param\">delta_field</em>, <em class=\"sig-param\">sigma_sq_field</em>, <em class=\"sig-param\">gradient_field</em>, <em class=\"sig-param\">target</em>, <em class=\"sig-param\">lambda_param</em>, <em class=\"sig-param\">displacement</em>, <em class=\"sig-param\">depth=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.metrics.v_cycle_3d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-resolution Gauss-Seidel solver using V-type cycles</p>\n<p>Multi-resolution Gauss-Seidel solver: solves the linear system by first\nfiltering (GS-iterate) the current level, then solves for the residual\nat a coarser resolution and finally refines the solution at the current\nresolution. This scheme corresponds to the V-cycle proposed by Bruhn and\nWeickert[1].\n[1] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion estimation:</p>\n<blockquote>\n<div><p>combining highest accuracy with real-time performance\u201d,\n10th IEEE International Conference on Computer Vision, 2005.\nICCV 2005.</p>\n</div></blockquote>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>n</strong><span class=\"classifier\">int</span></dt><dd><p>number of levels of the multi-resolution algorithm (it will be called\nrecursively until level n == 0)</p>\n</dd>\n<dt><strong>k</strong><span class=\"classifier\">int</span></dt><dd><p>the number of iterations at each multi-resolution level</p>\n</dd>\n<dt><strong>delta_field</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>the difference between the static and moving image (the \u2018derivative\nw.r.t. time\u2019 in the optical flow model)</p>\n</dd>\n<dt><strong>sigma_sq_field</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>the variance of the gray level value at each voxel, according to the\nEM model (for SSD, it is 1 for all voxels). Inf and 0 values\nare processed specially to support infinite and zero variance.</p>\n</dd>\n<dt><strong>gradient_field</strong><span class=\"classifier\">array, shape (S, R, C, 3)</span></dt><dd><p>the gradient of the moving image</p>\n</dd>\n<dt><strong>target</strong><span class=\"classifier\">array, shape (S, R, C, 3)</span></dt><dd><p>right-hand side of the linear system to be solved in the Weickert\u2019s\nmulti-resolution algorithm</p>\n</dd>\n<dt><strong>lambda_param</strong><span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger its value the smoother the\ndisplacement field</p>\n</dd>\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (S, R, C, 3)</span></dt><dd><p>the displacement field to start the optimization from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>energy</strong><span class=\"classifier\">the energy of the EM (or SSD if sigmafield[\u2026]==1) metric at this</span></dt><dd><p>iteration</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"pool\">\n<h3>Pool<a class=\"headerlink\" href=\"#pool\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.Pool\">\n<code class=\"sig-prename descclassname\">dipy.align.reslice.</code><code class=\"sig-name descname\">Pool</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">processes=None</em>, <em class=\"sig-param\">initializer=None</em>, <em class=\"sig-param\">initargs=()</em>, <em class=\"sig-param\">maxtasksperchild=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.Pool\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a process pool object</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affine-transform\">\n<h3>affine_transform<a class=\"headerlink\" href=\"#affine-transform\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.affine_transform\">\n<code class=\"sig-prename descclassname\">dipy.align.reslice.</code><code class=\"sig-name descname\">affine_transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input</em>, <em class=\"sig-param\">matrix</em>, <em class=\"sig-param\">offset=0.0</em>, <em class=\"sig-param\">output_shape=None</em>, <em class=\"sig-param\">output=None</em>, <em class=\"sig-param\">order=3</em>, <em class=\"sig-param\">mode='constant'</em>, <em class=\"sig-param\">cval=0.0</em>, <em class=\"sig-param\">prefilter=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.affine_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply an affine transformation.</p>\n<p>Given an output image pixel index vector <code class=\"docutils literal notranslate\"><span class=\"pre\">o</span></code>, the pixel value\nis determined from the input image at position\n<code class=\"docutils literal notranslate\"><span class=\"pre\">np.dot(matrix,</span> <span class=\"pre\">o)</span> <span class=\"pre\">+</span> <span class=\"pre\">offset</span></code>.</p>\n<p>This does \u2018pull\u2019 (or \u2018backward\u2019) resampling, transforming the output space\nto the input to locate data. Affine transformations are often described in\nthe \u2018push\u2019 (or \u2018forward\u2019) direction, transforming input to output. If you\nhave a matrix for the \u2018push\u2019 transformation, use its inverse\n(<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">numpy.linalg.inv()</span></code>) in this function.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>input</strong><span class=\"classifier\">array_like</span></dt><dd><p>The input array.</p>\n</dd>\n<dt><strong>matrix</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The inverse coordinate transformation matrix, mapping output\ncoordinates to input coordinates. If <code class=\"docutils literal notranslate\"><span class=\"pre\">ndim</span></code> is the number of\ndimensions of <code class=\"docutils literal notranslate\"><span class=\"pre\">input</span></code>, the given matrix must have one of the\nfollowing shapes:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">(ndim,</span> <span class=\"pre\">ndim)</span></code>: the linear transformation matrix for each\noutput coordinate.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">(ndim,)</span></code>: assume that the 2-D transformation matrix is\ndiagonal, with the diagonal specified by the given value. A more\nefficient algorithm is then used that exploits the separability\nof the problem.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">(ndim</span> <span class=\"pre\">+</span> <span class=\"pre\">1,</span> <span class=\"pre\">ndim</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span></code>: assume that the transformation is\nspecified using homogeneous coordinates <a class=\"reference internal\" href=\"#re543e1a22138-1\" id=\"id35\">[1]</a>. In this case, any\nvalue passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">offset</span></code> is ignored.</p></li>\n<li><p><code class=\"docutils literal notranslate\"><span class=\"pre\">(ndim,</span> <span class=\"pre\">ndim</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span></code>: as above, but the bottom row of a\nhomogeneous transformation matrix is always <code class=\"docutils literal notranslate\"><span class=\"pre\">[0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">...,</span> <span class=\"pre\">1]</span></code>,\nand may be omitted.</p></li>\n</ul>\n</div></blockquote>\n</dd>\n<dt><strong>offset</strong><span class=\"classifier\">float or sequence, optional</span></dt><dd><p>The offset into the array where the transform is applied. If a float,\n<cite>offset</cite> is the same for each axis. If a sequence, <cite>offset</cite> should\ncontain one value for each axis.</p>\n</dd>\n<dt><strong>output_shape</strong><span class=\"classifier\">tuple of ints, optional</span></dt><dd><p>Shape tuple.</p>\n</dd>\n<dt><strong>output</strong><span class=\"classifier\">array or dtype, optional</span></dt><dd><p>The array in which to place the output, or the dtype of the\nreturned array. By default an array of the same dtype as input\nwill be created.</p>\n</dd>\n<dt><strong>order</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The order of the spline interpolation, default is 3.\nThe order has to be in the range 0-5.</p>\n</dd>\n<dt><strong>mode</strong><span class=\"classifier\">{\u2018reflect\u2019, \u2018constant\u2019, \u2018nearest\u2019, \u2018mirror\u2019, \u2018wrap\u2019}, optional</span></dt><dd><p>The <cite>mode</cite> parameter determines how the input array is extended\nbeyond its boundaries. Default is \u2018constant\u2019. Behavior for each valid\nvalue is as follows:</p>\n<dl class=\"simple\">\n<dt>\u2018reflect\u2019 (<cite>d c b a | a b c d | d c b a</cite>)</dt><dd><p>The input is extended by reflecting about the edge of the last\npixel.</p>\n</dd>\n<dt>\u2018constant\u2019 (<cite>k k k k | a b c d | k k k k</cite>)</dt><dd><p>The input is extended by filling all values beyond the edge with\nthe same constant value, defined by the <cite>cval</cite> parameter.</p>\n</dd>\n<dt>\u2018nearest\u2019 (<cite>a a a a | a b c d | d d d d</cite>)</dt><dd><p>The input is extended by replicating the last pixel.</p>\n</dd>\n<dt>\u2018mirror\u2019 (<cite>d c b | a b c d | c b a</cite>)</dt><dd><p>The input is extended by reflecting about the center of the last\npixel.</p>\n</dd>\n<dt>\u2018wrap\u2019 (<cite>a b c d | a b c d | a b c d</cite>)</dt><dd><p>The input is extended by wrapping around to the opposite edge.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>cval</strong><span class=\"classifier\">scalar, optional</span></dt><dd><p>Value to fill past edges of input if <cite>mode</cite> is \u2018constant\u2019. Default\nis 0.0.</p>\n</dd>\n<dt><strong>prefilter</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Determines if the input array is prefiltered with <cite>spline_filter</cite>\nbefore interpolation. The default is True, which will create a\ntemporary <cite>float64</cite> array of filtered values if <cite>order &gt; 1</cite>. If\nsetting this to False, the output will be slightly blurred if\n<cite>order &gt; 1</cite>, unless the input is prefiltered, i.e. it is the result\nof calling <cite>spline_filter</cite> on the original input.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_transform</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The transformed input.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The given matrix and offset are used to find for each point in the\noutput the corresponding coordinates in the input by an affine\ntransformation. The value of the input at those coordinates is\ndetermined by spline interpolation of the requested order. Points\noutside the boundaries of the input are filled according to the given\nmode.</p>\n<div class=\"versionchanged\">\n<p><span class=\"versionmodified changed\">Changed in version 0.18.0: </span>Previously, the exact interpretation of the affine transformation\ndepended on whether the matrix was supplied as a 1-D or a\n2-D array. If a 1-D array was supplied\nto the matrix parameter, the output pixel value at index <code class=\"docutils literal notranslate\"><span class=\"pre\">o</span></code>\nwas determined from the input image at position\n<code class=\"docutils literal notranslate\"><span class=\"pre\">matrix</span> <span class=\"pre\">*</span> <span class=\"pre\">(o</span> <span class=\"pre\">+</span> <span class=\"pre\">offset)</span></code>.</p>\n</div>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"re543e1a22138-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id35\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Homogeneous_coordinates\">https://en.wikipedia.org/wiki/Homogeneous_coordinates</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"cpu-count\">\n<h3>cpu_count<a class=\"headerlink\" href=\"#cpu-count\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.cpu_count\">\n<code class=\"sig-prename descclassname\">dipy.align.reslice.</code><code class=\"sig-name descname\">cpu_count</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.cpu_count\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the number of CPUs in the system</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reslice\">\n<h3>reslice<a class=\"headerlink\" href=\"#reslice\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.reslice.reslice\">\n<code class=\"sig-prename descclassname\">dipy.align.reslice.</code><code class=\"sig-name descname\">reslice</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">zooms</em>, <em class=\"sig-param\">new_zooms</em>, <em class=\"sig-param\">order=1</em>, <em class=\"sig-param\">mode='constant'</em>, <em class=\"sig-param\">cval=0</em>, <em class=\"sig-param\">num_processes=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.reslice.reslice\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt><dd><p>3d volume or 4d volume with datasets</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (4,4)</span></dt><dd><p>mapping from voxel coordinates to world coordinates</p>\n</dd>\n<dt><strong>zooms</strong><span class=\"classifier\">tuple, shape (3,)</span></dt><dd><p>voxel size for (i,j,k) dimensions</p>\n</dd>\n<dt><strong>new_zooms</strong><span class=\"classifier\">tuple, shape (3,)</span></dt><dd><p>new voxel size for (i,j,k) after resampling</p>\n</dd>\n<dt><strong>order</strong><span class=\"classifier\">int, from 0 to 5</span></dt><dd><p>order of interpolation for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc..\nif you don\u2019t want any smoothing 0 is the option you need.</p>\n</dd>\n<dt><strong>mode</strong><span class=\"classifier\">string (\u2018constant\u2019, \u2018nearest\u2019, \u2018reflect\u2019 or \u2018wrap\u2019)</span></dt><dd><p>Points outside the boundaries of the input are filled according\nto the given mode.</p>\n</dd>\n<dt><strong>cval</strong><span class=\"classifier\">float</span></dt><dd><p>Value used for points outside the boundaries of the input if\nmode=\u2019constant\u2019.</p>\n</dd>\n<dt><strong>num_processes</strong><span class=\"classifier\">int</span></dt><dd><p>Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>data2</strong><span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt><dd><p>datasets resampled into isotropic voxel size</p>\n</dd>\n<dt><strong>affine2</strong><span class=\"classifier\">array, shape (4,4)</span></dt><dd><p>new affine for the resampled image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.reslice</span> <span class=\"k\">import</span> <span class=\"n\">reslice</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f_name</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;aniso_vox&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">f_name</span><span class=\"p\">,</span> <span class=\"n\">return_voxsize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span>\n<span class=\"go\">(4.0, 4.0, 5.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span>\n<span class=\"go\">(3.0, 3.0, 3.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine2</span> <span class=\"o\">=</span> <span class=\"n\">reslice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span><span class=\"p\">,</span> <span class=\"n\">new_zooms</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id37\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"dipy.align.scalespace.IsotropicScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id37\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.scalespace.IsotropicScaleSpace\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.scalespace.</code><code class=\"sig-name descname\">IsotropicScaleSpace</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">factors</em>, <em class=\"sig-param\">sigmas</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.IsotropicScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.scalespace.ScaleSpace</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code>(level)</p></td>\n<td><p>Voxel-to-space transformation at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine_inv</span></code>(level)</p></td>\n<td><p>Space-to-voxel transformation at a given level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_domain_shape</span></code>(level)</p></td>\n<td><p>Shape the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_expand_factors</span></code>(from_level,\u00a0to_level)</p></td>\n<td><p>Ratio of voxel size from pyramid level from_level to to_level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_image</span></code>(level)</p></td>\n<td><p>Smoothed image at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_scaling</span></code>(level)</p></td>\n<td><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sigmas</span></code>(level)</p></td>\n<td><p>Smoothing parameters used at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_spacing</span></code>(level)</p></td>\n<td><p>Spacings the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_level</span></code>(level)</p></td>\n<td><p>Prints properties of a pyramid level</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.IsotropicScaleSpace.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">factors</em>, <em class=\"sig-param\">sigmas</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.IsotropicScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>IsotropicScaleSpace</p>\n<p>Computes the Scale Space representation of an image using isotropic\nsmoothing kernels for all scales. The scale space is simply a list\nof images produced by smoothing the input image with a Gaussian\nkernel with different smoothing parameters.</p>\n<p>This specialization of ScaleSpace allows the user to provide custom\nscale and smoothing factors for all scales.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (r,c) or (s, r, c) where s is the number of</span></dt><dd><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</dd>\n<dt><strong>factors</strong><span class=\"classifier\">list of floats</span></dt><dd><p>custom scale factors to build the scale space (one factor for each\nscale).</p>\n</dd>\n<dt><strong>sigmas</strong><span class=\"classifier\">list of floats</span></dt><dd><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale).</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix.</p>\n</dd>\n<dt><strong>input_spacing</strong><span class=\"classifier\">array, shape (dim,), optional</span></dt><dd><p>the spacing (voxel size) between voxels in physical space. The\ndefault if 1.0 along all axes.</p>\n</dd>\n<dt><strong>mask0</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id38\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"dipy.align.scalespace.ScaleSpace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a><a class=\"headerlink\" href=\"#id38\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.scalespace.ScaleSpace\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.scalespace.</code><code class=\"sig-name descname\">ScaleSpace</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">num_levels</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">sigma_factor=0.2</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine\" title=\"dipy.align.scalespace.ScaleSpace.get_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code></a>(level)</p></td>\n<td><p>Voxel-to-space transformation at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine_inv\" title=\"dipy.align.scalespace.ScaleSpace.get_affine_inv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine_inv</span></code></a>(level)</p></td>\n<td><p>Space-to-voxel transformation at a given level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_domain_shape\" title=\"dipy.align.scalespace.ScaleSpace.get_domain_shape\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_domain_shape</span></code></a>(level)</p></td>\n<td><p>Shape the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_expand_factors\" title=\"dipy.align.scalespace.ScaleSpace.get_expand_factors\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_expand_factors</span></code></a>(from_level,\u00a0to_level)</p></td>\n<td><p>Ratio of voxel size from pyramid level from_level to to_level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_image\" title=\"dipy.align.scalespace.ScaleSpace.get_image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_image</span></code></a>(level)</p></td>\n<td><p>Smoothed image at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_scaling\" title=\"dipy.align.scalespace.ScaleSpace.get_scaling\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_scaling</span></code></a>(level)</p></td>\n<td><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_sigmas\" title=\"dipy.align.scalespace.ScaleSpace.get_sigmas\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sigmas</span></code></a>(level)</p></td>\n<td><p>Smoothing parameters used at a given level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.get_spacing\" title=\"dipy.align.scalespace.ScaleSpace.get_spacing\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_spacing</span></code></a>(level)</p></td>\n<td><p>Spacings the sub-sampled image must have at a particular level</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.scalespace.ScaleSpace.print_level\" title=\"dipy.align.scalespace.ScaleSpace.print_level\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_level</span></code></a>(level)</p></td>\n<td><p>Prints properties of a pyramid level</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image</em>, <em class=\"sig-param\">num_levels</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">input_spacing=None</em>, <em class=\"sig-param\">sigma_factor=0.2</em>, <em class=\"sig-param\">mask0=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>ScaleSpace</p>\n<p>Computes the Scale Space representation of an image. The scale space is\nsimply a list of images produced by smoothing the input image with a\nGaussian kernel with increasing smoothing parameter. If the image\u2019s\nvoxels are isotropic, the smoothing will be the same along all\ndirections: at level L = 0, 1, \u2026, the sigma is given by\n<span class=\"math notranslate nohighlight\">\\(s * ( 2^L - 1 )\\)</span>.\nIf the voxel dimensions are not isotropic, then the smoothing is\nweaker along low resolution directions.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (r,c) or (s, r, c) where s is the number of</span></dt><dd><p>slices, r is the number of rows and c is the number of columns of\nthe input image.</p>\n</dd>\n<dt><strong>num_levels</strong><span class=\"classifier\">int</span></dt><dd><p>the desired number of levels (resolutions) of the scale space</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-space transform of the image grid. The default is\nthe identity matrix</p>\n</dd>\n<dt><strong>input_spacing</strong><span class=\"classifier\">array, shape (dim,), optional</span></dt><dd><p>the spacing (voxel size) between voxels in physical space. The\ndefault is 1.0 along all axes</p>\n</dd>\n<dt><strong>sigma_factor</strong><span class=\"classifier\">float, optional</span></dt><dd><p>the smoothing factor to be used in the construction of the scale\nspace. The default is 0.2</p>\n</dd>\n<dt><strong>mask0</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>if True, all smoothed images will be zero at all voxels that are\nzero in the input image. The default is False.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_affine\">\n<code class=\"sig-name descname\">get_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Voxel-to-space transformation at a given level</p>\n<p>Returns the voxel-to-space transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get affine transform from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the affine (voxel-to-space) transform at the requested resolution</dt><dd><p>or None if an invalid level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_affine_inv\">\n<code class=\"sig-name descname\">get_affine_inv</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_affine_inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Space-to-voxel transformation at a given level</p>\n<p>Returns the space-to-voxel transformation associated with the\nsub-sampled image at a particular resolution of the scale space (note\nthat this object does not explicitly subsample the smoothed images, but\nonly provides the properties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the inverse transform from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the inverse (space-to-voxel) transform at the requested resolution or</dt><dd></dd>\n<dt>None if an invalid level was requested</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_domain_shape\">\n<code class=\"sig-name descname\">get_domain_shape</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_domain_shape\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shape the sub-sampled image must have at a particular level</p>\n<p>Returns the shape the sub-sampled image must have at a particular\nresolution of the scale space (note that this object does not\nexplicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the sub-sampled shape from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the sub-sampled shape at the requested resolution or None if an</dt><dd><p>invalid level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_expand_factors\">\n<code class=\"sig-name descname\">get_expand_factors</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">from_level</em>, <em class=\"sig-param\">to_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_expand_factors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Ratio of voxel size from pyramid level from_level to to_level</p>\n<p>Given two scale space resolutions a = from_level, b = to_level,\nreturns the ratio of voxels size at level b to voxel size at level a\n(the factor that must be used to multiply voxels at level a to\n\u2018expand\u2019 them to level b).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>from_level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the resolution to expand voxels from</p>\n</dd>\n<dt><strong>to_level</strong><span class=\"classifier\">int, 0 &lt;= to_level &lt; from_level</span></dt><dd><p>the resolution to expand voxels to</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>factors</strong><span class=\"classifier\">array, shape (k,), k = 2, 3</span></dt><dd><p>the expand factors (a scalar for each voxel dimension)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_image\">\n<code class=\"sig-name descname\">get_image</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothed image at a given level</p>\n<p>Returns the smoothed image at the requested level in the Scale Space.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the smooth image from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the smooth image at the requested resolution or None if an invalid</dt><dd><p>level was requested</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_scaling\">\n<code class=\"sig-name descname\">get_scaling</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_scaling\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Adjustment factor for input-spacing to reflect voxel sizes at level</p>\n<p>Returns the scaling factor that needs to be applied to the input\nspacing (the voxel sizes of the image at level 0 of the scale space) to\ntransform them to voxel sizes at the requested level.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the scalings from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the scaling factors from the original spacing to the spacings at the</dt><dd></dd>\n<dt>requested level</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_sigmas\">\n<code class=\"sig-name descname\">get_sigmas</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_sigmas\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Smoothing parameters used at a given level</p>\n<p>Returns the smoothing parameters (a scalar for each axis) used at the\nrequested level of the scale space</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the smoothing parameters from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the smoothing parameters at the requested level</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.get_spacing\">\n<code class=\"sig-name descname\">get_spacing</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.get_spacing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spacings the sub-sampled image must have at a particular level</p>\n<p>Returns the spacings (voxel sizes) the sub-sampled image must have at a\nparticular resolution of the scale space (note that this object does\nnot explicitly subsample the smoothed images, but only provides the\nproperties the sub-sampled images must have).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to get the sub-sampled shape from</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>the spacings (voxel sizes) at the requested resolution or None if an</dt><dd></dd>\n<dt>invalid level was requested</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.scalespace.ScaleSpace.print_level\">\n<code class=\"sig-name descname\">print_level</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.scalespace.ScaleSpace.print_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prints properties of a pyramid level</p>\n<p>Prints the properties of a level of this scale space to standard output</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>level</strong><span class=\"classifier\">int, 0 &lt;= from_level &lt; L, (L = number of resolutions)</span></dt><dd><p>the scale space level to be printed</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id39\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.scalespace.floating\" title=\"dipy.align.scalespace.floating\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">floating</span></code></a><a class=\"headerlink\" href=\"#id39\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.scalespace.floating\">\n<code class=\"sig-prename descclassname\">dipy.align.scalespace.</code><code class=\"sig-name descname\">floating</code><a class=\"headerlink\" href=\"#dipy.align.scalespace.floating\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">numpy.float32</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlemindistanceasymmetricmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistanceasymmetricmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">BundleMinDistanceAsymmetricMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.streamlinear.BundleMinDistanceMetric</span></code></a></p>\n<p>Asymmetric Bundle-based Minimum distance</p>\n<p>This is a cost function that can be used by the\nStreamlineLinearRegistration class.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.distance\" title=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance</span></code></a>(xopt)</p></td>\n<td><p>Distance calculated from this Metric</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup</span></code>(static,\u00a0moving)</p></td>\n<td><p>Setup static and moving sets of streamlines</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.distance\">\n<code class=\"sig-name descname\">distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceAsymmetricMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xopt</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlemindistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancematrixmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">BundleMinDistanceMatrixMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.streamlinear.StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration</p>\n<p class=\"rubric\">Notes</p>\n<p>The difference with BundleMinDistanceMetric is that this creates\nthe entire distance matrix and therefore requires more memory.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 71%\" />\n<col style=\"width: 29%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>setup(static, moving)</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>distance(xopt)</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\">\n<code class=\"sig-name descname\">distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xopt</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\">\n<code class=\"sig-name descname\">setup</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Fixed or reference set of streamlines.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Moving streamlines.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Call this after the object is initiated and before distance.</p>\n<p>Num_threads is not used in this class. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code>\nfor a faster, threaded and less memory hungry metric</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlemindistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#bundlemindistancemetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">BundleMinDistanceMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.streamlinear.StreamlineDistanceMetric</span></code></a></p>\n<p>Bundle-based Minimum Distance aka BMD</p>\n<p>This is the cost function used by the StreamlineLinearRegistration</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"ra052abf06f20-garyfallidis14\"><span class=\"brackets\">Garyfallidis14</span></dt>\n<dd><p>Garyfallidis et al., \u201cDirect native-space fiber\nbundle alignment for group comparisons\u201d, ISMRM,\n2014.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 71%\" />\n<col style=\"width: 29%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>setup(static, moving)</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>distance(xopt)</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.distance\">\n<code class=\"sig-name descname\">distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xopt</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector,</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleMinDistanceMetric.setup\">\n<code class=\"sig-name descname\">setup</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleMinDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setup static and moving sets of streamlines</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Fixed or reference set of streamlines.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Moving streamlines.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Call this after the object is initiated and before distance.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundlesumdistancematrixmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a><a class=\"headerlink\" href=\"#bundlesumdistancematrixmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">BundleSumDistanceMatrixMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.align.streamlinear.BundleMinDistanceMatrixMetric\" title=\"dipy.align.streamlinear.BundleMinDistanceMatrixMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.streamlinear.BundleMinDistanceMatrixMetric</span></code></a></p>\n<p>Bundle-based Sum Distance aka BMD</p>\n<p>This is a cost function that can be used by the\nStreamlineLinearRegistration class.</p>\n<p class=\"rubric\">Notes</p>\n<p>The difference with BundleMinDistanceMatrixMetric is that it uses\nuses the sum of the distance matrix and not the sum of mins.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 71%\" />\n<col style=\"width: 29%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>setup(static, moving)</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>distance(xopt)</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\">\n<code class=\"sig-name descname\">distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.BundleSumDistanceMatrixMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance calculated from this Metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xopt</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of affine parameters as an 1D vector</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id41\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"dipy.align.streamlinear.Optimizer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a><a class=\"headerlink\" href=\"#id41\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.Optimizer\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">Optimizer</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fun</em>, <em class=\"sig-param\">x0</em>, <em class=\"sig-param\">args=()</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">jac=None</em>, <em class=\"sig-param\">hess=None</em>, <em class=\"sig-param\">hessp=None</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">constraints=()</em>, <em class=\"sig-param\">tol=None</em>, <em class=\"sig-param\">callback=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evolution</strong></dt><dd></dd>\n<dt><strong>fopt</strong></dt><dd></dd>\n<dt><strong>message</strong></dt><dd></dd>\n<dt><strong>nfev</strong></dt><dd></dd>\n<dt><strong>nit</strong></dt><dd></dd>\n<dt><strong>xopt</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 63%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>print_summary</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fun</em>, <em class=\"sig-param\">x0</em>, <em class=\"sig-param\">args=()</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">jac=None</em>, <em class=\"sig-param\">hess=None</em>, <em class=\"sig-param\">hessp=None</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">constraints=()</em>, <em class=\"sig-param\">tol=None</em>, <em class=\"sig-param\">callback=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class for handling minimization of scalar function of one or more\nvariables.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>fun</strong><span class=\"classifier\">callable</span></dt><dd><p>Objective function.</p>\n</dd>\n<dt><strong>x0</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Initial guess.</p>\n</dd>\n<dt><strong>args</strong><span class=\"classifier\">tuple, optional</span></dt><dd><p>Extra arguments passed to the objective function and its\nderivatives (Jacobian, Hessian).</p>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">str, optional</span></dt><dd><p>Type of solver.  Should be one of</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>\u2018Nelder-Mead\u2019</p></li>\n<li><p>\u2018Powell\u2019</p></li>\n<li><p>\u2018CG\u2019</p></li>\n<li><p>\u2018BFGS\u2019</p></li>\n<li><p>\u2018Newton-CG\u2019</p></li>\n<li><p>\u2018Anneal\u2019</p></li>\n<li><p>\u2018L-BFGS-B\u2019</p></li>\n<li><p>\u2018TNC\u2019</p></li>\n<li><p>\u2018COBYLA\u2019</p></li>\n<li><p>\u2018SLSQP\u2019</p></li>\n<li><p>\u2018dogleg\u2019</p></li>\n<li><p>\u2018trust-ncg\u2019</p></li>\n</ul>\n</div></blockquote>\n</dd>\n<dt><strong>jac</strong><span class=\"classifier\">bool or callable, optional</span></dt><dd><p>Jacobian of objective function. Only for CG, BFGS, Newton-CG,\ndogleg, trust-ncg.\nIf <cite>jac</cite> is a Boolean and is True, <cite>fun</cite> is assumed to return the\nvalue of Jacobian along with the objective function. If False, the\nJacobian will be estimated numerically.\n<cite>jac</cite> can also be a callable returning the Jacobian of the\nobjective. In this case, it must accept the same arguments\nas <cite>fun</cite>.</p>\n</dd>\n<dt><strong>hess, hessp</strong><span class=\"classifier\">callable, optional</span></dt><dd><p>Hessian of objective function or Hessian of objective function\ntimes an arbitrary vector p.  Only for Newton-CG,\ndogleg, trust-ncg.\nOnly one of <cite>hessp</cite> or <cite>hess</cite> needs to be given.  If <cite>hess</cite> is\nprovided, then <cite>hessp</cite> will be ignored.  If neither <cite>hess</cite> nor\n<cite>hessp</cite> is provided, then the hessian product will be approximated\nusing finite differences on <cite>jac</cite>. <cite>hessp</cite> must compute the Hessian\ntimes an arbitrary vector.</p>\n</dd>\n<dt><strong>bounds</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>Bounds for variables (only for L-BFGS-B, TNC and SLSQP).\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(min,</span> <span class=\"pre\">max)</span></code> pairs for each element in <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code>, defining\nthe bounds on that parameter. Use None for one of <code class=\"docutils literal notranslate\"><span class=\"pre\">min</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">max</span></code> when there is no bound in that direction.</p>\n</dd>\n<dt><strong>constraints</strong><span class=\"classifier\">dict or sequence of dict, optional</span></dt><dd><p>Constraints definition (only for COBYLA and SLSQP).\nEach constraint is defined in a dictionary with fields:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>type<span class=\"classifier\">str</span></dt><dd><p>Constraint type: \u2018eq\u2019 for equality, \u2018ineq\u2019 for inequality.</p>\n</dd>\n<dt>fun<span class=\"classifier\">callable</span></dt><dd><p>The function defining the constraint.</p>\n</dd>\n<dt>jac<span class=\"classifier\">callable, optional</span></dt><dd><p>The Jacobian of <cite>fun</cite> (only for SLSQP).</p>\n</dd>\n<dt>args<span class=\"classifier\">sequence, optional</span></dt><dd><p>Extra arguments to be passed to the function and Jacobian.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Equality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.\nNote that COBYLA only supports inequality constraints.</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance for termination. For detailed control, use\nsolver-specific options.</p>\n</dd>\n<dt><strong>callback</strong><span class=\"classifier\">callable, optional</span></dt><dd><p>Called after each iteration, as <code class=\"docutils literal notranslate\"><span class=\"pre\">callback(xk)</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">xk</span></code> is\nthe current parameter vector. Only available using Scipy &gt;= 0.12.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>A dictionary of solver options. All methods accept the following\ngeneric options:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>maxiter<span class=\"classifier\">int</span></dt><dd><p>Maximum number of iterations to perform.</p>\n</dd>\n<dt>disp<span class=\"classifier\">bool</span></dt><dd><p>Set to True to print convergence messages.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For method-specific options, see\n<cite>show_options(\u2018minimize\u2019, method)</cite>.</p>\n</dd>\n<dt><strong>evolution</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>save history of x for each iteration. Only available using Scipy\n&gt;= 0.12.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">scipy.optimize.minimize</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.evolution\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">evolution</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.evolution\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.fopt\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">fopt</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.fopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.message\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">message</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.nfev\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">nfev</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.nfev\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.nit\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">nit</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.nit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.print_summary\">\n<code class=\"sig-name descname\">print_summary</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.print_summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.Optimizer.xopt\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">xopt</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Optimizer.xopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlinedistancemetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a><a class=\"headerlink\" href=\"#streamlinedistancemetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">StreamlineDistanceMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.distance\" title=\"dipy.align.streamlinear.StreamlineDistanceMetric.distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance</span></code></a>(xopt)</p></td>\n<td><p>calculate distance for current set of parameters</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 47%\" />\n<col style=\"width: 53%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>setup</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An abstract class for the metric used for streamline registration</p>\n<p>If the two sets of streamlines match exactly then method <code class=\"docutils literal notranslate\"><span class=\"pre\">distance</span></code>\nof this object should be minimum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.distance\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">xopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>calculate distance for current set of parameters</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineDistanceMetric.setup\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">setup</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineDistanceMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id42\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a><a class=\"headerlink\" href=\"#id42\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">StreamlineLinearRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">x0='rigid'</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">verbose=False</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em>, <em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.optimize\" title=\"dipy.align.streamlinear.StreamlineLinearRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(static,\u00a0moving[,\u00a0mat])</p></td>\n<td><p>Find the minimum of the provided metric.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">x0='rigid'</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">verbose=False</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em>, <em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Linear registration of 2 sets of streamlines <a class=\"reference internal\" href=\"#re074e0214f5e-garyfallidis15\" id=\"id43\">[Garyfallidis15]</a>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\">StreamlineDistanceMetric,</span></dt><dd><p>If None and fast is False then the BMD distance is used. If fast\nis True then a faster implementation of BMD is used. Otherwise,\nuse the given distance metric.</p>\n</dd>\n<dt><strong>x0</strong><span class=\"classifier\">array or int or str</span></dt><dd><p>Initial parametrization for the optimization.</p>\n<dl>\n<dt>If 1D array with:</dt><dd><p>a) 6 elements then only rigid registration is performed with\nthe 3 first elements for translation and 3 for rotation.\nb) 7 elements also isotropic scaling is performed (similarity).\nc) 12 elements then translation, rotation (in degrees),\nscaling and shearing is performed (affine).</p>\n<p>Here is an example of x0 with 12 elements:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">x0=np.array([0,</span> <span class=\"pre\">10,</span> <span class=\"pre\">0,</span> <span class=\"pre\">40,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">2.,</span> <span class=\"pre\">1.5,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0.1,</span> <span class=\"pre\">-0.5,</span> <span class=\"pre\">0])</span></code></p>\n<p>This has translation (0, 10, 0), rotation (40, 0, 0) in\ndegrees, scaling (2., 1.5, 1) and shearing (0.1, -0.5, 0).</p>\n</dd>\n<dt>If int:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>6</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>7</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>12</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n<dt>If str:</dt><dd><ol class=\"loweralpha simple\">\n<li><dl class=\"simple\">\n<dt>\u201crigid\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201csimilarity\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.])</span></code></p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>\u201caffine\u201d</dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">x0</span> <span class=\"pre\">=</span> <span class=\"pre\">np.array([0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1.,</span> <span class=\"pre\">1,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0])</span></code></p>\n</dd>\n</dl>\n</li>\n</ol>\n</dd>\n</dl>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">str,</span></dt><dd><p>\u2018L_BFGS_B\u2019 or \u2018Powell\u2019 optimizers can be used. Default is\n\u2018L_BFGS_B\u2019.</p>\n</dd>\n<dt><strong>bounds</strong><span class=\"classifier\">list of tuples or None,</span></dt><dd><p>If method == \u2018L_BFGS_B\u2019 then we can use bounded optimization.\nFor example for the six parameters of rigid rotation we can set\nthe bounds = [(-30, 30), (-30, 30), (-30, 30),</p>\n<blockquote>\n<div><p>(-45, 45), (-45, 45), (-45, 45)]</p>\n</div></blockquote>\n<p>That means that we have set the bounds for the three translations\nand three rotation axes (in degrees).</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, if True then information about the optimization is shown.\nDefault: False.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">None or dict,</span></dt><dd><p>Extra options to be used with the selected method.</p>\n</dd>\n<dt><strong>evolution</strong><span class=\"classifier\">boolean</span></dt><dd><p>If True save the transformation for each iteration of the\noptimizer. Default is False. Supported only with Scipy &gt;= 0.11.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"re074e0214f5e-garyfallidis15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id43\">Garyfallidis15</a></span></dt>\n<dd><p>Garyfallidis et al. \u201cRobust and efficient linear\nregistration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015</p>\n</dd>\n<dt class=\"label\" id=\"re074e0214f5e-garyfallidis14\"><span class=\"brackets\">Garyfallidis14</span></dt>\n<dd><p>Garyfallidis et al., \u201cDirect native-space fiber\nbundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</dd>\n<dt class=\"label\" id=\"re074e0214f5e-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based\nregistration and clustering, Neuroimage, 2017.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineLinearRegistration.optimize\">\n<code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">mat=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineLinearRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the minimum of the provided metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Reference or fixed set of streamlines.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">streamlines</span></dt><dd><p>Moving set of streamlines.</p>\n</dd>\n<dt><strong>mat</strong><span class=\"classifier\">array</span></dt><dd><p>Transformation (4, 4) matrix to start the registration. <code class=\"docutils literal notranslate\"><span class=\"pre\">mat</span></code>\nis applied to moving. Default value None which means that initial\ntransformation will be generated by shifting the centers of moving\nand static sets of streamlines to the origin.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>map</strong><span class=\"classifier\">StreamlineRegistrationMap</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlineregistrationmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a><a class=\"headerlink\" href=\"#streamlineregistrationmap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">StreamlineRegistrationMap</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">matopt</em>, <em class=\"sig-param\">xopt</em>, <em class=\"sig-param\">fopt</em>, <em class=\"sig-param\">matopt_history</em>, <em class=\"sig-param\">funcs</em>, <em class=\"sig-param\">iterations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.transform\" title=\"dipy.align.streamlinear.StreamlineRegistrationMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(moving)</p></td>\n<td><p>Transform moving streamlines to the static.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">matopt</em>, <em class=\"sig-param\">xopt</em>, <em class=\"sig-param\">fopt</em>, <em class=\"sig-param\">matopt_history</em>, <em class=\"sig-param\">funcs</em>, <em class=\"sig-param\">iterations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A map holding the optimum affine matrix and some other parameters\nof the optimization</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>matrix</strong><span class=\"classifier\">array,</span></dt><dd><p>4x4 affine matrix which transforms the moving to the static\nstreamlines</p>\n</dd>\n<dt><strong>xopt</strong><span class=\"classifier\">array,</span></dt><dd><p>1d array with the parameters of the transformation after centering</p>\n</dd>\n<dt><strong>fopt</strong><span class=\"classifier\">float,</span></dt><dd><p>final value of the metric</p>\n</dd>\n<dt><strong>matrix_history</strong><span class=\"classifier\">array</span></dt><dd><p>All transformation matrices created during the optimization</p>\n</dd>\n<dt><strong>funcs</strong><span class=\"classifier\">int,</span></dt><dd><p>Number of function evaluations of the optimizer</p>\n</dd>\n<dt><strong>iterations</strong><span class=\"classifier\">int</span></dt><dd><p>Number of iterations of the optimizer</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.align.streamlinear.StreamlineRegistrationMap.transform\">\n<code class=\"sig-name descname\">transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.StreamlineRegistrationMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform moving streamlines to the static.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>moving</strong><span class=\"classifier\">streamlines</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>moved</strong><span class=\"classifier\">streamlines</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>All this does is apply <code class=\"docutils literal notranslate\"><span class=\"pre\">self.matrix</span></code> to the input streamlines.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlines\">\n<h3><a class=\"reference internal\" href=\"#dipy.align.streamlinear.Streamlines\" title=\"dipy.align.streamlinear.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><a class=\"headerlink\" href=\"#streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.align.streamlinear.Streamlines\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">Streamlines</code><a class=\"headerlink\" href=\"#dipy.align.streamlinear.Streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-min-distance\">\n<h3>bundle_min_distance<a class=\"headerlink\" href=\"#bundle-min-distance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_min_distance\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">bundle_min_distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">t</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>t</strong><span class=\"classifier\">ndarray</span></dt><dd><p>t is a vector of affine transformation parameters with\nsize at least 6.\nIf size is 6, t is interpreted as translation + rotation.\nIf size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">list</span></dt><dd><p>Static streamlines</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">list</span></dt><dd><p>Moving streamlines.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>cost: float</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-min-distance-asymmetric-fast\">\n<h3>bundle_min_distance_asymmetric_fast<a class=\"headerlink\" href=\"#bundle-min-distance-asymmetric-fast\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">bundle_min_distance_asymmetric_fast</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">t</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">block_size</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance_asymmetric_fast\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>t</strong><span class=\"classifier\">array</span></dt><dd><p>1D array. t is a vector of affine transformation parameters with\nsize at least 6.\nIf the size is 6, t is interpreted as translation + rotation.\nIf the size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array</span></dt><dd><p>N*M x 3 array. All the points of the static streamlines. With order of\nstreamlines intact. Where N is the number of streamlines and M\nis the number of points per streamline.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array</span></dt><dd><p>K*M x 3 array. All the points of the moving streamlines. With order of\nstreamlines intact. Where K is the number of streamlines and M\nis the number of points per streamline.</p>\n</dd>\n<dt><strong>block_size</strong><span class=\"classifier\">int</span></dt><dd><p>Number of points per streamline. All streamlines in static and moving\nshould have the same number of points M.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>cost: float</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-min-distance-fast\">\n<h3>bundle_min_distance_fast<a class=\"headerlink\" href=\"#bundle-min-distance-fast\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_min_distance_fast\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">bundle_min_distance_fast</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">t</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">block_size</em>, <em class=\"sig-param\">num_threads</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_min_distance_fast\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF-based pairwise distance optimization function (MIN)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>t</strong><span class=\"classifier\">array</span></dt><dd><p>1D array. t is a vector of affine transformation parameters with\nsize at least 6.\nIf the size is 6, t is interpreted as translation + rotation.\nIf the size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array</span></dt><dd><p>N*M x 3 array. All the points of the static streamlines. With order of\nstreamlines intact. Where N is the number of streamlines and M\nis the number of points per streamline.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array</span></dt><dd><p>K*M x 3 array. All the points of the moving streamlines. With order of\nstreamlines intact. Where K is the number of streamlines and M\nis the number of points per streamline.</p>\n</dd>\n<dt><strong>block_size</strong><span class=\"classifier\">int</span></dt><dd><p>Number of points per streamline. All streamlines in static and moving\nshould have the same number of points M.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>cost: float</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This is a faster implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">bundle_min_distance</span></code>, which requires\nthat all the points of each streamline are allocated into an ndarray\n(of shape N*M by 3, with N the number of points per streamline and M the\nnumber of streamlines). This can be done by calling\n<cite>dipy.tracking.streamlines.unlist_streamlines</cite>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-sum-distance\">\n<h3>bundle_sum_distance<a class=\"headerlink\" href=\"#bundle-sum-distance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.bundle_sum_distance\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">bundle_sum_distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">t</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.bundle_sum_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>MDF distance optimization function (SUM)</p>\n<p>We minimize the distance between moving streamlines as they align\nwith the static streamlines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>t</strong><span class=\"classifier\">ndarray</span></dt><dd><p>t is a vector of affine transformation parameters with\nsize at least 6.\nIf the size is 6, t is interpreted as translation + rotation.\nIf the size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">list</span></dt><dd><p>Static streamlines</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">list</span></dt><dd><p>Moving streamlines. These will be transformed to align with\nthe static streamlines</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>cost: float</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"center-streamlines\">\n<h3>center_streamlines<a class=\"headerlink\" href=\"#center-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.center_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">center_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.center_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Move streamlines to the origin</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list</span></dt><dd><p>List of 2D ndarrays of shape[-1]==3</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_streamlines</strong><span class=\"classifier\">list</span></dt><dd><p>List of 2D ndarrays of shape[-1]==3</p>\n</dd>\n<dt><strong>inv_shift</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Translation in x,y,z to go back in the initial position</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-matrix\">\n<h3>compose_matrix<a class=\"headerlink\" href=\"#compose-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_matrix\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">compose_matrix</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">scale=None</em>, <em class=\"sig-param\">shear=None</em>, <em class=\"sig-param\">angles=None</em>, <em class=\"sig-param\">translate=None</em>, <em class=\"sig-param\">perspective=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return 4x4 transformation matrix from sequence of\ntransformations.</p>\n<p>Code modified from the work of Christoph Gohlke link provided here\n<a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<p>This is the inverse of the <code class=\"docutils literal notranslate\"><span class=\"pre\">decompose_matrix</span></code> function.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>scale</strong><span class=\"classifier\">(3,) array_like</span></dt><dd><p>Scaling factors.</p>\n</dd>\n<dt><strong>shear</strong><span class=\"classifier\">array_like</span></dt><dd><p>Shear factors for x-y, x-z, y-z axes.</p>\n</dd>\n<dt><strong>angles</strong><span class=\"classifier\">array_like</span></dt><dd><p>Euler angles about static x, y, z axes.</p>\n</dd>\n<dt><strong>translate</strong><span class=\"classifier\">array_like</span></dt><dd><p>Translation vector along x, y, z axes.</p>\n</dd>\n<dt><strong>perspective</strong><span class=\"classifier\">array_like</span></dt><dd><p>Perspective partition of matrix.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>matrix</strong><span class=\"classifier\">4x4 array</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dipy.core.geometry</span> <span class=\"k\">as</span> <span class=\"nn\">gm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">shear</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trans</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">persp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">M0</span> <span class=\"o\">=</span> <span class=\"n\">gm</span><span class=\"o\">.</span><span class=\"n\">compose_matrix</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">trans</span><span class=\"p\">,</span> <span class=\"n\">persp</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-matrix44\">\n<h3>compose_matrix44<a class=\"headerlink\" href=\"#compose-matrix44\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_matrix44\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">compose_matrix44</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">t</em>, <em class=\"sig-param\">dtype=&lt;class 'numpy.float64'&gt;</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_matrix44\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compose a 4x4 transformation matrix</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>t</strong><span class=\"classifier\">ndarray</span></dt><dd><p>This is a 1D vector of affine transformation parameters with\nsize at least 3.\nIf the size is 3, t is interpreted as translation.\nIf the size is 6, t is interpreted as translation + rotation.\nIf the size is 7, t is interpreted as translation + rotation +\nisotropic scaling.\nIf the size is 9, t is interpreted as translation + rotation +\nanisotropic scaling.\nIf size is 12, t is interpreted as translation + rotation +\nscaling + shearing.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>T</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Homogeneous transformation matrix of size 4x4.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-transformations\">\n<h3>compose_transformations<a class=\"headerlink\" href=\"#compose-transformations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.compose_transformations\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">compose_transformations</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*mats</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.compose_transformations\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compose multiple 4x4 affine transformations in one 4x4 matrix</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>mat1</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd></dd>\n<dt><strong>mat2</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd></dd>\n<dt><strong>\u2026</strong></dt><dd></dd>\n<dt><strong>matN</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>matN x \u2026 x mat2 x mat1</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decompose-matrix\">\n<h3>decompose_matrix<a class=\"headerlink\" href=\"#decompose-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.decompose_matrix\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">decompose_matrix</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">matrix</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.decompose_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return sequence of transformations from transformation matrix.</p>\n<p>Code modified from the excellent work of Christoph Gohlke link provided\nhere: <a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>matrix</strong><span class=\"classifier\">array_like</span></dt><dd><p>Non-degenerative homogeneous transformation matrix</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>scale</strong><span class=\"classifier\">(3,) ndarray</span></dt><dd><p>Three scaling factors.</p>\n</dd>\n<dt><strong>shear</strong><span class=\"classifier\">(3,) ndarray</span></dt><dd><p>Shear factors for x-y, x-z, y-z axes.</p>\n</dd>\n<dt><strong>angles</strong><span class=\"classifier\">(3,) ndarray</span></dt><dd><p>Euler angles about static x, y, z axes.</p>\n</dd>\n<dt><strong>translate</strong><span class=\"classifier\">(3,) ndarray</span></dt><dd><p>Translation vector along x, y, z axes.</p>\n</dd>\n<dt><strong>perspective</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Perspective partition of matrix.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-odd\">Raises</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt>ValueError</dt><dd><p>If matrix is of wrong type or degenerative.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T0</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">trans</span><span class=\"p\">,</span> <span class=\"n\">persp</span> <span class=\"o\">=</span> <span class=\"n\">decompose_matrix</span><span class=\"p\">(</span><span class=\"n\">T0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decompose-matrix44\">\n<h3>decompose_matrix44<a class=\"headerlink\" href=\"#decompose-matrix44\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.decompose_matrix44\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">decompose_matrix44</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">mat</em>, <em class=\"sig-param\">size=12</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.decompose_matrix44\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Given a 4x4 homogeneous matrix return the parameter vector</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>mat</strong><span class=\"classifier\">array</span></dt><dd><p>Homogeneous 4x4 transformation matrix</p>\n</dd>\n<dt><strong>size</strong><span class=\"classifier\">int</span></dt><dd><p>Size of the output vector. 3, for translation, 6 for rigid,\n7 for similarity, 9 for scaling and 12 for affine. Default is 12.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>t</strong><span class=\"classifier\">ndarray</span></dt><dd><p>One dimensional ndarray of 3, 6, 7, 9 or 12 affine parameters.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"distance-matrix-mdf\">\n<h3>distance_matrix_mdf<a class=\"headerlink\" href=\"#distance-matrix-mdf\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.distance_matrix_mdf\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">distance_matrix_mdf</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.distance_matrix_mdf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Minimum direct flipped distance matrix between two streamline sets</p>\n<p>All streamlines need to have the same number of points</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines_a</strong><span class=\"classifier\">sequence</span></dt><dd><p>of streamlines as arrays, [(N, 3) .. (N, 3)]</p>\n</dd>\n<dt><strong>streamlines_b</strong><span class=\"classifier\">sequence</span></dt><dd><p>of streamlines as arrays, [(N, 3) .. (N, 3)]</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>DM</strong><span class=\"classifier\">array, shape (len(streamlines_a), len(streamlines_b))</span></dt><dd><p>distance matrix</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"length\">\n<h3>length<a class=\"headerlink\" href=\"#length\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.length\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">length</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.length\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Euclidean length of streamlines</p>\n<p>Length is in mm only if streamlines are expressed in world coordinates.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>If ndarray, must have shape (N,3) where N is the number of points\nof the streamline.\nIf list, each item must be ndarray shape (Ni,3) where Ni is the number\nof points of streamline i.\nIf <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a>, its <cite>common_shape</cite> must be 3.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>lengths</strong><span class=\"classifier\">scalar or ndarray shape (N,)</span></dt><dd><p>If there is only one streamline, a scalar representing the length of the\nstreamline.\nIf there are several streamlines, ndarray containing the length of every\nstreamline.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"k\">import</span> <span class=\"n\">length</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expected_length</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">3</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">+</span><span class=\"mi\">4</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">streamline</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">expected_length</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">([</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">streamline</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">expected_lengths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">expected_length</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">expected_length</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lengths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">lengths</span><span class=\"p\">,</span> <span class=\"n\">expected_lengths</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">length</span><span class=\"p\">([])</span>\n<span class=\"go\">0.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]]))</span>\n<span class=\"go\">0.0</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"progressive-slr\">\n<h3>progressive_slr<a class=\"headerlink\" href=\"#progressive-slr\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.progressive_slr\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">progressive_slr</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">metric</em>, <em class=\"sig-param\">x0</em>, <em class=\"sig-param\">bounds</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">verbose=False</em>, <em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.progressive_slr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Progressive SLR</p>\n<p>This is an utility function that allows for example to do affine\nregistration using Streamline-based Linear Registration (SLR)\n<a class=\"reference internal\" href=\"#rf35afc261ac1-garyfallidis15\" id=\"id47\">[Garyfallidis15]</a> by starting with translation first, then rigid,\nthen similarity, scaling and finally affine.</p>\n<p>Similarly, if for example, you want to perform rigid then you start with\ntranslation first. This progressive strategy can helps with finding the\noptimal parameters of the final transformation.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>moving</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>metric</strong><span class=\"classifier\">StreamlineDistanceMetric</span></dt><dd></dd>\n<dt><strong>x0</strong><span class=\"classifier\">string</span></dt><dd><p>Could be any of \u2018translation\u2019, \u2018rigid\u2019, \u2018similarity\u2019, \u2018scaling\u2019,\n\u2018affine\u2019</p>\n</dd>\n<dt><strong>bounds</strong><span class=\"classifier\">array</span></dt><dd><p>Boundaries of registration parameters. See variable <cite>DEFAULT_BOUNDS</cite>\nfor example.</p>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">string</span></dt><dd><p>L_BFGS_B\u2019 or \u2018Powell\u2019 optimizers can be used. Default is \u2018L_BFGS_B\u2019.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, log messages. Default:</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rf35afc261ac1-garyfallidis15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id47\">Garyfallidis15</a></span></dt>\n<dd><p>Garyfallidis et al. \u201cRobust and efficient linear\nregistration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"qbx-and-merge\">\n<h3>qbx_and_merge<a class=\"headerlink\" href=\"#qbx-and-merge\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.qbx_and_merge\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">qbx_and_merge</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">thresholds</em>, <em class=\"sig-param\">nb_pts=20</em>, <em class=\"sig-param\">select_randomly=None</em>, <em class=\"sig-param\">rng=None</em>, <em class=\"sig-param\">verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.qbx_and_merge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run QuickBundlesX and then run again on the centroids of the last layer</p>\n<p>Running again QuickBundles at a layer has the effect of merging\nsome of the clusters that maybe originally devided because of branching.\nThis function help obtain a result at a QuickBundles quality but with\nQuickBundlesX speed. The merging phase has low cost because it is applied\nonly on the centroids rather than the entire dataset.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>thresholds</strong><span class=\"classifier\">sequence</span></dt><dd><p>List of distance thresholds for QuickBundlesX.</p>\n</dd>\n<dt><strong>nb_pts</strong><span class=\"classifier\">int</span></dt><dd><p>Number of points for discretizing each streamline</p>\n</dd>\n<dt><strong>select_randomly</strong><span class=\"classifier\">int</span></dt><dd><p>Randomly select a specific number of streamlines. If None all the\nstreamlines are used.</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>If None then RandomState is initialized internally.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional.</span></dt><dd><p>If True, log information. Default False.</p>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt><dd></dd>\n<dt><strong>clusters</strong><span class=\"classifier\">obj</span></dt><dd><p>Contains the clusters of the last layer of QuickBundlesX after merging.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r4b468f33dacd-garyfallidis12\"><span class=\"brackets\">Garyfallidis12</span></dt>\n<dd><p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience,\nvol 6, no 175, 2012.</p>\n</dd>\n<dt class=\"label\" id=\"r4b468f33dacd-garyfallidis16\"><span class=\"brackets\">Garyfallidis16</span></dt>\n<dd><p>Garyfallidis E. et al. QuickBundlesX: Sequential\nclustering of millions of streamlines in multiple\nlevels of detail at record execution time. Proceedings\nof the, International Society of Magnetic Resonance\nin Medicine (ISMRM). Singapore, 4187, 2016.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"remove-clusters-by-size\">\n<h3>remove_clusters_by_size<a class=\"headerlink\" href=\"#remove-clusters-by-size\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.remove_clusters_by_size\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">remove_clusters_by_size</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">clusters</em>, <em class=\"sig-param\">min_size=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.remove_clusters_by_size\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"select-random-set-of-streamlines\">\n<h3>select_random_set_of_streamlines<a class=\"headerlink\" href=\"#select-random-set-of-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.select_random_set_of_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">select_random_set_of_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">select</em>, <em class=\"sig-param\">rng=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.select_random_set_of_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Select a random set of streamlines</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Steamlines</span></dt><dd><p>Object of 2D ndarrays of shape[-1]==3</p>\n</dd>\n<dt><strong>select</strong><span class=\"classifier\">int</span></dt><dd><p>Number of streamlines to select. If there are less streamlines\nthan <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code> then <code class=\"docutils literal notranslate\"><span class=\"pre\">select=len(streamlines)</span></code>.</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>Default None.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>selected_streamlines</strong><span class=\"classifier\">list</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The same streamline will not be selected twice.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id51\">\n<h3>set_number_of_points<a class=\"headerlink\" href=\"#id51\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.set_number_of_points\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">set_number_of_points</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.set_number_of_points\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>Change the number of points of streamlines</dt><dd><p>(either by downsampling or upsampling)</p>\n</dd>\n</dl>\n<p>Change the number of points of streamlines in order to obtain\n<cite>nb_points</cite>-1 segments of equal length. Points of streamlines will be\nmodified along the curve.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>If ndarray, must have shape (N,3) where N is the number of points\nof the streamline.\nIf list, each item must be ndarray shape (Ni,3) where Ni is the number\nof points of streamline i.\nIf <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a>, its <cite>common_shape</cite> must be 3.</p>\n</dd>\n<dt><strong>nb_points</strong><span class=\"classifier\">int</span></dt><dd><p>integer representing number of points wanted along the curve.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>new_streamlines</strong><span class=\"classifier\">ndarray or a list or <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.Streamlines\" title=\"dipy.tracking.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.Streamlines</span></code></a></span></dt><dd><p>Results of the downsampling or upsampling process.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"k\">import</span> <span class=\"n\">set_number_of_points</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</pre></div>\n</div>\n<p>One streamline, a semi-circle:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">z</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamline</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">modified_streamline</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">modified_streamline</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</pre></div>\n</div>\n<p>Multiple streamlines:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">streamline</span><span class=\"p\">,</span> <span class=\"n\">streamline</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_streamlines</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[100, 50]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">new_streamlines</span><span class=\"p\">]</span>\n<span class=\"go\">[10, 10]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slr-with-qbx\">\n<h3>slr_with_qbx<a class=\"headerlink\" href=\"#slr-with-qbx\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.slr_with_qbx\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">slr_with_qbx</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static, moving, x0='affine', rm_small_clusters=50, maxiter=100, select_random=None, verbose=False, greater_than=50, less_than=250, qbx_thr=[40, 30, 20, 15], nb_pts=20, progressive=True, rng=None, num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.slr_with_qbx\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Utility function for registering large tractograms.</p>\n<p>For efficiency, we apply the registration on cluster centroids and remove\nsmall clusters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>moving</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>x0</strong><span class=\"classifier\">str, optional.</span></dt><dd><p>rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt><strong>rm_small_clusters</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Remove clusters that have less than <cite>rm_small_clusters</cite> (default 50)</p>\n</dd>\n<dt><strong>select_random</strong><span class=\"classifier\">int, optional.</span></dt><dd><p>If not, None selects a random number of streamlines to apply clustering\nDefault None.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, logs information about optimization. Default: False</p>\n</dd>\n<dt><strong>greater_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt><strong>qbx_thr</strong><span class=\"classifier\">variable int</span></dt><dd><p>Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt><strong>np_pts</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt><strong>progressive</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>(default True)</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>If None creates RandomState in function.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The order of operations is the following. First short or long streamlines\nare removed. Second, the tractogram or a random selection of the tractogram\nis clustered with QuickBundles. Then SLR <a class=\"reference internal\" href=\"#r778a6c20f622-garyfallidis15\" id=\"id52\">[Garyfallidis15]</a> is applied.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r778a6c20f622-garyfallidis15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id52\">Garyfallidis15</a></span></dt>\n<dd><p>Garyfallidis et al. \u201cRobust and efficient linear</p>\n</dd>\n</dl>\n<p>registration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015\n.. [R778a6c20f622-Garyfallidis14] Garyfallidis et al., \u201cDirect native-space fiber</p>\n<blockquote>\n<div><p>bundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</div></blockquote>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r778a6c20f622-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter</p>\n</dd>\n</dl>\n<p>bundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"time\">\n<h3>time<a class=\"headerlink\" href=\"#time\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.time\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">time</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span> &#x2192; floating point number<a class=\"headerlink\" href=\"#dipy.align.streamlinear.time\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-streamlines\">\n<h3>transform_streamlines<a class=\"headerlink\" href=\"#transform-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.transform_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">transform_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">mat</em>, <em class=\"sig-param\">in_place=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.transform_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine transformation to streamlines</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Streamlines object</p>\n</dd>\n<dt><strong>mat</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd><p>transformation matrix</p>\n</dd>\n<dt><strong>in_place</strong><span class=\"classifier\">bool</span></dt><dd><p>If True then change data in place.\nBe careful changes input streamlines.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Sequence transformed 2D ndarrays of shape[-1]==3</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"unlist-streamlines\">\n<h3>unlist_streamlines<a class=\"headerlink\" href=\"#unlist-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.unlist_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">unlist_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.unlist_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the streamlines not as a list but as an array and an offset</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines: sequence</strong></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>points</strong><span class=\"classifier\">array</span></dt><dd></dd>\n<dt><strong>offsets</strong><span class=\"classifier\">array</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"whole-brain-slr\">\n<h3>whole_brain_slr<a class=\"headerlink\" href=\"#whole-brain-slr\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.align.streamlinear.whole_brain_slr\">\n<code class=\"sig-prename descclassname\">dipy.align.streamlinear.</code><code class=\"sig-name descname\">whole_brain_slr</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static, moving, x0='affine', rm_small_clusters=50, maxiter=100, select_random=None, verbose=False, greater_than=50, less_than=250, qbx_thr=[40, 30, 20, 15], nb_pts=20, progressive=True, rng=None, num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.align.streamlinear.whole_brain_slr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Utility function for registering large tractograms.</p>\n<p>For efficiency, we apply the registration on cluster centroids and remove\nsmall clusters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>moving</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>x0</strong><span class=\"classifier\">str, optional.</span></dt><dd><p>rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt><strong>rm_small_clusters</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Remove clusters that have less than <cite>rm_small_clusters</cite> (default 50)</p>\n</dd>\n<dt><strong>select_random</strong><span class=\"classifier\">int, optional.</span></dt><dd><p>If not, None selects a random number of streamlines to apply clustering\nDefault None.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, logs information about optimization. Default: False</p>\n</dd>\n<dt><strong>greater_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt><strong>qbx_thr</strong><span class=\"classifier\">variable int</span></dt><dd><p>Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt><strong>np_pts</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt><strong>progressive</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>(default True)</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>If None creates RandomState in function.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The order of operations is the following. First short or long streamlines\nare removed. Second, the tractogram or a random selection of the tractogram\nis clustered with QuickBundles. Then SLR <a class=\"reference internal\" href=\"#r9eb8c2315518-garyfallidis15\" id=\"id56\">[Garyfallidis15]</a> is applied.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r9eb8c2315518-garyfallidis15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id56\">Garyfallidis15</a></span></dt>\n<dd><p>Garyfallidis et al. \u201cRobust and efficient linear</p>\n</dd>\n</dl>\n<p>registration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015\n.. [R9eb8c2315518-Garyfallidis14] Garyfallidis et al., \u201cDirect native-space fiber</p>\n<blockquote>\n<div><p>bundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</div></blockquote>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r9eb8c2315518-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter</p>\n</dd>\n</dl>\n<p>bundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.boots", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">boots</span></code>", "N", "next"], ["reference/dipy.__config__", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__config__</span></code>", "P", "previous"]], "sourcename": "reference/dipy.align.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.align._public\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align._public</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.imaffine\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.imaffine</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.imwarp\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.imwarp</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.metrics\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.metrics</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.reslice\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.reslice</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.scalespace\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.scalespace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.align.streamlinear\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">align.streamlinear</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#bunch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#floating\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affine\">affine</a></li>\n<li><a class=\"reference internal\" href=\"#affine-registration\">affine_registration</a></li>\n<li><a class=\"reference internal\" href=\"#center-of-mass\">center_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#read-mapping\">read_mapping</a></li>\n<li><a class=\"reference internal\" href=\"#register-dwi-series\">register_dwi_series</a></li>\n<li><a class=\"reference internal\" href=\"#register-dwi-to-template\">register_dwi_to_template</a></li>\n<li><a class=\"reference internal\" href=\"#register-series\">register_series</a></li>\n<li><a class=\"reference internal\" href=\"#resample\">resample</a></li>\n<li><a class=\"reference internal\" href=\"#rigid\">rigid</a></li>\n<li><a class=\"reference internal\" href=\"#streamline-registration\">streamline_registration</a></li>\n<li><a class=\"reference internal\" href=\"#syn-registration\">syn_registration</a></li>\n<li><a class=\"reference internal\" href=\"#translation\">translation</a></li>\n<li><a class=\"reference internal\" href=\"#write-mapping\">write_mapping</a></li>\n<li><a class=\"reference internal\" href=\"#affinemap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affineregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affinetransform3d\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ccmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicmap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#emmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mutualinformationmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#rigidtransform3d\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ssdmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlinelinearregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#symmetricdiffeomorphicregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#translationtransform3d\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id5\">affine</a></li>\n<li><a class=\"reference internal\" href=\"#id6\">affine_registration</a></li>\n<li><a class=\"reference internal\" href=\"#id7\">center_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-trk\">load_trk</a></li>\n<li><a class=\"reference internal\" href=\"#read-img-arr-or-path\">read_img_arr_or_path</a></li>\n<li><a class=\"reference internal\" href=\"#id8\">read_mapping</a></li>\n<li><a class=\"reference internal\" href=\"#id9\">register_dwi_series</a></li>\n<li><a class=\"reference internal\" href=\"#id10\">register_dwi_to_template</a></li>\n<li><a class=\"reference internal\" href=\"#id11\">register_series</a></li>\n<li><a class=\"reference internal\" href=\"#id12\">resample</a></li>\n<li><a class=\"reference internal\" href=\"#id13\">rigid</a></li>\n<li><a class=\"reference internal\" href=\"#save-nifti\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#set-number-of-points\">set_number_of_points</a></li>\n<li><a class=\"reference internal\" href=\"#id14\">streamline_registration</a></li>\n<li><a class=\"reference internal\" href=\"#id15\">syn_registration</a></li>\n<li><a class=\"reference internal\" href=\"#transform-centers-of-mass\">transform_centers_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#transform-tracking-output\">transform_tracking_output</a></li>\n<li><a class=\"reference internal\" href=\"#id16\">translation</a></li>\n<li><a class=\"reference internal\" href=\"#id17\">write_mapping</a></li>\n<li><a class=\"reference internal\" href=\"#affineinvalidvalueserror\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineInvalidValuesError</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affineinversionerror\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineInversionError</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id18\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id19\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#isotropicscalespace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id20\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#optimizer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#parzenjointhistogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ParzenJointHistogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#scalespace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#compute-parzen-mi\">compute_parzen_mi</a></li>\n<li><a class=\"reference internal\" href=\"#deprecated-params\">deprecated_params</a></li>\n<li><a class=\"reference internal\" href=\"#get-direction-and-spacings\">get_direction_and_spacings</a></li>\n<li><a class=\"reference internal\" href=\"#interpolate-scalar-2d\">interpolate_scalar_2d</a></li>\n<li><a class=\"reference internal\" href=\"#interpolate-scalar-3d\">interpolate_scalar_3d</a></li>\n<li><a class=\"reference internal\" href=\"#sample-domain-regular\">sample_domain_regular</a></li>\n<li><a class=\"reference internal\" href=\"#id21\">transform_centers_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#transform-geometric-centers\">transform_geometric_centers</a></li>\n<li><a class=\"reference internal\" href=\"#transform-origins\">transform_origins</a></li>\n<li><a class=\"reference internal\" href=\"#id22\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Bunch</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id23\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id24\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id25\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id26\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id27\">get_direction_and_spacings</a></li>\n<li><a class=\"reference internal\" href=\"#mult-aff\">mult_aff</a></li>\n<li><a class=\"reference internal\" href=\"#id28\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id29\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id30\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#similaritymetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimilarityMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id31\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#gradient\">gradient</a></li>\n<li><a class=\"reference internal\" href=\"#v-cycle-2d\">v_cycle_2d</a></li>\n<li><a class=\"reference internal\" href=\"#v-cycle-3d\">v_cycle_3d</a></li>\n<li><a class=\"reference internal\" href=\"#pool\">Pool</a></li>\n<li><a class=\"reference internal\" href=\"#affine-transform\">affine_transform</a></li>\n<li><a class=\"reference internal\" href=\"#cpu-count\">cpu_count</a></li>\n<li><a class=\"reference internal\" href=\"#reslice\">reslice</a></li>\n<li><a class=\"reference internal\" href=\"#id37\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IsotropicScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id38\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScaleSpace</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id39\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">floating</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlemindistanceasymmetricmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceAsymmetricMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancematrixmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMatrixMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlemindistancemetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleMinDistanceMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundlesumdistancematrixmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleSumDistanceMatrixMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id41\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlinedistancemetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineDistanceMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id42\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineLinearRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlineregistrationmap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamlineRegistrationMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance\">bundle_min_distance</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance-asymmetric-fast\">bundle_min_distance_asymmetric_fast</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-min-distance-fast\">bundle_min_distance_fast</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-sum-distance\">bundle_sum_distance</a></li>\n<li><a class=\"reference internal\" href=\"#center-streamlines\">center_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#compose-matrix\">compose_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#compose-matrix44\">compose_matrix44</a></li>\n<li><a class=\"reference internal\" href=\"#compose-transformations\">compose_transformations</a></li>\n<li><a class=\"reference internal\" href=\"#decompose-matrix\">decompose_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#decompose-matrix44\">decompose_matrix44</a></li>\n<li><a class=\"reference internal\" href=\"#distance-matrix-mdf\">distance_matrix_mdf</a></li>\n<li><a class=\"reference internal\" href=\"#length\">length</a></li>\n<li><a class=\"reference internal\" href=\"#progressive-slr\">progressive_slr</a></li>\n<li><a class=\"reference internal\" href=\"#qbx-and-merge\">qbx_and_merge</a></li>\n<li><a class=\"reference internal\" href=\"#remove-clusters-by-size\">remove_clusters_by_size</a></li>\n<li><a class=\"reference internal\" href=\"#select-random-set-of-streamlines\">select_random_set_of_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#id51\">set_number_of_points</a></li>\n<li><a class=\"reference internal\" href=\"#slr-with-qbx\">slr_with_qbx</a></li>\n<li><a class=\"reference internal\" href=\"#time\">time</a></li>\n<li><a class=\"reference internal\" href=\"#transform-streamlines\">transform_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#unlist-streamlines\">unlist_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#whole-brain-slr\">whole_brain_slr</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.align", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}