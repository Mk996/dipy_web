.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_registration_bundle_registration.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_built_registration_bundle_registration.py:


==========================
Direct Bundle Registration
==========================

This example explains how you can register two bundles from two different
subjects directly in the space of streamlines [Garyfallidis15]_,
[Garyfallidis14]_.

To show the concept we will use two pre-saved cingulum bundles. The algorithm
used here is called Streamline-based Linear Registration (SLR)
[Garyfallidis15]_.


.. code-block:: default


    from dipy.viz import window, actor
    from time import sleep
    from dipy.data import two_cingulum_bundles

    cb_subj1, cb_subj2 = two_cingulum_bundles()

    from dipy.align.streamlinear import StreamlineLinearRegistration
    from dipy.tracking.streamline import set_number_of_points








An important step before running the registration is to resample the
streamlines so that they both have the same number of points per streamline.
Here we will use 20 points. This step is not optional. Inputting streamlines
with a different number of points will break the theoretical advantages of
using the SLR as explained in [Garyfallidis15]_.


.. code-block:: default


    cb_subj1 = set_number_of_points(cb_subj1, 20)
    cb_subj2 = set_number_of_points(cb_subj2, 20)








Let's say now that we want to move the ``cb_subj2`` (moving) so that it can
be aligned with ``cb_subj1`` (static). Here is how this is done.


.. code-block:: default


    srr = StreamlineLinearRegistration()

    srm = srr.optimize(static=cb_subj1, moving=cb_subj2)








After the optimization is finished we can apply the transformation to
``cb_subj2``.


.. code-block:: default


    cb_subj2_aligned = srm.transform(cb_subj2)


    def show_both_bundles(bundles, colors=None, show=True, fname=None):

        scene = window.Scene()
        scene.SetBackground(1., 1, 1)
        for (i, bundle) in enumerate(bundles):
            color = colors[i]
            lines_actor = actor.streamtube(bundle, color, linewidth=0.3)
            lines_actor.RotateX(-90)
            lines_actor.RotateZ(90)
            scene.add(lines_actor)
        if show:
            window.show(scene)
        if fname is not None:
            sleep(1)
            window.record(scene, n_frames=1, out_path=fname, size=(900, 900))


    show_both_bundles([cb_subj1, cb_subj2],
                      colors=[window.colors.orange, window.colors.red],
                      show=False,
                      fname='before_registration.png')




.. image:: /examples_built/registration/images/sphx_glr_bundle_registration_001.png
    :alt: bundle registration
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/vtkmodules/util/numpy_support.py:66: DeprecationWarning: Converting `np.character` to a dtype is deprecated. The current result is `np.dtype(np.str_)` which is not strictly correct. Note that `np.character` is generally deprecated and 'S1' should be used.
      if numpy_array_type == key or \
    /Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/vtkmodules/util/numpy_support.py:68: DeprecationWarning: Converting `np.character` to a dtype is deprecated. The current result is `np.dtype(np.str_)` which is not strictly correct. Note that `np.character` is generally deprecated and 'S1' should be used.
      numpy_array_type == numpy.dtype(key):




.. figure:: before_registration.png
   :align: center

   Before bundle registration.


.. code-block:: default


    show_both_bundles([cb_subj1, cb_subj2_aligned],
                      colors=[window.colors.orange, window.colors.red],
                      show=False,
                      fname='after_registration.png')




.. image:: /examples_built/registration/images/sphx_glr_bundle_registration_002.png
    :alt: bundle registration
    :class: sphx-glr-single-img





.. figure:: after_registration.png
   :align: center

   After bundle registration.

As you can see the two cingulum bundles are well aligned although they
contain many streamlines of different lengths and shapes.

.. [Garyfallidis15] Garyfallidis et al., "Robust and efficient linear
                    registration of white-matter fascicles in the space
                    of streamlines", Neuroimage, 117:124-140, 2015.
.. [Garyfallidis14] Garyfallidis et al., "Direct native-space fiber bundle
                    alignment for group comparisons", ISMRM, 2014.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.560 seconds)


.. _sphx_glr_download_examples_built_registration_bundle_registration.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: bundle_registration.py <bundle_registration.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: bundle_registration.ipynb <bundle_registration.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
