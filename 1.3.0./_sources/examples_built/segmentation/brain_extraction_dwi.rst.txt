.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_segmentation_brain_extraction_dwi.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_built_segmentation_brain_extraction_dwi.py:


===================================
Brain segmentation with median_otsu
===================================

We show how to extract brain information and mask from a b0 image using DIPY_'s
:py:mod:`.segment.mask` module.

First import the necessary modules:


.. code-block:: default


    import numpy as np
    from dipy.data import get_fnames
    from dipy.io.image import load_nifti, save_nifti
    from dipy.segment.mask import median_otsu








Download and read the data for this tutorial.

The ``scil_b0`` dataset contains different data from different companies and
models. For this example, the data comes from a 1.5 Tesla Siemens MRI.


.. code-block:: default


    data_fnames = get_fnames('scil_b0')
    data, affine = load_nifti(data_fnames[1])
    data = np.squeeze(data)








Segment the brain using DIPY's :py:mod:`.segment.mask` module.

:py:func:`.segment.mask.median_otsu` returns the segmented brain data and a
binary mask of the brain. It is possible to fine tune the parameters of
:py:func:`.segment.mask.median_otsu` (``median_radius`` and ``num_pass``) if
extraction yields incorrect results but the default parameters work well on
most volumes. For this example, we used 2 as ``median_radius`` and 1 as
``num_pass``


.. code-block:: default


    b0_mask, mask = median_otsu(data, median_radius=2, numpass=1)








Saving the segmentation results is very easy. We need the ``b0_mask``, and
the binary mask volumes. The affine matrix which transform the image's
coordinates to the world coordinates is also needed. Here, we choose to save
both images in ``float32``.


.. code-block:: default


    fname = 'se_1.5t'
    save_nifti(fname + '_binary_mask.nii.gz', mask.astype(np.float32), affine)
    save_nifti(fname + '_mask.nii.gz', b0_mask.astype(np.float32), affine)








Quick view of the results middle slice using matplotlib_.


.. code-block:: default


    import matplotlib.pyplot as plt
    from dipy.core.histeq import histeq

    sli = data.shape[2] // 2
    plt.figure('Brain segmentation')
    plt.subplot(1, 2, 1).set_axis_off()
    plt.imshow(histeq(data[:, :, sli].astype('float')).T,
               cmap='gray', origin='lower')

    plt.subplot(1, 2, 2).set_axis_off()
    plt.imshow(histeq(b0_mask[:, :, sli].astype('float')).T,
               cmap='gray', origin='lower')

    plt.savefig('median_otsu.png')




.. image:: /examples_built/segmentation/images/sphx_glr_brain_extraction_dwi_001.png
    :alt: brain extraction dwi
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/koudoro/Software/dipy/doc/examples/segmentation/brain_extraction_dwi.py:57: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
      plt.subplot(1, 2, 1).set_axis_off()
    /Users/koudoro/Software/dipy/doc/examples/segmentation/brain_extraction_dwi.py:61: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.
      plt.subplot(1, 2, 2).set_axis_off()




.. figure:: median_otsu.png
   :align: center

   An application of median_otsu for brain segmentation.

:py:func:`.median_otsu` can also automatically crop the outputs to remove the
largest possible number of background voxels. This makes outputted data
significantly smaller. Auto-cropping in :py:func:`.median_otsu` is activated
by setting the ``autocrop`` parameter to ``True``.


.. code-block:: default


    b0_mask_crop, mask_crop = median_otsu(data, median_radius=4, numpass=4,
                                          autocrop=True)








Saving cropped data using nibabel as demonstrated previously.

.. include:: ../links_names.inc


.. code-block:: default


    save_nifti(fname + '_binary_mask_crop.nii.gz', mask_crop.astype(np.float32),
               affine)
    save_nifti(fname + '_mask_crop.nii.gz', b0_mask_crop.astype(np.float32),
               affine)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  23.340 seconds)


.. _sphx_glr_download_examples_built_segmentation_brain_extraction_dwi.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: brain_extraction_dwi.py <brain_extraction_dwi.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: brain_extraction_dwi.ipynb <brain_extraction_dwi.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
