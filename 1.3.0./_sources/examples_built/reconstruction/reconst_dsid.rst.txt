.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_built_reconstruction_reconst_dsid.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_built_reconstruction_reconst_dsid.py:


========================
DSI Deconvolution vs DSI
========================

An alternative method to DSI is the method proposed by [Canales10]_ which is
called DSI with Deconvolution. This algorithm is using Lucy-Richardson
deconvolution in the diffusion propagator with the goal to create sharper ODFs
with higher angular resolution.

In this example we will show with simulated data how this method's ODF performs
against standard DSI ODF and a ground truth multi tensor ODF.


.. code-block:: default


    import numpy as np
    from dipy.sims.voxel import multi_tensor, multi_tensor_odf
    from dipy.data import get_fnames, get_sphere
    from dipy.core.gradients import gradient_table
    from dipy.reconst.dsi import (DiffusionSpectrumDeconvModel,
                                  DiffusionSpectrumModel)








For the simulation we will use a standard DSI acqusition scheme with 514
gradient directions and 1 S0.


.. code-block:: default


    btable = np.loadtxt(get_fnames('dsi515btable'))

    gtab = gradient_table(btable[:, 0], btable[:, 1:])








Let's create a multi tensor with 2 fiber directions at 60 degrees.


.. code-block:: default


    evals = np.array([[0.0015, 0.0003, 0.0003],
                      [0.0015, 0.0003, 0.0003]])

    directions = [(-30, 0), (30, 0)]

    fractions = [50, 50]

    signal, _ = multi_tensor(gtab, evals, 100, angles=directions,
                             fractions=fractions, snr=None)

    sphere = get_sphere('repulsion724').subdivide(1)

    odf_gt = multi_tensor_odf(sphere.vertices, evals, angles=directions,
                              fractions=fractions)








Perform the reconstructions with standard DSI and DSI with deconvolution.


.. code-block:: default


    dsi_model = DiffusionSpectrumModel(gtab)

    dsi_odf = dsi_model.fit(signal).odf(sphere)

    dsid_model = DiffusionSpectrumDeconvModel(gtab)

    dsid_odf = dsid_model.fit(signal).odf(sphere)








Finally, we can visualize the ground truth ODF, together with the DSI and DSI
with deconvolution ODFs and observe that with the deconvolved method it is
easier to resolve the correct fiber directions because the ODF is sharper.


.. code-block:: default


    from dipy.viz import window, actor

    # Enables/disables interactive visualization
    interactive = False

    scene = window.Scene()

    # concatenate data as 4D array
    odfs = np.vstack((odf_gt, dsi_odf, dsid_odf))[:, None, None]
    odf_actor = actor.odf_slicer(odfs, sphere=sphere, scale=0.5, colormap='plasma')

    odf_actor.display(y=0)
    odf_actor.RotateX(90)
    scene.add(odf_actor)
    window.record(scene, out_path='dsid.png', size=(300, 300))
    if interactive:
        window.show(scene)




.. image:: /examples_built/reconstruction/images/sphx_glr_reconst_dsid_001.png
    :alt: reconst dsid
    :class: sphx-glr-single-img





.. figure:: dsid.png
   :align: center

   Ground truth ODF (left), DSI ODF (middle), DSI with Deconvolution ODF
   (right).

.. [Canales10] Canales-Rodriguez et al., Deconvolution in Diffusion Spectrum
   Imaging, Neuroimage, vol 50, no 1, p. 136-149, 2010.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.247 seconds)


.. _sphx_glr_download_examples_built_reconstruction_reconst_dsid.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: reconst_dsid.py <reconst_dsid.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: reconst_dsid.ipynb <reconst_dsid.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
