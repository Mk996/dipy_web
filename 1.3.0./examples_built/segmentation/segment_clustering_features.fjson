{"parents": [], "prev": null, "next": null, "title": "Tractography Clustering - Available Features", "meta": {}, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-segmentation-segment-clustering-features-py\"><span class=\"std std-ref\">here</span></a>     to download the full example code</p>\n</div>\n<div class=\"sphx-glr-example-title section\" id=\"tractography-clustering-available-features\">\n<span id=\"sphx-glr-examples-built-segmentation-segment-clustering-features-py\"></span><h1>Tractography Clustering - Available Features<a class=\"headerlink\" href=\"#tractography-clustering-available-features\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This page lists available features that can be used by the tractography\nclustering framework. For every feature a brief description is provided\nexplaining: what it does, when it\u2019s useful and how to use it. If you are not\nfamiliar with the tractography clustering framework, read the\n<a class=\"reference internal\" href=\"../segment_extending_clustering_framework/#clustering-framework\"><span class=\"std std-ref\">Clustering framework</span></a> first.</p>\n<div class=\"contents local topic\" id=\"available-features\">\n<p class=\"topic-title first\">Available Features</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"#clustering-examples-identityfeature\" id=\"id6\">Identity Feature</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#center-of-mass-feature\" id=\"id7\">Center of Mass Feature</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#midpoint-feature\" id=\"id8\">Midpoint Feature</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#arclength-feature\" id=\"id9\">ArcLength Feature</a></p></li>\n<li><p><a class=\"reference internal\" href=\"#vector-between-endpoints-feature\" id=\"id10\">Vector Between Endpoints Feature</a></p></li>\n</ul>\n</div>\n<p><strong>Note</strong>:\nAll examples assume a function <cite>get_streamlines</cite> exists. We defined here a\nsimple function to do so. It imports the necessary modules and load a small\nstreamline bundle.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_streamlines</span><span class=\"p\">():</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"k\">import</span> <span class=\"n\">load_tractogram</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"k\">import</span> <span class=\"n\">Streamlines</span>\n\n    <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;fornix&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">fornix</span> <span class=\"o\">=</span> <span class=\"n\">load_tractogram</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;same&#39;</span><span class=\"p\">,</span>\n                             <span class=\"n\">bbox_valid_check</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">streamlines</span>\n\n    <span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">fornix</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">streamlines</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"clustering-examples-identityfeature\">\n<span id=\"identity-feature\"></span><h2><a class=\"toc-backref\" href=\"#id6\">Identity Feature</a><a class=\"headerlink\" href=\"#clustering-examples-identityfeature\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><strong>What:</strong> Instances of <cite>IdentityFeature</cite> simply return the streamlines\nunaltered.  In other words the features are the original data.</p>\n<p><strong>When:</strong> The QuickBundles algorithm requires streamlines to have the same\nnumber of points. If this is the case for your streamlines, you can tell\nQuickBundles to not perform resampling (see following example). The\nclustering should be faster than using the default behaviour of QuickBundles\nsince it will require less computation (i.e. no resampling). However, it\nhighly depends on the number of points streamlines have. By default,\nQuickBundles resamples streamlines so that they have 12 points each\n<a class=\"reference internal\" href=\"../../../interfaces/basic_flow/#garyfallidis12\" id=\"id1\"><span>[Garyfallidis12]</span></a>.</p>\n<p><em>Unless stated otherwise, it is the default feature used by `Metric` objects\nin the clustering framework.</em></p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.clustering</span> <span class=\"k\">import</span> <span class=\"n\">QuickBundles</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">IdentityFeature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">AveragePointwiseEuclideanMetric</span>\n\n<span class=\"c1\"># Get some streamlines.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">get_streamlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Previously defined.</span>\n\n<span class=\"c1\"># Make sure our streamlines have the same number of points.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"k\">import</span> <span class=\"n\">set_number_of_points</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">nb_points</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create an instance of `IdentityFeature` and tell metric to use it.</span>\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">IdentityFeature</span><span class=\"p\">()</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">AveragePointwiseEuclideanMetric</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"o\">=</span><span class=\"n\">feature</span><span class=\"p\">)</span>\n<span class=\"n\">qb</span> <span class=\"o\">=</span> <span class=\"n\">QuickBundles</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">qb</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Nb. clusters:&quot;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cluster sizes:&quot;</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">clusters</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Nb. clusters: 4\nCluster sizes: [61, 191, 47, 1]\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\" id=\"clustering-examples-resamplefeature\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Resample Feature</span>\n<span class=\"c1\"># ================</span>\n<span class=\"c1\"># **What:** Instances of `ResampleFeature` resample streamlines to a</span>\n<span class=\"c1\"># predetermined number of points. The resampling is done on the fly such that</span>\n<span class=\"c1\"># there are no permanent modifications made to your streamlines.</span>\n\n<span class=\"c1\"># **When:** The QuickBundles algorithm requires streamlines to have the same</span>\n<span class=\"c1\"># number of points. By default, QuickBundles uses `ResampleFeature` to resample</span>\n<span class=\"c1\"># streamlines so that they have 12 points each [Garyfallidis12]_. If you want</span>\n<span class=\"c1\"># to use a different number of points for the resampling, you should provide</span>\n<span class=\"c1\"># your own instance of `ResampleFeature` (see following example).</span>\n\n<span class=\"c1\"># **Note:** Resampling streamlines has an impact on clustering results both in</span>\n<span class=\"c1\"># term of speed and quality. Setting the number of points too low will result</span>\n<span class=\"c1\"># in a loss of information about the shape of the streamlines. On the contrary,</span>\n<span class=\"c1\"># setting the number of points too high will slow down the clustering process.</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.clustering</span> <span class=\"k\">import</span> <span class=\"n\">QuickBundles</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">ResampleFeature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">AveragePointwiseEuclideanMetric</span>\n\n<span class=\"c1\"># Get some streamlines.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">get_streamlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Previously defined.</span>\n\n<span class=\"c1\"># Streamlines will be resampled to 24 points on the fly.</span>\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">ResampleFeature</span><span class=\"p\">(</span><span class=\"n\">nb_points</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">AveragePointwiseEuclideanMetric</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"o\">=</span><span class=\"n\">feature</span><span class=\"p\">)</span>  <span class=\"c1\"># a.k.a. MDF</span>\n<span class=\"n\">qb</span> <span class=\"o\">=</span> <span class=\"n\">QuickBundles</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">10.</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">qb</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Nb. clusters:&quot;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cluster sizes:&quot;</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">,</span> <span class=\"n\">clusters</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Nb. clusters: 4\nCluster sizes: [64, 191, 44, 1]\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"center-of-mass-feature\">\n<span id=\"clustering-examples-centerofmassfeature\"></span><h2><a class=\"toc-backref\" href=\"#id7\">Center of Mass Feature</a><a class=\"headerlink\" href=\"#center-of-mass-feature\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><strong>What:</strong> Instances of <cite>CenterOfMassFeature</cite> compute the center of mass (also\nknown as center of gravity) of a set of points. This is achieved by taking\nthe mean of every coordinate independently (for more information see the\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Center_of_mass\">wiki page</a>).</p>\n<p><strong>When:</strong> This feature can be useful when you <em>only</em> need information about\nthe spatial position of a streamline.</p>\n<p><strong>Note:</strong> The computed center is not guaranteed to be an existing point in\nthe streamline.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.clustering</span> <span class=\"k\">import</span> <span class=\"n\">QuickBundles</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">CenterOfMassFeature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">EuclideanMetric</span>\n\n<span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># Get some streamlines.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">get_streamlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Previously defined.</span>\n\n\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">CenterOfMassFeature</span><span class=\"p\">()</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">EuclideanMetric</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"p\">)</span>\n\n<span class=\"n\">qb</span> <span class=\"o\">=</span> <span class=\"n\">QuickBundles</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">5.</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">qb</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Extract feature of every streamline.</span>\n<span class=\"n\">centers</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Color each center of mass according to the cluster they belong to.</span>\n<span class=\"n\">colormap</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">create_colormap</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">)))</span>\n<span class=\"n\">colormap_full</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"p\">):</span>\n    <span class=\"n\">colormap_full</span><span class=\"p\">[</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">indices</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n\n<span class=\"c1\"># Visualization</span>\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">SetBackground</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">))</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">point</span><span class=\"p\">(</span><span class=\"n\">centers</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">colormap_full</span><span class=\"p\">,</span> <span class=\"n\">point_radius</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">))</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;center_of_mass_feature.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"segment clustering features\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_segment_clustering_features_001.png\" />\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>/Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/vtkmodules/util/numpy_support.py:66: DeprecationWarning: Converting `np.character` to a dtype is deprecated. The current result is `np.dtype(np.str_)` which is not strictly correct. Note that `np.character` is generally deprecated and &#39;S1&#39; should be used.\n  if numpy_array_type == key or \\\n/Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/vtkmodules/util/numpy_support.py:68: DeprecationWarning: Converting `np.character` to a dtype is deprecated. The current result is `np.dtype(np.str_)` which is not strictly correct. Note that `np.character` is generally deprecated and &#39;S1&#39; should be used.\n  numpy_array_type == numpy.dtype(key):\n/Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/fury/utils.py:97: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify &#39;dtype=object&#39; when creating the ndarray\n  data = np.array(data)\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id2\">\n<img alt=\"examples_built/segmentation/center_of_mass_feature.png\" src=\"examples_built/segmentation/center_of_mass_feature.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Showing the center of mass of each streamline and colored according to\nthe QuickBundles results.</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"midpoint-feature\">\n<span id=\"clustering-examples-midpointfeature\"></span><h2><a class=\"toc-backref\" href=\"#id8\">Midpoint Feature</a><a class=\"headerlink\" href=\"#midpoint-feature\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><strong>What:</strong> Instances of <cite>MidpointFeature</cite> extract the middle point of a\nstreamline. If there is an even number of points, the feature will then\ncorrespond to the point halfway between the two middle points.</p>\n<p><strong>When:</strong> This feature can be useful when you <em>only</em> need information about\nthe spatial position of a streamline. This can also be an alternative to the\n<cite>CenterOfMassFeature</cite> if the point extracted must be on the streamline.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.clustering</span> <span class=\"k\">import</span> <span class=\"n\">QuickBundles</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">MidpointFeature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">EuclideanMetric</span>\n\n<span class=\"c1\"># Get some streamlines.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">get_streamlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Previously defined.</span>\n\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">MidpointFeature</span><span class=\"p\">()</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">EuclideanMetric</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"p\">)</span>\n\n<span class=\"n\">qb</span> <span class=\"o\">=</span> <span class=\"n\">QuickBundles</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">5.</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">qb</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Extract feature of every streamline.</span>\n<span class=\"n\">midpoints</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"o\">.</span><span class=\"n\">extract</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># Color each midpoint according to the cluster they belong to.</span>\n<span class=\"n\">colormap</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">create_colormap</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">)))</span>\n<span class=\"n\">colormap_full</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"p\">):</span>\n    <span class=\"n\">colormap_full</span><span class=\"p\">[</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">indices</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n\n<span class=\"c1\"># Visualization</span>\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">SetBackground</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">point</span><span class=\"p\">(</span><span class=\"n\">midpoints</span><span class=\"p\">[:,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">colormap_full</span><span class=\"p\">,</span> <span class=\"n\">point_radius</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">))</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">,</span> <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">))</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;midpoint_feature.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"segment clustering features\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_segment_clustering_features_002.png\" />\n<div class=\"figure align-center\" id=\"id3\">\n<img alt=\"examples_built/segmentation/midpoint_feature.png\" src=\"examples_built/segmentation/midpoint_feature.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Showing the middle point of each streamline and colored according to the\nQuickBundles results.</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"arclength-feature\">\n<span id=\"clustering-examples-arclengthfeature\"></span><h2><a class=\"toc-backref\" href=\"#id9\">ArcLength Feature</a><a class=\"headerlink\" href=\"#arclength-feature\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><strong>What:</strong> Instances of <cite>ArcLengthFeature</cite> compute the length of a streamline.\nMore specifically, this feature corresponds to the sum of the lengths of\nevery streamline segments.</p>\n<p><strong>When:</strong> This feature can be useful when you <em>only</em> need information about\nthe length of a streamline.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.clustering</span> <span class=\"k\">import</span> <span class=\"n\">QuickBundles</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">ArcLengthFeature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">EuclideanMetric</span>\n\n<span class=\"c1\"># Get some streamlines.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">get_streamlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Previously defined.</span>\n\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">ArcLengthFeature</span><span class=\"p\">()</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">EuclideanMetric</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"p\">)</span>\n<span class=\"n\">qb</span> <span class=\"o\">=</span> <span class=\"n\">QuickBundles</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">2.</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">qb</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Color each streamline according to the cluster they belong to.</span>\n<span class=\"n\">colormap</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">create_colormap</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ravel</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"o\">.</span><span class=\"n\">centroids</span><span class=\"p\">))</span>\n<span class=\"n\">colormap_full</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"p\">):</span>\n    <span class=\"n\">colormap_full</span><span class=\"p\">[</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">indices</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n\n<span class=\"c1\"># Visualization</span>\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">SetBackground</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">colormap_full</span><span class=\"p\">))</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;arclength_feature.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"segment clustering features\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_segment_clustering_features_003.png\" />\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"examples_built/segmentation/arclength_feature.png\" src=\"examples_built/segmentation/arclength_feature.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Showing the streamlines colored according to their length.</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"vector-between-endpoints-feature\">\n<span id=\"clustering-examples-vectorofendpointsfeature\"></span><h2><a class=\"toc-backref\" href=\"#id10\">Vector Between Endpoints Feature</a><a class=\"headerlink\" href=\"#vector-between-endpoints-feature\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><strong>What:</strong> Instances of <cite>VectorOfEndpointsFeature</cite> extract the vector going\nfrom one extremity of the streamline to the other. In other words, this\nfeature represents the vector beginning at the first point and ending at the\nlast point of the streamlines.</p>\n<p><strong>When:</strong> This feature can be useful when you <em>only</em> need information about\nthe orientation of a streamline.</p>\n<p><strong>Note:</strong> Since streamlines endpoints are ambiguous (e.g. the first point\ncould be either the beginning or the end of the streamline), one must be\ncareful when using this feature.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.clustering</span> <span class=\"k\">import</span> <span class=\"n\">QuickBundles</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">VectorOfEndpointsFeature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.metric</span> <span class=\"k\">import</span> <span class=\"n\">CosineMetric</span>\n\n<span class=\"c1\"># Get some streamlines.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">get_streamlines</span><span class=\"p\">()</span>  <span class=\"c1\"># Previously defined.</span>\n\n<span class=\"n\">feature</span> <span class=\"o\">=</span> <span class=\"n\">VectorOfEndpointsFeature</span><span class=\"p\">()</span>\n<span class=\"n\">metric</span> <span class=\"o\">=</span> <span class=\"n\">CosineMetric</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"p\">)</span>\n<span class=\"n\">qb</span> <span class=\"o\">=</span> <span class=\"n\">QuickBundles</span><span class=\"p\">(</span><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"n\">metric</span><span class=\"p\">)</span>\n<span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">qb</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Color each streamline according to the cluster they belong to.</span>\n<span class=\"n\">colormap</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">create_colormap</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">)))</span>\n<span class=\"n\">colormap_full</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">),</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">cluster</span><span class=\"p\">,</span> <span class=\"n\">color</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">,</span> <span class=\"n\">colormap</span><span class=\"p\">):</span>\n    <span class=\"n\">colormap_full</span><span class=\"p\">[</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">indices</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">color</span>\n\n<span class=\"c1\"># Visualization</span>\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">SetBackground</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">colormap_full</span><span class=\"p\">))</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;vector_of_endpoints_feature.png&#39;</span><span class=\"p\">,</span>\n              <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"segment clustering features\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_segment_clustering_features_004.png\" />\n<div class=\"figure align-center\" id=\"id5\">\n<img alt=\"examples_built/segmentation/vector_of_endpoints_feature.png\" src=\"examples_built/segmentation/vector_of_endpoints_feature.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Showing the streamlines colored according to their orientation.</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"garyfallidis12\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id1\">Garyfallidis12</a></span></dt>\n<dd><p>Garyfallidis E. et al., QuickBundles a method for\ntractography simplification, Frontiers in Neuroscience, vol 6, no 175,\n2012.</p>\n</dd>\n</dl>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  0.701 seconds)</p>\n<div class=\"sphx-glr-footer class sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-segmentation-segment-clustering-features-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/07300e5d2491a7a7db4a956df8c1df90/segment_clustering_features.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">segment_clustering_features.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/8c0a30721f63f2e1a05304886d5fee7c/segment_clustering_features.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">segment_clustering_features.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/segmentation/segment_clustering_features.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Tractography Clustering - Available Features</a><ul>\n<li><a class=\"reference internal\" href=\"#clustering-examples-identityfeature\">Identity Feature</a></li>\n<li><a class=\"reference internal\" href=\"#center-of-mass-feature\">Center of Mass Feature</a></li>\n<li><a class=\"reference internal\" href=\"#midpoint-feature\">Midpoint Feature</a></li>\n<li><a class=\"reference internal\" href=\"#arclength-feature\">ArcLength Feature</a></li>\n<li><a class=\"reference internal\" href=\"#vector-between-endpoints-feature\">Vector Between Endpoints Feature</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/segmentation/segment_clustering_features", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}