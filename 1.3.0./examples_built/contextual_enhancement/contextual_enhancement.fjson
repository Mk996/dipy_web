{"parents": [], "prev": null, "next": null, "title": "Crossing-preserving contextual enhancement", "meta": {}, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-contextual-enhancement-contextual-enhancement-py\"><span class=\"std std-ref\">here</span></a>     to download the full example code</p>\n</div>\n<div class=\"sphx-glr-example-title section\" id=\"crossing-preserving-contextual-enhancement\">\n<span id=\"sphx-glr-examples-built-contextual-enhancement-contextual-enhancement-py\"></span><h1>Crossing-preserving contextual enhancement<a class=\"headerlink\" href=\"#crossing-preserving-contextual-enhancement\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This demo presents an example of crossing-preserving contextual enhancement of\nFOD/ODF fields <a href=\"#id1\"><span class=\"problematic\" id=\"id2\">:footcite:`meesters2016`</span></a>, implementing the contextual PDE\nframework of <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">:footcite:`portegies2015a`</span></a> for processing HARDI data. The aim is\nto enhance the alignment of elongated structures in the data such that\ncrossing/junctions are maintained while reducing noise and small incoherent\nstructures. This is achieved via a hypo-elliptic 2nd order PDE in the domain\nof coupled positions and orientations <span class=\"math notranslate nohighlight\">\\(\\mathbb{R}^3 \\rtimes S^2\\)</span>. This\ndomain carries a non-flat geometrical differential structure that allows\nincluding a notion of alignment between neighboring points.</p>\n<p>Let <span class=\"math notranslate nohighlight\">\\(({\\bf y},{\\bf n}) \\in \\mathbb{R}^3\\rtimes S^2\\)</span> where\n<span class=\"math notranslate nohighlight\">\\({\\bf y} \\in \\mathbb{R}^{3}\\)</span> denotes the spatial part, and\n<span class=\"math notranslate nohighlight\">\\({\\bf n} \\in S^2\\)</span> the angular part.\nLet <span class=\"math notranslate nohighlight\">\\(W:\\mathbb{R}^3\\rtimes S^2\\times \\mathbb{R}^{+} \\to \\mathbb{R}\\)</span> be\nthe function representing the evolution of FOD/ODF field. Then, the contextual\nPDE with evolution time <span class=\"math notranslate nohighlight\">\\(t\\geq 0\\)</span> is given by:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\begin{split}\\begin{cases}\n\\frac{\\partial}{\\partial t} W({\\bf y},{\\bf n},t) &amp;= ((D^{33}({\\bf n} \\cdot\n        \\nabla)^2 + D^{44} \\Delta_{S^2})W)({\\bf y},{\\bf n},t)\n\\\\ W({\\bf y},{\\bf n},0) &amp;= U({\\bf y},{\\bf n})\n\\end{cases},\\end{split}\\]</div>\n<p>where:</p>\n<ul class=\"simple\">\n<li><p><span class=\"math notranslate nohighlight\">\\(D^{33}&gt;0\\)</span> is  the coefficient for the spatial smoothing (which goes only in the direction of <span class=\"math notranslate nohighlight\">\\(n\\)</span>);</p></li>\n<li><p><span class=\"math notranslate nohighlight\">\\(D^{44}&gt;0\\)</span> is the coefficient for the angular smoothing (here <span class=\"math notranslate nohighlight\">\\(\\Delta_{S^2}\\)</span> denotes the Laplace-Beltrami operator on the sphere <span class=\"math notranslate nohighlight\">\\(S^2\\)</span>);</p></li>\n<li><p><span class=\"math notranslate nohighlight\">\\(U:\\mathbb{R}^3\\rtimes S^2 \\to \\mathbb{R}\\)</span> is the initial condition given by the noisy FOD/ODF\u2019s field.</p></li>\n</ul>\n<p>This equation is solved via a shift-twist convolution (denoted by <span class=\"math notranslate nohighlight\">\\(\\ast_{\\mathbb{R}^3\\rtimes S^2}\\)</span>) with its corresponding kernel <span class=\"math notranslate nohighlight\">\\(P_t:\\mathbb{R}^3\\rtimes S^2 \\to \\mathbb{R}^+\\)</span>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[W({\\bf y},{\\bf n},t) = (P_t \\ast_{\\mathbb{R}^3 \\rtimes S^2} U)({\\bf y},{\\bf n})\n= \\int_{\\mathbb{R}^3} \\int_{S^2} P_t (R^T_{{\\bf n}^\\prime}({\\bf y}-{\\bf y}^\\prime),\n R^T_{{\\bf n}^\\prime} {\\bf n} ) U({\\bf y}^\\prime, {\\bf n}^\\prime)\\]</div>\n<p>Here, <span class=\"math notranslate nohighlight\">\\(R_{\\bf n}\\)</span> is any 3D rotation that maps the vector <span class=\"math notranslate nohighlight\">\\((0,0,1)\\)</span>\nonto <span class=\"math notranslate nohighlight\">\\({\\bf n}\\)</span>.</p>\n<p>Note that the shift-twist convolution differs from a Euclidean convolution and\ntakes into account the non-flat structure of the space <span class=\"math notranslate nohighlight\">\\(\\mathbb{R}^3\\rtimes S^2\\)</span>.</p>\n<p>The kernel <span class=\"math notranslate nohighlight\">\\(P_t\\)</span> has a stochastic interpretation <a href=\"#id5\"><span class=\"problematic\" id=\"id6\">:footcite:`duitsandfranken2011`</span></a>.\nIt can be seen as the limiting distribution obtained by accumulating random\nwalks of particles in the position/orientation domain, where in each step the\nparticles can (randomly) move forward/backward along their current orientation,\nand (randomly) change their orientation. This is an extension to the 3D case of\nthe process for contour enhancement of 2D images.</p>\n<div class=\"figure align-center\" id=\"id13\">\n<a class=\"reference internal image-reference\" href=\"../../../_images/stochastic_process1.jpg\"><img alt=\"../../../_images/stochastic_process1.jpg\" src=\"../../../_images/stochastic_process1.jpg\" style=\"width: 384.0px; height: 322.8px;\" /></a>\n<p class=\"caption\"><span class=\"caption-text\">The random motion of particles (a) and its corresponding probability map\n(b) in 2D. The 3D kernel is shown on the right. Adapted from\n<a href=\"#id7\"><span class=\"problematic\" id=\"id8\">:footcite:`portegies2015a`</span></a>.</span><a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this image\">\u00b6</a></p>\n<div class=\"legend\">\n</div>\n</div>\n<p>In practice, as the exact analytical formulas for the kernel <span class=\"math notranslate nohighlight\">\\(P_t\\)</span>\nare unknown, we use the approximation given in <a href=\"#id9\"><span class=\"problematic\" id=\"id10\">:footcite:`portegies2015b`</span></a>.</p>\n<p>The enhancement is evaluated on the Stanford HARDI dataset\n(150 orientations, b=2000 <span class=\"math notranslate nohighlight\">\\(s/mm^2\\)</span>) where Rician noise is added. Constrained\nspherical deconvolution is used to model the fiber orientations.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"k\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.sims.voxel</span> <span class=\"k\">import</span> <span class=\"n\">add_noise</span>\n\n<span class=\"c1\"># Read data</span>\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add Rician noise</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n<span class=\"n\">b0_slice</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"p\">:,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">b0_mask</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">b0_slice</span><span class=\"p\">)</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">data_noisy</span> <span class=\"o\">=</span> <span class=\"n\">add_noise</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">b0_slice</span><span class=\"p\">[</span><span class=\"n\">mask</span><span class=\"p\">]),</span>\n                       <span class=\"n\">noise_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;rician&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Select a small part of it.</span>\n<span class=\"n\">padding</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>  <span class=\"c1\"># Include a larger region to avoid boundary effects</span>\n<span class=\"n\">data_small</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"o\">+</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"mi\">80</span><span class=\"o\">+</span><span class=\"n\">padding</span><span class=\"p\">,</span> <span class=\"mi\">35</span><span class=\"p\">:</span><span class=\"mi\">42</span><span class=\"p\">]</span>\n<span class=\"n\">data_noisy_small</span> <span class=\"o\">=</span> <span class=\"n\">data_noisy</span><span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"mi\">40</span><span class=\"o\">+</span><span class=\"n\">padding</span><span class=\"p\">,</span>\n                              <span class=\"mi\">65</span><span class=\"o\">-</span><span class=\"n\">padding</span><span class=\"p\">:</span><span class=\"mi\">80</span><span class=\"o\">+</span><span class=\"n\">padding</span><span class=\"p\">,</span>\n                              <span class=\"mi\">35</span><span class=\"p\">:</span><span class=\"mi\">42</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Enables/disables interactive visualization</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<p>Fit an initial model to the data, in this case Constrained Spherical\nDeconvolution is used.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Perform CSD on the original data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response_ssst</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response_ssst</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radii</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n<span class=\"n\">csd_model_orig</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"n\">csd_fit_orig</span> <span class=\"o\">=</span> <span class=\"n\">csd_model_orig</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_small</span><span class=\"p\">)</span>\n<span class=\"n\">csd_shm_orig</span> <span class=\"o\">=</span> <span class=\"n\">csd_fit_orig</span><span class=\"o\">.</span><span class=\"n\">shm_coeff</span>\n\n<span class=\"c1\"># Perform CSD on the original data + noise</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response_ssst</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data_noisy</span><span class=\"p\">,</span> <span class=\"n\">roi_radii</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                                     <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n<span class=\"n\">csd_model_noisy</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"n\">csd_fit_noisy</span> <span class=\"o\">=</span> <span class=\"n\">csd_model_noisy</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_noisy_small</span><span class=\"p\">)</span>\n<span class=\"n\">csd_shm_noisy</span> <span class=\"o\">=</span> <span class=\"n\">csd_fit_noisy</span><span class=\"o\">.</span><span class=\"n\">shm_coeff</span>\n</pre></div>\n</div>\n<p>Inspired by <a href=\"#id11\"><span class=\"problematic\" id=\"id12\">:footcite:`rodrigues2010`</span></a>, a lookup-table is created, containing\nrotated versions of the kernel <span class=\"math notranslate nohighlight\">\\(P_t\\)</span> sampled over a discrete set of\norientations. In order to ensure rotationally invariant processing, the\ndiscrete orientations are required to be equally distributed over a sphere.\nBy default, a sphere with 100 directions is used.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.enhancement_kernel</span> <span class=\"k\">import</span> <span class=\"n\">EnhancementKernel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.denoise.shift_twist_convolution</span> <span class=\"k\">import</span> <span class=\"n\">convolve</span>\n\n<span class=\"c1\"># Create lookup table</span>\n<span class=\"n\">D33</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n<span class=\"n\">D44</span> <span class=\"o\">=</span> <span class=\"mf\">0.02</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">EnhancementKernel</span><span class=\"p\">(</span><span class=\"n\">D33</span><span class=\"p\">,</span> <span class=\"n\">D44</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Visualize the kernel</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">sf_to_sh</span><span class=\"p\">,</span> <span class=\"n\">sh_to_sf</span>\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># convolve kernel with delta spike</span>\n<span class=\"n\">spike</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_orientations</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">)</span>\n<span class=\"n\">spike</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"n\">spike_shm_conv</span> <span class=\"o\">=</span> <span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">sf_to_sh</span><span class=\"p\">(</span><span class=\"n\">spike</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">get_sphere</span><span class=\"p\">(),</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">k</span><span class=\"p\">,</span>\n                          <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">test_mode</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">spike_sf_conv</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">spike_shm_conv</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">model_kernel</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">spike_sf_conv</span> <span class=\"o\">*</span> <span class=\"mi\">6</span><span class=\"p\">,</span>\n                                <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">)</span>\n<span class=\"n\">model_kernel</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">model_kernel</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">set_camera</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">focal_point</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">view_up</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;kernel.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"contextual enhancement\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_contextual_enhancement_001.png\" />\n<p class=\"centered\">\n<strong><strong>Visualization of the contour enhancement kernel.</strong></strong></p><p>Shift-twist convolution is applied on the noisy data</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Perform convolution</span>\n<span class=\"n\">csd_shm_enh</span> <span class=\"o\">=</span> <span class=\"n\">convolve</span><span class=\"p\">(</span><span class=\"n\">csd_shm_noisy</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The Sharpening Deconvolution Transform is applied to sharpen the ODF field.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Sharpen via the Sharpening Deconvolution Transform</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">odf_sh_to_sharp</span>\n<span class=\"n\">csd_shm_enh_sharp</span> <span class=\"o\">=</span> <span class=\"n\">odf_sh_to_sharp</span><span class=\"p\">(</span><span class=\"n\">csd_shm_enh</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                                    <span class=\"n\">lambda_</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Convert raw and enhanced data to discrete form</span>\n<span class=\"n\">csd_sf_orig</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">csd_shm_orig</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">csd_sf_noisy</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">csd_shm_noisy</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">csd_sf_enh</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">csd_shm_enh</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"n\">csd_sf_enh_sharp</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">csd_shm_enh_sharp</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Normalize the sharpened ODFs</span>\n<span class=\"n\">csd_sf_enh_sharp</span> <span class=\"o\">=</span> <span class=\"n\">csd_sf_enh_sharp</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">amax</span><span class=\"p\">(</span><span class=\"n\">csd_sf_orig</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">amax</span><span class=\"p\">(</span><span class=\"n\">csd_sf_enh_sharp</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mf\">1.25</span>\n</pre></div>\n</div>\n<p>The end results are visualized. It can be observed that the end result after\ndiffusion and sharpening is closer to the original noiseless dataset.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># original ODF field</span>\n<span class=\"n\">fodf_spheres_org</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">csd_sf_orig</span><span class=\"p\">,</span>\n                                    <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                    <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span>\n                                    <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres_org</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres_org</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fodf_spheres_org</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ODF field with added noise</span>\n<span class=\"n\">fodf_spheres</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">csd_sf_noisy</span><span class=\"p\">,</span>\n                                <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span>\n                                <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,)</span>\n<span class=\"n\">fodf_spheres</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fodf_spheres</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Enhancement of noisy ODF field</span>\n<span class=\"n\">fodf_spheres_enh</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">csd_sf_enh</span><span class=\"p\">,</span>\n                                    <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                    <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span>\n                                    <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres_enh</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fodf_spheres_enh</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Additional sharpening</span>\n<span class=\"n\">fodf_spheres_enh_sharp</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">csd_sf_enh_sharp</span><span class=\"p\">,</span>\n                                          <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                          <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span>\n                                          <span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">fodf_spheres_enh_sharp</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fodf_spheres_enh_sharp</span><span class=\"p\">)</span>\n\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;enhancements.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"contextual enhancement\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_contextual_enhancement_002.png\" />\n<div class=\"figure align-center\" id=\"id14\">\n<img alt=\"examples_built/contextual_enhancement/enhancements.png\" src=\"examples_built/contextual_enhancement/enhancements.png\" />\n<p class=\"caption\"><span class=\"caption-text\">The results after enhancements. Top-left: original noiseless data.\nBottom-left: original data with added Rician noise (SNR=10). Bottom-right:\nAfter enhancement of noisy data. Top-right: After enhancement and\nsharpening of noisy data.</span><a class=\"headerlink\" href=\"#id14\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  50.247 seconds)</p>\n<div class=\"sphx-glr-footer class sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-contextual-enhancement-contextual-enhancement-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/46feb91a4a44ff99da511fd7e5d0a0b1/contextual_enhancement.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">contextual_enhancement.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/c9368d31ed3eea9271ffb9bb5cf12dae/contextual_enhancement.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">contextual_enhancement.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/contextual_enhancement/contextual_enhancement.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Crossing-preserving contextual enhancement</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/contextual_enhancement/contextual_enhancement", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}