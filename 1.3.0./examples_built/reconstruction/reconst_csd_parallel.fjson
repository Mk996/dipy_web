{"parents": [], "prev": null, "next": null, "title": "Parallel reconstruction using CSD", "meta": {}, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-reconstruction-reconst-csd-parallel-py\"><span class=\"std std-ref\">here</span></a>     to download the full example code</p>\n</div>\n<div class=\"sphx-glr-example-title section\" id=\"parallel-reconstruction-using-csd\">\n<span id=\"sphx-glr-examples-built-reconstruction-reconst-csd-parallel-py\"></span><h1>Parallel reconstruction using CSD<a class=\"headerlink\" href=\"#parallel-reconstruction-using-csd\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example shows how to use parallelism (multiprocessing) using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code> in order to speedup the signal reconstruction\nprocess. For this example will we use the same initial steps\nas we used in <a class=\"reference internal\" href=\"../../reconst_csd/#example-reconst-csd\"><span class=\"std std-ref\">Reconstruction with Constrained Spherical Deconvolution</span></a>.</p>\n<p>Import modules, fetch and read data, apply the mask and calculate the response\nfunction.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"k\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti</span>\n\n\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n\n<span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">median_radius</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                             <span class=\"n\">numpass</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">autocrop</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response_ssst</span>\n\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response_ssst</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">roi_radii</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">maskdata</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">33</span><span class=\"p\">:</span><span class=\"mi\">37</span><span class=\"p\">]</span>\n<span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">mask</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">33</span><span class=\"p\">:</span><span class=\"mi\">37</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Now we are ready to import the CSD model and fit the datasets.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span>\n\n<span class=\"n\">csd_model</span> <span class=\"o\">=</span> <span class=\"n\">ConstrainedSphericalDeconvModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Compute the CSD-based ODFs using <code class=\"docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code>. This function has a\nparameter called <code class=\"docutils literal notranslate\"><span class=\"pre\">parallel</span></code> which allows for the voxels to be processed in\nparallel. If <code class=\"docutils literal notranslate\"><span class=\"pre\">nbr_processes</span></code> is None it will figure out automatically the\nnumber of CPUs available in your system. Alternatively, you can set\n<code class=\"docutils literal notranslate\"><span class=\"pre\">nbr_processes</span></code> manually. Here, we show an example where we compare the\nduration of execution with or without parallelism.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n\n<span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">csd_peaks_parallel</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csd_model</span><span class=\"p\">,</span>\n                                      <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                                      <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                      <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                      <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                                      <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                                      <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                                      <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                      <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                      <span class=\"n\">nbr_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_parallel</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model using &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">())</span>\n      <span class=\"o\">+</span> <span class=\"s2\">&quot; process ran in :&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_parallel</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>peaks_from_model using 8 process ran in :6.477341175079346 seconds\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code> using 8 processes ran in 114.425682068 seconds</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">start_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">csd_peaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csd_model</span><span class=\"p\">,</span>\n                             <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n                             <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                             <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                             <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                             <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                             <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                             <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                             <span class=\"n\">npeaks</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                             <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                             <span class=\"n\">nbr_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_single</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start_time</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;peaks_from_model ran in :&quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; seconds&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>peaks_from_model ran in :18.682025909423828 seconds\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code> ran in 242.772505999 seconds</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Speedup factor : &quot;</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">time_single</span> <span class=\"o\">/</span> <span class=\"n\">time_parallel</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Speedup factor : 2.8842121179752396\n</pre></div>\n</div>\n<p>Speedup factor : 2.12166099088</p>\n<p>Under Windows if you get a runtime error about frozen executable please start\nyour script by adding your code above in a <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code> function and use:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n    <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">freeze_support</span><span class=\"p\">()</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  30.080 seconds)</p>\n<div class=\"sphx-glr-footer class sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-reconstruction-reconst-csd-parallel-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/1109182fb3f32d717c9675c51080169c/reconst_csd_parallel.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">reconst_csd_parallel.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/c41ccb310bbcc88962181674d4f9b65d/reconst_csd_parallel.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">reconst_csd_parallel.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/reconstruction/reconst_csd_parallel.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Parallel reconstruction using CSD</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/reconstruction/reconst_csd_parallel", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}