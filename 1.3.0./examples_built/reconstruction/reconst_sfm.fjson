{"parents": [], "prev": null, "next": null, "title": "Reconstruction with the Sparse Fascicle Model", "meta": {}, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-reconstruction-reconst-sfm-py\"><span class=\"std std-ref\">here</span></a>     to download the full example code</p>\n</div>\n<div class=\"sphx-glr-example-title section\" id=\"reconstruction-with-the-sparse-fascicle-model\">\n<span id=\"sfm-reconst\"></span><span id=\"sphx-glr-examples-built-reconstruction-reconst-sfm-py\"></span><h1>Reconstruction with the Sparse Fascicle Model<a class=\"headerlink\" href=\"#reconstruction-with-the-sparse-fascicle-model\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>In this example, we will use the Sparse Fascicle Model (SFM) <a class=\"reference internal\" href=\"../../tracking_sfm/#rokem2015\" id=\"id1\"><span>[Rokem2015]</span></a>, to\nreconstruct the fiber Orientation Distribution Function (fODF) in every voxel.</p>\n<p>First, we import the modules we will use in this example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.reconst.sfm</span> <span class=\"k\">as</span> <span class=\"nn\">sfm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">as</span> <span class=\"nn\">dpd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">dipy.direction.peaks</span> <span class=\"k\">as</span> <span class=\"nn\">dpp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"k\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n</pre></div>\n</div>\n<p>For the purpose of this example, we will use the Stanford HARDI dataset (150\ndirections, single b-value of 2000 <span class=\"math notranslate nohighlight\">\\(s/mm^2\\)</span>) that can be automatically\ndownloaded. If you have not yet downloaded this data-set in one of the other\nexamples, you will need to be connected to the internet the first time you\nrun this example. The data will be stored for subsequent runs, and for use\nwith other examples.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">dpd</span><span class=\"o\">.</span><span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<p>Reconstruction of the fiber ODF in each voxel guides subsequent tracking\nsteps. Here, the model is the Sparse Fascicle Model, described in\n<a class=\"reference internal\" href=\"../kfold_xval/#rokem2014\" id=\"id2\"><span>[Rokem2014]</span></a>. This model reconstructs the diffusion signal as a combination\nof the signals from different fascicles. This model can be written as:</p>\n<div class=\"math notranslate nohighlight\">\n\\[y = X\\beta\\]</div>\n<p>Where <span class=\"math notranslate nohighlight\">\\(y\\)</span> is the signal and <span class=\"math notranslate nohighlight\">\\(\\beta\\)</span> are weights on different points in the\nsphere. The columns of the design matrix, <span class=\"math notranslate nohighlight\">\\(X\\)</span> are the signals in each point\nin the measurement that would be predicted if there was a fascicle oriented\nin the direction represented by that column. Typically, the signal used for\nthis kernel will be a prolate tensor with axial diffusivity 3-5 times higher\nthan its radial diffusivity. The exact numbers can also be estimated from\nexamining parts of the brain in which there is known to be only one fascicle\n(e.g. in corpus callosum).</p>\n<p>Sparsity constraints on the fiber ODF (<span class=\"math notranslate nohighlight\">\\(\\beta\\)</span>) are set through the Elastic\nNet algorihtm <a class=\"reference internal\" href=\"../../sfm_reconst/#zou2005\" id=\"id3\"><span>[Zou2005]</span></a>.</p>\n<p>Elastic Net optimizes the following cost function:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\sum_{i=1}^{n}{(y_i - \\hat{y}_i)^2} + \\alpha (\\lambda \\sum_{j=1}^{m}{w_j}+(1-\\lambda) \\sum_{j=1}^{m}{w^2_j}\\]</div>\n<p>where <span class=\"math notranslate nohighlight\">\\(\\hat{y}\\)</span> is the signal predicted for a particular setting of <span class=\"math notranslate nohighlight\">\\(\\beta\\)</span>,\nsuch that the left part of this expression is the squared loss function;\n<span class=\"math notranslate nohighlight\">\\(\\alpha\\)</span> is a parameter that sets the balance between the squared loss on\nthe data, and the regularization constraints. The regularization parameter\n<span class=\"math notranslate nohighlight\">\\(\\lambda\\)</span> sets the <cite>l1_ratio</cite>, which controls the balance between L1-sparsity\n(low sum of weights), and low L2-sparsity (low sum-of-squares of the\nweights).</p>\n<p>Just like Constrained Spherical Deconvolution (see <a class=\"reference internal\" href=\"../reconst_csd/#reconst-csd\"><span class=\"std std-ref\">Reconstruction with Constrained Spherical Deconvolution</span></a>), the\nSFM requires the definition of a response function. We\u2019ll take advantage of\nthe automated algorithm in the <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csdeconv</span></code> module to find this response\nfunction:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response_ssst</span>\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response_ssst</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radii</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">response</span></code> return value contains two entries. The first is an array\nwith the eigenvalues of the response function and the second is the average\nS0 for this response.</p>\n<p>It is a very good practice to always validate the result of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">auto_response_ssst</span></code>. For, this purpose we can print it and have a look\nat its values.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>(array([0.00139919, 0.0003007 , 0.0003007 ]), 416.7372408293461)\n</pre></div>\n</div>\n<p>(array([ 0.0014,  0.00029,  0.00029]), 416.206)</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># We initialize an SFM model object, using these values. We will use the</span>\n<span class=\"c1\"># default sphere (362  vertices, symmetrically distributed on the surface of</span>\n<span class=\"c1\"># the sphere), as a set of putative fascicle directions that are considered in</span>\n<span class=\"c1\"># the model</span>\n\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">dpd</span><span class=\"o\">.</span><span class=\"n\">get_sphere</span><span class=\"p\">()</span>\n<span class=\"n\">sf_model</span> <span class=\"o\">=</span> <span class=\"n\">sfm</span><span class=\"o\">.</span><span class=\"n\">SparseFascicleModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                   <span class=\"n\">l1_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">alpha</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span>\n                                   <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>For the purpose of the example, we will consider a small volume of data\ncontaining parts of the corpus callosum and of the centrum semiovale</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">data_small</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">:</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">55</span><span class=\"p\">:</span><span class=\"mi\">85</span><span class=\"p\">,</span> <span class=\"mi\">38</span><span class=\"p\">:</span><span class=\"mi\">39</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Fitting the model to this small volume of data, we calculate the ODF of this\nmodel on the sphere, and plot it.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sf_fit</span> <span class=\"o\">=</span> <span class=\"n\">sf_model</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_small</span><span class=\"p\">)</span>\n<span class=\"n\">sf_odf</span> <span class=\"o\">=</span> <span class=\"n\">sf_fit</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n\n<span class=\"n\">fodf_spheres</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">sf_odf</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span>\n                                <span class=\"n\">colormap</span><span class=\"o\">=</span><span class=\"s1\">&#39;plasma&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fodf_spheres</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as sf_odfs.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;sf_odfs.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"reconst sfm\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_reconst_sfm_001.png\" />\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>/Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/fury/actor.py:956: RuntimeWarning: invalid value encountered in true_divide\n  m /= np.abs(m).max()\nSaving illustration as sf_odfs.png\n</pre></div>\n</div>\n<p>We can extract the peaks from the ODF, and plot these as well</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sf_peaks</span> <span class=\"o\">=</span> <span class=\"n\">dpp</span><span class=\"o\">.</span><span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">sf_model</span><span class=\"p\">,</span>\n                                <span class=\"n\">data_small</span><span class=\"p\">,</span>\n                                <span class=\"n\">sphere</span><span class=\"p\">,</span>\n                                <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                                <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                                <span class=\"n\">return_sh</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">fodf_peaks</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">peak_slicer</span><span class=\"p\">(</span><span class=\"n\">sf_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_dirs</span><span class=\"p\">,</span> <span class=\"n\">sf_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_values</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fodf_peaks</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as sf_peaks.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;sf_peaks.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"reconst sfm\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_reconst_sfm_002.png\" />\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Saving illustration as sf_peaks.png\n</pre></div>\n</div>\n<p>Finally, we plot both the peaks and the ODFs, overlayed:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fodf_spheres</span><span class=\"o\">.</span><span class=\"n\">GetProperty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">SetOpacity</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fodf_spheres</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as sf_both.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;sf_both.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"reconst sfm\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_reconst_sfm_003.png\" />\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Saving illustration as sf_both.png\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"examples_built/reconstruction/sf_both.png\" src=\"examples_built/reconstruction/sf_both.png\" />\n<p class=\"caption\"><span class=\"caption-text\">SFM Peaks and ODFs.</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p>To see how to use this information in tracking, proceed to <a class=\"reference internal\" href=\"../../tracking_sfm/#sfm-track\"><span class=\"std std-ref\">Tracking with the Sparse Fascicle Model</span></a>.</p>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rokem2015\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id1\">Rokem2015</a></span></dt>\n<dd><p>Ariel Rokem, Jason D. Yeatman, Franco Pestilli, Kendrick\nN. Kay, Aviv Mezer, Stefan van der Walt, Brian A. Wandell\n(2015). Evaluating the accuracy of diffusion MRI models in white\nmatter. PLoS ONE 10(4): e0123272. doi:10.1371/journal.pone.0123272</p>\n</dd>\n<dt class=\"label\" id=\"zou2005\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">Zou2005</a></span></dt>\n<dd><p>Zou H, Hastie T (2005). Regularization and variable\nselection via the elastic net. J R Stat Soc B:301-320</p>\n</dd>\n</dl>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  42.128 seconds)</p>\n<div class=\"sphx-glr-footer class sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-reconstruction-reconst-sfm-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/acd4566f3b03905455fa321d4c88e5e5/reconst_sfm.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">reconst_sfm.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/0bcc855a4961ee08ca7061865e0ae6b6/reconst_sfm.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">reconst_sfm.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/reconstruction/reconst_sfm.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruction with the Sparse Fascicle Model</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/reconstruction/reconst_sfm", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}