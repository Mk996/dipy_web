{"parents": [], "prev": null, "next": null, "title": "Reconstruct with Constant Solid Angle (Q-Ball)", "meta": {}, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-reconstruction-reconst-csa-py\"><span class=\"std std-ref\">here</span></a>     to download the full example code</p>\n</div>\n<div class=\"sphx-glr-example-title section\" id=\"reconstruct-with-constant-solid-angle-q-ball\">\n<span id=\"sphx-glr-examples-built-reconstruction-reconst-csa-py\"></span><h1>Reconstruct with Constant Solid Angle (Q-Ball)<a class=\"headerlink\" href=\"#reconstruct-with-constant-solid-angle-q-ball\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We show how to apply a Constant Solid Angle ODF (Q-Ball) model from Aganj et\nal. <a class=\"reference internal\" href=\"../../../interfaces/basic_flow/#aganj2010\" id=\"id1\"><span>[Aganj2010]</span></a> to your datasets.</p>\n<p>First import the necessary modules:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"k\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">CsaOdfModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.segment.mask</span> <span class=\"k\">import</span> <span class=\"n\">median_otsu</span>\n</pre></div>\n</div>\n<p>Download and read the data for this tutorial and load the raw diffusion data\nand the affine.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">)</span>\n\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>img contains a nibabel Nifti1Image object (data) and gtab contains a\nGradientTable object (gradient information e.g. b-values). For example to\nread the b-values it is possible to write print(gtab.bvals).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;data.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>data.shape (81, 106, 76, 160)\n</pre></div>\n</div>\n<p>data.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(81,</span> <span class=\"pre\">106,</span> <span class=\"pre\">76,</span> <span class=\"pre\">160)</span></code></p>\n<p>Remove most of the background using DIPY\u2019s mask module.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">maskdata</span><span class=\"p\">,</span> <span class=\"n\">mask</span> <span class=\"o\">=</span> <span class=\"n\">median_otsu</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">vol_idx</span><span class=\"o\">=</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">median_radius</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n                             <span class=\"n\">numpass</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">autocrop</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dilate</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We instantiate our CSA model with spherical harmonic order of 4</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">csamodel</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><cite>Peaks_from_model</cite> is used to calculate properties of the ODFs (Orientation\nDistribution Function) and return for\nexample the peaks and their indices, or GFA which is similar to FA but for\nODF based models. This function mainly needs a reconstruction model, the data\nand a sphere as input. The sphere is an object that represents the spherical\ndiscrete grid where the ODF values will be evaluated.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">csapeaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">csamodel</span><span class=\"p\">,</span>\n                            <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">maskdata</span><span class=\"p\">,</span>\n                            <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                            <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">,</span>\n                            <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">mask</span><span class=\"p\">,</span>\n                            <span class=\"n\">return_odf</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">normalize_peaks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">GFA</span> <span class=\"o\">=</span> <span class=\"n\">csapeaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;GFA.shape (</span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">, </span><span class=\"si\">%d</span><span class=\"s1\">)&#39;</span> <span class=\"o\">%</span> <span class=\"n\">GFA</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>GFA.shape (71, 88, 62)\n</pre></div>\n</div>\n<p>GFA.shape <code class=\"docutils literal notranslate\"><span class=\"pre\">(81,</span> <span class=\"pre\">106,</span> <span class=\"pre\">76)</span></code></p>\n<p>Apart from GFA, csapeaks also has the attributes peak_values, peak_indices\nand ODF. peak_values shows the maxima values of the ODF and peak_indices\ngives us their position on the discrete sphere that was used to do the\nreconstruction of the ODF. In order to obtain the full ODF, return_odf should\nbe True. Before enabling this option, make sure that you have enough memory.</p>\n<p>Let\u2019s visualize the ODFs of a small rectangular area in an axial slice of the\nsplenium of the corpus callosum (CC).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">data_small</span> <span class=\"o\">=</span> <span class=\"n\">maskdata</span><span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">:</span><span class=\"mi\">43</span><span class=\"p\">,</span> <span class=\"mi\">44</span><span class=\"p\">:</span><span class=\"mi\">74</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">:</span><span class=\"mi\">29</span><span class=\"p\">]</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n\n<span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n\n<span class=\"n\">csaodfs</span> <span class=\"o\">=</span> <span class=\"n\">csamodel</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">data_small</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">odf</span><span class=\"p\">(</span><span class=\"n\">default_sphere</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>It is common with CSA ODFs to produce negative values, we can remove those\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">np.clip</span></code></p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">csaodfs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">csaodfs</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">csaodfs</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">])</span>\n<span class=\"n\">csa_odfs_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">csaodfs</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                                  <span class=\"n\">colormap</span><span class=\"o\">=</span><span class=\"s1\">&#39;plasma&#39;</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">)</span>\n<span class=\"n\">csa_odfs_actor</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">csa_odfs_actor</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as csa_odfs.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;csa_odfs.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"reconst csa\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_reconst_csa_001.png\" />\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Saving illustration as csa_odfs.png\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id2\">\n<img alt=\"examples_built/reconstruction/csa_odfs.png\" src=\"examples_built/reconstruction/csa_odfs.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Constant Solid Angle ODFs.</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"aganj2010\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id1\">Aganj2010</a></span></dt>\n<dd><p>Aganj I, Lenglet C, Sapiro G, Yacoub E, Ugurbil K, Harel N.\n\u201cReconstruction of the orientation distribution function in single- and\nmultiple-shell q-ball imaging within constant solid angle\u201d, Magnetic\nResonance in Medicine. 2010 Aug;64(2):554-66. doi: 10.1002/mrm.22365</p>\n</dd>\n</dl>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 2 minutes  4.710 seconds)</p>\n<div class=\"sphx-glr-footer class sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-reconstruction-reconst-csa-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/8ca0f41fbfcae3d38476b64614dbcf49/reconst_csa.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">reconst_csa.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/2311323022540b308163cc6fdd8fc29d/reconst_csa.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">reconst_csa.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/reconstruction/reconst_csa.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Reconstruct with Constant Solid Angle (Q-Ball)</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/reconstruction/reconst_csa", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}