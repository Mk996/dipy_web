{"parents": [], "prev": null, "next": null, "title": "DKI MultiTensor Simulation", "meta": {}, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-simulations-simulate-dki-py\"><span class=\"std std-ref\">here</span></a>     to download the full example code</p>\n</div>\n<div class=\"sphx-glr-example-title section\" id=\"dki-multitensor-simulation\">\n<span id=\"simulate-dki\"></span><span id=\"sphx-glr-examples-built-simulations-simulate-dki-py\"></span><h1>DKI MultiTensor Simulation<a class=\"headerlink\" href=\"#dki-multitensor-simulation\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>In this example we show how to simulate the Diffusion Kurtosis Imaging (DKI)\ndata of a single voxel. DKI captures information about the non-Gaussian\nproperties of water diffusion which is a consequence of the existence of tissue\nbarriers and compartments. In these simulations compartmental heterogeneity is\ntaken into account by modeling different compartments for the intra- and\nextra-cellular media of two populations of fibers. These simulations are\nperformed according to <a class=\"reference internal\" href=\"#rnh2015\" id=\"id1\"><span>[RNH2015]</span></a>.</p>\n<p>We first import all relevant modules.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.sims.voxel</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">multi_tensor_dki</span><span class=\"p\">,</span> <span class=\"n\">single_tensor</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"k\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.dti</span> <span class=\"k\">import</span> <span class=\"p\">(</span><span class=\"n\">decompose_tensor</span><span class=\"p\">,</span> <span class=\"n\">from_lower_triangular</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For the simulation we will need a GradientTable with the b-values and\nb-vectors. Here we use the GradientTable of the sample <a href=\"#id3\"><span class=\"problematic\" id=\"id4\">DIPY_</span></a> dataset\n<code class=\"docutils literal notranslate\"><span class=\"pre\">small_64D</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fimg</span><span class=\"p\">,</span> <span class=\"n\">fbvals</span><span class=\"p\">,</span> <span class=\"n\">fbvecs</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;small_64D&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">fbvals</span><span class=\"p\">,</span> <span class=\"n\">fbvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>DKI requires data from more than one non-zero b-value. Since the dataset\n<code class=\"docutils literal notranslate\"><span class=\"pre\">small_64D</span></code> was acquired with one non-zero b-value we artificially produce\na second non-zero b-value.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvals</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">((</span><span class=\"n\">bvecs</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">),</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The b-values and gradient directions are then converted to DIPY\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GradientTable</span></code> format.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">mevals</span></code> we save the eigenvalues of each tensor. To simulate crossing\nfibers with two different media (representing intra and extra-cellular\nmedia), a total of four components have to be taken in to account (i.e. the\nfirst two compartments correspond to the intra and extra cellular media for\nthe first fiber population while the others correspond to the media of the\nsecond fiber population)</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mevals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.00099</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                   <span class=\"p\">[</span><span class=\"mf\">0.00226</span><span class=\"p\">,</span> <span class=\"mf\">0.00087</span><span class=\"p\">,</span> <span class=\"mf\">0.00087</span><span class=\"p\">],</span>\n                   <span class=\"p\">[</span><span class=\"mf\">0.00099</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n                   <span class=\"p\">[</span><span class=\"mf\">0.00226</span><span class=\"p\">,</span> <span class=\"mf\">0.00087</span><span class=\"p\">,</span> <span class=\"mf\">0.00087</span><span class=\"p\">]])</span>\n</pre></div>\n</div>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">angles</span></code> we save in polar coordinates (<span class=\"math notranslate nohighlight\">\\(\\theta, \\phi\\)</span>) the\nprincipal axis of each compartment tensor. To simulate crossing fibers at\n70:math:<cite>^{circ}</cite> the compartments of the first fiber are aligned to the X-axis\nwhile the compartments of the second fiber are aligned to the X-Z plane with\nan angular deviation of 70:math:<cite>^{circ}</cite> from the first one.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n</pre></div>\n</div>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">fractions</span></code> we save the percentage of the contribution of each\ncompartment, which is computed by multiplying the percentage of contribution\nof each fiber population and the water fraction of each different medium</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fie</span> <span class=\"o\">=</span> <span class=\"mf\">0.49</span>  <span class=\"c1\"># intra-axonal water fraction</span>\n<span class=\"n\">fractions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">fie</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">fie</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">fie</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">fie</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"mi\">50</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Having defined the parameters for all tissue compartments, the elements of\nthe diffusion tensor (DT), the elements of the kurtosis tensor (KT) and the\nDW signals simulated from the DKI model can be obtain using the function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">multi_tensor_dki</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">signal_dki</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">kt</span> <span class=\"o\">=</span> <span class=\"n\">multi_tensor_dki</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">mevals</span><span class=\"p\">,</span> <span class=\"n\">S0</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"n\">angles</span><span class=\"p\">,</span>\n                                      <span class=\"n\">fractions</span><span class=\"o\">=</span><span class=\"n\">fractions</span><span class=\"p\">,</span> <span class=\"n\">snr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can also add Rician noise with a specific SNR.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">signal_noisy</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">kt</span> <span class=\"o\">=</span> <span class=\"n\">multi_tensor_dki</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">mevals</span><span class=\"p\">,</span> <span class=\"n\">S0</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n                                        <span class=\"n\">angles</span><span class=\"o\">=</span><span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">fractions</span><span class=\"o\">=</span><span class=\"n\">fractions</span><span class=\"p\">,</span>\n                                        <span class=\"n\">snr</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For comparison purposes, we also compute the DW signal if only the diffusion\ntensor components are taken into account. For this we use DIPY\u2019s function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">single_tensor</span></code> which requires that dt is decomposed into its eigenvalues\nand eigenvectors.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dt_evals</span><span class=\"p\">,</span> <span class=\"n\">dt_evecs</span> <span class=\"o\">=</span> <span class=\"n\">decompose_tensor</span><span class=\"p\">(</span><span class=\"n\">from_lower_triangular</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">))</span>\n<span class=\"n\">signal_dti</span> <span class=\"o\">=</span> <span class=\"n\">single_tensor</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">S0</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">evals</span><span class=\"o\">=</span><span class=\"n\">dt_evals</span><span class=\"p\">,</span> <span class=\"n\">evecs</span><span class=\"o\">=</span><span class=\"n\">dt_evecs</span><span class=\"p\">,</span>\n                           <span class=\"n\">snr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Finally, we can visualize the values of the different version of simulated\nsignals for all assumed gradient directions and bvalues.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">signal_dti</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;noiseless dti&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">signal_dki</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;noiseless dki&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">signal_noisy</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;with noise&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">legend</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;simulated_dki_signal.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"simulate dki\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_simulate_dki_001.png\" />\n<div class=\"figure align-center\" id=\"id2\">\n<img alt=\"examples_built/simulations/simulated_dki_signal.png\" src=\"examples_built/simulations/simulated_dki_signal.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Simulated signals obtain from the DTI and DKI models.</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p>Non-Gaussian diffusion properties in tissues are responsible to smaller\nsignal attenuations for larger bvalues when compared to signal attenuations\nfrom free Gaussian water diffusion. This feature can be shown from the figure\nabove, since signals simulated from the DKI models reveals larger DW signal\nintensities than the signals obtained only from the diffusion tensor\ncomponents.</p>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rnh2015\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id1\">RNH2015</a></span></dt>\n<dd><p>R. Neto Henriques et al., \u201cExploring the 3D geometry of the\ndiffusion kurtosis tensor - Impact on the development of robust\ntractography procedures and novel biomarkers\u201d, NeuroImage (2015) 111,\n85-99.</p>\n</dd>\n</dl>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  0.163 seconds)</p>\n<div class=\"sphx-glr-footer class sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-simulations-simulate-dki-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/e8540473e8efd80e9be11a750969f0e1/simulate_dki.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">simulate_dki.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/7a395b7f99d6fa7ae78368c92baebeca/simulate_dki.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">simulate_dki.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/simulations/simulate_dki.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">DKI MultiTensor Simulation</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/simulations/simulate_dki", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}