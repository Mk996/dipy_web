{"parents": [], "prev": null, "next": null, "title": "Direct Bundle Registration", "meta": {}, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-registration-bundle-registration-py\"><span class=\"std std-ref\">here</span></a>     to download the full example code</p>\n</div>\n<div class=\"sphx-glr-example-title section\" id=\"direct-bundle-registration\">\n<span id=\"sphx-glr-examples-built-registration-bundle-registration-py\"></span><h1>Direct Bundle Registration<a class=\"headerlink\" href=\"#direct-bundle-registration\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example explains how you can register two bundles from two different\nsubjects directly in the space of streamlines <a class=\"reference internal\" href=\"../../../reference_cmd/dipy_slr/#garyfallidis15\" id=\"id1\"><span>[Garyfallidis15]</span></a>,\n<a class=\"reference internal\" href=\"../../../reference_cmd/dipy_slr/#garyfallidis14\" id=\"id2\"><span>[Garyfallidis14]</span></a>.</p>\n<p>To show the concept we will use two pre-saved cingulum bundles. The algorithm\nused here is called Streamline-based Linear Registration (SLR)\n<a class=\"reference internal\" href=\"../../../reference_cmd/dipy_slr/#garyfallidis15\" id=\"id3\"><span>[Garyfallidis15]</span></a>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"k\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">two_cingulum_bundles</span>\n\n<span class=\"n\">cb_subj1</span><span class=\"p\">,</span> <span class=\"n\">cb_subj2</span> <span class=\"o\">=</span> <span class=\"n\">two_cingulum_bundles</span><span class=\"p\">()</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.align.streamlinear</span> <span class=\"k\">import</span> <span class=\"n\">StreamlineLinearRegistration</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"k\">import</span> <span class=\"n\">set_number_of_points</span>\n</pre></div>\n</div>\n<p>An important step before running the registration is to resample the\nstreamlines so that they both have the same number of points per streamline.\nHere we will use 20 points. This step is not optional. Inputting streamlines\nwith a different number of points will break the theoretical advantages of\nusing the SLR as explained in <a class=\"reference internal\" href=\"../../../reference_cmd/dipy_slr/#garyfallidis15\" id=\"id4\"><span>[Garyfallidis15]</span></a>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cb_subj1</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">cb_subj1</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"n\">cb_subj2</span> <span class=\"o\">=</span> <span class=\"n\">set_number_of_points</span><span class=\"p\">(</span><span class=\"n\">cb_subj2</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let\u2019s say now that we want to move the <code class=\"docutils literal notranslate\"><span class=\"pre\">cb_subj2</span></code> (moving) so that it can\nbe aligned with <code class=\"docutils literal notranslate\"><span class=\"pre\">cb_subj1</span></code> (static). Here is how this is done.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">srr</span> <span class=\"o\">=</span> <span class=\"n\">StreamlineLinearRegistration</span><span class=\"p\">()</span>\n\n<span class=\"n\">srm</span> <span class=\"o\">=</span> <span class=\"n\">srr</span><span class=\"o\">.</span><span class=\"n\">optimize</span><span class=\"p\">(</span><span class=\"n\">static</span><span class=\"o\">=</span><span class=\"n\">cb_subj1</span><span class=\"p\">,</span> <span class=\"n\">moving</span><span class=\"o\">=</span><span class=\"n\">cb_subj2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>After the optimization is finished we can apply the transformation to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cb_subj2</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cb_subj2_aligned</span> <span class=\"o\">=</span> <span class=\"n\">srm</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">cb_subj2</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">show_both_bundles</span><span class=\"p\">(</span><span class=\"n\">bundles</span><span class=\"p\">,</span> <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n\n    <span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n    <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">SetBackground</span><span class=\"p\">(</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">bundle</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">bundles</span><span class=\"p\">):</span>\n        <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">colors</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"n\">lines_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">streamtube</span><span class=\"p\">(</span><span class=\"n\">bundle</span><span class=\"p\">,</span> <span class=\"n\">color</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n        <span class=\"n\">lines_actor</span><span class=\"o\">.</span><span class=\"n\">RotateX</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n        <span class=\"n\">lines_actor</span><span class=\"o\">.</span><span class=\"n\">RotateZ</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">lines_actor</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">show</span><span class=\"p\">:</span>\n        <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">fname</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">n_frames</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">show_both_bundles</span><span class=\"p\">([</span><span class=\"n\">cb_subj1</span><span class=\"p\">,</span> <span class=\"n\">cb_subj2</span><span class=\"p\">],</span>\n                  <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">],</span>\n                  <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                  <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;before_registration.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"bundle registration\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_bundle_registration_001.png\" />\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>/Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/vtkmodules/util/numpy_support.py:66: DeprecationWarning: Converting `np.character` to a dtype is deprecated. The current result is `np.dtype(np.str_)` which is not strictly correct. Note that `np.character` is generally deprecated and &#39;S1&#39; should be used.\n  if numpy_array_type == key or \\\n/Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/vtkmodules/util/numpy_support.py:68: DeprecationWarning: Converting `np.character` to a dtype is deprecated. The current result is `np.dtype(np.str_)` which is not strictly correct. Note that `np.character` is generally deprecated and &#39;S1&#39; should be used.\n  numpy_array_type == numpy.dtype(key):\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id5\">\n<img alt=\"examples_built/registration/before_registration.png\" src=\"examples_built/registration/before_registration.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Before bundle registration.</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">show_both_bundles</span><span class=\"p\">([</span><span class=\"n\">cb_subj1</span><span class=\"p\">,</span> <span class=\"n\">cb_subj2_aligned</span><span class=\"p\">],</span>\n                  <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">orange</span><span class=\"p\">,</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">colors</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">],</span>\n                  <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                  <span class=\"n\">fname</span><span class=\"o\">=</span><span class=\"s1\">&#39;after_registration.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"bundle registration\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_bundle_registration_002.png\" />\n<div class=\"figure align-center\" id=\"id6\">\n<img alt=\"examples_built/registration/after_registration.png\" src=\"examples_built/registration/after_registration.png\" />\n<p class=\"caption\"><span class=\"caption-text\">After bundle registration.</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p>As you can see the two cingulum bundles are well aligned although they\ncontain many streamlines of different lengths and shapes.</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"garyfallidis15\"><span class=\"brackets\">Garyfallidis15</span><span class=\"fn-backref\">(<a href=\"#id1\">1</a>,<a href=\"#id3\">2</a>,<a href=\"#id4\">3</a>)</span></dt>\n<dd><p>Garyfallidis et al., \u201cRobust and efficient linear\nregistration of white-matter fascicles in the space\nof streamlines\u201d, Neuroimage, 117:124-140, 2015.</p>\n</dd>\n<dt class=\"label\" id=\"garyfallidis14\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id2\">Garyfallidis14</a></span></dt>\n<dd><p>Garyfallidis et al., \u201cDirect native-space fiber bundle\nalignment for group comparisons\u201d, ISMRM, 2014.</p>\n</dd>\n</dl>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  2.560 seconds)</p>\n<div class=\"sphx-glr-footer class sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-registration-bundle-registration-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/9518ba5fbbf3f07708b24159276cd205/bundle_registration.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">bundle_registration.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/421620b27c1b0adbcf9bebda3a86d84f/bundle_registration.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">bundle_registration.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/registration/bundle_registration.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Direct Bundle Registration</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/registration/bundle_registration", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}