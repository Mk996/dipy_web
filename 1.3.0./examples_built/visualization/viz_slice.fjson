{"parents": [], "prev": null, "next": null, "title": "Simple volume slicing", "meta": {}, "body": "<div class=\"sphx-glr-download-link-note admonition note\">\n<p class=\"admonition-title\">Note</p>\n<p>Click <a class=\"reference internal\" href=\"#sphx-glr-download-examples-built-visualization-viz-slice-py\"><span class=\"std std-ref\">here</span></a>     to download the full example code</p>\n</div>\n<div class=\"sphx-glr-example-title section\" id=\"simple-volume-slicing\">\n<span id=\"sphx-glr-examples-built-visualization-viz-slice-py\"></span><h1>Simple volume slicing<a class=\"headerlink\" href=\"#simple-volume-slicing\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Here we present an example for visualizing slices from 3D images.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">fetch_bundles_2_subjects</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">load_nifti_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">ui</span>\n</pre></div>\n</div>\n<p>Let\u2019s download and load a T1.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fetch_bundles_2_subjects</span><span class=\"p\">()</span>\n\n<span class=\"n\">fname_t1</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">&#39;~&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;.dipy&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;exp_bundles_and_maps&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bundles_2_subjects&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;subj_1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;t1_warped.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">fname_t1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Create a Scene object which holds all the actors which we want to visualize.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">background</span><span class=\"p\">((</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">0.5</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"render-slices-from-t1-with-a-specific-value-range\">\n<h2>Render slices from T1 with a specific value range<a class=\"headerlink\" href=\"#render-slices-from-t1-with-a-specific-value-range\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The T1 has usually a higher range of values than what can be visualized in an\nimage. We can set the range that we would like to see.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mean</span><span class=\"p\">,</span> <span class=\"n\">std</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(),</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">data</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">std</span><span class=\"p\">()</span>\n<span class=\"n\">value_range</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">std</span><span class=\"p\">,</span> <span class=\"n\">mean</span> <span class=\"o\">+</span> <span class=\"mf\">1.5</span> <span class=\"o\">*</span> <span class=\"n\">std</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">slice</span></code> function will read data and resample the data using an affine\ntransformation matrix. The default behavior of this function is to show the\nmiddle slice of the last dimension of the resampled data.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">slice_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">value_range</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>/Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/vtkmodules/util/numpy_support.py:66: DeprecationWarning: Converting `np.character` to a dtype is deprecated. The current result is `np.dtype(np.str_)` which is not strictly correct. Note that `np.character` is generally deprecated and &#39;S1&#39; should be used.\n  if numpy_array_type == key or \\\n/Users/koudoro/miniconda3/envs/dipy-env-37/lib/python3.7/site-packages/vtkmodules/util/numpy_support.py:68: DeprecationWarning: Converting `np.character` to a dtype is deprecated. The current result is `np.dtype(np.str_)` which is not strictly correct. Note that `np.character` is generally deprecated and &#39;S1&#39; should be used.\n  numpy_array_type == numpy.dtype(key):\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">slice_actor</span></code> contains an axial slice.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">slice_actor</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The same actor can show any different slice from the given data using its\n<code class=\"docutils literal notranslate\"><span class=\"pre\">display</span></code> function. However, if we want to show multiple slices we need to\ncopy the actor first.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">slice_actor2</span> <span class=\"o\">=</span> <span class=\"n\">slice_actor</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Now we have a new <code class=\"docutils literal notranslate\"><span class=\"pre\">slice_actor</span></code> which displays the middle slice of sagittal\nplane.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">slice_actor2</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"n\">slice_actor2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">slice_actor2</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">reset_camera</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">(</span><span class=\"mf\">1.4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In order to interact with the data you will need to uncomment the line below.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># window.show(scene, size=(600, 600), reset_camera=False)</span>\n</pre></div>\n</div>\n<p>Otherwise, you can save a screenshot using the following command.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;slices.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">),</span>\n              <span class=\"n\">reset_camera</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"viz slice\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_viz_slice_001.png\" />\n<div class=\"figure align-center\" id=\"id1\">\n<img alt=\"examples_built/visualization/slices.png\" src=\"examples_built/visualization/slices.png\" />\n<p class=\"caption\"><span class=\"caption-text\">Simple slice viewer.</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"render-slices-from-fa-with-your-colormap\">\n<h2>Render slices from FA with your colormap<a class=\"headerlink\" href=\"#render-slices-from-fa-with-your-colormap\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>It is also possible to set the colormap of your preference. Here we are\nloading an FA image and showing it in a non-standard way using an HSV\ncolormap.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fname_fa</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"s1\">&#39;~&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;.dipy&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;exp_bundles_and_maps&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bundles_2_subjects&#39;</span><span class=\"p\">,</span>\n                        <span class=\"s1\">&#39;subj_1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fa_1x1x1.nii.gz&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">fa</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">fname_fa</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Notice here how the scale range is (0, 255) and not (0, 1) which is the usual\nrange of FA values.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">lut</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">colormap_lookup_table</span><span class=\"p\">(</span><span class=\"n\">scale_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">),</span>\n                                  <span class=\"n\">hue_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">),</span>\n                                  <span class=\"n\">saturation_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">),</span>\n                                  <span class=\"n\">value_range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">0.</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>This is because the lookup table is applied in the slice after interpolating\nto (0, 255).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">fa_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">slicer</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">lookup_colormap</span><span class=\"o\">=</span><span class=\"n\">lut</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">fa_actor</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">reset_camera</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">(</span><span class=\"mf\">1.4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># window.show(scene, size=(600, 600), reset_camera=False)</span>\n\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;slices_lut.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">600</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">),</span>\n              <span class=\"n\">reset_camera</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"viz slice\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_viz_slice_002.png\" />\n<div class=\"figure align-center\" id=\"id2\">\n<img alt=\"examples_built/visualization/slices_lut.png\" src=\"examples_built/visualization/slices_lut.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Simple slice viewer with an HSV colormap</strong>.</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p>Now we would like to add the ability to click on a voxel and show its value\non a panel in the window. The panel is a UI element which requires access to\ndifferent areas of the visualization pipeline and therefore we don\u2019t\nrecommend using it with <code class=\"docutils literal notranslate\"><span class=\"pre\">window.show</span></code>. The more appropriate way is to use\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">ShowManager</span></code> object, which allows accessing the pipeline in different\nareas.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">show_m</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">ShowManager</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n<span class=\"n\">show_m</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>We\u2019ll start by creating the panel and adding it to the <code class=\"docutils literal notranslate\"><span class=\"pre\">ShowManager</span></code></p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">label_position</span> <span class=\"o\">=</span> <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">TextBlock2D</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Position:&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">label_value</span> <span class=\"o\">=</span> <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">TextBlock2D</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;Value:&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">result_position</span> <span class=\"o\">=</span> <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">TextBlock2D</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">result_value</span> <span class=\"o\">=</span> <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">TextBlock2D</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">panel_picking</span> <span class=\"o\">=</span> <span class=\"n\">ui</span><span class=\"o\">.</span><span class=\"n\">Panel2D</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"mi\">125</span><span class=\"p\">),</span>\n                           <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">),</span>\n                           <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n                           <span class=\"n\">opacity</span><span class=\"o\">=</span><span class=\"mf\">0.75</span><span class=\"p\">,</span>\n                           <span class=\"n\">align</span><span class=\"o\">=</span><span class=\"s2\">&quot;left&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">panel_picking</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">label_position</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.55</span><span class=\"p\">))</span>\n<span class=\"n\">panel_picking</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">label_value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">))</span>\n\n<span class=\"n\">panel_picking</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">result_position</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">0.45</span><span class=\"p\">,</span> <span class=\"mf\">0.55</span><span class=\"p\">))</span>\n<span class=\"n\">panel_picking</span><span class=\"o\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"n\">result_value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">0.45</span><span class=\"p\">,</span> <span class=\"mf\">0.25</span><span class=\"p\">))</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">panel_picking</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Add a left-click callback to the slicer. Also disable interpolation so you\ncan see what you are picking.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">left_click_callback</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">ev</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Get the value of the clicked voxel and show it in the panel.&quot;&quot;&quot;</span>\n    <span class=\"n\">event_pos</span> <span class=\"o\">=</span> <span class=\"n\">show_m</span><span class=\"o\">.</span><span class=\"n\">iren</span><span class=\"o\">.</span><span class=\"n\">GetEventPosition</span><span class=\"p\">()</span>\n\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">picker</span><span class=\"o\">.</span><span class=\"n\">Pick</span><span class=\"p\">(</span><span class=\"n\">event_pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">event_pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scene</span><span class=\"p\">)</span>\n\n    <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">picker</span><span class=\"o\">.</span><span class=\"n\">GetPointIJK</span><span class=\"p\">()</span>\n    <span class=\"n\">result_position</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;(</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">)&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">))</span>\n    <span class=\"n\">result_value</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%.8f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">fa_actor</span><span class=\"o\">.</span><span class=\"n\">SetInterpolate</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">fa_actor</span><span class=\"o\">.</span><span class=\"n\">AddObserver</span><span class=\"p\">(</span><span class=\"s1\">&#39;LeftButtonPressEvent&#39;</span><span class=\"p\">,</span> <span class=\"n\">left_click_callback</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># show_m.start()</span>\n</pre></div>\n</div>\n<p class=\"sphx-glr-script-out\">Out:</p>\n<div class=\"sphx-glr-script-out highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>1\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"create-a-mosaic\">\n<h2>Create a mosaic<a class=\"headerlink\" href=\"#create-a-mosaic\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By using the <code class=\"docutils literal notranslate\"><span class=\"pre\">copy</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">display</span></code> method of the <code class=\"docutils literal notranslate\"><span class=\"pre\">slice_actor</span></code> becomes\neasy and efficient to create a mosaic of all the slices.</p>\n<p>So, let\u2019s clear the scene and change the projection from perspective to\nparallel. We\u2019ll also need a new show manager and an associated callback.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">projection</span><span class=\"p\">(</span><span class=\"s1\">&#39;parallel&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">result_position</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n<span class=\"n\">result_value</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n\n<span class=\"n\">show_m_mosaic</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">ShowManager</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n<span class=\"n\">show_m_mosaic</span><span class=\"o\">.</span><span class=\"n\">initialize</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">left_click_callback_mosaic</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">ev</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Get the value of the clicked voxel and show it in the panel.&quot;&quot;&quot;</span>\n    <span class=\"n\">event_pos</span> <span class=\"o\">=</span> <span class=\"n\">show_m_mosaic</span><span class=\"o\">.</span><span class=\"n\">iren</span><span class=\"o\">.</span><span class=\"n\">GetEventPosition</span><span class=\"p\">()</span>\n\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">picker</span><span class=\"o\">.</span><span class=\"n\">Pick</span><span class=\"p\">(</span><span class=\"n\">event_pos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">event_pos</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scene</span><span class=\"p\">)</span>\n\n    <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">picker</span><span class=\"o\">.</span><span class=\"n\">GetPointIJK</span><span class=\"p\">()</span>\n    <span class=\"n\">result_position</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;(</span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">, </span><span class=\"si\">{}</span><span class=\"s1\">)&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">))</span>\n    <span class=\"n\">result_value</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%.8f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Now we need to create two nested for loops which will set the positions of\nthe grid of the mosaic and add the new actors to the scene. We are going\nto use 15 columns and 10 rows but you can adjust those with your datasets.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">Y</span><span class=\"p\">,</span> <span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">slice_actor</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"mi\">15</span>\n<span class=\"n\">border</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n<span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">cols</span><span class=\"p\">):</span>\n        <span class=\"n\">slice_mosaic</span> <span class=\"o\">=</span> <span class=\"n\">slice_actor</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">slice_mosaic</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cnt</span><span class=\"p\">)</span>\n        <span class=\"n\">slice_mosaic</span><span class=\"o\">.</span><span class=\"n\">SetPosition</span><span class=\"p\">((</span><span class=\"n\">X</span> <span class=\"o\">+</span> <span class=\"n\">border</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">i</span><span class=\"p\">,</span>\n                                 <span class=\"mf\">0.5</span> <span class=\"o\">*</span> <span class=\"n\">cols</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">Y</span> <span class=\"o\">+</span> <span class=\"n\">border</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">Y</span> <span class=\"o\">+</span> <span class=\"n\">border</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">j</span><span class=\"p\">,</span>\n                                 <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">slice_mosaic</span><span class=\"o\">.</span><span class=\"n\">SetInterpolate</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">slice_mosaic</span><span class=\"o\">.</span><span class=\"n\">AddObserver</span><span class=\"p\">(</span><span class=\"s1\">&#39;LeftButtonPressEvent&#39;</span><span class=\"p\">,</span>\n                                 <span class=\"n\">left_click_callback_mosaic</span><span class=\"p\">,</span>\n                                 <span class=\"mf\">1.0</span><span class=\"p\">)</span>\n        <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">slice_mosaic</span><span class=\"p\">)</span>\n        <span class=\"n\">cnt</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">cnt</span> <span class=\"o\">&gt;</span> <span class=\"n\">Z</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n    <span class=\"k\">if</span> <span class=\"n\">cnt</span> <span class=\"o\">&gt;</span> <span class=\"n\">Z</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">reset_camera</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># show_m_mosaic.ren.add(panel_picking)</span>\n<span class=\"c1\"># show_m_mosaic.start()</span>\n</pre></div>\n</div>\n<p>If you uncomment the two lines above, you will be able to move\nthe mosaic up/down and left/right using the middle mouse button drag,\nzoom in/out using the scroll wheel, and pick voxels with left click.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;mosaic.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">600</span><span class=\"p\">),</span>\n              <span class=\"n\">reset_camera</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<img alt=\"viz slice\" class=\"sphx-glr-single-img\" src=\"../../../_images/sphx_glr_viz_slice_003.png\" />\n<div class=\"figure align-center\" id=\"id3\">\n<img alt=\"examples_built/visualization/mosaic.png\" src=\"examples_built/visualization/mosaic.png\" />\n<p class=\"caption\"><span class=\"caption-text\">A mosaic of all the slices in the T1 volume.</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p class=\"sphx-glr-timing\"><strong>Total running time of the script:</strong> ( 0 minutes  3.765 seconds)</p>\n<div class=\"sphx-glr-footer class sphx-glr-footer-example docutils container\" id=\"sphx-glr-download-examples-built-visualization-viz-slice-py\">\n<div class=\"sphx-glr-download sphx-glr-download-python docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/96f542d2b40166035ad85d0ee0d58ec2/viz_slice.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Python</span> <span class=\"pre\">source</span> <span class=\"pre\">code:</span> <span class=\"pre\">viz_slice.py</span></code></a></p>\n</div>\n<div class=\"sphx-glr-download sphx-glr-download-jupyter docutils container\">\n<p><a class=\"reference download internal\" download=\"\" href=\"../../../_downloads/ca5eb71169bb034a6d980205253f29a5/viz_slice.ipynb\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">Download</span> <span class=\"pre\">Jupyter</span> <span class=\"pre\">notebook:</span> <span class=\"pre\">viz_slice.ipynb</span></code></a></p>\n</div>\n</div>\n<p class=\"sphx-glr-signature\"><a class=\"reference external\" href=\"https://sphinx-gallery.github.io\">Gallery generated by Sphinx-Gallery</a></p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/visualization/viz_slice.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Simple volume slicing</a><ul>\n<li><a class=\"reference internal\" href=\"#render-slices-from-t1-with-a-specific-value-range\">Render slices from T1 with a specific value range</a></li>\n<li><a class=\"reference internal\" href=\"#render-slices-from-fa-with-your-colormap\">Render slices from FA with your colormap</a></li>\n<li><a class=\"reference internal\" href=\"#create-a-mosaic\">Create a mosaic</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/visualization/viz_slice", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}