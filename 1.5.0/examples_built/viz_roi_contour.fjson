{"parents": [], "prev": null, "next": null, "title": "Visualization of ROI Surface Rendered with Streamlines", "meta": {}, "body": "<section id=\"visualization-of-roi-surface-rendered-with-streamlines\">\n<span id=\"example-viz-roi-contour\"></span><h1>Visualization of ROI Surface Rendered with Streamlines<a class=\"headerlink\" href=\"#visualization-of-roi-surface-rendered-with-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Here is a simple tutorial following the probabilistic CSA Tracking Example in\nwhich we generate a dataset of streamlines from a corpus callosum ROI, and\nthen display them with the seed ROI rendered in 3D with 50% transparency.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"kn\">import</span> <span class=\"n\">CsaOdfModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"kn\">import</span> <span class=\"n\">peaks_from_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"kn\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"kn\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">load_nifti_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.stopping_criterion</span> <span class=\"kn\">import</span> <span class=\"n\">ThresholdStoppingCriterion</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"kn\">import</span> <span class=\"n\">utils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local_tracking</span> <span class=\"kn\">import</span> <span class=\"n\">LocalTracking</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"kn\">import</span> <span class=\"n\">Streamlines</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">colormap</span> <span class=\"k\">as</span> <span class=\"n\">cmap</span>\n</pre></div>\n</div>\n<p>First, we need to generate some streamlines. For a more complete\ndescription of these steps, please refer to the CSA Probabilistic Tracking\nTutorial.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">label_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_labels&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">return_img</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">label_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n\n<span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">csa_model</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">csa_peaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">csa_model</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                             <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=</span><span class=\"mf\">.8</span><span class=\"p\">,</span>\n                             <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">,</span>\n                             <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n\n<span class=\"n\">stopping_criterion</span> <span class=\"o\">=</span> <span class=\"n\">ThresholdStoppingCriterion</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span><span class=\"p\">,</span> <span class=\"mf\">.25</span><span class=\"p\">)</span>\n\n<span class=\"n\">seed_mask</span> <span class=\"o\">=</span> <span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">seed_mask</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Initialization of LocalTracking. The computation happens in the next step.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"p\">,</span> <span class=\"n\">stopping_criterion</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span>\n                            <span class=\"n\">step_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compute streamlines and store as a list.</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We will create a streamline actor from the streamlines.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Next, we create a surface actor from the corpus callosum seed ROI. We\nprovide the ROI data, the affine, the color in [R,G,B], and the opacity as\na decimal between zero and one. Here, we set the color as blue/green with\n50% opacity.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">surface_opacity</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n<span class=\"n\">surface_color</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"n\">seedroi_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">contour_from_roi</span><span class=\"p\">(</span><span class=\"n\">seed_mask</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span>\n                                       <span class=\"n\">surface_color</span><span class=\"p\">,</span> <span class=\"n\">surface_opacity</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we initialize a \u2018\u2019Scene\u2019\u2019 object and add both actors\nto the rendering.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">streamlines_actor</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">seedroi_actor</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you uncomment the following line, the rendering will pop up in an\ninteractive window.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;contour_from_roi_tutorial.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1200</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id1\">\n<img alt=\"../../_images/contour_from_roi_tutorial.png\" src=\"../../_images/contour_from_roi_tutorial.png\" />\n<figcaption>\n<p><span class=\"caption-text\"><strong>A top view of corpus callosum streamlines with the blue transparent\nseed ROI in the center</strong>.</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"admonition-title\">Example source code</p>\n<p>You can download <a class=\"reference download internal\" download=\"\" href=\"../../_downloads/0896e48ac7e984a70152155e53a50c09/viz_roi_contour.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>. This same script is also included in the dipy source distribution under the <code class=\"file docutils literal notranslate\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/viz_roi_contour.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Visualization of ROI Surface Rendered with Streamlines</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/viz_roi_contour", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12"}