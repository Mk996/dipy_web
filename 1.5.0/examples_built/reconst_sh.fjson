{"parents": [], "prev": null, "next": null, "title": "Signal Reconstruction Using Spherical Harmonics", "meta": {}, "body": "<section id=\"signal-reconstruction-using-spherical-harmonics\">\n<span id=\"example-reconst-sh\"></span><h1>Signal Reconstruction Using Spherical Harmonics<a class=\"headerlink\" href=\"#signal-reconstruction-using-spherical-harmonics\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This example shows how you can use a spherical harmonics (SH) function to\nreconstruct any spherical function using <a class=\"reference external\" href=\"http://dipy.org\">DIPY</a>. In order to generate a\nsignal, we will need to generate an evenly distributed sphere.\nLet\u2019s import some standard packages.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.sphere</span> <span class=\"kn\">import</span> <span class=\"n\">disperse_charges</span><span class=\"p\">,</span> <span class=\"n\">Sphere</span><span class=\"p\">,</span> <span class=\"n\">HemiSphere</span>\n</pre></div>\n</div>\n<p>We can first create some random points on a <code class=\"docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code> using spherical\npolar coordinates.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">n_pts</span> <span class=\"o\">=</span> <span class=\"mi\">64</span>\n<span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n_pts</span><span class=\"p\">)</span>\n<span class=\"n\">phi</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"n\">n_pts</span><span class=\"p\">)</span>\n<span class=\"n\">hsph_initial</span> <span class=\"o\">=</span> <span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Next, we call <code class=\"docutils literal notranslate\"><span class=\"pre\">disperse_charges</span></code> which will iteratively move the points so\nthat the electrostatic potential energy is minimized. In <code class=\"docutils literal notranslate\"><span class=\"pre\">hsph_updated</span></code> we\nhave the updated <code class=\"docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code> with the points nicely distributed on the\nhemisphere.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">hsph_updated</span><span class=\"p\">,</span> <span class=\"n\">potential</span> <span class=\"o\">=</span> <span class=\"n\">disperse_charges</span><span class=\"p\">(</span><span class=\"n\">hsph_initial</span><span class=\"p\">,</span> <span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"n\">sphere</span> <span class=\"o\">=</span> <span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">vstack</span><span class=\"p\">((</span><span class=\"n\">hsph_updated</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">hsph_updated</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<p>We now need to create our initial signal. To do so, we will use our sphere\u2019s\nvertices as the sampled points of our spherical function (SF). We will\nuse <code class=\"docutils literal notranslate\"><span class=\"pre\">multi_tensor_odf</span></code> to simulate an ODF. For more information on how to use\n<a class=\"reference external\" href=\"http://dipy.org\">DIPY</a> to simulate a signal and ODF, see <a class=\"reference internal\" href=\"../simulate_multi_tensor/#example-simulate-multi-tensor\"><span class=\"std std-ref\">MultiTensor Simulation</span></a>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.sims.voxel</span> <span class=\"kn\">import</span> <span class=\"n\">multi_tensor_odf</span>\n\n<span class=\"n\">mevals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0015</span><span class=\"p\">,</span> <span class=\"mf\">0.00015</span><span class=\"p\">,</span> <span class=\"mf\">0.00015</span><span class=\"p\">],</span>\n                   <span class=\"p\">[</span><span class=\"mf\">0.0015</span><span class=\"p\">,</span> <span class=\"mf\">0.00015</span><span class=\"p\">,</span> <span class=\"mf\">0.00015</span><span class=\"p\">]])</span>\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"n\">odf</span> <span class=\"o\">=</span> <span class=\"n\">multi_tensor_odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">mevals</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">])</span>\n\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"kn\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span>\n\n<span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">SetBackground</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">odf_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">odf</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n<span class=\"n\">odf_actor</span><span class=\"o\">.</span><span class=\"n\">RotateX</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">odf_actor</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving illustration as symm_signal.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;symm_signal.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id2\">\n<img alt=\"../../_images/symm_signal.png\" src=\"../../_images/symm_signal.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Illustration of the simulated signal sampled on a sphere of 64 points\nper hemisphere</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>We can now express this signal as a series of SH coefficients using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sf_to_sh</span></code>. This function converts a series of SF coefficients in a series of\nSH coefficients. For more information on SH basis, see <a class=\"reference internal\" href=\"../../theory/sh_basis/#sh-basis\"><span class=\"std std-ref\">Spherical Harmonic bases</span></a>. For\nthis example, we will use the <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> basis up to a maximum SH order\nof 8.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"kn\">import</span> <span class=\"n\">sf_to_sh</span>\n\n<span class=\"c1\"># Change this value to try out other bases</span>\n<span class=\"n\">sh_basis</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;descoteaux07&#39;</span>\n<span class=\"c1\"># Change this value to try other maximum orders</span>\n<span class=\"n\">sh_order</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n\n<span class=\"n\">sh_coeffs</span> <span class=\"o\">=</span> <span class=\"n\">sf_to_sh</span><span class=\"p\">(</span><span class=\"n\">odf</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"p\">,</span> <span class=\"n\">sh_basis</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">sh_coeffs</span></code> is an array containing the SH coefficients multiplying the SH\nfunctions of the chosen basis. We can use it as input of <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_to_sf</span></code> to\nreconstruct our original signal. We will now reproject our signal on a high\nresolution sphere using <code class=\"docutils literal notranslate\"><span class=\"pre\">sh_to_sf</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"kn\">import</span> <span class=\"n\">get_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"kn\">import</span> <span class=\"n\">sh_to_sf</span>\n\n<span class=\"n\">high_res_sph</span> <span class=\"o\">=</span> <span class=\"n\">get_sphere</span><span class=\"p\">(</span><span class=\"s1\">&#39;symmetric724&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">subdivide</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">reconst</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">sh_coeffs</span><span class=\"p\">,</span> <span class=\"n\">high_res_sph</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"p\">,</span> <span class=\"n\">sh_basis</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">odf_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">reconst</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">high_res_sph</span><span class=\"p\">)</span>\n<span class=\"n\">odf_actor</span><span class=\"o\">.</span><span class=\"n\">RotateX</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">odf_actor</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving output as symm_reconst.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;symm_reconst.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id3\">\n<img alt=\"../../_images/symm_reconst.png\" src=\"../../_images/symm_reconst.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Reconstruction of a symmetric signal on a high resolution sphere using a\nsymmetric basis</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>While a symmetric SH basis works well for reconstructing symmetric SF, it fails\nto do so on asymmetric signals. We will now create such a signal by using a\ndifferent ODF for each hemisphere of our sphere.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">mevals</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.0015</span><span class=\"p\">,</span> <span class=\"mf\">0.0003</span><span class=\"p\">,</span> <span class=\"mf\">0.0003</span><span class=\"p\">]])</span>\n<span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)]</span>\n<span class=\"n\">odf2</span> <span class=\"o\">=</span> <span class=\"n\">multi_tensor_odf</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"p\">,</span> <span class=\"n\">mevals</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">])</span>\n\n<span class=\"n\">n_pts_hemisphere</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">sphere</span><span class=\"o\">.</span><span class=\"n\">vertices</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">asym_odf</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">odf</span><span class=\"p\">[:</span><span class=\"n\">n_pts_hemisphere</span><span class=\"p\">],</span> <span class=\"n\">odf2</span><span class=\"p\">[</span><span class=\"n\">n_pts_hemisphere</span><span class=\"p\">:])</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">odf_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">asym_odf</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">sphere</span><span class=\"p\">)</span>\n<span class=\"n\">odf_actor</span><span class=\"o\">.</span><span class=\"n\">RotateX</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">odf_actor</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving output as asym_signal.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;asym_signal.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id4\">\n<img alt=\"../../_images/asym_signal.png\" src=\"../../_images/asym_signal.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Illustration of an asymmetric signal sampled on a sphere of 64\npoints per hemisphere</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>Let\u2019s try to reconstruct this SF using a symmetric SH basis.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sh_coeffs</span> <span class=\"o\">=</span> <span class=\"n\">sf_to_sh</span><span class=\"p\">(</span><span class=\"n\">asym_odf</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"p\">,</span> <span class=\"n\">sh_basis</span><span class=\"p\">)</span>\n<span class=\"n\">reconst</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">sh_coeffs</span><span class=\"p\">,</span> <span class=\"n\">high_res_sph</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"p\">,</span> <span class=\"n\">sh_basis</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">odf_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">reconst</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">high_res_sph</span><span class=\"p\">)</span>\n<span class=\"n\">odf_actor</span><span class=\"o\">.</span><span class=\"n\">RotateX</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">odf_actor</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving output as asym_reconst.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;asym_reconst.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id5\">\n<img alt=\"../../_images/asym_reconst.png\" src=\"../../_images/asym_reconst.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Reconstruction of an asymmetric signal using a symmetric SH basis</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>As we can see, a symmetric basis fails to properly represent asymmetric SF.\nFortunately, <a class=\"reference external\" href=\"http://dipy.org\">DIPY</a> also implements full SH bases, which can deal with symmetric\nas well as asymmetric signals. For this tutorial, we will demonstrate it using\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> full SH basis by setting <code class=\"docutils literal notranslate\"><span class=\"pre\">full_basis=true</span></code>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sh_coeffs</span> <span class=\"o\">=</span> <span class=\"n\">sf_to_sh</span><span class=\"p\">(</span><span class=\"n\">asym_odf</span><span class=\"p\">,</span> <span class=\"n\">sphere</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"p\">,</span>\n                     <span class=\"n\">sh_basis</span><span class=\"p\">,</span> <span class=\"n\">full_basis</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">reconst</span> <span class=\"o\">=</span> <span class=\"n\">sh_to_sf</span><span class=\"p\">(</span><span class=\"n\">sh_coeffs</span><span class=\"p\">,</span> <span class=\"n\">high_res_sph</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"p\">,</span>\n                   <span class=\"n\">sh_basis</span><span class=\"p\">,</span> <span class=\"n\">full_basis</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"n\">odf_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">odf_slicer</span><span class=\"p\">(</span><span class=\"n\">reconst</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">sphere</span><span class=\"o\">=</span><span class=\"n\">high_res_sph</span><span class=\"p\">)</span>\n<span class=\"n\">odf_actor</span><span class=\"o\">.</span><span class=\"n\">RotateX</span><span class=\"p\">(</span><span class=\"mi\">90</span><span class=\"p\">)</span>\n<span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">odf_actor</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;Saving output as asym_reconst_full.png&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;asym_reconst_full.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">))</span>\n<span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<figure class=\"align-center\" id=\"id6\">\n<img alt=\"../../_images/asym_reconst_full.png\" src=\"../../_images/asym_reconst_full.png\" />\n<figcaption>\n<p><span class=\"caption-text\">Reconstruction of an asymmetric signal using a full SH basis</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this image\">\u00b6</a></p>\n</figcaption>\n</figure>\n<p>As we can see, a full SH basis properly reconstruct asymmetric signal.</p>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"admonition-title\">Example source code</p>\n<p>You can download <a class=\"reference download internal\" download=\"\" href=\"../../_downloads/9fcdfb2005a3e66acf9d3bb2dd27ebee/reconst_sh.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>. This same script is also included in the dipy source distribution under the <code class=\"file docutils literal notranslate\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</section>\n", "metatags": "<meta name=\"generator\" content=\"Docutils 0.17.1: http://docutils.sourceforge.net/\" />\n", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/reconst_sh.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Signal Reconstruction Using Spherical Harmonics</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".rst", "current_page_name": "examples_built/reconst_sh", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.12"}