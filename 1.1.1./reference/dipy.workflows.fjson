{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.viz/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">viz</span></code>"}, "next": {"link": "../../reference_cmd/", "title": "Command Line Utilities Reference"}, "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.workflows\">\n<span id=\"workflows\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.workflows.align\">\n<span id=\"module-workflows-align\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.align</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.align\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap\" title=\"dipy.workflows.align.AffineMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a>(affine[,\u00a0domain_grid_shape,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineRegistration\" title=\"dipy.workflows.align.AffineRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a>([metric,\u00a0level_iters,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineTransform3D\" title=\"dipy.workflows.align.AffineTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ApplyTransformFlow\" title=\"dipy.workflows.align.ApplyTransformFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ApplyTransformFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric\" title=\"dipy.workflows.align.CCMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a>(dim[,\u00a0sigma_diff,\u00a0radius])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap\" title=\"dipy.workflows.align.DiffeomorphicMap\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a>(dim,\u00a0disp_shape[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric\" title=\"dipy.workflows.align.EMMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a>(dim[,\u00a0smooth,\u00a0inner_iter,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow\" title=\"dipy.workflows.align.ImageRegistrationFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ImageRegistrationFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p>The registration workflow is organized as a collection of different functions.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric\" title=\"dipy.workflows.align.MutualInformationMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a>([nbins,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"dipy.workflows.align.ResliceFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.RigidTransform3D\" title=\"dipy.workflows.align.RigidTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric\" title=\"dipy.workflows.align.SSDMetric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a>(dim[,\u00a0smooth,\u00a0inner_iter,\u00a0step_type])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"dipy.workflows.align.SlrWithQbxFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a>(metric[,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SynRegistrationFlow\" title=\"dipy.workflows.align.SynRegistrationFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SynRegistrationFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.TranslationTransform3D\" title=\"dipy.workflows.align.TranslationTransform3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow\" title=\"dipy.workflows.align.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.check_dimensions\" title=\"dipy.workflows.align.check_dimensions\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">check_dimensions</span></code></a>(static,\u00a0moving)</p></td>\n<td><p>Check the dimensions of the input images.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.load_nifti\" title=\"dipy.workflows.align.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.reslice\" title=\"dipy.workflows.align.reslice\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reslice</span></code></a>(data,\u00a0affine,\u00a0zooms,\u00a0new_zooms[,\u00a0\u2026])</p></td>\n<td><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.save_nifti\" title=\"dipy.workflows.align.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.save_qa_metric\" title=\"dipy.workflows.align.save_qa_metric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_qa_metric</span></code></a>(fname,\u00a0xopt,\u00a0fopt)</p></td>\n<td><p>Save Quality Assurance metrics.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.slr_with_qbx\" title=\"dipy.workflows.align.slr_with_qbx\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slr_with_qbx</span></code></a>(static,\u00a0moving[,\u00a0x0,\u00a0\u2026])</p></td>\n<td><p>Utility function for registering large tractograms.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.transform_centers_of_mass\" title=\"dipy.workflows.align.transform_centers_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_centers_of_mass</span></code></a>(static,\u00a0\u2026)</p></td>\n<td><p>Transformation to align the center of mass of the input images.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.transform_streamlines\" title=\"dipy.workflows.align.transform_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_streamlines</span></code></a>(streamlines,\u00a0mat[,\u00a0\u2026])</p></td>\n<td><p>Apply affine transformation to streamlines</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.base\">\n<span id=\"module-workflows-base\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.base</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.base\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"dipy.workflows.base.IntrospectiveArgumentParser\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a>([prog,\u00a0usage,\u00a0\u2026])</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"dipy.workflows.base.NumpyDocString\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a>(docstring[,\u00a0config])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.base.get_args_default\" title=\"dipy.workflows.base.get_args_default\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_args_default</span></code></a>(func)</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.combined_workflow\">\n<span id=\"module-workflows-combined-workflow\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.combined_workflow</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.combined_workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"dipy.workflows.combined_workflow.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.denoise\">\n<span id=\"module-workflows-denoise\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.denoise</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.denoise\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.GibbsRingingFlow\" title=\"dipy.workflows.denoise.GibbsRingingFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GibbsRingingFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.LPCAFlow\" title=\"dipy.workflows.denoise.LPCAFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LPCAFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.MPPCAFlow\" title=\"dipy.workflows.denoise.MPPCAFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MPPCAFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"dipy.workflows.denoise.NLMeansFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow\" title=\"dipy.workflows.denoise.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.estimate_sigma\" title=\"dipy.workflows.denoise.estimate_sigma\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">estimate_sigma</span></code></a>(arr[,\u00a0\u2026])</p></td>\n<td><p>Standard deviation estimation from local patches</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.gibbs_removal\" title=\"dipy.workflows.denoise.gibbs_removal\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gibbs_removal</span></code></a>(vol[,\u00a0slice_axis,\u00a0n_points])</p></td>\n<td><p>Suppresses Gibbs ringing artefacts of images volumes.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.gradient_table\" title=\"dipy.workflows.denoise.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a>(bvals[,\u00a0bvecs,\u00a0big_delta,\u00a0\u2026])</p></td>\n<td><p>A general function for creating diffusion MR gradients.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.load_nifti\" title=\"dipy.workflows.denoise.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.localpca\" title=\"dipy.workflows.denoise.localpca\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">localpca</span></code></a>(arr,\u00a0sigma[,\u00a0mask,\u00a0patch_radius,\u00a0\u2026])</p></td>\n<td><p>Performs local PCA denoising according to Manjon et al.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.mppca\" title=\"dipy.workflows.denoise.mppca\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mppca</span></code></a>(arr[,\u00a0mask,\u00a0patch_radius,\u00a0pca_method,\u00a0\u2026])</p></td>\n<td><p>Performs PCA-based denoising using the Marcenko-Pastur distribution <a class=\"reference internal\" href=\"#r78990d02ca6e-1\" id=\"id1\">[1]</a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.nlmeans\" title=\"dipy.workflows.denoise.nlmeans\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nlmeans</span></code></a>(arr,\u00a0sigma[,\u00a0mask,\u00a0patch_radius,\u00a0\u2026])</p></td>\n<td><p>Non-local means for denoising 3D and 4D images</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.pca_noise_estimate\" title=\"dipy.workflows.denoise.pca_noise_estimate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">pca_noise_estimate</span></code></a>()</p></td>\n<td><p>PCA based local noise estimation.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.read_bvals_bvecs\" title=\"dipy.workflows.denoise.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,\u00a0fbvecs)</p></td>\n<td><p>Read b-values and b-vectors from disk</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.save_nifti\" title=\"dipy.workflows.denoise.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.docstring_parser\">\n<span id=\"module-workflows-docstring-parser\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.docstring_parser</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.docstring_parser\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This was taken directly from the file docscrape.py of numpydoc package.</p>\n<p>Copyright (C) 2008 Stefan van der Walt &lt;<a class=\"reference external\" href=\"mailto:stefan&#37;&#52;&#48;mentat&#46;za&#46;net\">stefan<span>&#64;</span>mentat<span>&#46;</span>za<span>&#46;</span>net</a>&gt;,\nPauli Virtanen &lt;<a class=\"reference external\" href=\"mailto:pav&#37;&#52;&#48;iki&#46;fi\">pav<span>&#64;</span>iki<span>&#46;</span>fi</a>&gt;</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</p></li>\n<li><p>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</p></li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id2\"><span class=\"problematic\" id=\"id3\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"dipy.workflows.docstring_parser.NumpyDocString\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a>(docstring[,\u00a0config])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"dipy.workflows.docstring_parser.Reader\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a>(data)</p></td>\n<td><p>A line-based string reader.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.dedent_lines\" title=\"dipy.workflows.docstring_parser.dedent_lines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dedent_lines</span></code></a>(lines)</p></td>\n<td><p>Deindent a list of lines maximally</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.warn\" title=\"dipy.workflows.docstring_parser.warn\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warn</span></code></a>(message[,\u00a0category,\u00a0stacklevel,\u00a0source])</p></td>\n<td><p>Issue a warning, or maybe ignore it or raise an exception.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.flow_runner\">\n<span id=\"module-workflows-flow-runner\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.flow_runner</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.flow_runner\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a>([prog,\u00a0usage,\u00a0\u2026])</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.get_level\" title=\"dipy.workflows.flow_runner.get_level\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_level</span></code></a>(lvl)</p></td>\n<td><p>Transforms the logging level passed on the commandline into a proper logging level name.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.run_flow\" title=\"dipy.workflows.flow_runner.run_flow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run_flow</span></code></a>(flow)</p></td>\n<td><p>Wraps the process of building an argparser that reflects the workflow that we want to run along with some generic parameters like logging, force and output strategies.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.io\">\n<span id=\"module-workflows-io\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.io</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.io\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.FetchFlow\" title=\"dipy.workflows.io.FetchFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">FetchFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"dipy.workflows.io.IoInfoFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.SplitFlow\" title=\"dipy.workflows.io.SplitFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SplitFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow\" title=\"dipy.workflows.io.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.getfullargspec\" title=\"dipy.workflows.io.getfullargspec\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">getfullargspec</span></code></a>(func)</p></td>\n<td><p>Get the names and default values of a callable object\u2019s parameters.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.getmembers\" title=\"dipy.workflows.io.getmembers\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">getmembers</span></code></a>(object[,\u00a0predicate])</p></td>\n<td><p>Return all members of an object as (name, value) pairs sorted by name.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.isfunction\" title=\"dipy.workflows.io.isfunction\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">isfunction</span></code></a>(object)</p></td>\n<td><p>Return true if the object is a user-defined function.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.load_nifti\" title=\"dipy.workflows.io.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.save_nifti\" title=\"dipy.workflows.io.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.mask\">\n<span id=\"module-workflows-mask\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.mask</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.mask\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"dipy.workflows.mask.MaskFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow\" title=\"dipy.workflows.mask.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.load_nifti\" title=\"dipy.workflows.mask.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.save_nifti\" title=\"dipy.workflows.mask.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.multi_io\">\n<span id=\"module-workflows-multi-io\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.multi_io</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.multi_io\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"dipy.workflows.multi_io.IOIterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a>([output_strategy,\u00a0mix_names])</p></td>\n<td><p>Create output filenames that work nicely with multiple input files from multiple directories (processing multiple subjects with one command)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.basename_without_extension\" title=\"dipy.workflows.multi_io.basename_without_extension\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">basename_without_extension</span></code></a>(fname)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.common_start\" title=\"dipy.workflows.multi_io.common_start\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">common_start</span></code></a>(sa,\u00a0sb)</p></td>\n<td><p>Return the longest common substring from the beginning of sa and sb.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.concatenate_inputs\" title=\"dipy.workflows.multi_io.concatenate_inputs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">concatenate_inputs</span></code></a>(multi_inputs)</p></td>\n<td><p>Concatenate list of inputs</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.connect_output_paths\" title=\"dipy.workflows.multi_io.connect_output_paths\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">connect_output_paths</span></code></a>(inputs,\u00a0out_dir,\u00a0out_files)</p></td>\n<td><p>Generates a list of output files paths based on input files and output strategies.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.get_args_default\" title=\"dipy.workflows.multi_io.get_args_default\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_args_default</span></code></a>(func)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.glob\" title=\"dipy.workflows.multi_io.glob\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">glob</span></code></a>(pathname,\u00a0\\*[,\u00a0recursive])</p></td>\n<td><p>Return a list of paths matching a pathname pattern.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.io_iterator\" title=\"dipy.workflows.multi_io.io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator</span></code></a>(inputs,\u00a0out_dir,\u00a0fnames[,\u00a0\u2026])</p></td>\n<td><p>Creates an IOIterator from the parameters.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.io_iterator_\" title=\"dipy.workflows.multi_io.io_iterator_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator_</span></code></a>(frame,\u00a0fnc[,\u00a0output_strategy,\u00a0\u2026])</p></td>\n<td><p>Creates an IOIterator using introspection.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.slash_to_under\" title=\"dipy.workflows.multi_io.slash_to_under\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slash_to_under</span></code></a>(dir_str)</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.reconst\">\n<span id=\"module-workflows-reconst\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.reconst</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.reconst\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a>(gtab,\u00a0response)</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"dipy.workflows.reconst.CsaOdfModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a>(gtab,\u00a0sh_order[,\u00a0smooth,\u00a0\u2026])</p></td>\n<td><p>Implementation of Constant Solid Angle reconstruction method.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a>(gtab[,\u00a0fit_method])</p></td>\n<td><p>Class for the Diffusion Kurtosis Model</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"dipy.workflows.reconst.ReconstCSAFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"dipy.workflows.reconst.ReconstCSDFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"dipy.workflows.reconst.ReconstDkiFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"dipy.workflows.reconst.ReconstDtiFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstIvimFlow\" title=\"dipy.workflows.reconst.ReconstIvimFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstIvimFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"dipy.workflows.reconst.TensorModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a>(gtab[,\u00a0fit_method,\u00a0return_S0_hat])</p></td>\n<td><p>Diffusion Tensor</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow\" title=\"dipy.workflows.reconst.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.IvimModel\" title=\"dipy.workflows.reconst.IvimModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">IvimModel</span></code></a>(gtab[,\u00a0fit_method])</p></td>\n<td><p>Selector function to switch between the 2-stage Trust-Region Reflective based NLLS fitting method (also containing the linear fit): <cite>trr</cite> and the Variable Projections based fitting method: <cite>varpro</cite>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.auto_response\" title=\"dipy.workflows.reconst.auto_response\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_response</span></code></a>(gtab,\u00a0data[,\u00a0roi_center,\u00a0\u2026])</p></td>\n<td><p>Automatic estimation of response function using FA.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.axial_diffusivity\" title=\"dipy.workflows.reconst.axial_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">axial_diffusivity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Axial Diffusivity (AD) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.color_fa\" title=\"dipy.workflows.reconst.color_fa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">color_fa</span></code></a>(fa,\u00a0evecs)</p></td>\n<td><p>Color fractional anisotropy of diffusion tensor</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.fractional_anisotropy\" title=\"dipy.workflows.reconst.fractional_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fractional_anisotropy</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Fractional anisotropy (FA) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.geodesic_anisotropy\" title=\"dipy.workflows.reconst.geodesic_anisotropy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">geodesic_anisotropy</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Geodesic anisotropy (GA) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.get_mode\" title=\"dipy.workflows.reconst.get_mode\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_mode</span></code></a>(q_form)</p></td>\n<td><p>Mode (MO) of a diffusion tensor <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id4\">[1]</a>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.gradient_table\" title=\"dipy.workflows.reconst.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a>(bvals[,\u00a0bvecs,\u00a0big_delta,\u00a0\u2026])</p></td>\n<td><p>A general function for creating diffusion MR gradients.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.literal_eval\" title=\"dipy.workflows.reconst.literal_eval\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">literal_eval</span></code></a>(node_or_string)</p></td>\n<td><p>Safely evaluate an expression node or a string containing a Python expression.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.load_nifti\" title=\"dipy.workflows.reconst.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.load_nifti_data\" title=\"dipy.workflows.reconst.load_nifti_data\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></a>(fname[,\u00a0as_ndarray])</p></td>\n<td><p>Load only the data array from a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.lower_triangular\" title=\"dipy.workflows.reconst.lower_triangular\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lower_triangular</span></code></a>(tensor[,\u00a0b0])</p></td>\n<td><p>Returns the six lower triangular values of the tensor and a dummy variable if b0 is not None</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.mean_diffusivity\" title=\"dipy.workflows.reconst.mean_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mean_diffusivity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Mean Diffusivity (MD) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.nifti1_symmat\" title=\"dipy.workflows.reconst.nifti1_symmat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nifti1_symmat</span></code></a>(image_data,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Returns a Nifti1Image with a symmetric matrix intent</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.peaks_from_model\" title=\"dipy.workflows.reconst.peaks_from_model\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code></a>(model,\u00a0data,\u00a0sphere,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Fit the model to data and computes peaks and metrics</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.peaks_to_niftis\" title=\"dipy.workflows.reconst.peaks_to_niftis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peaks_to_niftis</span></code></a>(pam,\u00a0fname_shm,\u00a0fname_dirs,\u00a0\u2026)</p></td>\n<td><p>Save SH, directions, indices and values of peaks to Nifti.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.radial_diffusivity\" title=\"dipy.workflows.reconst.radial_diffusivity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">radial_diffusivity</span></code></a>(evals[,\u00a0axis])</p></td>\n<td><p>Radial Diffusivity (RD) of a diffusion tensor.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.read_bvals_bvecs\" title=\"dipy.workflows.reconst.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,\u00a0fbvecs)</p></td>\n<td><p>Read b-values and b-vectors from disk</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.save_nifti\" title=\"dipy.workflows.reconst.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.save_peaks\" title=\"dipy.workflows.reconst.save_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_peaks</span></code></a>(fname,\u00a0pam[,\u00a0affine,\u00a0verbose])</p></td>\n<td><p>Save all important attributes of object PeaksAndMetrics in a PAM5 file (HDF5).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.split_dki_param\" title=\"dipy.workflows.reconst.split_dki_param\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">split_dki_param</span></code></a>(dki_params)</p></td>\n<td><p>Extract the diffusion tensor eigenvalues, the diffusion tensor eigenvector matrix, and the 15 independent elements of the kurtosis tensor from the model parameters estimated from the DKI model</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.warn\" title=\"dipy.workflows.reconst.warn\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warn</span></code></a>(message[,\u00a0category,\u00a0stacklevel,\u00a0source])</p></td>\n<td><p>Issue a warning, or maybe ignore it or raise an exception.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.segment\">\n<span id=\"module-workflows-segment\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.segment</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.segment\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"dipy.workflows.segment.LabelsBundlesFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"dipy.workflows.segment.MedianOtsuFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"dipy.workflows.segment.RecoBundles\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a>(streamlines[,\u00a0greater_than,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"dipy.workflows.segment.RecoBundlesFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow\" title=\"dipy.workflows.segment.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.load_nifti\" title=\"dipy.workflows.segment.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.median_otsu\" title=\"dipy.workflows.segment.median_otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">median_otsu</span></code></a>(input_volume[,\u00a0vol_idx,\u00a0\u2026])</p></td>\n<td><p>Simple brain extraction tool method for images from DWI data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.save_nifti\" title=\"dipy.workflows.segment.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.time\" title=\"dipy.workflows.segment.time\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">time</span></code></a>()</p></td>\n<td><p>Return the current time in seconds since the Epoch.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.stats\">\n<span id=\"module-workflows-stats\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.stats</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.stats\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow\" title=\"dipy.workflows.stats.BundleAnalysisPopulationFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BundleAnalysisPopulationFlow</span></code></a>([\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow\" title=\"dipy.workflows.stats.LinearMixedModelsFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LinearMixedModelsFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"dipy.workflows.stats.SNRinCCFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel\" title=\"dipy.workflows.stats.TensorModel\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a>(gtab[,\u00a0fit_method,\u00a0return_S0_hat])</p></td>\n<td><p>Diffusion Tensor</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow\" title=\"dipy.workflows.stats.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.binary_dilation\" title=\"dipy.workflows.stats.binary_dilation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_dilation</span></code></a>(input[,\u00a0structure,\u00a0\u2026])</p></td>\n<td><p>Multi-dimensional binary dilation with the given structuring element.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.bounding_box\" title=\"dipy.workflows.stats.bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bounding_box</span></code></a>(vol)</p></td>\n<td><p>Compute the bounding box of nonzero intensity voxels in the volume.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.bundle_analysis\" title=\"dipy.workflows.stats.bundle_analysis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bundle_analysis</span></code></a>(model_bundle_folder,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Applies statistical analysis on bundles and saves the results in a directory specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.gradient_table\" title=\"dipy.workflows.stats.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a>(bvals[,\u00a0bvecs,\u00a0big_delta,\u00a0\u2026])</p></td>\n<td><p>A general function for creating diffusion MR gradients.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.load_nifti\" title=\"dipy.workflows.stats.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.median_otsu\" title=\"dipy.workflows.stats.median_otsu\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">median_otsu</span></code></a>(input_volume[,\u00a0vol_idx,\u00a0\u2026])</p></td>\n<td><p>Simple brain extraction tool method for images from DWI data.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.optional_package\" title=\"dipy.workflows.stats.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,\u00a0trip_msg])</p></td>\n<td><p>Return package-like thing and module setup for package <cite>name</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.read_bvals_bvecs\" title=\"dipy.workflows.stats.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,\u00a0fbvecs)</p></td>\n<td><p>Read b-values and b-vectors from disk</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.save_nifti\" title=\"dipy.workflows.stats.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.segment_from_cfa\" title=\"dipy.workflows.stats.segment_from_cfa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">segment_from_cfa</span></code></a>(tensor_fit,\u00a0roi,\u00a0threshold)</p></td>\n<td><p>Segment the cfa inside roi using the values from threshold as bounds.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.simple_plot\" title=\"dipy.workflows.stats.simple_plot\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">simple_plot</span></code></a>(file_name,\u00a0title,\u00a0x,\u00a0y,\u00a0xlabel,\u00a0\u2026)</p></td>\n<td><p>Saves the simple plot with given x and y values</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.tracking\">\n<span id=\"module-workflows-tracking\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.tracking</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.tracking\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.BinaryStoppingCriterion\" title=\"dipy.workflows.tracking.BinaryStoppingCriterion\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">BinaryStoppingCriterion</span></code></a></p></td>\n<td><p>cdef:</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ClosestPeakDirectionGetter\" title=\"dipy.workflows.tracking.ClosestPeakDirectionGetter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ClosestPeakDirectionGetter</span></code></a></p></td>\n<td><p>A direction getter that returns the closest odf peak to previous tracking direction.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.CmcStoppingCriterion\" title=\"dipy.workflows.tracking.CmcStoppingCriterion\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">CmcStoppingCriterion</span></code></a></p></td>\n<td><p>Continuous map criterion (CMC) stopping criterion from <a class=\"reference internal\" href=\"#r835b9b2babc4-1\" id=\"id5\"><span>[R835b9b2babc4-1]</span></a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a></p></td>\n<td><p>Return direction of a sphere with the highest probability mass function (pmf).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow\" title=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LocalFiberTrackingPAMFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"dipy.workflows.tracking.LocalTracking\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a>(direction_getter,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow\" title=\"dipy.workflows.tracking.PFTrackingPAMFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">PFTrackingPAMFlow</span></code></a>([output_strategy,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ParticleFilteringTracking\" title=\"dipy.workflows.tracking.ParticleFilteringTracking\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ParticleFilteringTracking</span></code></a>(direction_getter,\u00a0\u2026)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ProbabilisticDirectionGetter\" title=\"dipy.workflows.tracking.ProbabilisticDirectionGetter\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ProbabilisticDirectionGetter</span></code></a></p></td>\n<td><p>Randomly samples direction of a sphere based on probability mass function (pmf).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Space\" title=\"dipy.workflows.tracking.Space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Space</span></code></a></p></td>\n<td><p>Enum to simplify future change to convention</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram\" title=\"dipy.workflows.tracking.StatefulTractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a>(streamlines,\u00a0reference,\u00a0space)</p></td>\n<td><p>Class for stateful representation of collections of streamlines Object designed to be identical no matter the file format (trk, tck, vtk, fib, dpy).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ThresholdStoppingCriterion\" title=\"dipy.workflows.tracking.ThresholdStoppingCriterion\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ThresholdStoppingCriterion</span></code></a></p></td>\n<td><p># Declarations from stopping_criterion.pxd bellow cdef:     double threshold, interp_out_double[1]     double[:]  interp_out_view = interp_out_view     double[:, :, :] metric_map</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow\" title=\"dipy.workflows.tracking.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.load_nifti\" title=\"dipy.workflows.tracking.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.load_peaks\" title=\"dipy.workflows.tracking.load_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_peaks</span></code></a>(fname[,\u00a0verbose])</p></td>\n<td><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.save_tractogram\" title=\"dipy.workflows.tracking.save_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_tractogram</span></code></a>(sft,\u00a0filename[,\u00a0\u2026])</p></td>\n<td><p>Save the stateful tractogram in any format (trk, tck, vtk, fib, dpy)</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.viz\">\n<span id=\"module-workflows-viz\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.viz</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.viz\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.HorizonFlow\" title=\"dipy.workflows.viz.HorizonFlow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">HorizonFlow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow\" title=\"dipy.workflows.viz.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.create_nifti_header\" title=\"dipy.workflows.viz.create_nifti_header\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_nifti_header</span></code></a>(affine,\u00a0dimensions,\u00a0\u2026)</p></td>\n<td><p>Write a standard nifti header from spatial attribute</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.horizon\" title=\"dipy.workflows.viz.horizon\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">horizon</span></code></a>([tractograms,\u00a0images,\u00a0pams,\u00a0\u2026])</p></td>\n<td><p>Interactive medical visualization - Invert the Horizon!</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.load_nifti\" title=\"dipy.workflows.viz.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.load_peaks\" title=\"dipy.workflows.viz.load_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_peaks</span></code></a>(fname[,\u00a0verbose])</p></td>\n<td><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.load_tractogram\" title=\"dipy.workflows.viz.load_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_tractogram</span></code></a>(filename,\u00a0reference[,\u00a0\u2026])</p></td>\n<td><p>Load the stateful tractogram from any format (trk, tck, vtk, fib, dpy)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.pjoin\" title=\"dipy.workflows.viz.pjoin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">pjoin</span></code></a>(a,\u00a0\\*p)</p></td>\n<td><p>Join two or more pathname components, inserting \u2018/\u2019 as needed.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.workflows.workflow\">\n<span id=\"module-workflows-workflow\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.workflow</span></code><a class=\"headerlink\" href=\"#module-dipy.workflows.workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a>([output_strategy,\u00a0mix_names,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.workflow.io_iterator_\" title=\"dipy.workflows.workflow.io_iterator_\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">io_iterator_</span></code></a>(frame,\u00a0fnc[,\u00a0output_strategy,\u00a0\u2026])</p></td>\n<td><p>Creates an IOIterator using introspection.</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"affinemap\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap\" title=\"dipy.workflows.align.AffineMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a><a class=\"headerlink\" href=\"#affinemap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.AffineMap\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">AffineMap</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">domain_grid_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_grid_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap.get_affine\" title=\"dipy.workflows.align.AffineMap.get_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code></a>(self)</p></td>\n<td><p>Return the value of the transformation, not a reference.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap.set_affine\" title=\"dipy.workflows.align.AffineMap.set_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_affine</span></code></a>(self,\u00a0affine)</p></td>\n<td><p>Set the affine transform (operating in physical space).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap.transform\" title=\"dipy.workflows.align.AffineMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(self,\u00a0image[,\u00a0interp,\u00a0\u2026])</p></td>\n<td><p>Transform the input image from co-domain to domain space.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineMap.transform_inverse\" title=\"dipy.workflows.align.AffineMap.transform_inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_inverse</span></code></a>(self,\u00a0image[,\u00a0interp,\u00a0\u2026])</p></td>\n<td><p>Transform the input image from domain to co-domain space.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">domain_grid_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_grid_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>AffineMap</p>\n<p>Implements an affine transformation whose domain is given by\n<cite>domain_grid</cite> and <cite>domain_grid2world</cite>, and whose co-domain is\ngiven by <cite>codomain_grid</cite> and <cite>codomain_grid2world</cite>.</p>\n<p>The actual transform is represented by the <cite>affine</cite> matrix, which\noperate in world coordinates. Therefore, to transform a moving image\ntowards a static image, we first map each voxel (i,j,k) of the static\nimage to world coordinates (x,y,z) by applying <cite>domain_grid2world</cite>.\nThen we apply the <cite>affine</cite> transform to (x,y,z) obtaining (x\u2019, y\u2019, z\u2019)\nin moving image\u2019s world coordinates. Finally, (x\u2019, y\u2019, z\u2019) is mapped\nto voxel coordinates (i\u2019, j\u2019, k\u2019) in the moving image by multiplying\n(x\u2019, y\u2019, z\u2019) by the inverse of <cite>codomain_grid2world</cite>. The\n<cite>codomain_grid_shape</cite> is used analogously to transform the static\nimage towards the moving image when calling <cite>transform_inverse</cite>.</p>\n<p>If the domain/co-domain information is not provided (None) then the\nsampling information needs to be specified each time the <cite>transform</cite>\nor <cite>transform_inverse</cite> is called to transform images. Note that such\nsampling information is not necessary to transform points defined in\nphysical space, such as stream lines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the matrix defining the affine transform, where <cite>dim</cite> is the\ndimension of the space this map operates in (2 for 2D images,\n3 for 3D images). If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n<dt><strong>domain_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the default domain sampling grid. When <cite>transform</cite>\nis called to transform an image, the resulting image will have\nthis shape, unless a different sampling information is provided.\nIf None, then the sampling grid shape must be specified each time\nthe <cite>transform</cite> method is called.</p>\n</dd>\n<dt><strong>domain_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>codomain_grid_shape</strong><span class=\"classifier\">sequence of integers, shape (dim,)</span></dt><dd><p>the shape of the default co-domain sampling grid. When\n<cite>transform_inverse</cite> is called to transform an image, the resulting\nimage will have this shape, unless a different sampling\ninformation is provided. If None (the default), then the sampling\ngrid shape must be specified each time the <cite>transform_inverse</cite>\nmethod is called.</p>\n</dd>\n<dt><strong>codomain_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the grid-to-world transform associated with the co-domain grid.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.get_affine\">\n<code class=\"sig-name descname\">get_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.get_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the value of the transformation, not a reference.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Copy of the transform, not a reference.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.set_affine\">\n<code class=\"sig-name descname\">set_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.set_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Set the affine transform (operating in physical space).</p>\n<p>Also sets <cite>self.affine_inv</cite> - the inverse of <cite>affine</cite>, or None if\nthere is no inverse.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1)</span></dt><dd><p>the matrix representing the affine transform operating in\nphysical space. The domain and co-domain information\nremains unchanged. If None, then <cite>self</cite> represents the identity\ntransformation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.transform\">\n<code class=\"sig-name descname\">transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">image</em>, <em class=\"sig-param\">interp='linear'</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">sampling_grid_shape=None</em>, <em class=\"sig-param\">sampling_grid2world=None</em>, <em class=\"sig-param\">resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform the input image from co-domain to domain space.</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.domain_shape</cite> and <cite>self.domain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be transformed</p>\n</dd>\n<dt><strong>interp</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>sampling_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt><strong>sampling_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt><strong>resample_only</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>transformed</strong><span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt><dd><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineMap.transform_inverse\">\n<code class=\"sig-name descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">image</em>, <em class=\"sig-param\">interp='linear'</em>, <em class=\"sig-param\">image_grid2world=None</em>, <em class=\"sig-param\">sampling_grid_shape=None</em>, <em class=\"sig-param\">sampling_grid2world=None</em>, <em class=\"sig-param\">resample_only=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transform the input image from domain to co-domain space.</p>\n<p>By default, the transformed image is sampled at a grid defined by\n<cite>self.codomain_shape</cite> and <cite>self.codomain_grid2world</cite>. If such\ninformation was not provided then <cite>sampling_grid_shape</cite> is mandatory.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be transformed</p>\n</dd>\n<dt><strong>interp</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with <cite>image</cite>.\nIf None (the default), then the grid-to-world transform is assumed\nto be the identity.</p>\n</dd>\n<dt><strong>sampling_grid_shape</strong><span class=\"classifier\">sequence, shape (dim,), optional</span></dt><dd><p>the shape of the grid where the transformed image must be sampled.\nIf None (the default), then <cite>self.codomain_shape</cite> is used instead\n(which must have been set at initialization, otherwise an exception\nwill be raised).</p>\n</dd>\n<dt><strong>sampling_grid2world</strong><span class=\"classifier\">array, shape (dim + 1, dim + 1), optional</span></dt><dd><p>the grid-to-world transform associated with the sampling grid\n(specified by <cite>sampling_grid_shape</cite>, or by default\n<cite>self.codomain_shape</cite>). If None (the default), then the\ngrid-to-world transform is assumed to be the identity.</p>\n</dd>\n<dt><strong>resample_only</strong><span class=\"classifier\">Boolean, optional</span></dt><dd><p>If False (the default) the affine transform is applied normally.\nIf True, then the affine transform is not applied, and the input\nimage is just re-sampled on the domain grid of this transform.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>transformed</strong><span class=\"classifier\">array, shape <cite>sampling_grid_shape</cite> or</span></dt><dd><blockquote>\n<div><p><cite>self.codomain_shape</cite></p>\n</div></blockquote>\n<p>the transformed image, sampled at the requested grid</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affineregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineRegistration\" title=\"dipy.workflows.align.AffineRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a><a class=\"headerlink\" href=\"#affineregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.AffineRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">AffineRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">sigmas=None</em>, <em class=\"sig-param\">factors=None</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">ss_sigma_factor=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineRegistration.optimize\" title=\"dipy.workflows.align.AffineRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(self,\u00a0static,\u00a0moving,\u00a0transform,\u00a0\u2026)</p></td>\n<td><p>Start the optimization process.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">metric=None</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">sigmas=None</em>, <em class=\"sig-param\">factors=None</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">ss_sigma_factor=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">verbosity=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an instance of the AffineRegistration class.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>metric</strong><span class=\"classifier\">None or object, optional</span></dt><dd><p>an instance of a metric. The default is None, implying\nthe Mutual Information metric with default settings.</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>the number of iterations at each scale of the scale space.\n<cite>level_iters[0]</cite> corresponds to the coarsest scale,\n<cite>level_iters[-1]</cite> the finest, where n is the length of the\nsequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</dd>\n<dt><strong>sigmas</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>custom smoothing parameter to build the scale space (one parameter\nfor each scale). By default, the sequence of sigmas will be\n[3, 1, 0].</p>\n</dd>\n<dt><strong>factors</strong><span class=\"classifier\">sequence of floats, optional</span></dt><dd><p>custom scale factors to build the scale space (one factor for each\nscale). By default, the sequence of factors will be [4, 2, 1].</p>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">string, optional</span></dt><dd><p>optimization method to be used. If Scipy version &lt; 0.12, then\nonly L-BFGS-B is available. Otherwise, <cite>method</cite> can be any\ngradient-based method available in <cite>dipy.core.Optimize</cite>: CG, BFGS,\nNewton-CG, dogleg or trust-ncg.\nThe default is \u2018L-BFGS-B\u2019.</p>\n</dd>\n<dt><strong>ss_sigma_factor</strong><span class=\"classifier\">float, optional</span></dt><dd><p>If None, this parameter is not used and an isotropic scale\nspace with the given <cite>factors</cite> and <cite>sigmas</cite> will be built.\nIf not None, an anisotropic scale space will be used by\nautomatically selecting the smoothing sigmas along each axis\naccording to the voxel dimensions of the given image.\nThe <cite>ss_sigma_factor</cite> is used to scale the automatically computed\nsigmas. For example, in the isotropic case, the sigma of the\nkernel will be <span class=\"math notranslate nohighlight\">\\(factor * (2 ^ i)\\)</span> where\n<span class=\"math notranslate nohighlight\">\\(i = 1, 2, ..., n_scales - 1\\)</span> is the scale (the finest resolution\nimage <span class=\"math notranslate nohighlight\">\\(i=0\\)</span> is never smoothed). The default is None.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>extra optimization options. The default is None, implying\nno extra options are passed to the optimizer.</p>\n</dd>\n<dt><strong>verbosity: int (one of {0, 1, 2, 3}), optional</strong></dt><dd><p>Set the verbosity level of the algorithm:\n0 : do not print anything\n1 : print information about the current status of the algorithm\n2 : print high level information of the components involved in</p>\n<blockquote>\n<div><p>the registration that can be used to detect a failing\ncomponent.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>3<span class=\"classifier\">print as much information as possible to isolate the cause</span></dt><dd><p>of a bug.</p>\n</dd>\n</dl>\n<p>Default: 1</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.align.AffineRegistration.docstring_addendum\">\n<code class=\"sig-name descname\">docstring_addendum</code><em class=\"property\"> = 'verbosity: int (one of {0, 1, 2, 3}), optional\\n            Set the verbosity level of the algorithm:\\n            0 : do not print anything\\n            1 : print information about the current status of the algorithm\\n            2 : print high level information of the components involved in\\n                the registration that can be used to detect a failing\\n                component.\\n            3 : print as much information as possible to isolate the cause\\n                of a bug.\\n            Default: 1\\n    '</em><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineRegistration.docstring_addendum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineRegistration.optimize\">\n<code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">transform</em>, <em class=\"sig-param\">params0</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">starting_affine=None</em>, <em class=\"sig-param\">ret_metric=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Start the optimization process.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>transform</strong><span class=\"classifier\">instance of Transform</span></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>params0</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>starting_affine</strong><span class=\"classifier\">string, or matrix, or None, optional</span></dt><dd><dl class=\"simple\">\n<dt>If string:</dt><dd><p>\u2018mass\u2019: align centers of gravity\n\u2018voxel-origin\u2019: align physical coordinates of voxel (0,0,0)\n\u2018centers\u2019: align physical coordinates of central voxels</p>\n</dd>\n<dt>If matrix:</dt><dd><p>array, shape (dim+1, dim+1).</p>\n</dd>\n<dt>If None:</dt><dd><p>Start from identity.</p>\n</dd>\n</dl>\n<p>The default is None.</p>\n</dd>\n<dt><strong>ret_metric</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>if True, it returns the parameters for measuring the\nsimilarity between the images (default \u2018False\u2019).\nThe metric containing optimal parameters and\nthe distance between the images.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_map</strong><span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine resulting affine transformation</p>\n</dd>\n<dt><strong>xopt</strong><span class=\"classifier\">optimal parameters</span></dt><dd><p>the optimal parameters (translation, rotation shear etc.)</p>\n</dd>\n<dt><strong>fopt</strong><span class=\"classifier\">Similarity metric</span></dt><dd><p>the value of the function at the optimal parameters.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"affinetransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.AffineTransform3D\" title=\"dipy.workflows.align.AffineTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a><a class=\"headerlink\" href=\"#affinetransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.AffineTransform3D\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">AffineTransform3D</code><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code>()</p></td>\n<td><p>Parameter values corresponding to the identity transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code>()</p></td>\n<td><p>Jacobian function of this transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code>()</p></td>\n<td><p>Matrix representation of this transform with the given parameters</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 74%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_dim</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_number_of_parameters</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.AffineTransform3D.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.AffineTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Affine transform in 3D</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"applytransformflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.ApplyTransformFlow\" title=\"dipy.workflows.align.ApplyTransformFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ApplyTransformFlow</span></code></a><a class=\"headerlink\" href=\"#applytransformflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.ApplyTransformFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">ApplyTransformFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ApplyTransformFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ApplyTransformFlow.run\" title=\"dipy.workflows.align.ApplyTransformFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0static_image_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ApplyTransformFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ApplyTransformFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ApplyTransformFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">static_image_files</em>, <em class=\"sig-param\">moving_image_files</em>, <em class=\"sig-param\">transform_map_file</em>, <em class=\"sig-param\">transform_type='affine'</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_file='transformed.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ApplyTransformFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static_image_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path of the static image file.</p>\n</dd>\n<dt><strong>moving_image_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path of the moving image(s). It can be a single image or a\nfolder containing multiple images.</p>\n</dd>\n<dt><strong>transform_map_file</strong><span class=\"classifier\">string</span></dt><dd><p>For the affine case, it should be a text(<a href=\"#id6\"><span class=\"problematic\" id=\"id7\">*</span></a>.txt) file containing\nthe affine matrix. For the diffeomorphic case,\nit should be a nifti file containing the mapping displacement\nfield in each voxel with this shape (x, y, z, 3, 2)</p>\n</dd>\n<dt><strong>transform_type</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Select the transformation type to apply between \u2018affine\u2019 or\n\u2018diffeomorphic\u2019. (default affine)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Directory to save the transformed files (default \u2018\u2019).</p>\n</dd>\n<dt><strong>out_file</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>Name of the transformed file (default \u2018transformed.nii.gz\u2019).</dt><dd><dl class=\"simple\">\n<dt>It is recommended to use the flag \u2013mix-names to</dt><dd><p>prevent the output files from being overwritten.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ccmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric\" title=\"dipy.workflows.align.CCMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a><a class=\"headerlink\" href=\"#ccmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.CCMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">CCMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">sigma_diff=2.0</em>, <em class=\"sig-param\">radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.compute_backward\" title=\"dipy.workflows.align.CCMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>(self)</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.compute_forward\" title=\"dipy.workflows.align.CCMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>(self)</p></td>\n<td><p>Computes one step bringing the moving image towards the static.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.free_iteration\" title=\"dipy.workflows.align.CCMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>(self)</p></td>\n<td><p>Frees the resources allocated during initialization</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.get_energy\" title=\"dipy.workflows.align.CCMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>(self)</p></td>\n<td><p>Numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.CCMetric.initialize_iteration\" title=\"dipy.workflows.align.CCMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>(self)</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(self,\u00a0levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(self,\u00a0levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(self,\u00a0moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(self,\u00a0static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code>(self,\u00a0\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code>(self,\u00a0\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dim</em>, <em class=\"sig-param\">sigma_diff=2.0</em>, <em class=\"sig-param\">radius=4</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalized Cross-Correlation Similarity metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>sigma_diff</strong><span class=\"classifier\">the standard deviation of the Gaussian smoothing kernel to</span></dt><dd><p>be applied to the update field at each iteration</p>\n</dd>\n<dt><strong>radius</strong><span class=\"classifier\">int</span></dt><dd><p>the radius of the squared (cubic) neighborhood at each voxel to be\nconsidered to compute the cross correlation</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the moving image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Cross Correlation (data term) energy computed at the\nlargest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.CCMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.CCMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the cross-correlation factors for efficient computation\nof the gradient of the Cross Correlation w.r.t. the displacement field.\nIt also pre-computes the image gradients in the physical space by\nre-orienting the gradients in the voxel space using the corresponding\naffine transformations.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffeomorphicmap\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap\" title=\"dipy.workflows.align.DiffeomorphicMap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a><a class=\"headerlink\" href=\"#diffeomorphicmap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">DiffeomorphicMap</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">disp_shape</em>, <em class=\"sig-param\">disp_grid2world=None</em>, <em class=\"sig-param\">domain_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.allocate\" title=\"dipy.workflows.align.DiffeomorphicMap.allocate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">allocate</span></code></a>(self)</p></td>\n<td><p>Creates a zero displacement field</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.compute_inversion_error\" title=\"dipy.workflows.align.DiffeomorphicMap.compute_inversion_error\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_inversion_error</span></code></a>(self)</p></td>\n<td><p>Inversion error of the displacement fields</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.expand_fields\" title=\"dipy.workflows.align.DiffeomorphicMap.expand_fields\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">expand_fields</span></code></a>(self,\u00a0expand_factors,\u00a0new_shape)</p></td>\n<td><p>Expands the displacement fields from current shape to new_shape</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_backward_field\" title=\"dipy.workflows.align.DiffeomorphicMap.get_backward_field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_backward_field</span></code></a>(self)</p></td>\n<td><p>Deformation field to transform an image in the backward direction</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_forward_field\" title=\"dipy.workflows.align.DiffeomorphicMap.get_forward_field\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_forward_field</span></code></a>(self)</p></td>\n<td><p>Deformation field to transform an image in the forward direction</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_simplified_transform\" title=\"dipy.workflows.align.DiffeomorphicMap.get_simplified_transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_simplified_transform</span></code></a>(self)</p></td>\n<td><p>Constructs a simplified version of this Diffeomorhic Map</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.interpret_matrix\" title=\"dipy.workflows.align.DiffeomorphicMap.interpret_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">interpret_matrix</span></code></a>(self,\u00a0obj)</p></td>\n<td><p>Try to interpret <cite>obj</cite> as a matrix</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.inverse\" title=\"dipy.workflows.align.DiffeomorphicMap.inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">inverse</span></code></a>(self)</p></td>\n<td><p>Inverse of this DiffeomorphicMap instance</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.shallow_copy\" title=\"dipy.workflows.align.DiffeomorphicMap.shallow_copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">shallow_copy</span></code></a>(self)</p></td>\n<td><p>Shallow copy of this DiffeomorphicMap instance</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.transform\" title=\"dipy.workflows.align.DiffeomorphicMap.transform\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform</span></code></a>(self,\u00a0image[,\u00a0interpolation,\u00a0\u2026])</p></td>\n<td><p>Warps an image in the forward direction</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.transform_inverse\" title=\"dipy.workflows.align.DiffeomorphicMap.transform_inverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_inverse</span></code></a>(self,\u00a0image[,\u00a0\u2026])</p></td>\n<td><p>Warps an image in the backward direction</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.DiffeomorphicMap.warp_endomorphism\" title=\"dipy.workflows.align.DiffeomorphicMap.warp_endomorphism\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warp_endomorphism</span></code></a>(self,\u00a0phi)</p></td>\n<td><p>Composition of this DiffeomorphicMap with a given endomorphism</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dim</em>, <em class=\"sig-param\">disp_shape</em>, <em class=\"sig-param\">disp_grid2world=None</em>, <em class=\"sig-param\">domain_shape=None</em>, <em class=\"sig-param\">domain_grid2world=None</em>, <em class=\"sig-param\">codomain_shape=None</em>, <em class=\"sig-param\">codomain_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>DiffeomorphicMap</p>\n<p>Implements a diffeomorphic transformation on the physical space. The\ndeformation fields encoding the direct and inverse transformations\nshare the same domain discretization (both the discretization grid\nshape and voxel-to-space matrix). The input coordinates (physical\ncoordinates) are first aligned using prealign, and then displaced\nusing the corresponding vector field interpolated at the aligned\ncoordinates.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int, 2 or 3</span></dt><dd><p>the transformation\u2019s dimension</p>\n</dd>\n<dt><strong>disp_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the deformation\nfield\u2019s discretization</p>\n</dd>\n<dt><strong>disp_grid2world</strong><span class=\"classifier\">the voxel-to-space transform between the def. fields</span></dt><dd><p>grid and space</p>\n</dd>\n<dt><strong>domain_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the default\ndiscretizatio of this map\u2019s domain</p>\n</dd>\n<dt><strong>domain_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the default voxel-to-space transformation between this map\u2019s\ndiscretization and physical space</p>\n</dd>\n<dt><strong>codomain_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices (if 3D), rows and columns of the images that\nare \u2018normally\u2019 warped using this transformation in the forward\ndirection (this will provide default transformation parameters to\nwarp images under this transformation). By default, we assume that\nthe inverse transformation is \u2018normally\u2019 used to warp images with\nthe same discretization and voxel-to-space transformation as the\ndeformation field grid.</p>\n</dd>\n<dt><strong>codomain_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of images that are \u2018normally\u2019\nwarped using this transformation (in the forward direction).</p>\n</dd>\n<dt><strong>prealign</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the linear transformation to be applied to align input images to\nthe reference space before warping under the deformation field.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.allocate\">\n<code class=\"sig-name descname\">allocate</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.allocate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a zero displacement field</p>\n<p>Creates a zero displacement field (the identity transformation).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.compute_inversion_error\">\n<code class=\"sig-name descname\">compute_inversion_error</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.compute_inversion_error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inversion error of the displacement fields</p>\n<p>Estimates the inversion error of the displacement fields by computing\nstatistics of the residual vectors obtained after composing the forward\nand backward displacement fields.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>residual</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the displacement field resulting from composing the forward and\nbackward displacement fields of this transformation (the residual\nshould be zero for a perfect diffeomorphism)</p>\n</dd>\n<dt><strong>stats</strong><span class=\"classifier\">array, shape (3,)</span></dt><dd><p>statistics from the norms of the vectors of the residual\ndisplacement field: maximum, mean and standard deviation</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Since the forward and backward displacement fields have the same\ndiscretization, the final composition is given by</p>\n<p>comp[i] = forward[ i + Dinv * backward[i]]</p>\n<p>where Dinv is the space-to-grid transformation of the displacement\nfields</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.expand_fields\">\n<code class=\"sig-name descname\">expand_fields</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">expand_factors</em>, <em class=\"sig-param\">new_shape</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.expand_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expands the displacement fields from current shape to new_shape</p>\n<p>Up-samples the discretization of the displacement fields to be of\nnew_shape shape.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>expand_factors</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the factors scaling current spacings (voxel sizes) to spacings in\nthe expanded discretization.</p>\n</dd>\n<dt><strong>new_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the shape of the arrays holding the up-sampled discretization</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.get_backward_field\">\n<code class=\"sig-name descname\">get_backward_field</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_backward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the backward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the backward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.get_forward_field\">\n<code class=\"sig-name descname\">get_forward_field</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_forward_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deformation field to transform an image in the forward direction</p>\n<p>Returns the deformation field that must be used to warp an image under\nthis transformation in the forward direction (note the \u2018is_inverse\u2019\nflag).</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.get_simplified_transform\">\n<code class=\"sig-name descname\">get_simplified_transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.get_simplified_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs a simplified version of this Diffeomorhic Map</p>\n<p>The simplified version incorporates the pre-align transform, as well as\nthe domain and codomain affine transforms into the displacement field.\nThe resulting transformation may be regarded as operating on the\nimage spaces given by the domain and codomain discretization. As a\nresult, self.prealign, self.disp_grid2world, self.domain_grid2world and\nself.codomain affine will be None (denoting Identity) in the resulting\ndiffeomorphic map.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.interpret_matrix\">\n<code class=\"sig-name descname\">interpret_matrix</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">obj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.interpret_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Try to interpret <cite>obj</cite> as a matrix</p>\n<p>Some operations are performed faster if we know in advance if a matrix\nis the identity (so we can skip the actual matrix-vector\nmultiplication). This function returns None if the given object\nis None or the \u2018identity\u2019 string. It returns the same object if it is\na numpy array. It raises an exception otherwise.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>obj</strong><span class=\"classifier\">object</span></dt><dd><p>any object</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>obj</strong><span class=\"classifier\">object</span></dt><dd><p>the same object given as argument if <cite>obj</cite> is None or a numpy\narray. None if <cite>obj</cite> is the \u2018identity\u2019 string.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.inverse\">\n<code class=\"sig-name descname\">inverse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inverse of this DiffeomorphicMap instance</p>\n<p>Returns a diffeomorphic map object representing the inverse of this\ntransformation. The internal arrays are not copied but just referenced.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>inv</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the inverse of this diffeomorphic map.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.shallow_copy\">\n<code class=\"sig-name descname\">shallow_copy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.shallow_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Shallow copy of this DiffeomorphicMap instance</p>\n<p>Creates a shallow copy of this diffeomorphic map (the arrays are not\ncopied but just referenced)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>new_map</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the shallow copy of this diffeomorphic map</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.transform\">\n<code class=\"sig-name descname\">transform</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_world2grid=None</em>, <em class=\"sig-param\">out_shape=None</em>, <em class=\"sig-param\">out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the forward direction</p>\n<p>Transforms the input image under this transformation in the forward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform(\u2026) warps the\nimage forwards, else it warps the image backwards).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt><dd><p>the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt><strong>out_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices, rows and columns of the desired warped image</p>\n</dd>\n<dt><strong>out_grid2world</strong><span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt><dd><p>warped image to physical space</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>warped</strong><span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt><dd><p>the warped image under this transformation in the forward direction</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.transform_inverse\">\n<code class=\"sig-name descname\">transform_inverse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">image</em>, <em class=\"sig-param\">interpolation='linear'</em>, <em class=\"sig-param\">image_world2grid=None</em>, <em class=\"sig-param\">out_shape=None</em>, <em class=\"sig-param\">out_grid2world=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.transform_inverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Warps an image in the backward direction</p>\n<p>Transforms the input image under this transformation in the backward\ndirection. It uses the \u201cis_inverse\u201d flag to switch between \u201cforward\u201d\nand \u201cbackward\u201d (if is_inverse is False, then transform_inverse(\u2026)\nwarps the image backwards, else it warps the image forwards)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">array, shape (s, r, c) if dim = 3 or (r, c) if dim = 2</span></dt><dd><p>the image to be warped under this transformation in the forward\ndirection</p>\n</dd>\n<dt><strong>interpolation</strong><span class=\"classifier\">string, either \u2018linear\u2019 or \u2018nearest\u2019</span></dt><dd><p>the type of interpolation to be used for warping, either \u2018linear\u2019\n(for k-linear interpolation) or \u2018nearest\u2019 for nearest neighbor</p>\n</dd>\n<dt><strong>image_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the transformation bringing world (space) coordinates to voxel\ncoordinates of the image given as input</p>\n</dd>\n<dt><strong>out_shape</strong><span class=\"classifier\">array, shape (dim,)</span></dt><dd><p>the number of slices, rows and columns of the desired warped image</p>\n</dd>\n<dt><strong>out_grid2world</strong><span class=\"classifier\">the transformation bringing voxel coordinates of the</span></dt><dd><p>warped image to physical space</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>warped</strong><span class=\"classifier\">array, shape = out_shape or self.codomain_shape if None</span></dt><dd><p>warped image under this transformation in the backward direction</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See _warp_forward and _warp_backward documentation for further\ninformation.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.DiffeomorphicMap.warp_endomorphism\">\n<code class=\"sig-name descname\">warp_endomorphism</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.DiffeomorphicMap.warp_endomorphism\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of this DiffeomorphicMap with a given endomorphism</p>\n<p>Creates a new DiffeomorphicMap C with the same properties as self and\ncomposes its displacement fields with phi\u2019s corresponding fields.\nThe resulting diffeomorphism is of the form C(x) = phi(self(x)) with\ninverse C^{-1}(y) = self^{-1}(phi^{-1}(y)). We assume that phi is an\nendomorphism with the same discretization and domain affine as self\nto ensure that the composition inherits self\u2019s properties (we also\nassume that the pre-aligning matrix of phi is None or identity).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>phi</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the endomorphism to be warped by this diffeomorphic map</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>composition</strong><span class=\"classifier\">the composition of this diffeomorphic map with the</span></dt><dd><p>endomorphism given as input</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The problem with our current representation of a DiffeomorphicMap is\nthat the set of Diffeomorphism that can be represented this way (a\npre-aligning matrix followed by a non-linear endomorphism given as a\ndisplacement field) is not closed under the composition operation.</p>\n<p>Supporting a general DiffeomorphicMap class, closed under composition,\nmay be extremely costly computationally, and the kind of\ntransformations we actually need for Avants\u2019 mid-point algorithm (SyN)\nare much simpler.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"emmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric\" title=\"dipy.workflows.align.EMMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a><a class=\"headerlink\" href=\"#emmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.EMMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">EMMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=1.0</em>, <em class=\"sig-param\">inner_iter=5</em>, <em class=\"sig-param\">q_levels=256</em>, <em class=\"sig-param\">double_gradient=True</em>, <em class=\"sig-param\">step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.compute_backward\" title=\"dipy.workflows.align.EMMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>(self)</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.compute_demons_step\" title=\"dipy.workflows.align.EMMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_demons_step</span></code></a>(self[,\u00a0forward_step])</p></td>\n<td><p>Demons step for EM metric</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.compute_forward\" title=\"dipy.workflows.align.EMMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>(self)</p></td>\n<td><p>Computes one step bringing the reference image towards the static.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.compute_gauss_newton_step\" title=\"dipy.workflows.align.EMMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>(self[,\u00a0forward_step])</p></td>\n<td><p>Computes the Gauss-Newton energy minimization step</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.free_iteration\" title=\"dipy.workflows.align.EMMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>(self)</p></td>\n<td><p>Frees the resources allocated during initialization</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.get_energy\" title=\"dipy.workflows.align.EMMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>(self)</p></td>\n<td><p>The numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.initialize_iteration\" title=\"dipy.workflows.align.EMMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>(self)</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(self,\u00a0levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(self,\u00a0levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(self,\u00a0moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(self,\u00a0static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.use_moving_image_dynamics\" title=\"dipy.workflows.align.EMMetric.use_moving_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code></a>(self,\u00a0\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.EMMetric.use_static_image_dynamics\" title=\"dipy.workflows.align.EMMetric.use_static_image_dynamics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code></a>(self,\u00a0\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=1.0</em>, <em class=\"sig-param\">inner_iter=5</em>, <em class=\"sig-param\">q_levels=256</em>, <em class=\"sig-param\">double_gradient=True</em>, <em class=\"sig-param\">step_type='gauss_newton'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Expectation-Maximization Metric</p>\n<p>Similarity metric based on the Expectation-Maximization algorithm to\nhandle multi-modal images. The transfer function is modeled as a set of\nhidden random variables that are estimated at each iteration of the\nalgorithm.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>smooth</strong><span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt><strong>inner_iter</strong><span class=\"classifier\">int</span></dt><dd><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt><strong>q_levels</strong><span class=\"classifier\">number of quantization levels (equal to the number of hidden</span></dt><dd><p>variables in the EM algorithm)</p>\n</dd>\n<dt><strong>double_gradient</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</dd>\n<dt><strong>step_type</strong><span class=\"classifier\">string (\u2018gauss_newton\u2019, \u2018demons\u2019)</span></dt><dd><p>the optimization schedule to be used in the multi-resolution\nGauss-Seidel optimization algorithm (not used if Demons Step is\nselected)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.compute_demons_step\">\n<code class=\"sig-name descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for EM metric</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Demons step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the forward update field to register the moving image towards\nthe static image in a gradient-based optimization algorithm</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.compute_gauss_newton_step\">\n<code class=\"sig-name descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Computes the Newton step to minimize this energy, i.e., minimizes the\nlinearized energy function with respect to the\nregularized displacement field (this step does not require\npost-smoothing, as opposed to the demons step, which does not include\nregularization). To accelerate convergence we use the multi-grid\nGauss-Seidel algorithm proposed by Bruhn and Weickert et al [Bruhn05]</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Newton step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"simple\">\n<dt>[Bruhn05] Andres Bruhn and Joachim Weickert, \u201cTowards ultimate motion</dt><dd><p>estimation: combining highest accuracy with real-time\nperformance\u201d, 10th IEEE International Conference on Computer\nVision, 2005. ICCV 2005.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Frees the resources allocated during initialization</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the EM (data term) energy computed at the largest\niteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the transfer functions (hidden random variables) and\nvariances of the estimators. Also pre-computes the gradient of both\ninput images. Note that once the images are transformed to the opposite\nmodality, the gradient of the transformed images can be used with the\ngradient of the corresponding modality in the same fashion as\ndiff-demons does for mono-modality images. If the flag\nself.use_double_gradient is True these gradients are averaged.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.use_moving_image_dynamics\">\n<code class=\"sig-name descname\">use_moving_image_dynamics</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">original_moving_image</em>, <em class=\"sig-param\">transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.use_moving_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the moving image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent moving image mask from the original_moving_image mask (warped\nby nearest neighbor interpolation)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>original_moving_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the original moving image from which the current moving image was\ngenerated, the current moving image is the one that was provided\nvia \u2018set_moving_image(\u2026)\u2019, which may not be the same as the\noriginal moving image but a warped version of it.</p>\n</dd>\n<dt><strong>transformation</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original_moving_image\nto generate the current moving image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.EMMetric.use_static_image_dynamics\">\n<code class=\"sig-name descname\">use_static_image_dynamics</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">original_static_image</em>, <em class=\"sig-param\">transformation</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.EMMetric.use_static_image_dynamics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is called by the optimizer just after setting the static image.</p>\n<p>EMMetric takes advantage of the image dynamics by computing the\ncurrent static image mask from the originalstaticImage mask (warped\nby nearest neighbor interpolation)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>original_static_image</strong><span class=\"classifier\">array, shape (R, C) or (S, R, C)</span></dt><dd><p>the original static image from which the current static image was\ngenerated, the current static image is the one that was provided\nvia \u2018set_static_image(\u2026)\u2019, which may not be the same as the\noriginal static image but a warped version of it (even the static\nimage changes during Symmetric Normalization, not only the moving\none).</p>\n</dd>\n<dt><strong>transformation</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the transformation that was applied to the original_static_image\nto generate the current static image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"imageregistrationflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow\" title=\"dipy.workflows.align.ImageRegistrationFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageRegistrationFlow</span></code></a><a class=\"headerlink\" href=\"#imageregistrationflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">ImageRegistrationFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p>The registration workflow is organized as a collection of different\nfunctions. The user can intend to use only one type of registration\n(such as center of mass or rigid body registration only).</p>\n<p>Alternatively, a registration can be done in a progressive manner.\nFor example, using affine registration with progressive set to \u2018True\u2019\nwill involve center of mass, translation, rigid body and full affine\nregistration. Whereas, when progressive is False the registration will\ninclude only center of mass and affine registration. The progressive\nregistration will be slower but will improve the quality.</p>\n<p>This can be controlled by using the progressive flag (True by default).</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.affine\" title=\"dipy.workflows.align.ImageRegistrationFlow.affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></a>(self,\u00a0static,\u00a0static_grid2world,\u00a0\u2026)</p></td>\n<td><p>Function for full affine registration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.center_of_mass\" title=\"dipy.workflows.align.ImageRegistrationFlow.center_of_mass\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">center_of_mass</span></code></a>(self,\u00a0static,\u00a0\u2026)</p></td>\n<td><p>Function for the center of mass based image registration.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.perform_transformation\" title=\"dipy.workflows.align.ImageRegistrationFlow.perform_transformation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">perform_transformation</span></code></a>(self,\u00a0static,\u00a0\u2026)</p></td>\n<td><p>Function to apply the transformation.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.rigid\" title=\"dipy.workflows.align.ImageRegistrationFlow.rigid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rigid</span></code></a>(self,\u00a0static,\u00a0static_grid2world,\u00a0\u2026)</p></td>\n<td><p>Function for rigid body based image registration.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.run\" title=\"dipy.workflows.align.ImageRegistrationFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0static_img_files,\u00a0moving_img_files)</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ImageRegistrationFlow.translate\" title=\"dipy.workflows.align.ImageRegistrationFlow.translate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">translate</span></code></a>(self,\u00a0static,\u00a0static_grid2world,\u00a0\u2026)</p></td>\n<td><p>Function for translation based registration.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.affine\">\n<code class=\"sig-name descname\">affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em>, <em class=\"sig-param\">affreg</em>, <em class=\"sig-param\">params0</em>, <em class=\"sig-param\">progressive</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function for full affine registration.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>affreg</strong><span class=\"classifier\">An object of the image registration class.</span></dt><dd></dd>\n<dt><strong>params0</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>progressive</strong><span class=\"classifier\">boolean</span></dt><dd><p>Flag to enable or disable the progressive registration. (defa\nult True)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.center_of_mass\">\n<code class=\"sig-name descname\">center_of_mass</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.center_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function for the center of mass based image registration.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.perform_transformation\">\n<code class=\"sig-name descname\">perform_transformation</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em>, <em class=\"sig-param\">affreg</em>, <em class=\"sig-param\">params0</em>, <em class=\"sig-param\">transform</em>, <em class=\"sig-param\">affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.perform_transformation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function to apply the transformation.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>affreg</strong><span class=\"classifier\">An object of the image registration class.</span></dt><dd></dd>\n<dt><strong>params0</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>transform</strong><span class=\"classifier\">An instance of transform type.</span></dt><dd></dd>\n<dt><strong>affine</strong><span class=\"classifier\">Affine matrix to be used as starting affine</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.rigid\">\n<code class=\"sig-name descname\">rigid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em>, <em class=\"sig-param\">affreg</em>, <em class=\"sig-param\">params0</em>, <em class=\"sig-param\">progressive</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.rigid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function for rigid body based image registration.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>affreg</strong><span class=\"classifier\">An object of the image registration class.</span></dt><dd></dd>\n<dt><strong>params0</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n<dt><strong>progressive</strong><span class=\"classifier\">boolean</span></dt><dd><p>Flag to enable or disable the progressive registration. (defa\nult True)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self, static_img_files, moving_img_files, transform='affine', nbins=32, sampling_prop=None, metric='mi', level_iters=[10000, 1000, 100], sigmas=[3.0, 1.0, 0.0], factors=[4, 2, 1], progressive=True, save_metric=False, out_dir='', out_moved='moved.nii.gz', out_affine='affine.txt', out_quality='quality_metric.txt'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>static_img_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the static image file.</p>\n</dd>\n<dt><strong>moving_img_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the moving image file.</p>\n</dd>\n<dt><strong>transform</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>com: center of mass, trans: translation, rigid: rigid body</dt><dd><p>affine: full affine including translation, rotation, shearing and\nscaling (default \u2018affine\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>nbins</strong><span class=\"classifier\">int, optional</span></dt><dd><dl class=\"simple\">\n<dt>Number of bins to discretize the joint and marginal PDF</dt><dd><p>(default \u201832\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>sampling_prop</strong><span class=\"classifier\">int, optional</span></dt><dd><dl class=\"simple\">\n<dt>Number ([0-100]) of voxels for calculating the PDF.</dt><dd><p>\u2018None\u2019 implies all voxels (default \u2018None\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>Similarity metric for gathering mutual information</dt><dd><p>(default \u2018mi\u2019 , Mutual Information metric).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">variable int, optional</span></dt><dd><dl>\n<dt>The number of iterations at each scale of the scale space.</dt><dd><p><cite>level_iters[0]</cite> corresponds to the coarsest scale,\n<cite>level_iters[-1]</cite> the finest, where n is the length of the</p>\n<blockquote>\n<div><p>sequence. By default, a 3-level scale space with iterations\nsequence equal to [10000, 1000, 100] will be used.</p>\n</div></blockquote>\n</dd>\n</dl>\n</dd>\n<dt><strong>sigmas</strong><span class=\"classifier\">variable floats, optional</span></dt><dd><dl class=\"simple\">\n<dt>Custom smoothing parameter to build the scale space (one parameter</dt><dd><p>for each scale). By default, the sequence of sigmas will be\n[3, 1, 0].</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>factors</strong><span class=\"classifier\">variable floats, optional</span></dt><dd><dl class=\"simple\">\n<dt>Custom scale factors to build the scale space (one factor for each</dt><dd><p>scale). By default, the sequence of factors will be [4, 2, 1].</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>progressive</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>Enable/Disable the progressive registration (default \u2018True\u2019).</p>\n</dd>\n<dt><strong>save_metric</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>If true, quality assessment metric are saved in\n\u2018quality_metric.txt\u2019 (default \u2018False\u2019).</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>Directory to save the transformed image and the affine matrix</dt><dd><p>(default \u2018\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_moved</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>Name for the saved transformed image</dt><dd><p>(default \u2018moved.nii.gz\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_affine</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>Name for the saved affine matrix</dt><dd><p>(default \u2018affine.txt\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_quality</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>Name of the file containing the saved quality</dt><dd><p>metric (default \u2018quality_metric.txt\u2019).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ImageRegistrationFlow.translate\">\n<code class=\"sig-name descname\">translate</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em>, <em class=\"sig-param\">affreg</em>, <em class=\"sig-param\">params0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ImageRegistrationFlow.translate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function for translation based registration.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the static\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">2D or 3D  array</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the voxel-to-space transformation associated with the moving\nimage. The default is None, implying the transform is the\nidentity.</p>\n</dd>\n<dt><strong>affreg</strong><span class=\"classifier\">An object of the image registration class.</span></dt><dd></dd>\n<dt><strong>params0</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>parameters from which to start the optimization. If None, the\noptimization will start at the identity transform. n is the\nnumber of parameters of the specified transformation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mutualinformationmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric\" title=\"dipy.workflows.align.MutualInformationMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a><a class=\"headerlink\" href=\"#mutualinformationmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">MutualInformationMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">nbins=32</em>, <em class=\"sig-param\">sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric.distance\" title=\"dipy.workflows.align.MutualInformationMetric.distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance</span></code></a>(self,\u00a0params)</p></td>\n<td><p>Numeric value of the negative Mutual Information.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric.distance_and_gradient\" title=\"dipy.workflows.align.MutualInformationMetric.distance_and_gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">distance_and_gradient</span></code></a>(self,\u00a0params)</p></td>\n<td><p>Numeric value of the metric and its gradient at given parameters.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric.gradient\" title=\"dipy.workflows.align.MutualInformationMetric.gradient\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient</span></code></a>(self,\u00a0params)</p></td>\n<td><p>Numeric value of the metric\u2019s gradient at the given parameters.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.MutualInformationMetric.setup\" title=\"dipy.workflows.align.MutualInformationMetric.setup\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup</span></code></a>(self,\u00a0transform,\u00a0static,\u00a0moving[,\u00a0\u2026])</p></td>\n<td><p>Prepare the metric to compute intensity densities and gradients.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">nbins=32</em>, <em class=\"sig-param\">sampling_proportion=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize an instance of the Mutual Information metric.</p>\n<p>This class implements the methods required by Optimizer to drive the\nregistration process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>nbins</strong><span class=\"classifier\">int, optional</span></dt><dd><p>the number of bins to be used for computing the intensity\nhistograms. The default is 32.</p>\n</dd>\n<dt><strong>sampling_proportion</strong><span class=\"classifier\">None or float in interval (0, 1], optional</span></dt><dd><p>There are two types of sampling: dense and sparse. Dense sampling\nuses all voxels for estimating the (joint and marginal) intensity\nhistograms, while sparse sampling uses a subset of them. If\n<cite>sampling_proportion</cite> is None, then dense sampling is\nused. If <cite>sampling_proportion</cite> is a floating point value in (0,1]\nthen sparse sampling is used, where <cite>sampling_proportion</cite>\nspecifies the proportion of voxels to be used. The default is\nNone.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Since we use linear interpolation, images are not, in general,\ndifferentiable at exact voxel coordinates, but they are differentiable\nbetween voxel coordinates. When using sparse sampling, selected voxels\nare slightly moved by adding a small random displacement within one\nvoxel to prevent sampling points from being located exactly at voxel\ncoordinates. When using dense sampling, this random displacement is\nnot applied.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.distance\">\n<code class=\"sig-name descname\">distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the negative Mutual Information.</p>\n<p>We need to change the sign so we can use standard minimization\nalgorithms.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>neg_mi</strong><span class=\"classifier\">float</span></dt><dd><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.distance_and_gradient\">\n<code class=\"sig-name descname\">distance_and_gradient</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.distance_and_gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric and its gradient at given parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>neg_mi</strong><span class=\"classifier\">float</span></dt><dd><p>the negative mutual information of the input images after\ntransforming the moving image by the currently set transform\nwith <cite>params</cite> parameters</p>\n</dd>\n<dt><strong>neg_mi_grad</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.gradient\">\n<code class=\"sig-name descname\">gradient</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.gradient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Numeric value of the metric\u2019s gradient at the given parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>params</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the parameter vector of the transform currently used by the metric\n(the transform name is provided when self.setup is called), n is\nthe number of parameters of the transform</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>grad</strong><span class=\"classifier\">array, shape (n,)</span></dt><dd><p>the gradient of the negative Mutual Information</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.MutualInformationMetric.setup\">\n<code class=\"sig-name descname\">setup</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">transform</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">starting_affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.MutualInformationMetric.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepare the metric to compute intensity densities and gradients.</p>\n<p>The histograms will be setup to compute probability densities of\nintensities within the minimum and maximum values of <cite>static</cite> and\n<cite>moving</cite></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>transform: instance of Transform</strong></dt><dd><p>the transformation with respect to whose parameters the gradient\nmust be computed</p>\n</dd>\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S\u2019, R\u2019, C\u2019) or (R\u2019, C\u2019)</span></dt><dd><p>moving image. The dimensions of the static (S, R, C) and moving\n(S\u2019, R\u2019, C\u2019) images do not need to be the same.</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array (dim+1, dim+1), optional</span></dt><dd><p>the grid-to-space transform of the static image. The default is\nNone, implying the transform is the identity.</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array (dim+1, dim+1)</span></dt><dd><p>the grid-to-space transform of the moving image. The default is\nNone, implying the spacing along all axes is 1.</p>\n</dd>\n<dt><strong>starting_affine</strong><span class=\"classifier\">array, shape (dim+1, dim+1), optional</span></dt><dd><p>the pre-aligning matrix (an affine transform) that roughly aligns\nthe moving image towards the static image. If None, no\npre-alignment is performed. If a pre-alignment matrix is available,\nit is recommended to provide this matrix as <cite>starting_affine</cite>\ninstead of manually transforming the moving image to reduce\ninterpolation artifacts. The default is None, implying no\npre-alignment is performed.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"resliceflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"dipy.workflows.align.ResliceFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a><a class=\"headerlink\" href=\"#resliceflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.ResliceFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">ResliceFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow.get_short_name\" title=\"dipy.workflows.align.ResliceFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.ResliceFlow.run\" title=\"dipy.workflows.align.ResliceFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files,\u00a0new_vox_size[,\u00a0\u2026])</p></td>\n<td><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_vox_sz</span></code></p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ResliceFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ResliceFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.ResliceFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">new_vox_size</em>, <em class=\"sig-param\">order=1</em>, <em class=\"sig-param\">mode='constant'</em>, <em class=\"sig-param\">cval=0</em>, <em class=\"sig-param\">num_processes=1</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_resliced='resliced.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.ResliceFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_vox_sz</span></code></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>new_vox_size</strong><span class=\"classifier\">variable float</span></dt><dd><p>new voxel size</p>\n</dd>\n<dt><strong>order</strong><span class=\"classifier\">int, optional</span></dt><dd><p>order of interpolation, from 0 to 5, for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc.. if you don\u2019t want any\nsmoothing 0 is the option you need (default 1)</p>\n</dd>\n<dt><strong>mode</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Points outside the boundaries of the input are filled according\nto the given mode \u2018constant\u2019, \u2018nearest\u2019, \u2018reflect\u2019 or \u2018wrap\u2019\n(default \u2018constant\u2019)</p>\n</dd>\n<dt><strong>cval</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Value used for points outside the boundaries of the input if\nmode=\u2019constant\u2019 (default 0)</p>\n</dd>\n<dt><strong>num_processes</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.\n(default 1)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_resliced</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the resliced dataset to be saved\n(default \u2018resliced.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"rigidtransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.RigidTransform3D\" title=\"dipy.workflows.align.RigidTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a><a class=\"headerlink\" href=\"#rigidtransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.RigidTransform3D\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">RigidTransform3D</code><a class=\"headerlink\" href=\"#dipy.workflows.align.RigidTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code>()</p></td>\n<td><p>Parameter values corresponding to the identity transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code>()</p></td>\n<td><p>Jacobian function of this transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code>()</p></td>\n<td><p>Matrix representation of this transform with the given parameters</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 74%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_dim</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_number_of_parameters</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.RigidTransform3D.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.RigidTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Rigid transform in 3D (rotation + translation)\nThe parameter vector theta of length 6 is interpreted as follows:\ntheta[0] : rotation about the x axis\ntheta[1] : rotation about the y axis\ntheta[2] : rotation about the z axis\ntheta[3] : translation along the x axis\ntheta[4] : translation along the y axis\ntheta[5] : translation along the z axis</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ssdmetric\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric\" title=\"dipy.workflows.align.SSDMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a><a class=\"headerlink\" href=\"#ssdmetric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SSDMetric\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">SSDMetric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=4</em>, <em class=\"sig-param\">inner_iter=10</em>, <em class=\"sig-param\">step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.metrics.SimilarityMetric\" title=\"dipy.align.metrics.SimilarityMetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.metrics.SimilarityMetric</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.compute_backward\" title=\"dipy.workflows.align.SSDMetric.compute_backward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_backward</span></code></a>(self)</p></td>\n<td><p>Computes one step bringing the static image towards the moving.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.compute_demons_step\" title=\"dipy.workflows.align.SSDMetric.compute_demons_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_demons_step</span></code></a>(self[,\u00a0forward_step])</p></td>\n<td><p>Demons step for SSD metric</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.compute_forward\" title=\"dipy.workflows.align.SSDMetric.compute_forward\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_forward</span></code></a>(self)</p></td>\n<td><p>Computes one step bringing the reference image towards the static.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.compute_gauss_newton_step\" title=\"dipy.workflows.align.SSDMetric.compute_gauss_newton_step\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_gauss_newton_step</span></code></a>(self[,\u00a0forward_step])</p></td>\n<td><p>Computes the Gauss-Newton energy minimization step</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.free_iteration\" title=\"dipy.workflows.align.SSDMetric.free_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">free_iteration</span></code></a>(self)</p></td>\n<td><p>Nothing to free for the SSD metric</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.get_energy\" title=\"dipy.workflows.align.SSDMetric.get_energy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_energy</span></code></a>(self)</p></td>\n<td><p>The numerical value assigned by this metric to the current image pair</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SSDMetric.initialize_iteration\" title=\"dipy.workflows.align.SSDMetric.initialize_iteration\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initialize_iteration</span></code></a>(self)</p></td>\n<td><p>Prepares the metric to compute one displacement field iteration.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_above</span></code>(self,\u00a0levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are above the current one</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_levels_below</span></code>(self,\u00a0levels)</p></td>\n<td><p>Informs the metric how many pyramid levels are below the current one</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_moving_image</span></code>(self,\u00a0moving_image,\u00a0\u2026)</p></td>\n<td><p>Sets the moving image being compared against the static one.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_static_image</span></code>(self,\u00a0static_image,\u00a0\u2026)</p></td>\n<td><p>Sets the static image being compared against the moving one.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_moving_image_dynamics</span></code>(self,\u00a0\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the moving image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">use_static_image_dynamics</span></code>(self,\u00a0\u2026)</p></td>\n<td><p>This is called by the optimizer just after setting the static image.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dim</em>, <em class=\"sig-param\">smooth=4</em>, <em class=\"sig-param\">inner_iter=10</em>, <em class=\"sig-param\">step_type='demons'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sum of Squared Differences (SSD) Metric</p>\n<p>Similarity metric for (mono-modal) nonlinear image registration defined\nby the sum of squared differences (SSD)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dim</strong><span class=\"classifier\">int (either 2 or 3)</span></dt><dd><p>the dimension of the image domain</p>\n</dd>\n<dt><strong>smooth</strong><span class=\"classifier\">float</span></dt><dd><p>smoothness parameter, the larger the value the smoother the\ndeformation field</p>\n</dd>\n<dt><strong>inner_iter</strong><span class=\"classifier\">int</span></dt><dd><p>number of iterations to be performed at each level of the multi-\nresolution Gauss-Seidel optimization algorithm (this is not the\nnumber of steps per Gaussian Pyramid level, that parameter must\nbe set for the optimizer, not the metric)</p>\n</dd>\n<dt><strong>step_type</strong><span class=\"classifier\">string</span></dt><dd><p>the displacement field step to be computed when \u2018compute_forward\u2019\nand \u2018compute_backward\u2019 are called. Either \u2018demons\u2019 or\n\u2018gauss_newton\u2019</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.compute_backward\">\n<code class=\"sig-name descname\">compute_backward</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.compute_backward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the static image towards the moving.</p>\n<p>Computes the update displacement field to be used for registration of\nthe static image towards the moving image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.compute_demons_step\">\n<code class=\"sig-name descname\">compute_demons_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.compute_demons_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Demons step for SSD metric</p>\n<p>Computes the demons step proposed by Vercauteren et al.[Vercauteren09]\nfor the SSD metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Demons step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the Demons step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"simple\">\n<dt>[Vercauteren09] Tom Vercauteren, Xavier Pennec, Aymeric Perchant,</dt><dd><p>Nicholas Ayache, \u201cDiffeomorphic Demons: Efficient\nNon-parametric Image Registration\u201d, Neuroimage 2009</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.compute_forward\">\n<code class=\"sig-name descname\">compute_forward</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.compute_forward\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes one step bringing the reference image towards the static.</p>\n<p>Computes the update displacement field to be used for registration of\nthe moving image towards the static image</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.compute_gauss_newton_step\">\n<code class=\"sig-name descname\">compute_gauss_newton_step</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">forward_step=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.compute_gauss_newton_step\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the Gauss-Newton energy minimization step</p>\n<p>Minimizes the linearized energy function (Newton step) defined by the\nsum of squared differences of corresponding pixels of the input images\nwith respect to the displacement field.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>forward_step</strong><span class=\"classifier\">boolean</span></dt><dd><p>if True, computes the Newton step in the forward direction\n(warping the moving towards the static image). If False,\ncomputes the backward step (warping the static image to the\nmoving image)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>displacement</strong><span class=\"classifier\">array, shape = static_image.shape + (3,)</span></dt><dd><p>if forward_step==True, the forward SSD Gauss-Newton step,\nelse, the backward step</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.free_iteration\">\n<code class=\"sig-name descname\">free_iteration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.free_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Nothing to free for the SSD metric</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.get_energy\">\n<code class=\"sig-name descname\">get_energy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.get_energy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The numerical value assigned by this metric to the current image pair</p>\n<p>Returns the Sum of Squared Differences (data term) energy computed at\nthe largest iteration</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SSDMetric.initialize_iteration\">\n<code class=\"sig-name descname\">initialize_iteration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SSDMetric.initialize_iteration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Prepares the metric to compute one displacement field iteration.</p>\n<p>Pre-computes the gradient of the input images to be used in the\ncomputation of the forward and backward steps.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slrwithqbxflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"dipy.workflows.align.SlrWithQbxFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a><a class=\"headerlink\" href=\"#slrwithqbxflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">SlrWithQbxFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow.get_short_name\" title=\"dipy.workflows.align.SlrWithQbxFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SlrWithQbxFlow.run\" title=\"dipy.workflows.align.SlrWithQbxFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0static_files,\u00a0moving_files[,\u00a0x0,\u00a0\u2026])</p></td>\n<td><p>Streamline-based linear registration.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SlrWithQbxFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self, static_files, moving_files, x0='affine', rm_small_clusters=50, qbx_thr=[40, 30, 20, 15], num_threads=None, greater_than=50, less_than=250, nb_pts=20, progressive=True, out_dir='', out_moved='moved.trk', out_affine='affine.txt', out_stat_centroids='static_centroids.trk', out_moving_centroids='moving_centroids.trk', out_moved_centroids='moved_centroids.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SlrWithQbxFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Streamline-based linear registration.</p>\n<p>For efficiency we apply the registration on cluster centroids and\nremove small clusters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static_files</strong><span class=\"classifier\">string</span></dt><dd></dd>\n<dt><strong>moving_files</strong><span class=\"classifier\">string</span></dt><dd></dd>\n<dt><strong>x0</strong><span class=\"classifier\">string, optional</span></dt><dd><p>rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt><strong>rm_small_clusters</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Remove clusters that have less than <cite>rm_small_clusters</cite>\n(default 50)</p>\n</dd>\n<dt><strong>qbx_thr</strong><span class=\"classifier\">variable int, optional</span></dt><dd><p>Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n<dt><strong>greater_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt><strong>np_pts</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt><strong>progressive</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>(default True)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_moved</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Filename of moved tractogram (default \u2018moved.trk\u2019)</p>\n</dd>\n<dt><strong>out_affine</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Filename of affine for SLR transformation (default \u2018affine.txt\u2019)</p>\n</dd>\n<dt><strong>out_stat_centroids</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Filename of static centroids (default \u2018static_centroids.trk\u2019)</p>\n</dd>\n<dt><strong>out_moving_centroids</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Filename of moving centroids (default \u2018moving_centroids.trk\u2019)</p>\n</dd>\n<dt><strong>out_moved_centroids</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Filename of moved centroids (default \u2018moved_centroids.trk\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The order of operations is the following. First short or long\nstreamlines are removed. Second the tractogram or a random selection\nof the tractogram is clustered with QuickBundlesX. Then SLR\n<a class=\"reference internal\" href=\"#r63af61b7286e-garyfallidis15\" id=\"id8\">[Garyfallidis15]</a> is applied.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r63af61b7286e-garyfallidis15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id8\">Garyfallidis15</a></span></dt>\n<dd><p>Garyfallidis et al. \u201cRobust and efficient linear</p>\n</dd>\n</dl>\n<p>registration of white-matter fascicles in the space of\nstreamlines\u201d, NeuroImage, 117, 124\u2013140, 2015</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r63af61b7286e-garyfallidis14\"><span class=\"brackets\">Garyfallidis14</span></dt>\n<dd><p>Garyfallidis et al., \u201cDirect native-space fiber</p>\n</dd>\n</dl>\n<p>bundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r63af61b7286e-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter</p>\n</dd>\n</dl>\n<p>bundles using local and global streamline-based registration\nand clustering, NeuroImage, 2017.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"symmetricdiffeomorphicregistration\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a><a class=\"headerlink\" href=\"#symmetricdiffeomorphicregistration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">SymmetricDiffeomorphicRegistration</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">metric</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">step_length=0.25</em>, <em class=\"sig-param\">ss_sigma_factor=0.2</em>, <em class=\"sig-param\">opt_tol=1e-05</em>, <em class=\"sig-param\">inv_iter=20</em>, <em class=\"sig-param\">inv_tol=0.001</em>, <em class=\"sig-param\">callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.align/#dipy.align.imwarp.DiffeomorphicRegistration\" title=\"dipy.align.imwarp.DiffeomorphicRegistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.imwarp.DiffeomorphicRegistration</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.get_map\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.get_map\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_map</span></code></a>(self)</p></td>\n<td><p>Returns the resulting diffeomorphic map Returns the DiffeomorphicMap registering the moving image towards the static image.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.optimize\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.optimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optimize</span></code></a>(self,\u00a0static,\u00a0moving[,\u00a0\u2026])</p></td>\n<td><p>Starts the optimization</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_level_iters</span></code>(self,\u00a0level_iters)</p></td>\n<td><p>Sets the number of iterations at each pyramid level</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.update\" title=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.update\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code></a>(self,\u00a0current_displacement,\u00a0\u2026)</p></td>\n<td><p>Composition of the current displacement field with the given field</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">metric</em>, <em class=\"sig-param\">level_iters=None</em>, <em class=\"sig-param\">step_length=0.25</em>, <em class=\"sig-param\">ss_sigma_factor=0.2</em>, <em class=\"sig-param\">opt_tol=1e-05</em>, <em class=\"sig-param\">inv_iter=20</em>, <em class=\"sig-param\">inv_tol=0.001</em>, <em class=\"sig-param\">callback=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Symmetric Diffeomorphic Registration (SyN) Algorithm</p>\n<p>Performs the multi-resolution optimization algorithm for non-linear\nregistration using a given similarity metric.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>metric</strong><span class=\"classifier\">SimilarityMetric object</span></dt><dd><p>the metric to be optimized</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">list of int</span></dt><dd><p>the number of iterations at each level of the Gaussian Pyramid (the\nlength of the list defines the number of pyramid levels to be\nused)</p>\n</dd>\n<dt><strong>opt_tol</strong><span class=\"classifier\">float</span></dt><dd><p>the optimization will stop when the estimated derivative of the\nenergy profile w.r.t. time falls below this threshold</p>\n</dd>\n<dt><strong>inv_iter</strong><span class=\"classifier\">int</span></dt><dd><p>the number of iterations to be performed by the displacement field\ninversion algorithm</p>\n</dd>\n<dt><strong>step_length</strong><span class=\"classifier\">float</span></dt><dd><p>the length of the maximum displacement vector of the update\ndisplacement field at each iteration</p>\n</dd>\n<dt><strong>ss_sigma_factor</strong><span class=\"classifier\">float</span></dt><dd><p>parameter of the scale-space smoothing kernel. For example, the\nstd. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, \u2026, n_scales is the scale</p>\n</dd>\n<dt><strong>inv_tol</strong><span class=\"classifier\">float</span></dt><dd><p>the displacement field inversion algorithm will stop iterating\nwhen the inversion error falls below this threshold</p>\n</dd>\n<dt><strong>callback</strong><span class=\"classifier\">function(SymmetricDiffeomorphicRegistration)</span></dt><dd><p>a function receiving a SymmetricDiffeomorphicRegistration object\nto be called after each iteration (this optimizer will call this\nfunction passing self as parameter)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.get_map\">\n<code class=\"sig-name descname\">get_map</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.get_map\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the resulting diffeomorphic map\nReturns the DiffeomorphicMap registering the moving image towards\nthe static image.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.optimize\">\n<code class=\"sig-name descname\">optimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">static_grid2world=None</em>, <em class=\"sig-param\">moving_grid2world=None</em>, <em class=\"sig-param\">prealign=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.optimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Starts the optimization</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>the image to be used as reference during optimization. The\ndisplacement fields will have the same discretization as the static\nimage.</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C) or (R, C)</span></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. Since the\ndeformation fields\u2019 discretization is the same as the static image,\nit is necessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the \u2018prealign\u2019\nmatrix</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation associated to the static image</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation associated to the moving image</p>\n</dd>\n<dt><strong>prealign</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the affine transformation (operating on the physical space)\npre-aligning the moving image towards the static</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>static_to_ref</strong><span class=\"classifier\">DiffeomorphicMap object</span></dt><dd><p>the diffeomorphic map that brings the moving image towards the\nstatic one in the forward direction (i.e. by calling\nstatic_to_ref.transform) and the static image towards the\nmoving one in the backward direction (i.e. by calling\nstatic_to_ref.transform_inverse).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SymmetricDiffeomorphicRegistration.update\">\n<code class=\"sig-name descname\">update</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">current_displacement</em>, <em class=\"sig-param\">new_displacement</em>, <em class=\"sig-param\">disp_world2grid</em>, <em class=\"sig-param\">time_scaling</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SymmetricDiffeomorphicRegistration.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Composition of the current displacement field with the given field</p>\n<p>Interpolates new displacement at the locations defined by\ncurrent_displacement. Equivalently, computes the composition C of the\ngiven displacement fields as C(x) = B(A(x)), where A is\ncurrent_displacement and B is new_displacement. This function is\nintended to be used with deformation fields of the same sampling\n(e.g. to be called by a registration algorithm).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>current_displacement</strong><span class=\"classifier\">array, shape (R\u2019, C\u2019, 2) or (S\u2019, R\u2019, C\u2019, 3)</span></dt><dd><p>the displacement field defining where to interpolate\nnew_displacement</p>\n</dd>\n<dt><strong>new_displacement</strong><span class=\"classifier\">array, shape (R, C, 2) or (S, R, C, 3)</span></dt><dd><p>the displacement field to be warped by current_displacement</p>\n</dd>\n<dt><strong>disp_world2grid</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the space-to-grid transform associated with the displacements\u2019\ngrid (we assume that both displacements are discretized over the\nsame grid)</p>\n</dd>\n<dt><strong>time_scaling</strong><span class=\"classifier\">float</span></dt><dd><p>scaling factor applied to d2. The effect may be interpreted as\nmoving d1 displacements along a factor (<cite>time_scaling</cite>) of d2.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>updated</strong><span class=\"classifier\">array, shape (the same as new_displacement)</span></dt><dd><p>the warped displacement field</p>\n</dd>\n<dt><strong>mean_norm</strong><span class=\"classifier\">the mean norm of all vectors in current_displacement</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"synregistrationflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.SynRegistrationFlow\" title=\"dipy.workflows.align.SynRegistrationFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SynRegistrationFlow</span></code></a><a class=\"headerlink\" href=\"#synregistrationflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.SynRegistrationFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">SynRegistrationFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SynRegistrationFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.SynRegistrationFlow.run\" title=\"dipy.workflows.align.SynRegistrationFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0static_image_files,\u00a0moving_image_files)</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SynRegistrationFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SynRegistrationFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.SynRegistrationFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self, static_image_files, moving_image_files, prealign_file='', inv_static=False, level_iters=[10, 10, 5], metric='cc', mopt_sigma_diff=2.0, mopt_radius=4, mopt_smooth=0.0, mopt_inner_iter=0.0, mopt_q_levels=256, mopt_double_gradient=True, mopt_step_type='', step_length=0.25, ss_sigma_factor=0.2, opt_tol=1e-05, inv_iter=20, inv_tol=0.001, out_dir='', out_warped='warped_moved.nii.gz', out_inv_static='inc_static.nii.gz', out_field='displacement_field.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.SynRegistrationFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static_image_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path of the static image file.</p>\n</dd>\n<dt><strong>moving_image_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the moving image file.</p>\n</dd>\n<dt><strong>prealign_file</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>The text file containing pre alignment information via an</dt><dd><p>affine matrix.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>inv_static</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>Apply the inverse mapping to the static image (default \u2018False\u2019).</p>\n</dd>\n<dt><strong>level_iters</strong><span class=\"classifier\">variable int, optional</span></dt><dd><dl class=\"simple\">\n<dt>The number of iterations at each level of the gaussian pyramid.</dt><dd><p>By default, a 3-level scale space with iterations\nsequence equal to [10, 10, 5] will be used. The 0-th\nlevel corresponds to the finest resolution.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>metric</strong><span class=\"classifier\">string, optional</span></dt><dd><p>The metric to be used (Default cc, \u2018Cross Correlation metric\u2019).\nmetric available: cc (Cross Correlation), ssd (Sum Squared\nDifference), em (Expectation-Maximization).</p>\n</dd>\n<dt><strong>mopt_sigma_diff</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Metric option applied on Cross correlation (CC).\nThe standard deviation of the Gaussian smoothing kernel to be\napplied to the update field at each iteration (default 2.0)</p>\n</dd>\n<dt><strong>mopt_radius</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Metric option applied on Cross correlation (CC).\nthe radius of the squared (cubic) neighborhood at each voxel to\nbe considered to compute the cross correlation. (default 4)</p>\n</dd>\n<dt><strong>mopt_smooth</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Metric option applied on Sum Squared Difference (SSD) and\nExpectation Maximization (EM). Smoothness parameter, the\nlarger the value the smoother the deformation field.\n(default 1.0 for EM, 4.0 for SSD)</p>\n</dd>\n<dt><strong>mopt_inner_iter</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Metric option applied on Sum Squared Difference (SSD) and\nExpectation Maximization (EM). This is number of iterations to be\nperformed at each level of the multi-resolution Gauss-Seidel\noptimization algorithm (this is not the number of steps per\nGaussian Pyramid level, that parameter must be set for the\noptimizer, not the metric). Default 5 for EM, 10 for SSD.</p>\n</dd>\n<dt><strong>mopt_q_levels</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Metric option applied on Expectation Maximization (EM).\nNumber of quantization levels (Default: 256 for EM)</p>\n</dd>\n<dt><strong>mopt_double_gradient</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Metric option applied on Expectation Maximization (EM).\nif True, the gradient of the expected static image under the moving\nmodality will be added to the gradient of the moving image,\nsimilarly, the gradient of the expected moving image under the\nstatic modality will be added to the gradient of the static image.</p>\n</dd>\n<dt><strong>mopt_step_type</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Metric option applied on Sum Squared Difference (SSD) and\nExpectation Maximization (EM). The optimization schedule to be\nused in the multi-resolution Gauss-Seidel optimization algorithm\n(not used if Demons Step is selected). Possible value:\n(\u2018gauss_newton\u2019, \u2018demons\u2019). default: \u2018gauss_newton\u2019 for EM,\n\u2018demons\u2019 for SSD.</p>\n</dd>\n<dt><strong>step_length</strong><span class=\"classifier\">float, optional</span></dt><dd><dl class=\"simple\">\n<dt>the length of the maximum displacement vector of the update</dt><dd><p>displacement field at each iteration.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>ss_sigma_factor</strong><span class=\"classifier\">float, optional</span></dt><dd><dl class=\"simple\">\n<dt>parameter of the scale-space smoothing kernel. For example, the</dt><dd><p>std. dev. of the kernel will be factor*(2^i) in the isotropic case\nwhere i = 0, 1, \u2026, n_scales is the scale.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>opt_tol</strong><span class=\"classifier\">float, optional</span></dt><dd><dl class=\"simple\">\n<dt>the optimization will stop when the estimated derivative of the</dt><dd><p>energy profile w.r.t. time falls below this threshold.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>inv_iter</strong><span class=\"classifier\">int, optional</span></dt><dd><dl class=\"simple\">\n<dt>the number of iterations to be performed by the displacement field</dt><dd><p>inversion algorithm.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>inv_tol</strong><span class=\"classifier\">float, optional</span></dt><dd><dl class=\"simple\">\n<dt>the displacement field inversion algorithm will stop iterating</dt><dd><p>when the inversion error falls below this threshold.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Directory to save the transformed files (default \u2018\u2019).</p>\n</dd>\n<dt><strong>out_warped</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the warped file. (default \u2018warped_moved.nii.gz\u2019).</p>\n</dd>\n<dt><strong>out_inv_static</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>Name of the file to save the static image after applying the</dt><dd><p>inverse mapping (default \u2018inv_static.nii.gz\u2019).</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>out_field</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the file to save the diffeomorphic map.\n(default \u2018displacement_field.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"translationtransform3d\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.TranslationTransform3D\" title=\"dipy.workflows.align.TranslationTransform3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a><a class=\"headerlink\" href=\"#translationtransform3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.TranslationTransform3D\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">TranslationTransform3D</code><a class=\"headerlink\" href=\"#dipy.workflows.align.TranslationTransform3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.align.transforms.Transform</span></code></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_identity_parameters</span></code>()</p></td>\n<td><p>Parameter values corresponding to the identity transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">jacobian</span></code>()</p></td>\n<td><p>Jacobian function of this transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">param_to_matrix</span></code>()</p></td>\n<td><p>Matrix representation of this transform with the given parameters</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 74%\" />\n<col style=\"width: 26%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_dim</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_number_of_parameters</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.TranslationTransform3D.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.TranslationTransform3D.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Translation transform in 3D</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"workflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow\" title=\"dipy.workflows.align.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#workflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.align.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_io_iterator\" title=\"dipy.workflows.align.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_short_name\" title=\"dipy.workflows.align.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.get_sub_runs\" title=\"dipy.workflows.align.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.manage_output_overwrite\" title=\"dipy.workflows.align.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.align.Workflow.run\" title=\"dipy.workflows.align.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.align.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"check-dimensions\">\n<h3>check_dimensions<a class=\"headerlink\" href=\"#check-dimensions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.check_dimensions\">\n<code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">check_dimensions</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">moving</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.check_dimensions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check the dimensions of the input images.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">2D or 3D array</span></dt><dd><p>the image to be used as reference during optimization.</p>\n</dd>\n<dt><strong>moving: 2D or 3D array</strong></dt><dd><p>the image to be used as \u201cmoving\u201d during optimization. It is\nnecessary to pre-align the moving image to ensure its domain\nlies inside the domain of the deformation fields. This is assumed\nto be accomplished by \u201cpre-aligning\u201d the moving image towards the\nstatic using an affine transformation given by the\n\u2018starting_affine\u2019 matrix</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#load-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reslice\">\n<h3>reslice<a class=\"headerlink\" href=\"#reslice\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.reslice\">\n<code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">reslice</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">zooms</em>, <em class=\"sig-param\">new_zooms</em>, <em class=\"sig-param\">order=1</em>, <em class=\"sig-param\">mode='constant'</em>, <em class=\"sig-param\">cval=0</em>, <em class=\"sig-param\">num_processes=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.reslice\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reslice data with new voxel resolution defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">new_zooms</span></code></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt><dd><p>3d volume or 4d volume with datasets</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">array, shape (4,4)</span></dt><dd><p>mapping from voxel coordinates to world coordinates</p>\n</dd>\n<dt><strong>zooms</strong><span class=\"classifier\">tuple, shape (3,)</span></dt><dd><p>voxel size for (i,j,k) dimensions</p>\n</dd>\n<dt><strong>new_zooms</strong><span class=\"classifier\">tuple, shape (3,)</span></dt><dd><p>new voxel size for (i,j,k) after resampling</p>\n</dd>\n<dt><strong>order</strong><span class=\"classifier\">int, from 0 to 5</span></dt><dd><p>order of interpolation for resampling/reslicing,\n0 nearest interpolation, 1 trilinear etc..\nif you don\u2019t want any smoothing 0 is the option you need.</p>\n</dd>\n<dt><strong>mode</strong><span class=\"classifier\">string (\u2018constant\u2019, \u2018nearest\u2019, \u2018reflect\u2019 or \u2018wrap\u2019)</span></dt><dd><p>Points outside the boundaries of the input are filled according\nto the given mode.</p>\n</dd>\n<dt><strong>cval</strong><span class=\"classifier\">float</span></dt><dd><p>Value used for points outside the boundaries of the input if\nmode=\u2019constant\u2019.</p>\n</dd>\n<dt><strong>num_processes</strong><span class=\"classifier\">int</span></dt><dd><p>Split the calculation to a pool of children processes. This only\napplies to 4D <cite>data</cite> arrays. If a positive integer then it defines\nthe size of the multiprocessing pool that will be used. If 0, then\nthe size of the pool will equal the number of cores available.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>data2</strong><span class=\"classifier\">array, shape (I,J,K) or (I,J,K,N)</span></dt><dd><p>datasets resampled into isotropic voxel size</p>\n</dd>\n<dt><strong>affine2</strong><span class=\"classifier\">array, shape (4,4)</span></dt><dd><p>new affine for the resampled image</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.align.reslice</span> <span class=\"k\">import</span> <span class=\"n\">reslice</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f_name</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;aniso_vox&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">f_name</span><span class=\"p\">,</span> <span class=\"n\">return_voxsize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">58</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">zooms</span>\n<span class=\"go\">(4.0, 4.0, 5.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">,</span><span class=\"mf\">3.</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_zooms</span>\n<span class=\"go\">(3.0, 3.0, 3.0)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"p\">,</span> <span class=\"n\">affine2</span> <span class=\"o\">=</span> <span class=\"n\">reslice</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">zooms</span><span class=\"p\">,</span> <span class=\"n\">new_zooms</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data2</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-nifti\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#save-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-qa-metric\">\n<h3>save_qa_metric<a class=\"headerlink\" href=\"#save-qa-metric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.save_qa_metric\">\n<code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">save_qa_metric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">xopt</em>, <em class=\"sig-param\">fopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.save_qa_metric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save Quality Assurance metrics.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname: string</strong></dt><dd><p>File name to save the metric values.</p>\n</dd>\n<dt><strong>xopt: numpy array</strong></dt><dd><p>The metric containing the\noptimal parameters for\nimage registration.</p>\n</dd>\n<dt><strong>fopt: int</strong></dt><dd><p>The distance between the registered images.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slr-with-qbx\">\n<h3>slr_with_qbx<a class=\"headerlink\" href=\"#slr-with-qbx\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.slr_with_qbx\">\n<code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">slr_with_qbx</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static, moving, x0='affine', rm_small_clusters=50, maxiter=100, select_random=None, verbose=False, greater_than=50, less_than=250, qbx_thr=[40, 30, 20, 15], nb_pts=20, progressive=True, rng=None, num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.slr_with_qbx\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Utility function for registering large tractograms.</p>\n<p>For efficiency we apply the registration on cluster centroids and remove\nsmall clusters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>moving</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>x0</strong><span class=\"classifier\">str, optional.</span></dt><dd><p>rigid, similarity or affine transformation model (default affine)</p>\n</dd>\n<dt><strong>rm_small_clusters</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Remove clusters that have less than <cite>rm_small_clusters</cite> (default 50)</p>\n</dd>\n<dt><strong>select_random</strong><span class=\"classifier\">int, optional.</span></dt><dd><p>If not None select a random number of streamlines to apply clustering\nDefault None.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, logs information about optimization. Default: False</p>\n</dd>\n<dt><strong>greater_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines have length less than this value (default 250)</p>\n</dd>\n<dt><strong>qbx_thr</strong><span class=\"classifier\">variable int</span></dt><dd><p>Thresholds for QuickBundlesX (default [40, 30, 20, 15])</p>\n</dd>\n<dt><strong>np_pts</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of points for discretizing each streamline (default 20)</p>\n</dd>\n<dt><strong>progressive</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>(default True)</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>If None creates RandomState in function.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used. Only metrics using OpenMP will use this variable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The order of operations is the following. First short or long streamlines\nare removed. Second the tractogram or a random selection of the tractogram\nis clustered with QuickBundles. Then SLR <a class=\"reference internal\" href=\"#r890e584ccf15-garyfallidis15\" id=\"id12\">[Garyfallidis15]</a> is applied.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r890e584ccf15-garyfallidis15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id12\">Garyfallidis15</a></span></dt>\n<dd><p>Garyfallidis et al. \u201cRobust and efficient linear</p>\n</dd>\n</dl>\n<p>registration of white-matter fascicles in the space of streamlines\u201d,\nNeuroImage, 117, 124\u2013140, 2015\n.. [R890e584ccf15-Garyfallidis14] Garyfallidis et al., \u201cDirect native-space fiber</p>\n<blockquote>\n<div><p>bundle alignment for group comparisons\u201d, ISMRM, 2014.</p>\n</div></blockquote>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r890e584ccf15-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter</p>\n</dd>\n</dl>\n<p>bundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-centers-of-mass\">\n<h3>transform_centers_of_mass<a class=\"headerlink\" href=\"#transform-centers-of-mass\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.transform_centers_of_mass\">\n<code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">transform_centers_of_mass</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">static</em>, <em class=\"sig-param\">static_grid2world</em>, <em class=\"sig-param\">moving</em>, <em class=\"sig-param\">moving_grid2world</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.transform_centers_of_mass\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transformation to align the center of mass of the input images.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>static</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>static image</p>\n</dd>\n<dt><strong>static_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the static image</p>\n</dd>\n<dt><strong>moving</strong><span class=\"classifier\">array, shape (S, R, C)</span></dt><dd><p>moving image</p>\n</dd>\n<dt><strong>moving_grid2world</strong><span class=\"classifier\">array, shape (dim+1, dim+1)</span></dt><dd><p>the voxel-to-space transformation of the moving image</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>affine_map</strong><span class=\"classifier\">instance of AffineMap</span></dt><dd><p>the affine transformation (translation only, in this case) aligning\nthe center of mass of the moving image towards the one of the static\nimage</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-streamlines\">\n<h3>transform_streamlines<a class=\"headerlink\" href=\"#transform-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.align.transform_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.workflows.align.</code><code class=\"sig-name descname\">transform_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">mat</em>, <em class=\"sig-param\">in_place=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.align.transform_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine transformation to streamlines</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Streamlines object</p>\n</dd>\n<dt><strong>mat</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd><p>transformation matrix</p>\n</dd>\n<dt><strong>in_place</strong><span class=\"classifier\">bool</span></dt><dd><p>If True then change data in place.\nBe careful changes input streamlines.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Sequence transformed 2D ndarrays of shape[-1]==3</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"introspectiveargumentparser\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"dipy.workflows.base.IntrospectiveArgumentParser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a><a class=\"headerlink\" href=\"#introspectiveargumentparser\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.base.</code><code class=\"sig-name descname\">IntrospectiveArgumentParser</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">prog=None</em>, <em class=\"sig-param\">usage=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">epilog=None</em>, <em class=\"sig-param\">parents=[]</em>, <em class=\"sig-param\">formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em class=\"sig-param\">prefix_chars='-'</em>, <em class=\"sig-param\">fromfile_prefix_chars=None</em>, <em class=\"sig-param\">argument_default=None</em>, <em class=\"sig-param\">conflict_handler='resolve'</em>, <em class=\"sig-param\">add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">argparse.ArgumentParser</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>optional_parameters</strong></dt><dd></dd>\n<dt><strong>output_parameters</strong></dt><dd></dd>\n<dt><strong>positional_parameters</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_argument</span></code>(dest,\u00a0\u2026[,\u00a0name,\u00a0name])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_sub_flow_args</span></code></a>(self,\u00a0sub_flows)</p></td>\n<td><p>Take an array of workflow objects and use introspection to extract the parameters, types and docstrings of their run method.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_subparsers</span></code>(self,\u00a0\\*\\*kwargs)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_workflow</span></code></a>(self,\u00a0workflow)</p></td>\n<td><p>Take a workflow object and use introspection to extract the parameters, types and docstrings of its run method.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">error</span></code>(message)</p></td>\n<td><p>Prints a usage message incorporating the message to stderr and exits.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">exit</span></code>(self[,\u00a0status,\u00a0message])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">format_usage</span></code>(self)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\" title=\"dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_flow_args</span></code></a>(self[,\u00a0args,\u00a0namespace])</p></td>\n<td><p>Returns the parsed arguments as a dictionary that will be used as a workflow\u2019s run method arguments.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">parse_args</span></code>(self[,\u00a0args,\u00a0namespace])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_usage</span></code>(self[,\u00a0file])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register</span></code>(self,\u00a0registry_name,\u00a0value,\u00a0object)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_defaults</span></code>(self,\u00a0\\*\\*kwargs)</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 76%\" />\n<col style=\"width: 24%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>add_argument_group</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>add_description</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>add_epilogue</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>add_mutually_exclusive_group</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>convert_arg_line_to_args</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>format_help</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>get_default</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>parse_intermixed_args</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>parse_known_args</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>parse_known_intermixed_args</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>print_help</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>show_argument</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>update_argument</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">prog=None</em>, <em class=\"sig-param\">usage=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">epilog=None</em>, <em class=\"sig-param\">parents=[]</em>, <em class=\"sig-param\">formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em class=\"sig-param\">prefix_chars='-'</em>, <em class=\"sig-param\">fromfile_prefix_chars=None</em>, <em class=\"sig-param\">argument_default=None</em>, <em class=\"sig-param\">conflict_handler='resolve'</em>, <em class=\"sig-param\">add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting the argument parser to allow automatic creation of\narguments from workflows</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>prog</strong><span class=\"classifier\">None</span></dt><dd><p>The name of the program (default: sys.argv[0])</p>\n</dd>\n<dt><strong>usage</strong><span class=\"classifier\">None</span></dt><dd><p>A usage message (default: auto-generated from arguments)</p>\n</dd>\n<dt><strong>description</strong><span class=\"classifier\">str</span></dt><dd><p>A description of what the program does</p>\n</dd>\n<dt><strong>epilog</strong><span class=\"classifier\">str</span></dt><dd><p>Text following the argument descriptions</p>\n</dd>\n<dt><strong>parents</strong><span class=\"classifier\">list</span></dt><dd><p>Parsers whose arguments should be copied into this one</p>\n</dd>\n<dt><strong>formatter_class</strong><span class=\"classifier\">obj</span></dt><dd><p>HelpFormatter class for printing help messages</p>\n</dd>\n<dt><strong>prefix_chars</strong><span class=\"classifier\">str</span></dt><dd><p>Characters that prefix optional arguments</p>\n</dd>\n<dt><strong>fromfile_prefix_chars</strong><span class=\"classifier\">None</span></dt><dd><p>Characters that prefix files containing additional arguments</p>\n</dd>\n<dt><strong>argument_default</strong><span class=\"classifier\">None</span></dt><dd><p>The default value for all arguments</p>\n</dd>\n<dt><strong>conflict_handler</strong><span class=\"classifier\">str</span></dt><dd><p>String indicating how to handle conflicts</p>\n</dd>\n<dt><strong>add_help</strong><span class=\"classifier\">bool</span></dt><dd><p>Add a -h/-help option</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_description\">\n<code class=\"sig-name descname\">add_description</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_description\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\">\n<code class=\"sig-name descname\">add_epilogue</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_epilogue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\">\n<code class=\"sig-name descname\">add_sub_flow_args</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">sub_flows</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take an array of workflow objects and use introspection to extract\nthe parameters, types and docstrings of their run method. Only the\noptional input parameters are extracted for these as they are treated\nas sub workflows.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sub_flows</strong><span class=\"classifier\">array of dipy.workflows.workflow.Workflow</span></dt><dd><p>Workflows to inspect.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>sub_flow_optionals</strong><span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\">\n<code class=\"sig-name descname\">add_workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">workflow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.add_workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take a workflow object and use introspection to extract the parameters,\ntypes and docstrings of its run method. Then add these parameters\nto the current arparser\u2019s own params to parse. If the workflow is of\ntype combined_workflow, the optional input parameters of its\nsub workflows will also be added.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>workflow</strong><span class=\"classifier\">dipy.workflows.workflow.Workflow</span></dt><dd><p>Workflow from which to infer parameters.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>sub_flow_optionals</strong><span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\">\n<code class=\"sig-name descname\">get_flow_args</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">args=None</em>, <em class=\"sig-param\">namespace=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.get_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the parsed arguments as a dictionary that will be used\nas a workflow\u2019s run method arguments.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.optional_parameters\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">optional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.optional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.output_parameters\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">output_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.output_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.positional_parameters\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">positional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.positional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.show_argument\">\n<code class=\"sig-name descname\">show_argument</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dest</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.show_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.IntrospectiveArgumentParser.update_argument\">\n<code class=\"sig-name descname\">update_argument</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.IntrospectiveArgumentParser.update_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"numpydocstring\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"dipy.workflows.base.NumpyDocString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a><a class=\"headerlink\" href=\"#numpydocstring\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.base.NumpyDocString\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.base.</code><code class=\"sig-name descname\">NumpyDocString</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">docstring</em>, <em class=\"sig-param\">config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.NumpyDocString\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.base.NumpyDocString.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">docstring</em>, <em class=\"sig-param\">config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.NumpyDocString.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-args-default\">\n<h3>get_args_default<a class=\"headerlink\" href=\"#get-args-default\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.base.get_args_default\">\n<code class=\"sig-prename descclassname\">dipy.workflows.base.</code><code class=\"sig-name descname\">get_args_default</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.base.get_args_default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"combinedworkflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a><a class=\"headerlink\" href=\"#combinedworkflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.combined_workflow.</code><code class=\"sig-name descname\">CombinedWorkflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='append'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_optionals</span></code></a>(self,\u00a0flow,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Returns the sub flow\u2019s optional arguments merged with those passed as params in kwargs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Returns a list of tuples (sub flow name, sub flow run method, sub flow short name) to be used in the sub flow parameters extraction.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run_sub_flow</span></code></a>(self,\u00a0flow,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Runs the sub flow with the optional parameters passed via the command line.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\" title=\"dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_sub_flows_optionals</span></code></a>(self,\u00a0opts)</p></td>\n<td><p>Sets the self._optionals variable with all sub flow arguments that were passed in the commandline.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='append'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow that combines multiple workflows.\nThe workflow combined together are referred as sub flows in this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\">\n<code class=\"sig-name descname\">get_optionals</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">flow</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the sub flow\u2019s optional arguments merged with those passed\nas params in kwargs.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a list of tuples\n(sub flow name, sub flow run method, sub flow short name)\nto be used in the sub flow parameters extraction.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\">\n<code class=\"sig-name descname\">run_sub_flow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">flow</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.run_sub_flow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Runs the sub flow with the optional parameters passed via the\ncommand line. This is a convenience method to make sub flow running\nmore intuitive on the concrete CombinedWorkflow side.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\">\n<code class=\"sig-name descname\">set_sub_flows_optionals</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">opts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.CombinedWorkflow.set_sub_flows_optionals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the self._optionals variable with all sub flow arguments\nthat were passed in the commandline.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id16\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"dipy.workflows.combined_workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id16\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.combined_workflow.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_io_iterator\" title=\"dipy.workflows.combined_workflow.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_short_name\" title=\"dipy.workflows.combined_workflow.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.get_sub_runs\" title=\"dipy.workflows.combined_workflow.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\" title=\"dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.combined_workflow.Workflow.run\" title=\"dipy.workflows.combined_workflow.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.combined_workflow.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.combined_workflow.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gibbsringingflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.GibbsRingingFlow\" title=\"dipy.workflows.denoise.GibbsRingingFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GibbsRingingFlow</span></code></a><a class=\"headerlink\" href=\"#gibbsringingflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.GibbsRingingFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">GibbsRingingFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.GibbsRingingFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.GibbsRingingFlow.get_short_name\" title=\"dipy.workflows.denoise.GibbsRingingFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.GibbsRingingFlow.run\" title=\"dipy.workflows.denoise.GibbsRingingFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files[,\u00a0slice_axis,\u00a0\u2026])</p></td>\n<td><p>Workflow for applying Gibbs Ringing method.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.GibbsRingingFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.GibbsRingingFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.GibbsRingingFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.GibbsRingingFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.GibbsRingingFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">slice_axis=2</em>, <em class=\"sig-param\">n_points=3</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_unring='dwi_unrig.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.GibbsRingingFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for applying Gibbs Ringing method.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>slice_axis</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Data axis corresponding to the number of acquired slices.\nDefault is set to the third axis(2). Could be (0, 1, or 2).</p>\n</dd>\n<dt><strong>n_points</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of neighbour points to access local TV (see note).\nDefault is set to 3.</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_unrig</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the resulting denoised volume (default: dwi_unrig.nii.gz)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rc07c82991b0f-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Neto Henriques, R., 2018. Advanced Methods for Diffusion MRI</p>\n</dd>\n</dl>\n<p>Data Analysis and their Application to the Healthy Ageing Brain\n(Doctoral thesis). <a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rc07c82991b0f-2\"><span class=\"brackets\">2</span></dt>\n<dd><p>Kellner E, Dhital B, Kiselev VG, Reisert M. Gibbs-ringing</p>\n</dd>\n</dl>\n<p>artifact removal based on local subvoxel-shifts. Magn Reson Med. 2016\ndoi: 10.1002/mrm.26054.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"lpcaflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.LPCAFlow\" title=\"dipy.workflows.denoise.LPCAFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LPCAFlow</span></code></a><a class=\"headerlink\" href=\"#lpcaflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.LPCAFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">LPCAFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.LPCAFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.LPCAFlow.get_short_name\" title=\"dipy.workflows.denoise.LPCAFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.LPCAFlow.run\" title=\"dipy.workflows.denoise.LPCAFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files,\u00a0bvalues_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Workflow wrapping LPCA denoising method.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.LPCAFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.LPCAFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.LPCAFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.LPCAFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.LPCAFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">bvalues_files</em>, <em class=\"sig-param\">bvectors_files</em>, <em class=\"sig-param\">sigma=0</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">bvecs_tol=0.01</em>, <em class=\"sig-param\">patch_radius=2</em>, <em class=\"sig-param\">pca_method='eig'</em>, <em class=\"sig-param\">tau_factor=2.3</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_denoised='dwi_lpca.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.LPCAFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping LPCA denoising method.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>sigma</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Standard deviation of the noise estimated from the data.\nDefault 0: it means sigma value estimation with the Manjon2013\nalgorithm <a class=\"reference internal\" href=\"#r12794e15acda-3\" id=\"id19\">[3]</a>.</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>bvecs_tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to check that norm(bvec) = 1 +/- bvecs_tol\nb-vectors are unit vectors (default 0.01)</p>\n</dd>\n<dt><strong>patch_radius</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The radius of the local patch to be taken around each voxel (in\nvoxels). Default: 2 (denoise in blocks of 5x5x5 voxels).</p>\n</dd>\n<dt><strong>pca_method</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Use either eigenvalue decomposition (\u2018eig\u2019) or singular value\ndecomposition (\u2018svd\u2019) for principal component analysis. The default\nmethod is \u2018eig\u2019 which is faster. However, occasionally \u2018svd\u2019 might\nbe more accurate.</p>\n</dd>\n<dt><strong>tau_factor</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Thresholding of PCA eigenvalues is done by nulling out eigenvalues\nthat are smaller than:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\tau = (\\tau_{factor} \\sigma)^2\\]</div>\n<p>tau_{factor} can be change to adjust the relationship between the\nnoise standard deviation and the threshold tau. If tau_{factor}\nis set to None, it will be automatically calculated using the\nMarcenko-Pastur distribution <a class=\"reference internal\" href=\"#r12794e15acda-2\" id=\"id20\">[2]</a>.\nDefault: 2.3 (according to <a class=\"reference internal\" href=\"#r12794e15acda-1\" id=\"id21\">[1]</a>)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_denoised</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the resulting denoised volume (default: dwi_lpca.nii.gz)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r12794e15acda-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id21\">1</a></span></dt>\n<dd><p>Veraart J, Novikov DS, Christiaens D, Ades-aron B, Sijbers,</p>\n</dd>\n</dl>\n<p>Fieremans E, 2016. Denoising of Diffusion MRI using random\nmatrix theory. Neuroimage 142:394-406.\ndoi: 10.1016/j.neuroimage.2016.08.016</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r12794e15acda-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id20\">2</a></span></dt>\n<dd><p>Veraart J, Fieremans E, Novikov DS. 2016. Diffusion MRI noise</p>\n</dd>\n</dl>\n<p>mapping using random matrix theory. Magnetic Resonance in\nMedicine.\ndoi: 10.1002/mrm.26059.</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r12794e15acda-3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id19\">3</a></span></dt>\n<dd><p>Manjon JV, Coupe P, Concha L, Buades A, Collins DL (2013)</p>\n</dd>\n</dl>\n<p>Diffusion Weighted Image Denoising Using Overcomplete Local\nPCA. PLoS ONE 8(9): e73021.\n<a class=\"reference external\" href=\"https://doi.org/10.1371/journal.pone.0073021\">https://doi.org/10.1371/journal.pone.0073021</a></p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mppcaflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.MPPCAFlow\" title=\"dipy.workflows.denoise.MPPCAFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MPPCAFlow</span></code></a><a class=\"headerlink\" href=\"#mppcaflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.MPPCAFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">MPPCAFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.MPPCAFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.MPPCAFlow.get_short_name\" title=\"dipy.workflows.denoise.MPPCAFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.MPPCAFlow.run\" title=\"dipy.workflows.denoise.MPPCAFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files[,\u00a0patch_radius,\u00a0\u2026])</p></td>\n<td><p>Workflow wrapping Marcenko-Pastur PCA denoising method.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.MPPCAFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.MPPCAFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.MPPCAFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.MPPCAFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.MPPCAFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">patch_radius=2</em>, <em class=\"sig-param\">pca_method='eig'</em>, <em class=\"sig-param\">return_sigma=False</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_denoised='dwi_mppca.nii.gz'</em>, <em class=\"sig-param\">out_sigma='dwi_sigma.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.MPPCAFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping Marcenko-Pastur PCA denoising method.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>patch_radius</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The radius of the local patch to be taken around each voxel (in\nvoxels). Default: 2 (denoise in blocks of 5x5x5 voxels).</p>\n</dd>\n<dt><strong>pca_method</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Use either eigenvalue decomposition (\u2018eig\u2019) or singular value\ndecomposition (\u2018svd\u2019) for principal component analysis. The default\nmethod is \u2018eig\u2019 which is faster. However, occasionally \u2018svd\u2019 might\nbe more accurate.</p>\n</dd>\n<dt><strong>return_sigma</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If true, a noise standard deviation estimate based on the\nMarcenko-Pastur distribution is returned <a class=\"reference internal\" href=\"#r2d507bd74b97-2\" id=\"id25\">[2]</a>.\nDefault: False.</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_denoised</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the resulting denoised volume (default: dwi_mppca.nii.gz)</p>\n</dd>\n<dt><strong>out_sigma</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the resulting sigma volume (default: dwi_sigma.nii.gz)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r2d507bd74b97-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Veraart J, Novikov DS, Christiaens D, Ades-aron B, Sijbers,</p>\n</dd>\n</dl>\n<p>Fieremans E, 2016. Denoising of Diffusion MRI using random matrix\ntheory. Neuroimage 142:394-406.\ndoi: 10.1016/j.neuroimage.2016.08.016</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r2d507bd74b97-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id25\">2</a></span></dt>\n<dd><p>Veraart J, Fieremans E, Novikov DS. 2016. Diffusion MRI noise</p>\n</dd>\n</dl>\n<p>mapping using random matrix theory. Magnetic Resonance in Medicine.\ndoi: 10.1002/mrm.26059.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeansflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"dipy.workflows.denoise.NLMeansFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a><a class=\"headerlink\" href=\"#nlmeansflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">NLMeansFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow.get_short_name\" title=\"dipy.workflows.denoise.NLMeansFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.NLMeansFlow.run\" title=\"dipy.workflows.denoise.NLMeansFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files[,\u00a0sigma,\u00a0\u2026])</p></td>\n<td><p>Workflow wrapping the nlmeans denoising method.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.NLMeansFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">sigma=0</em>, <em class=\"sig-param\">patch_radius=1</em>, <em class=\"sig-param\">block_radius=5</em>, <em class=\"sig-param\">rician=True</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_denoised='dwi_nlmeans.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.NLMeansFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping the nlmeans denoising method.</p>\n<p>It applies nlmeans denoise on each file found by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the results in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>sigma</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Sigma parameter to pass to the nlmeans algorithm\n(default: auto estimation).</p>\n</dd>\n<dt><strong>patch_radius</strong><span class=\"classifier\">int, optional</span></dt><dd><p>patch size is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</dd>\n<dt><strong>block_radius</strong><span class=\"classifier\">int, optional</span></dt><dd><p>block size is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</dd>\n<dt><strong>rician</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_denoised</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the resulting denoised volume (default: dwi_nlmeans.nii.gz)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r8cf496d464db-descoteaux08\"><span class=\"brackets\">Descoteaux08</span></dt>\n<dd><p>Descoteaux, Maxime and Wiest-Daessl\u00e9, Nicolas and</p>\n</dd>\n</dl>\n<p>Prima, Sylvain and Barillot, Christian and Deriche, Rachid.\nImpact of Rician Adapted Non-Local Means Filtering on\nHARDI, MICCAI 2008</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id29\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow\" title=\"dipy.workflows.denoise.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id29\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.denoise.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_io_iterator\" title=\"dipy.workflows.denoise.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_short_name\" title=\"dipy.workflows.denoise.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.get_sub_runs\" title=\"dipy.workflows.denoise.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.manage_output_overwrite\" title=\"dipy.workflows.denoise.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.denoise.Workflow.run\" title=\"dipy.workflows.denoise.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.denoise.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"estimate-sigma\">\n<h3>estimate_sigma<a class=\"headerlink\" href=\"#estimate-sigma\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.estimate_sigma\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">estimate_sigma</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">arr</em>, <em class=\"sig-param\">disable_background_masking=False</em>, <em class=\"sig-param\">N=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.estimate_sigma\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Standard deviation estimation from local patches</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>arr</strong><span class=\"classifier\">3D or 4D ndarray</span></dt><dd><p>The array to be estimated</p>\n</dd>\n<dt><strong>disable_background_masking</strong><span class=\"classifier\">bool, default False</span></dt><dd><p>If True, uses all voxels for the estimation, otherwise, only non-zeros\nvoxels are used. Useful if the background is masked by the scanner.</p>\n</dd>\n<dt><strong>N</strong><span class=\"classifier\">int, default 0</span></dt><dd><p>Number of coils of the receiver array. Use N = 1 in case of a SENSE\nreconstruction (Philips scanners) or the number of coils for a GRAPPA\nreconstruction (Siemens and GE). Use 0 to disable the correction factor,\nas for example if the noise is Gaussian distributed. See [1] for more\ninformation.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>sigma</strong><span class=\"classifier\">ndarray</span></dt><dd><p>standard deviation of the noise, one estimation per volume.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This function is the same as manually taking the standard deviation of the\nbackground and gives one value for the whole 3D array.\nIt also includes the coil-dependent correction factor of Koay 2006\n(see <a class=\"reference internal\" href=\"#r348d3e763c4c-1\" id=\"id30\">[1]</a>, equation 18) with theta = 0.\nSince this function was introduced in <a class=\"reference internal\" href=\"#r348d3e763c4c-2\" id=\"id31\">[2]</a> for T1 imaging,\nit is expected to perform ok on diffusion MRI data, but might oversmooth\nsome regions and leave others un-denoised for spatially varying noise\nprofiles. Consider using <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">piesno()</span></code> to estimate sigma instead if visual\ninaccuracies are apparent in the denoised result.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r348d3e763c4c-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id30\">1</a></span></dt>\n<dd><p>Koay, C. G., &amp; Basser, P. J. (2006). Analytically exact correction</p>\n</dd>\n</dl>\n<p>scheme for signal extraction from noisy magnitude MR signals.\nJournal of Magnetic Resonance), 179(2), 317-22.</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r348d3e763c4c-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id31\">2</a></span></dt>\n<dd><p>Coupe, P., Yger, P., Prima, S., Hellier, P., Kervrann, C., Barillot,</p>\n</dd>\n</dl>\n<p>C., 2008. An optimized blockwise nonlocal means denoising filter for 3-D\nmagnetic resonance images, IEEE Trans. Med. Imaging 27, 425-41.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gibbs-removal\">\n<h3>gibbs_removal<a class=\"headerlink\" href=\"#gibbs-removal\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.gibbs_removal\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">gibbs_removal</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vol</em>, <em class=\"sig-param\">slice_axis=2</em>, <em class=\"sig-param\">n_points=3</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.gibbs_removal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Suppresses Gibbs ringing artefacts of images volumes.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vol</strong><span class=\"classifier\">ndarray ([X, Y]), ([X, Y, Z]) or ([X, Y, Z, g])</span></dt><dd><p>Matrix containing one volume (3D) or multiple (4D) volumes of images.</p>\n</dd>\n<dt><strong>slice_axis</strong><span class=\"classifier\">int (0, 1, or 2)</span></dt><dd><p>Data axis corresponding to the number of acquired slices.\nDefault is set to the third axis.</p>\n</dd>\n<dt><strong>n_points</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of neighbour points to access local TV (see note).\nDefault is set to 3.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>vol</strong><span class=\"classifier\">ndarray ([X, Y]), ([X, Y, Z]) or ([X, Y, Z, g])</span></dt><dd><p>Matrix containing one volume (3D) or multiple (4D) volumes of corrected\nimages.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>For 4D matrix last element should always correspond to the number of\ndiffusion gradient directions.</p>\n<p class=\"rubric\">References</p>\n<p>Please cite the following articles\n.. [Rae70c6436165-1] Neto Henriques, R., 2018. Advanced Methods for Diffusion MRI Data</p>\n<blockquote>\n<div><p>Analysis and their Application to the Healthy Ageing Brain\n(Doctoral thesis). <a class=\"reference external\" href=\"https://doi.org/10.17863/CAM.29356\">https://doi.org/10.17863/CAM.29356</a></p>\n</div></blockquote>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rae70c6436165-2\"><span class=\"brackets\">2</span></dt>\n<dd><p>Kellner E, Dhital B, Kiselev VG, Reisert M. Gibbs-ringing artifact\nremoval based on local subvoxel-shifts. Magn Reson Med. 2016\ndoi: 10.1002/mrm.26054.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient-table\">\n<h3>gradient_table<a class=\"headerlink\" href=\"#gradient-table\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.gradient_table\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">gradient_table</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bvecs=None</em>, <em class=\"sig-param\">big_delta=None</em>, <em class=\"sig-param\">small_delta=None</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.gradient_table\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">can be any of the four options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N,) or (1, N) or (N, 1) with the b-values.</p></li>\n<li><p>a path for the file which contains an array like the above (1).</p></li>\n<li><p>an array of shape (N, 4) or (4, N). Then this parameter is\nconsidered to be a b-table which contains both bvals and bvecs. In\nthis case the next parameter is skipped.</p></li>\n<li><p>a path for the file which contains an array like the one at (3).</p></li>\n</ol>\n</dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">can be any of two options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N, 3) or (3, N) with the b-vectors.</p></li>\n<li><p>a path for the file which contains an array like the previous.</p></li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse separation time in seconds (default None)</p>\n</dd>\n<dt><strong>small_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse duration time in seconds (default None)</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float</span></dt><dd><p>All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li><p>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</p></li>\n<li><p>We assume that the minimum number of b-values is 7.</p></li>\n<li><p>B-vectors should be unit vectors.</p></li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id36\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id36\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"localpca\">\n<h3>localpca<a class=\"headerlink\" href=\"#localpca\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.localpca\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">localpca</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">arr</em>, <em class=\"sig-param\">sigma</em>, <em class=\"sig-param\">mask=None</em>, <em class=\"sig-param\">patch_radius=2</em>, <em class=\"sig-param\">pca_method='eig'</em>, <em class=\"sig-param\">tau_factor=2.3</em>, <em class=\"sig-param\">out_dtype=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.localpca\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Performs local PCA denoising according to Manjon et al. <a class=\"reference internal\" href=\"#r6bfcd8fc206f-1\" id=\"id37\">[1]</a>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>arr</strong><span class=\"classifier\">4D array</span></dt><dd><p>Array of data to be denoised. The dimensions are (X, Y, Z, N), where N\nare the diffusion gradient directions.</p>\n</dd>\n<dt><strong>sigma</strong><span class=\"classifier\">float or 3D array</span></dt><dd><p>Standard deviation of the noise estimated from the data.</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">3D boolean array (optional)</span></dt><dd><p>A mask with voxels that are true inside the brain and false outside of\nit. The function denoises within the true part and returns zeros\noutside of those voxels.</p>\n</dd>\n<dt><strong>patch_radius</strong><span class=\"classifier\">int (optional)</span></dt><dd><p>The radius of the local patch to be taken around each voxel (in\nvoxels). Default: 2 (denoise in blocks of 5x5x5 voxels).</p>\n</dd>\n<dt><strong>pca_method</strong><span class=\"classifier\">\u2018eig\u2019 or \u2018svd\u2019 (optional)</span></dt><dd><p>Use either eigenvalue decomposition (eig) or singular value\ndecomposition (svd) for principal component analysis. The default\nmethod is \u2018eig\u2019 which is faster. However, occasionally \u2018svd\u2019 might be\nmore accurate.</p>\n</dd>\n<dt><strong>tau_factor</strong><span class=\"classifier\">float (optional)</span></dt><dd><p>Thresholding of PCA eigenvalues is done by nulling out eigenvalues that\nare smaller than:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\tau = (\\tau_{factor} \\sigma)^2\\]</div>\n<p>tau_{factor} can be change to adjust the relationship between the\nnoise standard deviation and the threshold tau. If tau_{factor} is\nset to None, it will be automatically calculated using the\nMarcenko-Pastur distribution <a class=\"reference internal\" href=\"#r6bfcd8fc206f-2\" id=\"id38\">[2]</a>.\nDefault: 2.3 (according to <a class=\"reference internal\" href=\"#r6bfcd8fc206f-1\" id=\"id39\">[1]</a>)</p>\n</dd>\n<dt><strong>out_dtype</strong><span class=\"classifier\">str or dtype (optional)</span></dt><dd><p>The dtype for the output array. Default: output has the same dtype as\nthe input.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>denoised_arr</strong><span class=\"classifier\">4D array</span></dt><dd><p>This is the denoised array of the same size as that of the input data,\nclipped to non-negative values</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r6bfcd8fc206f-1\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id37\">1</a>,<a href=\"#id39\">2</a>)</span></dt>\n<dd><p>Manjon JV, Coupe P, Concha L, Buades A, Collins DL (2013)\nDiffusion Weighted Image Denoising Using Overcomplete Local\nPCA. PLoS ONE 8(9): e73021.\n<a class=\"reference external\" href=\"https://doi.org/10.1371/journal.pone.0073021\">https://doi.org/10.1371/journal.pone.0073021</a></p>\n</dd>\n<dt class=\"label\" id=\"r6bfcd8fc206f-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id38\">2</a></span></dt>\n<dd><p>Veraart J, Novikov DS, Christiaens D, Ades-aron B, Sijbers,\nFieremans E, 2016. Denoising of Diffusion MRI using random matrix\ntheory. Neuroimage 142:394-406.\ndoi: 10.1016/j.neuroimage.2016.08.016</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mppca\">\n<h3>mppca<a class=\"headerlink\" href=\"#mppca\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.mppca\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">mppca</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">arr</em>, <em class=\"sig-param\">mask=None</em>, <em class=\"sig-param\">patch_radius=2</em>, <em class=\"sig-param\">pca_method='eig'</em>, <em class=\"sig-param\">return_sigma=False</em>, <em class=\"sig-param\">out_dtype=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.mppca\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Performs PCA-based denoising using the Marcenko-Pastur\ndistribution <a class=\"reference internal\" href=\"#r78990d02ca6e-1\" id=\"id42\">[1]</a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>arr</strong><span class=\"classifier\">4D array</span></dt><dd><p>Array of data to be denoised. The dimensions are (X, Y, Z, N), where N\nare the diffusion gradient directions.</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">3D boolean array (optional)</span></dt><dd><p>A mask with voxels that are true inside the brain and false outside of\nit. The function denoises within the true part and returns zeros\noutside of those voxels.</p>\n</dd>\n<dt><strong>patch_radius</strong><span class=\"classifier\">int (optional)</span></dt><dd><p>The radius of the local patch to be taken around each voxel (in\nvoxels). Default: 2 (denoise in blocks of 5x5x5 voxels).</p>\n</dd>\n<dt><strong>pca_method</strong><span class=\"classifier\">\u2018eig\u2019 or \u2018svd\u2019 (optional)</span></dt><dd><p>Use either eigenvalue decomposition (eig) or singular value\ndecomposition (svd) for principal component analysis. The default\nmethod is \u2018eig\u2019 which is faster. However, occasionally \u2018svd\u2019 might be\nmore accurate.</p>\n</dd>\n<dt><strong>return_sigma</strong><span class=\"classifier\">bool (optional)</span></dt><dd><p>If true, a noise standard deviation estimate based on the\nMarcenko-Pastur distribution is returned <a class=\"reference internal\" href=\"#r78990d02ca6e-2\" id=\"id43\">[2]</a>.\nDefault: False.</p>\n</dd>\n<dt><strong>out_dtype</strong><span class=\"classifier\">str or dtype (optional)</span></dt><dd><p>The dtype for the output array. Default: output has the same dtype as\nthe input.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>denoised_arr</strong><span class=\"classifier\">4D array</span></dt><dd><p>This is the denoised array of the same size as that of the input data,\nclipped to non-negative values</p>\n</dd>\n<dt><strong>sigma</strong><span class=\"classifier\">3D array (when return_sigma=True)</span></dt><dd><p>Estimate of the spatial varying standard deviation of the noise</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r78990d02ca6e-1\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id1\">1</a>,<a href=\"#id42\">2</a>)</span></dt>\n<dd><p>Veraart J, Novikov DS, Christiaens D, Ades-aron B, Sijbers,\nFieremans E, 2016. Denoising of Diffusion MRI using random matrix\ntheory. Neuroimage 142:394-406.\ndoi: 10.1016/j.neuroimage.2016.08.016</p>\n</dd>\n<dt class=\"label\" id=\"r78990d02ca6e-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id43\">2</a></span></dt>\n<dd><p>Veraart J, Fieremans E, Novikov DS. 2016. Diffusion MRI noise\nmapping using random matrix theory. Magnetic Resonance in Medicine.\ndoi: 10.1002/mrm.26059.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nlmeans\">\n<h3>nlmeans<a class=\"headerlink\" href=\"#nlmeans\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.nlmeans\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">nlmeans</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">arr</em>, <em class=\"sig-param\">sigma</em>, <em class=\"sig-param\">mask=None</em>, <em class=\"sig-param\">patch_radius=1</em>, <em class=\"sig-param\">block_radius=5</em>, <em class=\"sig-param\">rician=True</em>, <em class=\"sig-param\">num_threads=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.nlmeans\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Non-local means for denoising 3D and 4D images</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>arr</strong><span class=\"classifier\">3D or 4D ndarray</span></dt><dd><p>The array to be denoised</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">3D ndarray</span></dt><dd></dd>\n<dt><strong>sigma</strong><span class=\"classifier\">float or 3D array</span></dt><dd><p>standard deviation of the noise estimated from the data</p>\n</dd>\n<dt><strong>patch_radius</strong><span class=\"classifier\">int</span></dt><dd><p>patch size is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">patch_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 1.</p>\n</dd>\n<dt><strong>block_radius</strong><span class=\"classifier\">int</span></dt><dd><p>block size is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">x</span> <span class=\"pre\">block_radius</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>. Default is 5.</p>\n</dd>\n<dt><strong>rician</strong><span class=\"classifier\">boolean</span></dt><dd><p>If True the noise is estimated as Rician, otherwise Gaussian noise\nis assumed.</p>\n</dd>\n<dt><strong>num_threads</strong><span class=\"classifier\">int</span></dt><dd><p>Number of threads. If None (default) then all available threads\nwill be used (all CPU cores).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>denoised_arr</strong><span class=\"classifier\">ndarray</span></dt><dd><p>the denoised <code class=\"docutils literal notranslate\"><span class=\"pre\">arr</span></code> which has the same shape as <code class=\"docutils literal notranslate\"><span class=\"pre\">arr</span></code>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r133aa7056047-descoteaux08\"><span class=\"brackets\">Descoteaux08</span></dt>\n<dd><p>Descoteaux, Maxime and Wiest-Daessl\u00e9, Nicolas and Prima,\nSylvain and Barillot, Christian and Deriche, Rachid\nImpact of Rician Adapted Non-Local Means Filtering on\nHARDI, MICCAI 2008</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"pca-noise-estimate\">\n<h3>pca_noise_estimate<a class=\"headerlink\" href=\"#pca-noise-estimate\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.pca_noise_estimate\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">pca_noise_estimate</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.pca_noise_estimate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>PCA based local noise estimation.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data: 4D array</strong></dt><dd><p>the input dMRI data.</p>\n</dd>\n<dt><strong>gtab: gradient table object</strong></dt><dd><p>gradient information for the data gives us the bvals and bvecs of\ndiffusion data, which is needed here to select between the noise\nestimation methods.</p>\n</dd>\n<dt><strong>patch_radius</strong><span class=\"classifier\">int</span></dt><dd><p>The radius of the local patch to be taken around each voxel (in\nvoxels). Default: 1 (estimate noise in blocks of 3x3x3 voxels).</p>\n</dd>\n<dt><strong>correct_bias</strong><span class=\"classifier\">bool</span></dt><dd><p>Whether to correct for bias due to Rician noise. This is an implementation\nof equation 8 in <a class=\"reference internal\" href=\"#rf533ebe2c5f3-1\" id=\"id47\">[1]</a>.</p>\n</dd>\n<dt><strong>smooth</strong><span class=\"classifier\">int</span></dt><dd><p>Radius of a Gaussian smoothing filter to apply to the noise estimate\nbefore returning. Default: 2.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>sigma_corr: 3D array</dt><dd><p>The local noise standard deviation estimate.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rf533ebe2c5f3-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id47\">1</a></span></dt>\n<dd><p>Manjon JV, Coupe P, Concha L, Buades A, Collins DL \u201cDiffusion\nWeighted Image Denoising Using Overcomplete Local PCA\u201d. PLoS ONE\n8(9): e73021. doi:10.1371/journal.pone.0073021.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-bvals-bvecs\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#read-bvals-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.read_bvals_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fbvals</em>, <em class=\"sig-param\">fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fbvals</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong><span class=\"classifier\">str</span></dt><dd><p>Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">array, (N,) or None</span></dt><dd></dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">array, (N, 3) or None</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id49\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id49\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.denoise.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.denoise.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.denoise.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id50\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"dipy.workflows.docstring_parser.NumpyDocString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a><a class=\"headerlink\" href=\"#id50\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.docstring_parser.NumpyDocString\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.docstring_parser.</code><code class=\"sig-name descname\">NumpyDocString</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">docstring</em>, <em class=\"sig-param\">config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.NumpyDocString\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.NumpyDocString.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">docstring</em>, <em class=\"sig-param\">config={}</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.NumpyDocString.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reader\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"dipy.workflows.docstring_parser.Reader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a><a class=\"headerlink\" href=\"#reader\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.docstring_parser.Reader\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.docstring_parser.</code><code class=\"sig-name descname\">Reader</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">data</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>A line-based string reader.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 76%\" />\n<col style=\"width: 24%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>eof</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>is_empty</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>peek</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>read</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>read_to_condition</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>read_to_next_empty_line</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>read_to_next_unindented_line</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>reset</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>seek_next_non_empty_line</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">str</span></dt><dd><p>String with lines separated by \u2018</p>\n</dd>\n<dt><strong>\u2018.</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.eof\">\n<code class=\"sig-name descname\">eof</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.eof\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.is_empty\">\n<code class=\"sig-name descname\">is_empty</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.is_empty\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.peek\">\n<code class=\"sig-name descname\">peek</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.peek\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read\">\n<code class=\"sig-name descname\">read</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_condition\">\n<code class=\"sig-name descname\">read_to_condition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">condition_func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_condition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\">\n<code class=\"sig-name descname\">read_to_next_empty_line</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_empty_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\">\n<code class=\"sig-name descname\">read_to_next_unindented_line</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.read_to_next_unindented_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.reset\">\n<code class=\"sig-name descname\">reset</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.reset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\">\n<code class=\"sig-name descname\">seek_next_non_empty_line</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.Reader.seek_next_non_empty_line\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"dedent-lines\">\n<h3>dedent_lines<a class=\"headerlink\" href=\"#dedent-lines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.docstring_parser.dedent_lines\">\n<code class=\"sig-prename descclassname\">dipy.workflows.docstring_parser.</code><code class=\"sig-name descname\">dedent_lines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">lines</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.dedent_lines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deindent a list of lines maximally</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"warn\">\n<h3>warn<a class=\"headerlink\" href=\"#warn\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.docstring_parser.warn\">\n<code class=\"sig-prename descclassname\">dipy.workflows.docstring_parser.</code><code class=\"sig-name descname\">warn</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">message</em>, <em class=\"sig-param\">category=None</em>, <em class=\"sig-param\">stacklevel=1</em>, <em class=\"sig-param\">source=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.docstring_parser.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id51\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a><a class=\"headerlink\" href=\"#id51\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.flow_runner.</code><code class=\"sig-name descname\">IntrospectiveArgumentParser</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">prog=None</em>, <em class=\"sig-param\">usage=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">epilog=None</em>, <em class=\"sig-param\">parents=[]</em>, <em class=\"sig-param\">formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em class=\"sig-param\">prefix_chars='-'</em>, <em class=\"sig-param\">fromfile_prefix_chars=None</em>, <em class=\"sig-param\">argument_default=None</em>, <em class=\"sig-param\">conflict_handler='resolve'</em>, <em class=\"sig-param\">add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">argparse.ArgumentParser</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>optional_parameters</strong></dt><dd></dd>\n<dt><strong>output_parameters</strong></dt><dd></dd>\n<dt><strong>positional_parameters</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_argument</span></code>(dest,\u00a0\u2026[,\u00a0name,\u00a0name])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_sub_flow_args</span></code></a>(self,\u00a0sub_flows)</p></td>\n<td><p>Take an array of workflow objects and use introspection to extract the parameters, types and docstrings of their run method.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_subparsers</span></code>(self,\u00a0\\*\\*kwargs)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">add_workflow</span></code></a>(self,\u00a0workflow)</p></td>\n<td><p>Take a workflow object and use introspection to extract the parameters, types and docstrings of its run method.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">error</span></code>(message)</p></td>\n<td><p>Prints a usage message incorporating the message to stderr and exits.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">exit</span></code>(self[,\u00a0status,\u00a0message])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">format_usage</span></code>(self)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\" title=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_flow_args</span></code></a>(self[,\u00a0args,\u00a0namespace])</p></td>\n<td><p>Returns the parsed arguments as a dictionary that will be used as a workflow\u2019s run method arguments.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">parse_args</span></code>(self[,\u00a0args,\u00a0namespace])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_usage</span></code>(self[,\u00a0file])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">register</span></code>(self,\u00a0registry_name,\u00a0value,\u00a0object)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_defaults</span></code>(self,\u00a0\\*\\*kwargs)</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 76%\" />\n<col style=\"width: 24%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>add_argument_group</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>add_description</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>add_epilogue</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>add_mutually_exclusive_group</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>convert_arg_line_to_args</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>format_help</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>get_default</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>parse_intermixed_args</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>parse_known_args</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>parse_known_intermixed_args</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>print_help</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>show_argument</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>update_argument</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">prog=None</em>, <em class=\"sig-param\">usage=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">epilog=None</em>, <em class=\"sig-param\">parents=[]</em>, <em class=\"sig-param\">formatter_class=&lt;class 'argparse.RawTextHelpFormatter'&gt;</em>, <em class=\"sig-param\">prefix_chars='-'</em>, <em class=\"sig-param\">fromfile_prefix_chars=None</em>, <em class=\"sig-param\">argument_default=None</em>, <em class=\"sig-param\">conflict_handler='resolve'</em>, <em class=\"sig-param\">add_help=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Augmenting the argument parser to allow automatic creation of\narguments from workflows</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>prog</strong><span class=\"classifier\">None</span></dt><dd><p>The name of the program (default: sys.argv[0])</p>\n</dd>\n<dt><strong>usage</strong><span class=\"classifier\">None</span></dt><dd><p>A usage message (default: auto-generated from arguments)</p>\n</dd>\n<dt><strong>description</strong><span class=\"classifier\">str</span></dt><dd><p>A description of what the program does</p>\n</dd>\n<dt><strong>epilog</strong><span class=\"classifier\">str</span></dt><dd><p>Text following the argument descriptions</p>\n</dd>\n<dt><strong>parents</strong><span class=\"classifier\">list</span></dt><dd><p>Parsers whose arguments should be copied into this one</p>\n</dd>\n<dt><strong>formatter_class</strong><span class=\"classifier\">obj</span></dt><dd><p>HelpFormatter class for printing help messages</p>\n</dd>\n<dt><strong>prefix_chars</strong><span class=\"classifier\">str</span></dt><dd><p>Characters that prefix optional arguments</p>\n</dd>\n<dt><strong>fromfile_prefix_chars</strong><span class=\"classifier\">None</span></dt><dd><p>Characters that prefix files containing additional arguments</p>\n</dd>\n<dt><strong>argument_default</strong><span class=\"classifier\">None</span></dt><dd><p>The default value for all arguments</p>\n</dd>\n<dt><strong>conflict_handler</strong><span class=\"classifier\">str</span></dt><dd><p>String indicating how to handle conflicts</p>\n</dd>\n<dt><strong>add_help</strong><span class=\"classifier\">bool</span></dt><dd><p>Add a -h/-help option</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\">\n<code class=\"sig-name descname\">add_description</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_description\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\">\n<code class=\"sig-name descname\">add_epilogue</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_epilogue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\">\n<code class=\"sig-name descname\">add_sub_flow_args</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">sub_flows</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_sub_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take an array of workflow objects and use introspection to extract\nthe parameters, types and docstrings of their run method. Only the\noptional input parameters are extracted for these as they are treated\nas sub workflows.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sub_flows</strong><span class=\"classifier\">array of dipy.workflows.workflow.Workflow</span></dt><dd><p>Workflows to inspect.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>sub_flow_optionals</strong><span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\">\n<code class=\"sig-name descname\">add_workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">workflow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.add_workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Take a workflow object and use introspection to extract the parameters,\ntypes and docstrings of its run method. Then add these parameters\nto the current arparser\u2019s own params to parse. If the workflow is of\ntype combined_workflow, the optional input parameters of its\nsub workflows will also be added.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>workflow</strong><span class=\"classifier\">dipy.workflows.workflow.Workflow</span></dt><dd><p>Workflow from which to infer parameters.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>sub_flow_optionals</strong><span class=\"classifier\">dictionary of all sub workflow optional parameters</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\">\n<code class=\"sig-name descname\">get_flow_args</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">args=None</em>, <em class=\"sig-param\">namespace=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.get_flow_args\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the parsed arguments as a dictionary that will be used\nas a workflow\u2019s run method arguments.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.optional_parameters\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">optional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.optional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.output_parameters\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">output_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.output_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.positional_parameters\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">positional_parameters</code><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.positional_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\">\n<code class=\"sig-name descname\">show_argument</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dest</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.show_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\">\n<code class=\"sig-name descname\">update_argument</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.IntrospectiveArgumentParser.update_argument\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-level\">\n<h3>get_level<a class=\"headerlink\" href=\"#get-level\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.get_level\">\n<code class=\"sig-prename descclassname\">dipy.workflows.flow_runner.</code><code class=\"sig-name descname\">get_level</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">lvl</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.get_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Transforms the logging level passed on the commandline into a proper\nlogging level name.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"run-flow\">\n<h3>run_flow<a class=\"headerlink\" href=\"#run-flow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.flow_runner.run_flow\">\n<code class=\"sig-prename descclassname\">dipy.workflows.flow_runner.</code><code class=\"sig-name descname\">run_flow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">flow</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.flow_runner.run_flow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Wraps the process of building an argparser that reflects the workflow\nthat we want to run along with some generic parameters like logging,\nforce and output strategies. The resulting parameters are then fed to\nthe workflow\u2019s run method.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"fetchflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.io.FetchFlow\" title=\"dipy.workflows.io.FetchFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FetchFlow</span></code></a><a class=\"headerlink\" href=\"#fetchflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.io.FetchFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">FetchFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.FetchFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.FetchFlow.get_fetcher_datanames\" title=\"dipy.workflows.io.FetchFlow.get_fetcher_datanames\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_fetcher_datanames</span></code></a>()</p></td>\n<td><p>Gets available dataset and function names.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.FetchFlow.get_short_name\" title=\"dipy.workflows.io.FetchFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.FetchFlow.load_module\" title=\"dipy.workflows.io.FetchFlow.load_module\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_module</span></code></a>(module_path)</p></td>\n<td><p>Load / reload an external module.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.FetchFlow.run\" title=\"dipy.workflows.io.FetchFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0data_names[,\u00a0out_dir])</p></td>\n<td><p>Download files to folder and check their md5 checksums.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.FetchFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.FetchFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.FetchFlow.get_fetcher_datanames\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">get_fetcher_datanames</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.FetchFlow.get_fetcher_datanames\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Gets available dataset and function names.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt>available_data: dict</dt><dd><p>Available dataset and function names.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.FetchFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.FetchFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.FetchFlow.load_module\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">load_module</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">module_path</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.FetchFlow.load_module\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load / reload an external module.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>module_path: string</strong></dt><dd><p>the path to the module relative to the main script</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>module: module object</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.FetchFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data_names</em>, <em class=\"sig-param\">out_dir=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.FetchFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Download files to folder and check their md5 checksums.</p>\n<p>To see all available datasets, please type \u201clist\u201d in data_names.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data_names</strong><span class=\"classifier\">variable string</span></dt><dd><p>Any number of Nifti1, bvals or bvecs files.</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory. Default: dipy home folder (~/.dipy)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ioinfoflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"dipy.workflows.io.IoInfoFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a><a class=\"headerlink\" href=\"#ioinfoflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.io.IoInfoFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">IoInfoFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow.get_short_name\" title=\"dipy.workflows.io.IoInfoFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.IoInfoFlow.run\" title=\"dipy.workflows.io.IoInfoFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files[,\u00a0b0_threshold,\u00a0\u2026])</p></td>\n<td><p>Provides useful information about different files used in medical imaging.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.IoInfoFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">bvecs_tol=0.01</em>, <em class=\"sig-param\">bshell_thr=100</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.IoInfoFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Provides useful information about different files used in\nmedical imaging. Any number of input files can be provided. The\nprogram identifies the type of file by its extension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">variable string</span></dt><dd><p>Any number of Nifti1, bvals or bvecs files.</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>(default 50)</p>\n</dd>\n<dt><strong>bvecs_tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to check that norm(bvec) = 1 +/- bvecs_tol\nb-vectors are unit vectors (default 0.01)</p>\n</dd>\n<dt><strong>bshell_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold for distinguishing b-values in different shells\n(default 100)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"splitflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.io.SplitFlow\" title=\"dipy.workflows.io.SplitFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SplitFlow</span></code></a><a class=\"headerlink\" href=\"#splitflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.io.SplitFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">SplitFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.SplitFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.SplitFlow.get_short_name\" title=\"dipy.workflows.io.SplitFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.SplitFlow.run\" title=\"dipy.workflows.io.SplitFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files[,\u00a0vol_idx,\u00a0out_dir,\u00a0\u2026])</p></td>\n<td><p>Splits the input 4D file and extracts the required 3D volume.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.SplitFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.SplitFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.SplitFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.SplitFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.SplitFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">vol_idx=0</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_split='split.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.SplitFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Splits the input 4D file and extracts the required 3D volume.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">variable string</span></dt><dd><p>Any number of Nifti1 files</p>\n</dd>\n<dt><strong>vol_idx</strong><span class=\"classifier\">int, optional</span></dt><dd><p>(default 0)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory. Default: dipy home folder (~/.dipy)</p>\n</dd>\n<dt><strong>out_split</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the resulting split volume (default: split.nii.gz)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id52\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow\" title=\"dipy.workflows.io.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id52\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.io.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_io_iterator\" title=\"dipy.workflows.io.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_short_name\" title=\"dipy.workflows.io.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.get_sub_runs\" title=\"dipy.workflows.io.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.manage_output_overwrite\" title=\"dipy.workflows.io.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.io.Workflow.run\" title=\"dipy.workflows.io.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.io.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"getfullargspec\">\n<h3>getfullargspec<a class=\"headerlink\" href=\"#getfullargspec\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.io.getfullargspec\">\n<code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">getfullargspec</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.getfullargspec\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get the names and default values of a callable object\u2019s parameters.</p>\n<p>A tuple of seven things is returned:\n(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).\n\u2018args\u2019 is a list of the parameter names.\n\u2018varargs\u2019 and \u2018varkw\u2019 are the names of the * and ** parameters or None.\n\u2018defaults\u2019 is an n-tuple of the default values of the last n parameters.\n\u2018kwonlyargs\u2019 is a list of keyword-only parameter names.\n\u2018kwonlydefaults\u2019 is a dictionary mapping names from kwonlyargs to defaults.\n\u2018annotations\u2019 is a dictionary mapping parameter names to annotations.</p>\n<dl class=\"simple\">\n<dt>Notable differences from inspect.signature():</dt><dd><ul class=\"simple\">\n<li><p>the \u201cself\u201d parameter is always reported, even for bound methods</p></li>\n<li><p>wrapper chains defined by __wrapped__ <em>not</em> unwrapped automatically</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"getmembers\">\n<h3>getmembers<a class=\"headerlink\" href=\"#getmembers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.io.getmembers\">\n<code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">getmembers</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">object</em>, <em class=\"sig-param\">predicate=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.getmembers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return all members of an object as (name, value) pairs sorted by name.\nOptionally, only return members that satisfy a given predicate.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"isfunction\">\n<h3>isfunction<a class=\"headerlink\" href=\"#isfunction\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.io.isfunction\">\n<code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">isfunction</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">object</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.isfunction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return true if the object is a user-defined function.</p>\n<dl class=\"simple\">\n<dt>Function objects provide these attributes:</dt><dd><p>__doc__         documentation string\n__name__        name with which this function was defined\n__code__        code object containing compiled function bytecode\n__defaults__    tuple of any default values for arguments\n__globals__     global namespace in which this function was defined\n__annotations__ dict of parameter annotations\n__kwdefaults__  dict of keyword only parameters with defaults</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id53\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id53\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.io.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id54\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id54\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.io.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.io.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.io.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"maskflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"dipy.workflows.mask.MaskFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a><a class=\"headerlink\" href=\"#maskflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.mask.MaskFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.mask.</code><code class=\"sig-name descname\">MaskFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow.get_short_name\" title=\"dipy.workflows.mask.MaskFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.MaskFlow.run\" title=\"dipy.workflows.mask.MaskFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files,\u00a0lb[,\u00a0ub,\u00a0out_dir,\u00a0\u2026])</p></td>\n<td><p>Workflow for creating a binary mask</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.MaskFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.MaskFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.MaskFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">lb</em>, <em class=\"sig-param\">ub=inf</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_mask='mask.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.MaskFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for creating a binary mask</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to image to be masked.</p>\n</dd>\n<dt><strong>lb</strong><span class=\"classifier\">float</span></dt><dd><p>Lower bound value.</p>\n</dd>\n<dt><strong>ub</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Upper bound value (default Inf)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_mask</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the masked file (default \u2018mask.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id55\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow\" title=\"dipy.workflows.mask.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id55\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.mask.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.mask.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_io_iterator\" title=\"dipy.workflows.mask.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_short_name\" title=\"dipy.workflows.mask.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.get_sub_runs\" title=\"dipy.workflows.mask.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.manage_output_overwrite\" title=\"dipy.workflows.mask.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.mask.Workflow.run\" title=\"dipy.workflows.mask.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.mask.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id56\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id56\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.mask.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.mask.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id57\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id57\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.mask.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.mask.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.mask.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ioiterator\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"dipy.workflows.multi_io.IOIterator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a><a class=\"headerlink\" href=\"#ioiterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.multi_io.IOIterator\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">IOIterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Create output filenames that work nicely with multiple input files from\nmultiple directories (processing multiple subjects with one command)</p>\n<p>Use information from input files, out_dir and out_fnames to generate\ncorrect outputs which can come from long lists of multiple or single\ninputs.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 71%\" />\n<col style=\"width: 29%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>create_directories</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>create_outputs</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>file_existence_check</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>set_inputs</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>set_out_dir</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>set_out_fnames</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>set_output_keys</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.create_directories\">\n<code class=\"sig-name descname\">create_directories</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.create_directories\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.create_outputs\">\n<code class=\"sig-name descname\">create_outputs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.create_outputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.file_existence_check\">\n<code class=\"sig-name descname\">file_existence_check</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.file_existence_check\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_inputs\">\n<code class=\"sig-name descname\">set_inputs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_inputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_out_dir\">\n<code class=\"sig-name descname\">set_out_dir</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">out_dir</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_dir\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_out_fnames\">\n<code class=\"sig-name descname\">set_out_fnames</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_out_fnames\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.multi_io.IOIterator.set_output_keys\">\n<code class=\"sig-name descname\">set_output_keys</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.IOIterator.set_output_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"basename-without-extension\">\n<h3>basename_without_extension<a class=\"headerlink\" href=\"#basename-without-extension\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.basename_without_extension\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">basename_without_extension</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.basename_without_extension\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"common-start\">\n<h3>common_start<a class=\"headerlink\" href=\"#common-start\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.common_start\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">common_start</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sa</em>, <em class=\"sig-param\">sb</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.common_start\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the longest common substring from the beginning of sa and sb.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"concatenate-inputs\">\n<h3>concatenate_inputs<a class=\"headerlink\" href=\"#concatenate-inputs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.concatenate_inputs\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">concatenate_inputs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">multi_inputs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.concatenate_inputs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Concatenate list of inputs</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"connect-output-paths\">\n<h3>connect_output_paths<a class=\"headerlink\" href=\"#connect-output-paths\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.connect_output_paths\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">connect_output_paths</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">inputs</em>, <em class=\"sig-param\">out_dir</em>, <em class=\"sig-param\">out_files</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.connect_output_paths\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates a list of output files paths based on input files and\noutput strategies.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>inputs</strong><span class=\"classifier\">array</span></dt><dd><blockquote>\n<div><p>List of input paths.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>out_dir<span class=\"classifier\">string</span></dt><dd><p>The output directory.</p>\n</dd>\n<dt>out_files<span class=\"classifier\">array</span></dt><dd><p>List of output files.</p>\n</dd>\n<dt>output_strategy<span class=\"classifier\">string</span></dt><dd><dl class=\"simple\">\n<dt>Which strategy to use to generate the output paths.</dt><dd><p>\u2018append\u2019: Add out_dir to the path of the input.\n\u2018prepend\u2019: Add the input path directory tree to out_dir.\n\u2018absolute\u2019: Put directly in out_dir.</p>\n</dd>\n</dl>\n</dd>\n<dt>mix_names<span class=\"classifier\">bool</span></dt><dd><p>Whether or not prepend a string composed of a mix of the input\nnames to the final output name.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A list of output file paths.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id58\">\n<h3>get_args_default<a class=\"headerlink\" href=\"#id58\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.get_args_default\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">get_args_default</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.get_args_default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"glob\">\n<h3>glob<a class=\"headerlink\" href=\"#glob\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.glob\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">glob</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">pathname</em>, <em class=\"sig-param\">*</em>, <em class=\"sig-param\">recursive=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.glob\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a list of paths matching a pathname pattern.</p>\n<p>The pattern may contain simple shell-style wildcards a la\nfnmatch. However, unlike fnmatch, filenames starting with a\ndot are special cases that are not matched by \u2018*\u2019 and \u2018?\u2019\npatterns.</p>\n<p>If recursive is true, the pattern \u2018**\u2019 will match any files and\nzero or more directories and subdirectories.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"io-iterator\">\n<h3>io_iterator<a class=\"headerlink\" href=\"#io-iterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.io_iterator\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">inputs</em>, <em class=\"sig-param\">out_dir</em>, <em class=\"sig-param\">fnames</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">out_keys=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator from the parameters.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>inputs</strong><span class=\"classifier\">array</span></dt><dd><blockquote>\n<div><p>List of input files.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>out_dir<span class=\"classifier\">string</span></dt><dd><p>Output directory.</p>\n</dd>\n<dt>fnames<span class=\"classifier\">array</span></dt><dd><p>File names of all outputs to be created.</p>\n</dd>\n<dt>output_strategy<span class=\"classifier\">string</span></dt><dd><p>Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names<span class=\"classifier\">bool</span></dt><dd><p>Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt><dd><p>Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id59\">\n<h3><a href=\"#id173\"><span class=\"problematic\" id=\"id174\">io_iterator_</span></a><a class=\"headerlink\" href=\"#id59\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.io_iterator_\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">io_iterator_</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">frame</em>, <em class=\"sig-param\">fnc</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.io_iterator_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator using introspection.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>frame</strong><span class=\"classifier\">frameobject</span></dt><dd><blockquote>\n<div><p>Contains the info about the current local variables values.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>fnc<span class=\"classifier\">function</span></dt><dd><p>The function to inspect</p>\n</dd>\n<dt>output_strategy<span class=\"classifier\">string</span></dt><dd><p>Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names<span class=\"classifier\">bool</span></dt><dd><p>Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt><dd><p>Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"slash-to-under\">\n<h3>slash_to_under<a class=\"headerlink\" href=\"#slash-to-under\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.multi_io.slash_to_under\">\n<code class=\"sig-prename descclassname\">dipy.workflows.multi_io.</code><code class=\"sig-name descname\">slash_to_under</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dir_str</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.multi_io.slash_to_under\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"constrainedsphericaldeconvmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a><a class=\"headerlink\" href=\"#constrainedsphericaldeconvmodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">ConstrainedSphericalDeconvModel</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">response</em>, <em class=\"sig-param\">reg_sphere=None</em>, <em class=\"sig-param\">sh_order=8</em>, <em class=\"sig-param\">lambda_=1</em>, <em class=\"sig-param\">tau=0.1</em>, <em class=\"sig-param\">convergence=50</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.shm.SphHarmModel\" title=\"dipy.reconst.shm.SphHarmModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.shm.SphHarmModel</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_clear</span></code>(self)</p></td>\n<td><p>Clear the cache.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_get</span></code>(self,\u00a0tag,\u00a0key[,\u00a0default])</p></td>\n<td><p>Retrieve a value from the cache.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_set</span></code>(self,\u00a0tag,\u00a0key,\u00a0value)</p></td>\n<td><p>Store a value in the cache.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(self,\u00a0data[,\u00a0mask])</p></td>\n<td><p>Fit method for every voxel in data</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\" title=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(self,\u00a0sh_coeff[,\u00a0gtab,\u00a0S0])</p></td>\n<td><p>Compute a signal prediction given spherical harmonic coefficients for the provided GradientTable class instance.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sampling_matrix</span></code>(self,\u00a0sphere)</p></td>\n<td><p>The matrix needed to sample ODFs from coefficients of the model.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">response</em>, <em class=\"sig-param\">reg_sphere=None</em>, <em class=\"sig-param\">sh_order=8</em>, <em class=\"sig-param\">lambda_=1</em>, <em class=\"sig-param\">tau=0.1</em>, <em class=\"sig-param\">convergence=50</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constrained Spherical Deconvolution (CSD) <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id60\">[1]</a>.</p>\n<p>Spherical deconvolution computes a fiber orientation distribution\n(FOD), also called fiber ODF (fODF) <a class=\"reference internal\" href=\"#r83cf0c2022c7-2\" id=\"id61\">[2]</a>, as opposed to a diffusion ODF\nas the QballModel or the CsaOdfModel. This results in a sharper angular\nprofile with better angular resolution that is the best object to be\nused for later deterministic and probabilistic tractography <a class=\"reference internal\" href=\"#r83cf0c2022c7-3\" id=\"id62\">[3]</a>.</p>\n<p>A sharp fODF is obtained because a single fiber <em>response</em> function is\ninjected as <em>a priori</em> knowledge. The response function is often\ndata-driven and is thus provided as input to the\nConstrainedSphericalDeconvModel. It will be used as deconvolution\nkernel, as described in <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id63\">[1]</a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable</span></dt><dd></dd>\n<dt><strong>response</strong><span class=\"classifier\">tuple or AxSymShResponse object</span></dt><dd><p>A tuple with two elements. The first is the eigen-values as an (3,)\nndarray and the second is the signal value for the response\nfunction without diffusion weighting (i.e. S0).  This is to be able\nto generate a single fiber synthetic signal. The response function\nwill be used as deconvolution kernel (<a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id64\">[1]</a>).</p>\n</dd>\n<dt><strong>reg_sphere</strong><span class=\"classifier\">Sphere (optional)</span></dt><dd><p>sphere used to build the regularization B matrix.\nDefault: \u2018symmetric362\u2019.</p>\n</dd>\n<dt><strong>sh_order</strong><span class=\"classifier\">int (optional)</span></dt><dd><p>maximal spherical harmonics order. Default: 8</p>\n</dd>\n<dt><strong>lambda_</strong><span class=\"classifier\">float (optional)</span></dt><dd><p>weight given to the constrained-positivity regularization part of\nthe deconvolution equation (see <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id65\">[1]</a>). Default: 1</p>\n</dd>\n<dt><strong>tau</strong><span class=\"classifier\">float (optional)</span></dt><dd><p>threshold controlling the amplitude below which the corresponding\nfODF is assumed to be zero.  Ideally, tau should be set to\nzero. However, to improve the stability of the algorithm, tau is\nset to tau*100 % of the mean fODF amplitude (here, 10% by default)\n(see <a class=\"reference internal\" href=\"#r83cf0c2022c7-1\" id=\"id66\">[1]</a>). Default: 0.1</p>\n</dd>\n<dt><strong>convergence</strong><span class=\"classifier\">int</span></dt><dd><p>Maximum number of iterations to allow the deconvolution to\nconverge.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r83cf0c2022c7-1\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id60\">1</a>,<a href=\"#id63\">2</a>,<a href=\"#id64\">3</a>,<a href=\"#id65\">4</a>,<a href=\"#id66\">5</a>)</span></dt>\n<dd><p>Tournier, J.D., et al. NeuroImage 2007. Robust determination of\nthe fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical\ndeconvolution</p>\n</dd>\n<dt class=\"label\" id=\"r83cf0c2022c7-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id61\">2</a></span></dt>\n<dd><p>Descoteaux, M., et al. IEEE TMI 2009. Deterministic and\nProbabilistic Tractography Based on Complex Fibre Orientation\nDistributions</p>\n</dd>\n<dt class=\"label\" id=\"r83cf0c2022c7-3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id62\">3</a></span></dt>\n<dd><p>C\u00f4t\u00e9, M-A., et al. Medical Image Analysis 2013. Tractometer:\nTowards validation of tractography pipelines</p>\n</dd>\n<dt class=\"label\" id=\"r83cf0c2022c7-4\"><span class=\"brackets\">4</span></dt>\n<dd><p>Tournier, J.D, et al. Imaging Systems and Technology\n2012. MRtrix: Diffusion Tractography in Crossing Fiber Regions</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\">\n<code class=\"sig-name descname\">fit</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method for every voxel in data</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\">\n<code class=\"sig-name descname\">predict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">sh_coeff</em>, <em class=\"sig-param\">gtab=None</em>, <em class=\"sig-param\">S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ConstrainedSphericalDeconvModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute a signal prediction given spherical harmonic coefficients\nfor the provided GradientTable class instance.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sh_coeff</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The spherical harmonic representation of the FOD from which to make\nthe signal prediction.</p>\n</dd>\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>The gradients for which the signal will be predicted. Use the\nmodel\u2019s gradient table by default.</p>\n</dd>\n<dt><strong>S0</strong><span class=\"classifier\">ndarray or float</span></dt><dd><p>The non diffusion-weighted signal value.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>pred_sig</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The predicted signal.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"csaodfmodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"dipy.workflows.reconst.CsaOdfModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a><a class=\"headerlink\" href=\"#csaodfmodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">CsaOdfModel</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">sh_order</em>, <em class=\"sig-param\">smooth=0.006</em>, <em class=\"sig-param\">min_signal=1e-05</em>, <em class=\"sig-param\">assume_normed=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.shm.QballBaseModel\" title=\"dipy.reconst.shm.QballBaseModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.shm.QballBaseModel</span></code></a></p>\n<p>Implementation of Constant Solid Angle reconstruction method.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r9e10b82edb3a-1\"><span class=\"brackets\">R9e10b82edb3a-1</span></dt>\n<dd><p>Aganj, I., et al. 2009. ODF Reconstruction in Q-Ball Imaging With\nSolid Angle Consideration.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_clear</span></code>(self)</p></td>\n<td><p>Clear the cache.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_get</span></code>(self,\u00a0tag,\u00a0key[,\u00a0default])</p></td>\n<td><p>Retrieve a value from the cache.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cache_set</span></code>(self,\u00a0tag,\u00a0key,\u00a0value)</p></td>\n<td><p>Store a value in the cache.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code>(self,\u00a0data[,\u00a0mask])</p></td>\n<td><p>Fits the model to diffusion data and returns the model fit</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sampling_matrix</span></code>(self,\u00a0sphere)</p></td>\n<td><p>The matrix needed to sample ODFs from coefficients of the model.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">sh_order</em>, <em class=\"sig-param\">smooth=0.006</em>, <em class=\"sig-param\">min_signal=1e-05</em>, <em class=\"sig-param\">assume_normed=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a model that can be used to fit or sample diffusion data</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>Diffusion gradients used to acquire data</p>\n</dd>\n<dt><strong>sh_order</strong><span class=\"classifier\">even int &gt;= 0</span></dt><dd><p>the spherical harmonic order of the model</p>\n</dd>\n<dt><strong>smooth</strong><span class=\"classifier\">float between 0 and 1, optional</span></dt><dd><p>The regularization parameter of the model</p>\n</dd>\n<dt><strong>min_signal</strong><span class=\"classifier\">float, &gt; 0, optional</span></dt><dd><p>During fitting, all signal values less than <cite>min_signal</cite> are\nclipped to <cite>min_signal</cite>. This is done primarily to avoid values\nless than or equal to zero when taking logs.</p>\n</dd>\n<dt><strong>assume_normed</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, clipping and normalization of the data with respect to the\nmean B0 signal are skipped during mode fitting. This is an advanced\nfeature and should be used with care.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">normalize_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.max\">\n<code class=\"sig-name descname\">max</code><em class=\"property\"> = 0.999</em><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.max\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.reconst.CsaOdfModel.min\">\n<code class=\"sig-name descname\">min</code><em class=\"property\"> = 0.001</em><a class=\"headerlink\" href=\"#dipy.workflows.reconst.CsaOdfModel.min\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"diffusionkurtosismodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a><a class=\"headerlink\" href=\"#diffusionkurtosismodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">DiffusionKurtosisModel</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">fit_method='WLS'</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Class for the Diffusion Kurtosis Model</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.fit\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(self,\u00a0data[,\u00a0mask])</p></td>\n<td><p>Fit method of the DKI model class</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.predict\" title=\"dipy.workflows.reconst.DiffusionKurtosisModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(self,\u00a0dki_params[,\u00a0S0])</p></td>\n<td><p>Predict a signal for this DKI model class instance given parameters.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">fit_method='WLS'</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Diffusion Kurtosis Tensor Model [1]</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable class instance</span></dt><dd></dd>\n<dt><strong>fit_method</strong><span class=\"classifier\">str or callable</span></dt><dd><p>str can be one of the following:\n\u2018OLS\u2019 or \u2018ULLS\u2019 for ordinary least squares</p>\n<blockquote>\n<div><p>dki.ols_fit_dki</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>\u2018WLS\u2019 or \u2018UWLLS\u2019 for weighted ordinary least squares</dt><dd><p>dki.wls_fit_dki</p>\n</dd>\n<dt>callable has to have the signature:</dt><dd><p>fit_method(design_matrix, data, <a href=\"#id72\"><span class=\"problematic\" id=\"id73\">*</span></a>args, <a href=\"#id74\"><span class=\"problematic\" id=\"id75\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>args, kwargs</strong><span class=\"classifier\">arguments and key-word arguments passed to the</span></dt><dd><p>fit_method. See dki.ols_fit_dki, dki.wls_fit_dki for details</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r05d15d5c8284-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.</p>\n</dd>\n</dl>\n<p>Estimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.fit\">\n<code class=\"sig-name descname\">fit</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DKI model class</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">array</span></dt><dd><p>The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">array</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[-1]</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.DiffusionKurtosisModel.predict\">\n<code class=\"sig-name descname\">predict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dki_params</em>, <em class=\"sig-param\">S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.DiffusionKurtosisModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this DKI model class instance given\nparameters.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>dki_params</strong><span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the\nfirst, second and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt><strong>S0</strong><span class=\"classifier\">float or ndarray (optional)</span></dt><dd><p>The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstcsaflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"dipy.workflows.reconst.ReconstCSAFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a><a class=\"headerlink\" href=\"#reconstcsaflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">ReconstCSAFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstCSAFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.run\" title=\"dipy.workflows.reconst.ReconstCSAFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files,\u00a0bvalues_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Constant Solid Angle.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSAFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">bvalues_files</em>, <em class=\"sig-param\">bvectors_files</em>, <em class=\"sig-param\">mask_files</em>, <em class=\"sig-param\">sh_order=6</em>, <em class=\"sig-param\">odf_to_sh_order=8</em>, <em class=\"sig-param\">b0_threshold=50.0</em>, <em class=\"sig-param\">bvecs_tol=0.01</em>, <em class=\"sig-param\">extract_pam_values=False</em>, <em class=\"sig-param\">parallel=False</em>, <em class=\"sig-param\">nbr_processes=None</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_pam='peaks.pam5'</em>, <em class=\"sig-param\">out_shm='shm.nii.gz'</em>, <em class=\"sig-param\">out_peaks_dir='peaks_dirs.nii.gz'</em>, <em class=\"sig-param\">out_peaks_values='peaks_values.nii.gz'</em>, <em class=\"sig-param\">out_peaks_indices='peaks_indices.nii.gz'</em>, <em class=\"sig-param\">out_gfa='gfa.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSAFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constant Solid Angle.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>sh_order</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Spherical harmonics order (default 6) used in the CSA fit.</p>\n</dd>\n<dt><strong>odf_to_sh_order</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Spherical harmonics order used for peak_from_model to compress\nthe ODF to spherical harmonics coefficients (default 8)</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to find b=0 directions</p>\n</dd>\n<dt><strong>bvecs_tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used so that norm(bvec)=1 (default 0.01)</p>\n</dd>\n<dt><strong>extract_pam_values</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Wheter or not to save pam volumes as single nifti files.</p>\n</dd>\n<dt><strong>parallel</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to use parallelization in peak-finding during the\ncalibration procedure. Default: False</p>\n</dd>\n<dt><strong>nbr_processes</strong><span class=\"classifier\">int, optional</span></dt><dd><p>If <cite>parallel</cite> is True, the number of subprocesses to use\n(default multiprocessing.cpu_count()).</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_pam</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the peaks volume to be saved (default \u2018peaks.pam5\u2019)</p>\n</dd>\n<dt><strong>out_shm</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the spherical harmonics volume to be saved\n(default \u2018shm.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the peaks directions volume to be saved\n(default \u2018peaks_dirs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_values</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the peaks values volume to be saved\n(default \u2018peaks_values.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_indices</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the peaks indices volume to be saved\n(default \u2018peaks_indices.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_gfa</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the generalized FA volume to be saved (default \u2018gfa.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r91123ab0acf1-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Aganj, I., et al. 2009. ODF Reconstruction in Q-Ball Imaging\nwith Solid Angle Consideration.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstcsdflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"dipy.workflows.reconst.ReconstCSDFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a><a class=\"headerlink\" href=\"#reconstcsdflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">ReconstCSDFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstCSDFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.run\" title=\"dipy.workflows.reconst.ReconstCSDFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files,\u00a0bvalues_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Constrained spherical deconvolution</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstCSDFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">bvalues_files</em>, <em class=\"sig-param\">bvectors_files</em>, <em class=\"sig-param\">mask_files</em>, <em class=\"sig-param\">b0_threshold=50.0</em>, <em class=\"sig-param\">bvecs_tol=0.01</em>, <em class=\"sig-param\">roi_center=None</em>, <em class=\"sig-param\">roi_radius=10</em>, <em class=\"sig-param\">fa_thr=0.7</em>, <em class=\"sig-param\">frf=None</em>, <em class=\"sig-param\">extract_pam_values=False</em>, <em class=\"sig-param\">sh_order=8</em>, <em class=\"sig-param\">odf_to_sh_order=8</em>, <em class=\"sig-param\">parallel=False</em>, <em class=\"sig-param\">nbr_processes=None</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_pam='peaks.pam5'</em>, <em class=\"sig-param\">out_shm='shm.nii.gz'</em>, <em class=\"sig-param\">out_peaks_dir='peaks_dirs.nii.gz'</em>, <em class=\"sig-param\">out_peaks_values='peaks_values.nii.gz'</em>, <em class=\"sig-param\">out_peaks_indices='peaks_indices.nii.gz'</em>, <em class=\"sig-param\">out_gfa='gfa.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstCSDFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constrained spherical deconvolution</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to find b=0 directions</p>\n</dd>\n<dt><strong>bvecs_tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Bvecs should be unit vectors. (default:0.01)</p>\n</dd>\n<dt><strong>roi_center</strong><span class=\"classifier\">variable int, optional</span></dt><dd><p>Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite> (default None)</p>\n</dd>\n<dt><strong>roi_radius</strong><span class=\"classifier\">int, optional</span></dt><dd><p>radius of cubic ROI in voxels (default 10)</p>\n</dd>\n<dt><strong>fa_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>FA threshold for calculating the response function (default 0.7)</p>\n</dd>\n<dt><strong>frf</strong><span class=\"classifier\">variable float, optional</span></dt><dd><p>Fiber response function can be for example inputed as 15 4 4\n(from the command line) or [15, 4, 4] from a Python script to be\nconverted to float and multiplied by 10**-4 . If None\nthe fiber response function will be computed automatically\n(default: None).</p>\n</dd>\n<dt><strong>extract_pam_values</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Save or not to save pam volumes as single nifti files.</p>\n</dd>\n<dt><strong>sh_order</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Spherical harmonics order (default 6) used in the CSA fit.</p>\n</dd>\n<dt><strong>odf_to_sh_order</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Spherical harmonics order used for peak_from_model to compress\nthe ODF to spherical harmonics coefficients (default 8)</p>\n</dd>\n<dt><strong>parallel</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to use parallelization in peak-finding during the\ncalibration procedure. Default: False</p>\n</dd>\n<dt><strong>nbr_processes</strong><span class=\"classifier\">int, optional</span></dt><dd><p>If <cite>parallel</cite> is True, the number of subprocesses to use\n(default multiprocessing.cpu_count()).</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_pam</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the peaks volume to be saved (default \u2018peaks.pam5\u2019)</p>\n</dd>\n<dt><strong>out_shm</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the spherical harmonics volume to be saved\n(default \u2018shm.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the peaks directions volume to be saved\n(default \u2018peaks_dirs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_values</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the peaks values volume to be saved\n(default \u2018peaks_values.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_peaks_indices</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the peaks indices volume to be saved\n(default \u2018peaks_indices.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_gfa</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the generalized FA volume to be saved (default \u2018gfa.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rd2338fb036e0-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Tournier, J.D., et al. NeuroImage 2007. Robust determination of\nthe fibre orientation distribution in diffusion MRI: Non-negativity\nconstrained super-resolved spherical deconvolution.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstdkiflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"dipy.workflows.reconst.ReconstDkiFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a><a class=\"headerlink\" href=\"#reconstdkiflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">ReconstDkiFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstDkiFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.run\" title=\"dipy.workflows.reconst.ReconstDkiFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files,\u00a0bvalues_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Workflow for Diffusion Kurtosis reconstruction and for computing DKI metrics.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 68%\" />\n<col style=\"width: 32%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_dki_model</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_fitted_tensor</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_dki_model\">\n<code class=\"sig-name descname\">get_dki_model</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">gtab</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_dki_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_fitted_tensor\">\n<code class=\"sig-name descname\">get_fitted_tensor</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">mask</em>, <em class=\"sig-param\">bval</em>, <em class=\"sig-param\">bvec</em>, <em class=\"sig-param\">b0_threshold=50</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_fitted_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDkiFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">bvalues_files</em>, <em class=\"sig-param\">bvectors_files</em>, <em class=\"sig-param\">mask_files</em>, <em class=\"sig-param\">b0_threshold=50.0</em>, <em class=\"sig-param\">save_metrics=[]</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_dt_tensor='dti_tensors.nii.gz'</em>, <em class=\"sig-param\">out_fa='fa.nii.gz'</em>, <em class=\"sig-param\">out_ga='ga.nii.gz'</em>, <em class=\"sig-param\">out_rgb='rgb.nii.gz'</em>, <em class=\"sig-param\">out_md='md.nii.gz'</em>, <em class=\"sig-param\">out_ad='ad.nii.gz'</em>, <em class=\"sig-param\">out_rd='rd.nii.gz'</em>, <em class=\"sig-param\">out_mode='mode.nii.gz'</em>, <em class=\"sig-param\">out_evec='evecs.nii.gz'</em>, <em class=\"sig-param\">out_eval='evals.nii.gz'</em>, <em class=\"sig-param\">out_dk_tensor='dki_tensors.nii.gz'</em>, <em class=\"sig-param\">out_mk='mk.nii.gz'</em>, <em class=\"sig-param\">out_ak='ak.nii.gz'</em>, <em class=\"sig-param\">out_rk='rk.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDkiFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Diffusion Kurtosis reconstruction and for computing\nDKI metrics. Performs a DKI reconstruction on the files by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the DKI metrics in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>mask_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>save_metrics</strong><span class=\"classifier\">variable string, optional</span></dt><dd><p>List of metrics to save.\nPossible values: fa, ga, rgb, md, ad, rd, mode, tensor, evec, eval\n(default [] (all))</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_dt_tensor</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the tensors volume to be saved\n(default: \u2018dti_tensors.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_dk_tensor</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the tensors volume to be saved\n(default \u2018dki_tensors.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_fa</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the fractional anisotropy volume to be saved\n(default \u2018fa.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ga</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the geodesic anisotropy volume to be saved\n(default \u2018ga.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rgb</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the color fa volume to be saved (default \u2018rgb.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_md</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the mean diffusivity volume to be saved\n(default \u2018md.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ad</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the axial diffusivity volume to be saved\n(default \u2018ad.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rd</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the radial diffusivity volume to be saved\n(default \u2018rd.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mode</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the mode volume to be saved (default \u2018mode.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_evec</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the eigenvectors volume to be saved\n(default \u2018evecs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_eval</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the eigenvalues to be saved (default \u2018evals.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mk</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the mean kurtosis to be saved (default: \u2018mk.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ak</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the axial kurtosis to be saved (default: \u2018ak.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rk</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the radial kurtosis to be saved (default: \u2018rk.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rba3aa504cda7-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Tabesh, A., Jensen, J.H., Ardekani, B.A., Helpern, J.A., 2011.\nEstimation of tensors and tensor-derived measures in diffusional\nkurtosis imaging. Magn Reson Med. 65(3), 823-836</p>\n</dd>\n<dt class=\"label\" id=\"rba3aa504cda7-2\"><span class=\"brackets\">2</span></dt>\n<dd><p>Jensen, Jens H., Joseph A. Helpern, Anita Ramani, Hanzhang Lu,\nand Kyle Kaczynski. 2005. Diffusional Kurtosis Imaging: The\nQuantification of Non-Gaussian Water Diffusion by Means of Magnetic\nResonance Imaging. MRM 53 (6):1432-40.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstdtiflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"dipy.workflows.reconst.ReconstDtiFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a><a class=\"headerlink\" href=\"#reconstdtiflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">ReconstDtiFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstDtiFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.run\" title=\"dipy.workflows.reconst.ReconstDtiFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files,\u00a0bvalues_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Workflow for tensor reconstruction and for computing DTI metrics.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 68%\" />\n<col style=\"width: 32%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_fitted_tensor</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_tensor_model</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_fitted_tensor\">\n<code class=\"sig-name descname\">get_fitted_tensor</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">mask</em>, <em class=\"sig-param\">bval</em>, <em class=\"sig-param\">bvec</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">bvecs_tol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_fitted_tensor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.get_tensor_model\">\n<code class=\"sig-name descname\">get_tensor_model</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">gtab</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.get_tensor_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstDtiFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">bvalues_files</em>, <em class=\"sig-param\">bvectors_files</em>, <em class=\"sig-param\">mask_files</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">bvecs_tol=0.01</em>, <em class=\"sig-param\">save_metrics=[]</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_tensor='tensors.nii.gz'</em>, <em class=\"sig-param\">out_fa='fa.nii.gz'</em>, <em class=\"sig-param\">out_ga='ga.nii.gz'</em>, <em class=\"sig-param\">out_rgb='rgb.nii.gz'</em>, <em class=\"sig-param\">out_md='md.nii.gz'</em>, <em class=\"sig-param\">out_ad='ad.nii.gz'</em>, <em class=\"sig-param\">out_rd='rd.nii.gz'</em>, <em class=\"sig-param\">out_mode='mode.nii.gz'</em>, <em class=\"sig-param\">out_evec='evecs.nii.gz'</em>, <em class=\"sig-param\">out_eval='evals.nii.gz'</em>, <em class=\"sig-param\">nifti_tensor=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstDtiFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for tensor reconstruction and for computing DTI metrics.\nusing Weighted Least-Squares.\nPerforms a tensor reconstruction on the files by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the DTI metrics in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvectors files. This path may contain wildcards to use\nmultiple bvectors files at once.</p>\n</dd>\n<dt><strong>mask_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input masks. This path may contain wildcards to use\nmultiple masks at once.</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>bvecs_tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to check that norm(bvec) = 1 +/- bvecs_tol\nb-vectors are unit vectors (default 0.01)</p>\n</dd>\n<dt><strong>save_metrics</strong><span class=\"classifier\">variable string, optional</span></dt><dd><p>List of metrics to save.\nPossible values: fa, ga, rgb, md, ad, rd, mode, tensor, evec, eval\n(default [] (all))</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_tensor</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the tensors volume to be saved (default \u2018tensors.nii.gz\u2019).\nPer default, this will be saved following the nifti standard:\nwith the tensor elements as Dxx, Dxy, Dyy, Dxz, Dyz, Dzz on the\nlast (5th) dimension of the volume (shape: (i, j, k, 1, 6)). If\n<cite>nifti_tensor</cite> is False, this will be saved in an alternate format\nthat is used by other software (e.g., FSL): a\n4-dimensional volume (shape (i, j, k, 6)) with Dxx, Dxy, Dxz, Dyy,\nDyz, Dzz on the last dimension.</p>\n</dd>\n<dt><strong>out_fa</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the fractional anisotropy volume to be saved\n(default \u2018fa.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ga</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the geodesic anisotropy volume to be saved\n(default \u2018ga.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rgb</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the color fa volume to be saved (default \u2018rgb.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_md</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the mean diffusivity volume to be saved\n(default \u2018md.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_ad</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the axial diffusivity volume to be saved\n(default \u2018ad.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_rd</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the radial diffusivity volume to be saved\n(default \u2018rd.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mode</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the mode volume to be saved (default \u2018mode.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_evec</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the eigenvectors volume to be saved\n(default \u2018evecs.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_eval</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the eigenvalues to be saved (default \u2018evals.nii.gz\u2019)</p>\n</dd>\n<dt><strong>nifti_tensor</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether the tensor is saved in the standard Nifti format or in an\nalternate format\nthat is used by other software (e.g., FSL): a\n4-dimensional volume (shape (i, j, k, 6)) with\nDxx, Dxy, Dxz, Dyy, Dyz, Dzz on the last dimension. Default: True</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r1c6b043e6f2c-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</p>\n</dd>\n<dt class=\"label\" id=\"r1c6b043e6f2c-2\"><span class=\"brackets\">2</span></dt>\n<dd><p>Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</p>\n</dd>\n<dt class=\"label\" id=\"r1c6b043e6f2c-3\"><span class=\"brackets\">3</span></dt>\n<dd><p>Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</p>\n</dd>\n<dt class=\"label\" id=\"r1c6b043e6f2c-4\"><span class=\"brackets\">4</span></dt>\n<dd><p>hung, SW., Lu, Y., Henry, R.G., 2006. Comparison of bootstrap\napproaches for estimation of uncertainties of DTI parameters.\nNeuroImage 33, 531-541.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstivimflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstIvimFlow\" title=\"dipy.workflows.reconst.ReconstIvimFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstIvimFlow</span></code></a><a class=\"headerlink\" href=\"#reconstivimflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">ReconstIvimFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstIvimFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.run\" title=\"dipy.workflows.reconst.ReconstIvimFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files,\u00a0bvalues_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Workflow for Intra-voxel Incoherent Motion reconstruction and for computing IVIM metrics.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 66%\" />\n<col style=\"width: 34%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_fitted_ivim</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow.get_fitted_ivim\">\n<code class=\"sig-name descname\">get_fitted_ivim</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">mask</em>, <em class=\"sig-param\">bval</em>, <em class=\"sig-param\">bvec</em>, <em class=\"sig-param\">b0_threshold=50</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.get_fitted_ivim\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstIvimFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">bvalues_files</em>, <em class=\"sig-param\">bvectors_files</em>, <em class=\"sig-param\">mask_files</em>, <em class=\"sig-param\">split_b_D=400</em>, <em class=\"sig-param\">split_b_S0=200</em>, <em class=\"sig-param\">b0_threshold=0</em>, <em class=\"sig-param\">save_metrics=[]</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_S0_predicted='S0_predicted.nii.gz'</em>, <em class=\"sig-param\">out_perfusion_fraction='perfusion_fraction.nii.gz'</em>, <em class=\"sig-param\">out_D_star='D_star.nii.gz'</em>, <em class=\"sig-param\">out_D='D.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstIvimFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Intra-voxel Incoherent Motion reconstruction and for\ncomputing IVIM metrics. Performs a IVIM reconstruction on the files\nby \u2018globing\u2019 <code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the IVIM metrics in a directory\nspecified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvalues_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>bvectors_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvalues files. This path may contain wildcards to use\nmultiple bvalues files at once.</p>\n</dd>\n<dt><strong>mask_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input masks. This path may contain wildcards to use\nmultiple masks at once. (default: No mask used)</p>\n</dd>\n<dt><strong>split_b_D</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Value to split the bvals to estimate D for the two-stage process of\nfitting\n(default 400)</p>\n</dd>\n<dt><strong>split_b_S0</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Value to split the bvals to estimate S0 for the two-stage process\nof fitting.\n(default 200)</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Threshold value for the b0 bval.\n(default 0)</p>\n</dd>\n<dt><strong>save_metrics</strong><span class=\"classifier\">variable string, optional</span></dt><dd><p>List of metrics to save.\nPossible values: S0_predicted, perfusion_fraction, D_star, D\n(default [] (all))</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_S0_predicted</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the S0 signal estimated to be saved\n(default: \u2018S0_predicted.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_perfusion_fraction</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the estimated volume fractions to be saved\n(default \u2018perfusion_fraction.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_D_star</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the estimated pseudo-diffusion parameter to be saved\n(default \u2018D_star.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_D</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the estimated diffusion parameter to be saved\n(default \u2018D.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r7e16754271e7-stejskal65\"><span class=\"brackets\">Stejskal65</span></dt>\n<dd><p>Stejskal, E. O.; Tanner, J. E. (1 January 1965).\n\u201cSpin Diffusion Measurements: Spin Echoes in the\nPresence of a Time-Dependent Field Gradient\u201d. The\nJournal of Chemical Physics 42 (1): 288.\nBibcode: 1965JChPh..42..288S. doi:10.1063/1.1695690.</p>\n</dd>\n<dt class=\"label\" id=\"r7e16754271e7-lebihan84\"><span class=\"brackets\">LeBihan84</span></dt>\n<dd><p>Le Bihan, Denis, et al. \u201cSeparation of diffusion\nand perfusion in intravoxel incoherent motion MR\nimaging.\u201d Radiology 168.2 (1988): 497-505.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reconstmapmriflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a><a class=\"headerlink\" href=\"#reconstmapmriflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">ReconstMAPMRIFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.run\" title=\"dipy.workflows.reconst.ReconstMAPMRIFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0data_files,\u00a0bvals_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Workflow for fitting the MAPMRI model (with optional Laplacian regularization).</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.ReconstMAPMRIFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data_files</em>, <em class=\"sig-param\">bvals_files</em>, <em class=\"sig-param\">bvecs_files</em>, <em class=\"sig-param\">small_delta</em>, <em class=\"sig-param\">big_delta</em>, <em class=\"sig-param\">b0_threshold=50.0</em>, <em class=\"sig-param\">laplacian=True</em>, <em class=\"sig-param\">positivity=True</em>, <em class=\"sig-param\">bval_threshold=2000</em>, <em class=\"sig-param\">save_metrics=[]</em>, <em class=\"sig-param\">laplacian_weighting=0.05</em>, <em class=\"sig-param\">radial_order=6</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_rtop='rtop.nii.gz'</em>, <em class=\"sig-param\">out_lapnorm='lapnorm.nii.gz'</em>, <em class=\"sig-param\">out_msd='msd.nii.gz'</em>, <em class=\"sig-param\">out_qiv='qiv.nii.gz'</em>, <em class=\"sig-param\">out_rtap='rtap.nii.gz'</em>, <em class=\"sig-param\">out_rtpp='rtpp.nii.gz'</em>, <em class=\"sig-param\">out_ng='ng.nii.gz'</em>, <em class=\"sig-param\">out_perng='perng.nii.gz'</em>, <em class=\"sig-param\">out_parng='parng.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.ReconstMAPMRIFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for fitting the MAPMRI model (with optional Laplacian\nregularization). Generates rtop, lapnorm, msd, qiv, rtap, rtpp,\nnon-gaussian (ng), parallel ng, perpendicular ng saved in a nifti\nformat in input files provided by <cite>data_files</cite> and saves the nifti\nfiles to an output directory specified by <cite>out_dir</cite>.</p>\n<p>In order for the MAPMRI workflow to work in the way\nintended either the Laplacian or positivity or both must\nbe set to True.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volume.</p>\n</dd>\n<dt><strong>bvals_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bval files.</p>\n</dd>\n<dt><strong>bvecs_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the bvec files.</p>\n</dd>\n<dt><strong>small_delta</strong><span class=\"classifier\">float</span></dt><dd><p>Small delta value used in generation of gradient table of provided\nbval and bvec.</p>\n</dd>\n<dt><strong>big_delta</strong><span class=\"classifier\">float</span></dt><dd><p>Big delta value used in generation of gradient table of provided\nbval and bvec.</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold used to find b=0 directions (default 0.0)</p>\n</dd>\n<dt><strong>laplacian</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Regularize using the Laplacian of the MAP-MRI basis (default True)</p>\n</dd>\n<dt><strong>positivity</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Constrain the propagator to be positive. (default True)</p>\n</dd>\n<dt><strong>bval_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Sets the b-value threshold to be used in the scale factor\nestimation. In order for the estimated non-Gaussianity to have\nmeaning this value should set to a lower value (b&lt;2000 s/mm^2)\nsuch that the scale factors are estimated on signal points that\nreasonably represent the spins at Gaussian diffusion.\n(default: 2000)</p>\n</dd>\n<dt><strong>save_metrics</strong><span class=\"classifier\">variable string, optional</span></dt><dd><p>List of metrics to save.\nPossible values: rtop, laplacian_signal, msd, qiv, rtap, rtpp,\nng, perng, parng\n(default: [] (all))</p>\n</dd>\n<dt><strong>laplacian_weighting</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Weighting value used in fitting the MAPMRI model in the Laplacian\nand both model types. (default: 0.05)</p>\n</dd>\n<dt><strong>radial_order</strong><span class=\"classifier\">unsigned int, optional</span></dt><dd><p>Even value used to set the order of the basis\n(default: 6)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default: input file directory)</p>\n</dd>\n<dt><strong>out_rtop</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the rtop to be saved</p>\n</dd>\n<dt><strong>out_lapnorm</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the norm of Laplacian signal to be saved</p>\n</dd>\n<dt><strong>out_msd</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the msd to be saved</p>\n</dd>\n<dt><strong>out_qiv</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the qiv to be saved</p>\n</dd>\n<dt><strong>out_rtap</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the rtap to be saved</p>\n</dd>\n<dt><strong>out_rtpp</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the rtpp to be saved</p>\n</dd>\n<dt><strong>out_ng</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the Non-Gaussianity to be saved</p>\n</dd>\n<dt><strong>out_perng</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the Non-Gaussianity perpendicular to be saved</p>\n</dd>\n<dt><strong>out_parng</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the Non-Gaussianity parallel to be saved</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tensormodel\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"dipy.workflows.reconst.TensorModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><a class=\"headerlink\" href=\"#tensormodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.TensorModel\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">TensorModel</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">fit_method='WLS'</em>, <em class=\"sig-param\">return_S0_hat=False</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Diffusion Tensor</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel.fit\" title=\"dipy.workflows.reconst.TensorModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(self,\u00a0data[,\u00a0mask])</p></td>\n<td><p>Fit method of the DTI model class</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.TensorModel.predict\" title=\"dipy.workflows.reconst.TensorModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(self,\u00a0dti_params[,\u00a0S0])</p></td>\n<td><p>Predict a signal for this TensorModel class instance given parameters.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">fit_method='WLS'</em>, <em class=\"sig-param\">return_S0_hat=False</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A Diffusion Tensor Model <a class=\"reference internal\" href=\"#rcef4404f4d4d-1\" id=\"id87\">[1]</a>, <a class=\"reference internal\" href=\"#rcef4404f4d4d-2\" id=\"id88\">[2]</a>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable class instance</span></dt><dd></dd>\n<dt><strong>fit_method</strong><span class=\"classifier\">str or callable</span></dt><dd><p>str can be one of the following:</p>\n<dl class=\"simple\">\n<dt>\u2018WLS\u2019 for weighted least squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.wls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018LS\u2019 or \u2018OLS\u2019 for ordinary least squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.ols_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018NLLS\u2019 for non-linear least-squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.nlls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018RT\u2019 or \u2018restore\u2019 or \u2018RESTORE\u2019 for RESTORE robust tensor</dt><dd><p>fitting <a class=\"reference internal\" href=\"#rcef4404f4d4d-3\" id=\"id89\">[3]</a>\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.restore_fit_tensor()</span></code></p>\n</dd>\n<dt>callable has to have the signature:</dt><dd><p>fit_method(design_matrix, data, <a href=\"#id90\"><span class=\"problematic\" id=\"id91\">*</span></a>args, <a href=\"#id92\"><span class=\"problematic\" id=\"id93\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>return_S0_hat</strong><span class=\"classifier\">bool</span></dt><dd><p>Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt><strong>args, kwargs</strong><span class=\"classifier\">arguments and key-word arguments passed to the</span></dt><dd><p>fit_method. See dti.wls_fit_tensor, dti.ols_fit_tensor for details</p>\n</dd>\n<dt><strong>min_signal</strong><span class=\"classifier\">float</span></dt><dd><p>The minimum signal value. Needs to be a strictly positive\nnumber. Default: minimal signal in the data provided to <cite>fit</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>In order to increase speed of processing, tensor fitting is done\nsimultaneously over many voxels. Many fit_methods use the \u2018step\u2019\nparameter to set the number of voxels that will be fit at once in each\niteration. This is the chunk size as a number of voxels. A larger step\nvalue should speed things up, but it will also take up more memory. It\nis advisable to keep an eye on memory consumption as this value is\nincreased.</p>\n<p>E.g., in <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor()</span></code> we have a default step value of\n1e4</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rcef4404f4d4d-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id87\">1</a></span></dt>\n<dd><p>Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</p>\n</dd>\n<dt class=\"label\" id=\"rcef4404f4d4d-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id88\">2</a></span></dt>\n<dd><p>Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</p>\n</dd>\n<dt class=\"label\" id=\"rcef4404f4d4d-3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id89\">3</a></span></dt>\n<dd><p>Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.fit\">\n<code class=\"sig-name descname\">fit</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DTI model class</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">array</span></dt><dd><p>The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">array</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.TensorModel.predict\">\n<code class=\"sig-name descname\">predict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dti_params</em>, <em class=\"sig-param\">S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.TensorModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this TensorModel class instance given parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dti_params</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The last dimension should have 12 tensor parameters: 3\neigenvalues, followed by the 3 eigenvectors</p>\n</dd>\n<dt><strong>S0</strong><span class=\"classifier\">float or ndarray</span></dt><dd><p>The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id97\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow\" title=\"dipy.workflows.reconst.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id97\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.reconst.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_io_iterator\" title=\"dipy.workflows.reconst.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_short_name\" title=\"dipy.workflows.reconst.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.get_sub_runs\" title=\"dipy.workflows.reconst.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.manage_output_overwrite\" title=\"dipy.workflows.reconst.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.reconst.Workflow.run\" title=\"dipy.workflows.reconst.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.reconst.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ivimmodel\">\n<h3>IvimModel<a class=\"headerlink\" href=\"#ivimmodel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.IvimModel\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">IvimModel</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">fit_method='trr'</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.IvimModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Selector function to switch between the 2-stage Trust-Region Reflective\nbased NLLS fitting method (also containing the linear fit): <cite>trr</cite> and the\nVariable Projections based fitting method: <cite>varpro</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fit_method</strong><span class=\"classifier\">string, optional</span></dt><dd><p>The value fit_method can either be \u2018trr\u2019 or \u2018varpro\u2019.\ndefault : trr</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"auto-response\">\n<h3>auto_response<a class=\"headerlink\" href=\"#auto-response\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.auto_response\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">auto_response</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">roi_center=None</em>, <em class=\"sig-param\">roi_radius=10</em>, <em class=\"sig-param\">fa_thr=0.7</em>, <em class=\"sig-param\">fa_callable=&lt;function fa_superior at 0x128719b90&gt;</em>, <em class=\"sig-param\">return_number_of_voxels=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.auto_response\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Automatic estimation of response function using FA.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable</span></dt><dd></dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>diffusion data</p>\n</dd>\n<dt><strong>roi_center</strong><span class=\"classifier\">tuple, (3,)</span></dt><dd><p>Center of ROI in data. If center is None, it is assumed that it is\nthe center of the volume with shape <cite>data.shape[:3]</cite>.</p>\n</dd>\n<dt><strong>roi_radius</strong><span class=\"classifier\">int</span></dt><dd><p>radius of cubic ROI</p>\n</dd>\n<dt><strong>fa_thr</strong><span class=\"classifier\">float</span></dt><dd><p>FA threshold</p>\n</dd>\n<dt><strong>fa_callable</strong><span class=\"classifier\">callable</span></dt><dd><p>A callable that defines an operation that compares FA with the fa_thr.\nThe operator should have two positional arguments\n(e.g., <cite>fa_operator(FA, fa_thr)</cite>) and it should return a bool array.</p>\n</dd>\n<dt><strong>return_number_of_voxels</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, returns the number of voxels used for estimating the response\nfunction.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>response</strong><span class=\"classifier\">tuple, (2,)</span></dt><dd><p>(<cite>evals</cite>, <cite>S0</cite>)</p>\n</dd>\n<dt><strong>ratio</strong><span class=\"classifier\">float</span></dt><dd><p>The ratio between smallest versus largest eigenvalue of the response.</p>\n</dd>\n<dt><strong>number of voxels</strong><span class=\"classifier\">int (optional)</span></dt><dd><p>The number of voxels used for estimating the response function.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>In CSD there is an important pre-processing step: the estimation of the\nfiber response function. In order to do this we look for voxels with very\nanisotropic configurations. For example we can use an ROI (20x20x20) at\nthe center of the volume and store the signal values for the voxels with\nFA values higher than 0.7. Of course, if we haven\u2019t precalculated FA we\nneed to fit a Tensor model to the datasets. Which is what we do in this\nfunction.</p>\n<p>For the response we also need to find the average S0 in the ROI. This is\npossible using <cite>gtab.b0s_mask()</cite> we can find all the S0 volumes (which\ncorrespond to b-values equal 0) in the dataset.</p>\n<p>The <cite>response</cite> consists always of a prolate tensor created by averaging\nthe highest and second highest eigenvalues in the ROI with FA higher than\nthreshold. We also include the average S0s.</p>\n<p>We also return the <cite>ratio</cite> which is used for the SDT models. If requested,\nthe number of voxels used for estimating the response function is also\nreturned, which can be used to judge the fidelity of the response function.\nAs a rule of thumb, at least 300 voxels should be used to estimate a good\nresponse function (see <a class=\"reference internal\" href=\"#r391093edbf61-1\" id=\"id98\">[1]</a>).</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r391093edbf61-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id98\">1</a></span></dt>\n<dd><p>Tournier, J.D., et al. NeuroImage 2004. Direct estimation of the</p>\n</dd>\n</dl>\n<p>fiber orientation density function from diffusion-weighted MRI\ndata using spherical deconvolution</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"axial-diffusivity\">\n<h3>axial_diffusivity<a class=\"headerlink\" href=\"#axial-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.axial_diffusivity\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">axial_diffusivity</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">evals</em>, <em class=\"sig-param\">axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.axial_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Axial Diffusivity (AD) of a diffusion tensor.\nAlso called parallel diffusivity.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evals</strong><span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor, must be sorted in descending order\nalong <cite>axis</cite>.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>ad</strong><span class=\"classifier\">array</span></dt><dd><p>Calculated AD.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>AD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[AD = \\lambda_1\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"color-fa\">\n<h3>color_fa<a class=\"headerlink\" href=\"#color-fa\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.color_fa\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">color_fa</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fa</em>, <em class=\"sig-param\">evecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.color_fa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Color fractional anisotropy of diffusion tensor</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>fa</strong><span class=\"classifier\">array-like</span></dt><dd><blockquote>\n<div><p>Array of the fractional anisotropy (can be 1D, 2D or 3D)</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>evecs<span class=\"classifier\">array-like</span></dt><dd><p>eigen vectors from the tensor model</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>rgb</strong><span class=\"classifier\">Array with 3 channels for each color as the last dimension.</span></dt><dd><p>Colormap of the FA with red for the x value, y for the green\nvalue and z for the blue value.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p>ec{e}))  imes fa</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"fractional-anisotropy\">\n<h3>fractional_anisotropy<a class=\"headerlink\" href=\"#fractional-anisotropy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.fractional_anisotropy\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">fractional_anisotropy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">evals</em>, <em class=\"sig-param\">axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.fractional_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fractional anisotropy (FA) of a diffusion tensor.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evals</strong><span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>fa</strong><span class=\"classifier\">array</span></dt><dd><p>Calculated FA. Range is 0 &lt;= FA &lt;= 1.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>FA is calculated using the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[FA = \\sqrt{\\frac{1}{2}\\frac{(\\lambda_1-\\lambda_2)^2+(\\lambda_1-\n            \\lambda_3)^2+(\\lambda_2-\\lambda_3)^2}{\\lambda_1^2+\n            \\lambda_2^2+\\lambda_3^2}}\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"geodesic-anisotropy\">\n<h3>geodesic_anisotropy<a class=\"headerlink\" href=\"#geodesic-anisotropy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.geodesic_anisotropy\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">geodesic_anisotropy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">evals</em>, <em class=\"sig-param\">axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.geodesic_anisotropy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Geodesic anisotropy (GA) of a diffusion tensor.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evals</strong><span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>ga</strong><span class=\"classifier\">array</span></dt><dd><p>Calculated GA. In the range 0 to +infinity</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>GA is calculated using the following equation given in <a class=\"reference internal\" href=\"#rd98067e65c14-1\" id=\"id100\">[1]</a>:</p>\n<div class=\"math notranslate nohighlight\">\n\\[GA = \\sqrt{\\sum_{i=1}^3\n\\log^2{\\left ( \\lambda_i/&lt;\\mathbf{D}&gt; \\right )}},\n\\quad \\textrm{where} \\quad &lt;\\mathbf{D}&gt; =\n(\\lambda_1\\lambda_2\\lambda_3)^{1/3}\\]</div>\n<p>Note that the notation, <span class=\"math notranslate nohighlight\">\\(&lt;D&gt;\\)</span>, is often used as the mean diffusivity (MD)\nof the diffusion tensor and can lead to confusions in the literature\n(see <a class=\"reference internal\" href=\"#rd98067e65c14-1\" id=\"id101\">[1]</a> versus <a class=\"reference internal\" href=\"#rd98067e65c14-2\" id=\"id102\">[2]</a> versus <a class=\"reference internal\" href=\"#rd98067e65c14-3\" id=\"id103\">[3]</a> for example). Reference <a class=\"reference internal\" href=\"#rd98067e65c14-2\" id=\"id104\">[2]</a> defines\ngeodesic anisotropy (GA) with <span class=\"math notranslate nohighlight\">\\(&lt;D&gt;\\)</span> as the MD in the denominator of the\nsum. This is wrong. The original paper <a class=\"reference internal\" href=\"#rd98067e65c14-1\" id=\"id105\">[1]</a> defines GA with\n<span class=\"math notranslate nohighlight\">\\(&lt;D&gt; = det(D)^{1/3}\\)</span>, as the isotropic part of the distance. This might be\nan explanation for the confusion. The isotropic part of the diffusion\ntensor in Euclidean space is the MD whereas the isotropic part of the\ntensor in log-Euclidean space is <span class=\"math notranslate nohighlight\">\\(det(D)^{1/3}\\)</span>. The Appendix of <a class=\"reference internal\" href=\"#rd98067e65c14-1\" id=\"id106\">[1]</a> and\nlog-Euclidean derivations from <a class=\"reference internal\" href=\"#rd98067e65c14-3\" id=\"id107\">[3]</a> are clear on this. Hence, all that to\nsay that <span class=\"math notranslate nohighlight\">\\(&lt;D&gt; = det(D)^{1/3}\\)</span> here for the GA definition and not MD.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rd98067e65c14-1\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id100\">1</a>,<a href=\"#id101\">2</a>,<a href=\"#id105\">3</a>,<a href=\"#id106\">4</a>)</span></dt>\n<dd><p>P. G. Batchelor, M. Moakher, D. Atkinson, F. Calamante,\nA. Connelly, \u201cA rigorous framework for diffusion tensor calculus\u201d,\nMagnetic Resonance in Medicine, vol. 53, pp. 221-225, 2005.</p>\n</dd>\n<dt class=\"label\" id=\"rd98067e65c14-2\"><span class=\"brackets\">2</span><span class=\"fn-backref\">(<a href=\"#id102\">1</a>,<a href=\"#id104\">2</a>)</span></dt>\n<dd><p>M. M. Correia, V. F. Newcombe, G.B. Williams.\n\u201cContrast-to-noise ratios for indices of anisotropy obtained from\ndiffusion MRI: a study with standard clinical b-values at 3T\u201d.\nNeuroImage, vol. 57, pp. 1103-1115, 2011.</p>\n</dd>\n<dt class=\"label\" id=\"rd98067e65c14-3\"><span class=\"brackets\">3</span><span class=\"fn-backref\">(<a href=\"#id103\">1</a>,<a href=\"#id107\">2</a>)</span></dt>\n<dd><p>A. D. Lee, etal, P. M. Thompson.\n\u201cComparison of fractional and geodesic anisotropy in diffusion tensor\nimages of 90 monozygotic and dizygotic twins\u201d. 5th IEEE International\nSymposium on Biomedical Imaging (ISBI), pp. 943-946, May 2008.</p>\n</dd>\n<dt class=\"label\" id=\"rd98067e65c14-4\"><span class=\"brackets\">4</span></dt>\n<dd><p>V. Arsigny, P. Fillard, X. Pennec, N. Ayache.\n\u201cLog-Euclidean metrics for fast and simple calculus on diffusion\ntensors.\u201d Magnetic Resonance in Medecine, vol 56, pp. 411-421, 2006.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-mode\">\n<h3>get_mode<a class=\"headerlink\" href=\"#get-mode\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.get_mode\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">get_mode</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">q_form</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.get_mode\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mode (MO) of a diffusion tensor <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id112\">[1]</a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>q_form</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The quadratic form of a tensor, or an array with quadratic forms of\ntensors. Should be of shape (x, y, z, 3, 3) or (n, 3, 3) or (3, 3).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mode</strong><span class=\"classifier\">array</span></dt><dd><p>Calculated tensor mode in each spatial coordinate.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Mode ranges between -1 (planar anisotropy) and +1 (linear anisotropy)\nwith 0 representing orthotropy. Mode is calculated with the\nfollowing equation (equation 9 in <a class=\"reference internal\" href=\"#r8502d494f176-1\" id=\"id113\">[1]</a>):</p>\n<div class=\"math notranslate nohighlight\">\n\\[Mode = 3*\\sqrt{6}*det(\\widetilde{A}/norm(\\widetilde{A}))\\]</div>\n<p>Where <span class=\"math notranslate nohighlight\">\\(\\widetilde{A}\\)</span> is the deviatoric part of the tensor quadratic form.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r8502d494f176-1\"><span class=\"brackets\">1</span><span class=\"fn-backref\">(<a href=\"#id4\">1</a>,<a href=\"#id112\">2</a>,<a href=\"#id113\">3</a>)</span></dt>\n<dd><p>Daniel B. Ennis and G. Kindlmann, \u201cOrthogonal Tensor\nInvariants and the Analysis of Diffusion Tensor Magnetic Resonance\nImages\u201d, Magnetic Resonance in Medicine, vol. 55, no. 1, pp. 136-146,\n2006.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id115\">\n<h3>gradient_table<a class=\"headerlink\" href=\"#id115\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.gradient_table\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">gradient_table</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bvecs=None</em>, <em class=\"sig-param\">big_delta=None</em>, <em class=\"sig-param\">small_delta=None</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.gradient_table\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">can be any of the four options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N,) or (1, N) or (N, 1) with the b-values.</p></li>\n<li><p>a path for the file which contains an array like the above (1).</p></li>\n<li><p>an array of shape (N, 4) or (4, N). Then this parameter is\nconsidered to be a b-table which contains both bvals and bvecs. In\nthis case the next parameter is skipped.</p></li>\n<li><p>a path for the file which contains an array like the one at (3).</p></li>\n</ol>\n</dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">can be any of two options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N, 3) or (3, N) with the b-vectors.</p></li>\n<li><p>a path for the file which contains an array like the previous.</p></li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse separation time in seconds (default None)</p>\n</dd>\n<dt><strong>small_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse duration time in seconds (default None)</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float</span></dt><dd><p>All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li><p>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</p></li>\n<li><p>We assume that the minimum number of b-values is 7.</p></li>\n<li><p>B-vectors should be unit vectors.</p></li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"literal-eval\">\n<h3>literal_eval<a class=\"headerlink\" href=\"#literal-eval\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.literal_eval\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">literal_eval</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">node_or_string</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.literal_eval\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safely evaluate an expression node or a string containing a Python\nexpression.  The string or node provided may only consist of the following\nPython literal structures: strings, bytes, numbers, tuples, lists, dicts,\nsets, booleans, and None.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id116\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id116\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.reconst.load_nifti_data\" title=\"dipy.workflows.reconst.load_nifti_data\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti-data\">\n<h3>load_nifti_data<a class=\"headerlink\" href=\"#load-nifti-data\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.load_nifti_data\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">load_nifti_data</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.load_nifti_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load only the data array from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to the file.</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>data: np.ndarray or nib.ArrayProxy</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.reconst.load_nifti\" title=\"dipy.workflows.reconst.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"lower-triangular\">\n<h3>lower_triangular<a class=\"headerlink\" href=\"#lower-triangular\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.lower_triangular\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">lower_triangular</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tensor</em>, <em class=\"sig-param\">b0=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.lower_triangular\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the six lower triangular values of the tensor and a dummy variable\nif b0 is not None</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>tensor</strong><span class=\"classifier\">array_like (\u2026, 3, 3)</span></dt><dd><p>a collection of 3, 3 diffusion tensors</p>\n</dd>\n<dt><strong>b0</strong><span class=\"classifier\">float</span></dt><dd><p>if b0 is not none log(b0) is returned as the dummy variable</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>D</strong><span class=\"classifier\">ndarray</span></dt><dd><p>If b0 is none, then the shape will be (\u2026, 6) otherwise (\u2026, 7)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"mean-diffusivity\">\n<h3>mean_diffusivity<a class=\"headerlink\" href=\"#mean-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.mean_diffusivity\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">mean_diffusivity</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">evals</em>, <em class=\"sig-param\">axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.mean_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Mean Diffusivity (MD) of a diffusion tensor.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evals</strong><span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>md</strong><span class=\"classifier\">array</span></dt><dd><p>Calculated MD.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>MD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[MD = \\frac{\\lambda_1 + \\lambda_2 + \\lambda_3}{3}\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nifti1-symmat\">\n<h3>nifti1_symmat<a class=\"headerlink\" href=\"#nifti1-symmat\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.nifti1_symmat\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">nifti1_symmat</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image_data</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.nifti1_symmat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a Nifti1Image with a symmetric matrix intent</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image_data</strong><span class=\"classifier\">array-like</span></dt><dd><p>should have lower triangular elements of a symmetric matrix along the\nlast dimension</p>\n</dd>\n<dt><strong>all other arguments and keywords are passed to Nifti1Image</strong></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">Nifti1Image</span></dt><dd><p>5d, extra dimensions addes before the last. Has symmetric matrix intent\ncode</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaks-from-model\">\n<h3>peaks_from_model<a class=\"headerlink\" href=\"#peaks-from-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.peaks_from_model\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">peaks_from_model</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">model</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">sphere</em>, <em class=\"sig-param\">relative_peak_threshold</em>, <em class=\"sig-param\">min_separation_angle</em>, <em class=\"sig-param\">mask=None</em>, <em class=\"sig-param\">return_odf=False</em>, <em class=\"sig-param\">return_sh=True</em>, <em class=\"sig-param\">gfa_thr=0</em>, <em class=\"sig-param\">normalize_peaks=False</em>, <em class=\"sig-param\">sh_order=8</em>, <em class=\"sig-param\">sh_basis_type=None</em>, <em class=\"sig-param\">npeaks=5</em>, <em class=\"sig-param\">B=None</em>, <em class=\"sig-param\">invB=None</em>, <em class=\"sig-param\">parallel=False</em>, <em class=\"sig-param\">nbr_processes=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.peaks_from_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit the model to data and computes peaks and metrics</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>model</strong><span class=\"classifier\">a model instance</span></dt><dd><p><cite>model</cite> will be used to fit the data.</p>\n</dd>\n<dt><strong>sphere</strong><span class=\"classifier\">Sphere</span></dt><dd><p>The Sphere providing discrete directions for evaluation.</p>\n</dd>\n<dt><strong>relative_peak_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>Only return peaks greater than <code class=\"docutils literal notranslate\"><span class=\"pre\">relative_peak_threshold</span> <span class=\"pre\">*</span> <span class=\"pre\">m</span></code> where m\nis the largest peak.</p>\n</dd>\n<dt><strong>min_separation_angle</strong><span class=\"classifier\">float in [0, 90] The minimum distance between</span></dt><dd><p>directions. If two peaks are too close only the larger of the two is\nreturned.</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">array, optional</span></dt><dd><p>If <cite>mask</cite> is provided, voxels that are False in <cite>mask</cite> are skipped and\nno peaks are returned.</p>\n</dd>\n<dt><strong>return_odf</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, the odfs are returned.</p>\n</dd>\n<dt><strong>return_sh</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, the odf as spherical harmonics coefficients is returned</p>\n</dd>\n<dt><strong>gfa_thr</strong><span class=\"classifier\">float</span></dt><dd><p>Voxels with gfa less than <cite>gfa_thr</cite> are skipped, no peaks are returned.</p>\n</dd>\n<dt><strong>normalize_peaks</strong><span class=\"classifier\">bool</span></dt><dd><p>If true, all peak values are calculated relative to <cite>max(odf)</cite>.</p>\n</dd>\n<dt><strong>sh_order</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Maximum SH order in the SH fit.  For <cite>sh_order</cite>, there will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">1)</span> <span class=\"pre\">*</span> <span class=\"pre\">(sh_order</span> <span class=\"pre\">+</span> <span class=\"pre\">2)</span> <span class=\"pre\">/</span> <span class=\"pre\">2</span></code> SH coefficients (default 8).</p>\n</dd>\n<dt><strong>sh_basis_type</strong><span class=\"classifier\">{None, \u2018tournier07\u2019, \u2018descoteaux07\u2019}</span></dt><dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the default DIPY basis,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tournier07</span></code> for the Tournier 2007 <a class=\"reference internal\" href=\"#r238c65f161c0-2\" id=\"id117\">[2]</a> basis, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code> for the Descoteaux 2007 <a class=\"reference internal\" href=\"#r238c65f161c0-1\" id=\"id118\">[1]</a> basis\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">descoteaux07</span></code>).</p>\n</dd>\n<dt><strong>sh_smooth</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Lambda-regularization in the SH fit (default 0.0).</p>\n</dd>\n<dt><strong>npeaks</strong><span class=\"classifier\">int</span></dt><dd><p>Maximum number of peaks found (default 5 peaks).</p>\n</dd>\n<dt><strong>B</strong><span class=\"classifier\">ndarray, optional</span></dt><dd><p>Matrix that transforms spherical harmonics to spherical function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sf</span> <span class=\"pre\">=</span> <span class=\"pre\">np.dot(sh,</span> <span class=\"pre\">B)</span></code>.</p>\n</dd>\n<dt><strong>invB</strong><span class=\"classifier\">ndarray, optional</span></dt><dd><p>Inverse of B.</p>\n</dd>\n<dt><strong>parallel: bool</strong></dt><dd><p>If True, use multiprocessing to compute peaks and metric\n(default False). Temporary files are saved in the default temporary\ndirectory of the system. It can be changed using <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span> <span class=\"pre\">tempfile</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">tempfile.tempdir</span> <span class=\"pre\">=</span> <span class=\"pre\">'/path/to/tempdir'</span></code>.</p>\n</dd>\n<dt><strong>nbr_processes: int</strong></dt><dd><p>If <cite>parallel</cite> is True, the number of subprocesses to use\n(default multiprocessing.cpu_count()).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>pam</strong><span class=\"classifier\">PeaksAndMetrics</span></dt><dd><p>An object with <code class=\"docutils literal notranslate\"><span class=\"pre\">gfa</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">peak_directions</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">peak_values</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">peak_indices</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">odf</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">shm_coeffs</span></code> as attributes</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r238c65f161c0-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id118\">1</a></span></dt>\n<dd><p>Descoteaux, M., Angelino, E., Fitzgibbons, S. and Deriche, R.\nRegularized, Fast, and Robust Analytical Q-ball Imaging.\nMagn. Reson. Med. 2007;58:497-510.</p>\n</dd>\n<dt class=\"label\" id=\"r238c65f161c0-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id117\">2</a></span></dt>\n<dd><p>Tournier J.D., Calamante F. and Connelly A. Robust determination\nof the fibre orientation distribution in diffusion MRI:\nNon-negativity constrained super-resolved spherical deconvolution.\nNeuroImage. 2007;35(4):1459-1472.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaks-to-niftis\">\n<h3>peaks_to_niftis<a class=\"headerlink\" href=\"#peaks-to-niftis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.peaks_to_niftis\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">peaks_to_niftis</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">pam</em>, <em class=\"sig-param\">fname_shm</em>, <em class=\"sig-param\">fname_dirs</em>, <em class=\"sig-param\">fname_values</em>, <em class=\"sig-param\">fname_indices</em>, <em class=\"sig-param\">fname_gfa</em>, <em class=\"sig-param\">reshape_dirs=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.peaks_to_niftis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save SH, directions, indices and values of peaks to Nifti.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"radial-diffusivity\">\n<h3>radial_diffusivity<a class=\"headerlink\" href=\"#radial-diffusivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.radial_diffusivity\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">radial_diffusivity</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">evals</em>, <em class=\"sig-param\">axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.radial_diffusivity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Radial Diffusivity (RD) of a diffusion tensor.\nAlso called perpendicular diffusivity.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evals</strong><span class=\"classifier\">array-like</span></dt><dd><p>Eigenvalues of a diffusion tensor, must be sorted in descending order\nalong <cite>axis</cite>.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis of <cite>evals</cite> which contains 3 eigenvalues.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>rd</strong><span class=\"classifier\">array</span></dt><dd><p>Calculated RD.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>RD is calculated with the following equation:</p>\n<div class=\"math notranslate nohighlight\">\n\\[RD = \\frac{\\lambda_2 + \\lambda_3}{2}\\]</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id121\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#id121\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.read_bvals_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fbvals</em>, <em class=\"sig-param\">fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fbvals</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong><span class=\"classifier\">str</span></dt><dd><p>Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">array, (N,) or None</span></dt><dd></dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">array, (N, 3) or None</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id122\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id122\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-peaks\">\n<h3>save_peaks<a class=\"headerlink\" href=\"#save-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.save_peaks\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">save_peaks</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">pam</em>, <em class=\"sig-param\">affine=None</em>, <em class=\"sig-param\">verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.save_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save all important attributes of object PeaksAndMetrics in a PAM5 file\n(HDF5).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">string</span></dt><dd><p>Filename of PAM5 file</p>\n</dd>\n<dt><strong>pam</strong><span class=\"classifier\">PeaksAndMetrics</span></dt><dd><p>Object holding peak_dirs, shm_coeffs and other attributes</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">array</span></dt><dd><p>The 4x4 matrix transforming the date from native to world coordinates.\nPeaksAndMetrics should have that attribute but if not it can be\nprovided here. Default None.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool</span></dt><dd><p>Print summary information about the saved file.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"split-dki-param\">\n<h3>split_dki_param<a class=\"headerlink\" href=\"#split-dki-param\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.split_dki_param\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">split_dki_param</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dki_params</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.split_dki_param\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extract the diffusion tensor eigenvalues, the diffusion tensor\neigenvector matrix, and the 15 independent elements of the kurtosis tensor\nfrom the model parameters estimated from the DKI model</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>dki_params</strong><span class=\"classifier\">ndarray (x, y, z, 27) or (n, 27)</span></dt><dd><p>All parameters estimated from the diffusion kurtosis model.\nParameters are ordered as follows:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Three diffusion tensor\u2019s eigenvalues</p></li>\n<li><p>Three lines of the eigenvector matrix each containing the first,\nsecond and third coordinates of the eigenvector</p></li>\n<li><p>Fifteen elements of the kurtosis tensor</p></li>\n</ol>\n</div></blockquote>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>eigvals</strong><span class=\"classifier\">array (x, y, z, 3) or (n, 3)</span></dt><dd><p>Eigenvalues from eigen decomposition of the tensor.</p>\n</dd>\n<dt><strong>eigvecs</strong><span class=\"classifier\">array (x, y, z, 3, 3) or (n, 3, 3)</span></dt><dd><p>Associated eigenvectors from eigen decomposition of the tensor.\nEigenvectors are columnar (e.g. eigvecs[:,j] is associated with\neigvals[j])</p>\n</dd>\n<dt><strong>kt</strong><span class=\"classifier\">array (x, y, z, 15) or (n, 15)</span></dt><dd><p>Fifteen elements of the kurtosis tensor</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id123\">\n<h3>warn<a class=\"headerlink\" href=\"#id123\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.reconst.warn\">\n<code class=\"sig-prename descclassname\">dipy.workflows.reconst.</code><code class=\"sig-name descname\">warn</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">message</em>, <em class=\"sig-param\">category=None</em>, <em class=\"sig-param\">stacklevel=1</em>, <em class=\"sig-param\">source=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.reconst.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"labelsbundlesflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"dipy.workflows.segment.LabelsBundlesFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a><a class=\"headerlink\" href=\"#labelsbundlesflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">LabelsBundlesFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.get_short_name\" title=\"dipy.workflows.segment.LabelsBundlesFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.run\" title=\"dipy.workflows.segment.LabelsBundlesFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0streamline_files,\u00a0labels_files[,\u00a0\u2026])</p></td>\n<td><p>Extract bundles using existing indices (labels)</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.LabelsBundlesFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">streamline_files</em>, <em class=\"sig-param\">labels_files</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_bundle='recognized_orig.trk'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.LabelsBundlesFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extract bundles using existing indices (labels)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamline_files</strong><span class=\"classifier\">string</span></dt><dd><p>The path of streamline files where you want to recognize bundles</p>\n</dd>\n<dt><strong>labels_files</strong><span class=\"classifier\">string</span></dt><dd><p>The path of model bundle files</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_bundle</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Recognized bundle in the space of the model bundle\n(default \u2018recognized_orig.trk\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r1bded19041bc-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"medianotsuflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"dipy.workflows.segment.MedianOtsuFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a><a class=\"headerlink\" href=\"#medianotsuflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">MedianOtsuFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow.get_short_name\" title=\"dipy.workflows.segment.MedianOtsuFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.MedianOtsuFlow.run\" title=\"dipy.workflows.segment.MedianOtsuFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files[,\u00a0save_masked,\u00a0\u2026])</p></td>\n<td><p>Workflow wrapping the median_otsu segmentation method.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.MedianOtsuFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">save_masked=False</em>, <em class=\"sig-param\">median_radius=2</em>, <em class=\"sig-param\">numpass=5</em>, <em class=\"sig-param\">autocrop=False</em>, <em class=\"sig-param\">vol_idx=None</em>, <em class=\"sig-param\">dilate=None</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_mask='brain_mask.nii.gz'</em>, <em class=\"sig-param\">out_masked='dwi_masked.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.MedianOtsuFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow wrapping the median_otsu segmentation method.</p>\n<p>Applies median_otsu segmentation on each file found by \u2018globing\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">input_files</span></code> and saves the results in a directory specified by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input volumes. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>save_masked</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Save mask</p>\n</dd>\n<dt><strong>median_radius</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Radius (in voxels) of the applied median filter (default 2)</p>\n</dd>\n<dt><strong>numpass</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of pass of the median filter (default 5)</p>\n</dd>\n<dt><strong>autocrop</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, the masked input_volumes will also be cropped using the\nbounding box defined by the masked data. For example, if diffusion\nimages are of 1x1x1 (mm^3) or higher resolution auto-cropping could\nreduce their size in memory and speed up some of the analysis.\n(default False)</p>\n</dd>\n<dt><strong>vol_idx</strong><span class=\"classifier\">variable int, optional</span></dt><dd><p>1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=-1</span></code> of a 4D\n<cite>input_volume</cite>. From the command line use something like\n<cite>3 4 5 6</cite>. From script use something like <cite>[3, 4, 5, 6]</cite>. This\ninput is required for 4D volumes.</p>\n</dd>\n<dt><strong>dilate</strong><span class=\"classifier\">int, optional</span></dt><dd><p>number of iterations for binary dilation (default \u2018None\u2019)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_mask</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the mask volume to be saved (default \u2018brain_mask.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_masked</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the masked volume to be saved (default \u2018dwi_masked.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"recobundles\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"dipy.workflows.segment.RecoBundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a><a class=\"headerlink\" href=\"#recobundles\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.RecoBundles\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">RecoBundles</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">greater_than=50</em>, <em class=\"sig-param\">less_than=1000000</em>, <em class=\"sig-param\">cluster_map=None</em>, <em class=\"sig-param\">clust_thr=15</em>, <em class=\"sig-param\">nb_pts=20</em>, <em class=\"sig-param\">rng=None</em>, <em class=\"sig-param\">verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.evaluate_results\" title=\"dipy.workflows.segment.RecoBundles.evaluate_results\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evaluate_results</span></code></a>(self,\u00a0model_bundle,\u00a0\u2026)</p></td>\n<td><p>Compare the similiarity between two given bundles, model bundle, and extracted bundle.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.recognize\" title=\"dipy.workflows.segment.RecoBundles.recognize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">recognize</span></code></a>(self,\u00a0model_bundle,\u00a0model_clust_thr)</p></td>\n<td><p>Recognize the model_bundle in self.streamlines</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundles.refine\" title=\"dipy.workflows.segment.RecoBundles.refine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">refine</span></code></a>(self,\u00a0model_bundle,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Refine and recognize the model_bundle in self.streamlines This method expects once pruned streamlines as input.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">greater_than=50</em>, <em class=\"sig-param\">less_than=1000000</em>, <em class=\"sig-param\">cluster_map=None</em>, <em class=\"sig-param\">clust_thr=15</em>, <em class=\"sig-param\">nb_pts=20</em>, <em class=\"sig-param\">rng=None</em>, <em class=\"sig-param\">verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognition of bundles</p>\n<p>Extract bundles from a participants\u2019 tractograms using model bundles\nsegmented from a different subject or an atlas of bundles.\nSee <a class=\"reference internal\" href=\"#ra1143d88a4bf-garyfallidis17\" id=\"id125\">[Garyfallidis17]</a> for the details.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>The tractogram in which you want to recognize bundles.</p>\n</dd>\n<dt><strong>greater_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines that have length greater than\nthis value (default 50)</p>\n</dd>\n<dt><strong>less_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines have length less than this value (default 1000000)</p>\n</dd>\n<dt><strong>cluster_map</strong><span class=\"classifier\">QB map, optional.</span></dt><dd><p>Provide existing clustering to start RB faster (default None).</p>\n</dd>\n<dt><strong>clust_thr</strong><span class=\"classifier\">float, optional.</span></dt><dd><p>Distance threshold in mm for clustering <cite>streamlines</cite>.\nDefault: 15.</p>\n</dd>\n<dt><strong>nb_pts</strong><span class=\"classifier\">int, optional.</span></dt><dd><p>Number of points per streamline (default 20)</p>\n</dd>\n<dt><strong>rng</strong><span class=\"classifier\">RandomState</span></dt><dd><p>If None define RandomState in initialization function.\nDefault: None</p>\n</dd>\n<dt><strong>verbose: bool, optional.</strong></dt><dd><p>If True, log information.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Make sure that before creating this class that the streamlines and\nthe model bundles are roughly in the same space.\nAlso default thresholds are assumed in RAS 1mm^3 space. You may\nwant to adjust those if your streamlines are not in world coordinates.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"ra1143d88a4bf-garyfallidis17\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id125\">Garyfallidis17</a></span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.evaluate_results\">\n<code class=\"sig-name descname\">evaluate_results</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">model_bundle</em>, <em class=\"sig-param\">pruned_streamlines</em>, <em class=\"sig-param\">slr_select</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.evaluate_results\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compare the similiarity between two given bundles, model bundle,\nand extracted bundle.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>model_bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>pruned_streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>slr_select</strong><span class=\"classifier\">tuple</span></dt><dd><p>Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>ba_value</strong><span class=\"classifier\">float</span></dt><dd><p>bundle adjacency value between model bundle and pruned bundle</p>\n</dd>\n<dt><strong>bmd_value</strong><span class=\"classifier\">float</span></dt><dd><p>bundle minimum distance value between model bundle and\npruned bundle</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.recognize\">\n<code class=\"sig-name descname\">recognize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">model_bundle</em>, <em class=\"sig-param\">model_clust_thr</em>, <em class=\"sig-param\">reduction_thr=10</em>, <em class=\"sig-param\">reduction_distance='mdf'</em>, <em class=\"sig-param\">slr=True</em>, <em class=\"sig-param\">slr_num_threads=None</em>, <em class=\"sig-param\">slr_metric=None</em>, <em class=\"sig-param\">slr_x0=None</em>, <em class=\"sig-param\">slr_bounds=None</em>, <em class=\"sig-param\">slr_select=(400</em>, <em class=\"sig-param\">600)</em>, <em class=\"sig-param\">slr_method='L-BFGS-B'</em>, <em class=\"sig-param\">pruning_thr=5</em>, <em class=\"sig-param\">pruning_distance='mdf'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.recognize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognize the model_bundle in self.streamlines</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>model_bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>model_clust_thr</strong><span class=\"classifier\">float</span></dt><dd></dd>\n<dt><strong>reduction_thr</strong><span class=\"classifier\">float</span></dt><dd></dd>\n<dt><strong>reduction_distance</strong><span class=\"classifier\">string</span></dt><dd><p>mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>slr</strong><span class=\"classifier\">bool</span></dt><dd><p>Use Streamline-based Linear Registration (SLR) locally\n(default True)</p>\n</dd>\n<dt><strong>slr_metric</strong><span class=\"classifier\">BundleMinDistanceMetric</span></dt><dd></dd>\n<dt><strong>slr_x0</strong><span class=\"classifier\">array</span></dt><dd><p>(default None)</p>\n</dd>\n<dt><strong>slr_bounds</strong><span class=\"classifier\">array</span></dt><dd><p>(default None)</p>\n</dd>\n<dt><strong>slr_select</strong><span class=\"classifier\">tuple</span></dt><dd><p>Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n<dt><strong>slr_method</strong><span class=\"classifier\">string</span></dt><dd><p>Optimization method (default \u2018L-BFGS-B\u2019)</p>\n</dd>\n<dt><strong>pruning_thr</strong><span class=\"classifier\">float</span></dt><dd></dd>\n<dt><strong>pruning_distance</strong><span class=\"classifier\">string</span></dt><dd><p>MDF (\u2018mdf\u2019) and MAM (\u2018mam\u2019)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>recognized_transf</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Recognized bundle in the space of the model tractogram</p>\n</dd>\n<dt><strong>recognized_labels</strong><span class=\"classifier\">array</span></dt><dd><p>Indices of recognized bundle in the original tractogram</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r925a62eea99f-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundles.refine\">\n<code class=\"sig-name descname\">refine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">model_bundle</em>, <em class=\"sig-param\">pruned_streamlines</em>, <em class=\"sig-param\">model_clust_thr</em>, <em class=\"sig-param\">reduction_thr=14</em>, <em class=\"sig-param\">reduction_distance='mdf'</em>, <em class=\"sig-param\">slr=True</em>, <em class=\"sig-param\">slr_metric=None</em>, <em class=\"sig-param\">slr_x0=None</em>, <em class=\"sig-param\">slr_bounds=None</em>, <em class=\"sig-param\">slr_select=(400</em>, <em class=\"sig-param\">600)</em>, <em class=\"sig-param\">slr_method='L-BFGS-B'</em>, <em class=\"sig-param\">pruning_thr=6</em>, <em class=\"sig-param\">pruning_distance='mdf'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundles.refine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Refine and recognize the model_bundle in self.streamlines\nThis method expects once pruned streamlines as input. It refines the\nfirst ouput of recobundle by applying second local slr (optional),\nand second pruning. This method is useful when we are dealing with\nnoisy data or when we want to extract small tracks from tractograms.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>model_bundle</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>pruned_streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd></dd>\n<dt><strong>model_clust_thr</strong><span class=\"classifier\">float</span></dt><dd></dd>\n<dt><strong>reduction_thr</strong><span class=\"classifier\">float</span></dt><dd></dd>\n<dt><strong>reduction_distance</strong><span class=\"classifier\">string</span></dt><dd><p>mdf or mam (default mam)</p>\n</dd>\n<dt><strong>slr</strong><span class=\"classifier\">bool</span></dt><dd><p>Use Streamline-based Linear Registration (SLR) locally\n(default True)</p>\n</dd>\n<dt><strong>slr_metric</strong><span class=\"classifier\">BundleMinDistanceMetric</span></dt><dd></dd>\n<dt><strong>slr_x0</strong><span class=\"classifier\">array</span></dt><dd><p>(default None)</p>\n</dd>\n<dt><strong>slr_bounds</strong><span class=\"classifier\">array</span></dt><dd><p>(default None)</p>\n</dd>\n<dt><strong>slr_select</strong><span class=\"classifier\">tuple</span></dt><dd><p>Select the number of streamlines from model to neirborhood of\nmodel to perform the local SLR.</p>\n</dd>\n<dt><strong>slr_method</strong><span class=\"classifier\">string</span></dt><dd><p>Optimization method (default \u2018L-BFGS-B\u2019)</p>\n</dd>\n<dt><strong>pruning_thr</strong><span class=\"classifier\">float</span></dt><dd></dd>\n<dt><strong>pruning_distance</strong><span class=\"classifier\">string</span></dt><dd><p>MDF (\u2018mdf\u2019) and MAM (\u2018mam\u2019)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>recognized_transf</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Recognized bundle in the space of the model tractogram</p>\n</dd>\n<dt><strong>recognized_labels</strong><span class=\"classifier\">array</span></dt><dd><p>Indices of recognized bundle in the original tractogram</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r2ea201a40830-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"recobundlesflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"dipy.workflows.segment.RecoBundlesFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a><a class=\"headerlink\" href=\"#recobundlesflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">RecoBundlesFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow.get_short_name\" title=\"dipy.workflows.segment.RecoBundlesFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.RecoBundlesFlow.run\" title=\"dipy.workflows.segment.RecoBundlesFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0streamline_files,\u00a0model_bundle_files)</p></td>\n<td><p>Recognize bundles</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.RecoBundlesFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">streamline_files</em>, <em class=\"sig-param\">model_bundle_files</em>, <em class=\"sig-param\">greater_than=50</em>, <em class=\"sig-param\">less_than=1000000</em>, <em class=\"sig-param\">no_slr=False</em>, <em class=\"sig-param\">clust_thr=15.0</em>, <em class=\"sig-param\">reduction_thr=15.0</em>, <em class=\"sig-param\">reduction_distance='mdf'</em>, <em class=\"sig-param\">model_clust_thr=2.5</em>, <em class=\"sig-param\">pruning_thr=8.0</em>, <em class=\"sig-param\">pruning_distance='mdf'</em>, <em class=\"sig-param\">slr_metric='symmetric'</em>, <em class=\"sig-param\">slr_transform='similarity'</em>, <em class=\"sig-param\">slr_matrix='small'</em>, <em class=\"sig-param\">refine=False</em>, <em class=\"sig-param\">r_reduction_thr=12.0</em>, <em class=\"sig-param\">r_pruning_thr=6.0</em>, <em class=\"sig-param\">no_r_slr=False</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_recognized_transf='recognized.trk'</em>, <em class=\"sig-param\">out_recognized_labels='labels.npy'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.RecoBundlesFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Recognize bundles</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamline_files</strong><span class=\"classifier\">string</span></dt><dd><p>The path of streamline files where you want to recognize bundles</p>\n</dd>\n<dt><strong>model_bundle_files</strong><span class=\"classifier\">string</span></dt><dd><p>The path of model bundle files</p>\n</dd>\n<dt><strong>greater_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines that have length greater than\nthis value (default 50) in mm.</p>\n</dd>\n<dt><strong>less_than</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Keep streamlines have length less than this value\n(default 1000000) in mm.</p>\n</dd>\n<dt><strong>no_slr</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Don\u2019t enable local Streamline-based Linear\nRegistration (default False).</p>\n</dd>\n<dt><strong>clust_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>MDF distance threshold for all streamlines (default 15)</p>\n</dd>\n<dt><strong>reduction_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Reduce search space by (mm) (default 15)</p>\n</dd>\n<dt><strong>reduction_distance</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Reduction distance type can be mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>model_clust_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>MDF distance threshold for the model bundles (default 2.5)</p>\n</dd>\n<dt><strong>pruning_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Pruning after matching (default 8).</p>\n</dd>\n<dt><strong>pruning_distance</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Pruning distance type can be mdf or mam (default mdf)</p>\n</dd>\n<dt><strong>slr_metric</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Options are None, symmetric, asymmetric or diagonal\n(default symmetric).</p>\n</dd>\n<dt><strong>slr_transform</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Transformation allowed. translation, rigid, similarity or scaling\n(Default \u2018similarity\u2019).</p>\n</dd>\n<dt><strong>slr_matrix</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Options are \u2018nano\u2019, \u2018tiny\u2019, \u2018small\u2019, \u2018medium\u2019, \u2018large\u2019, \u2018huge\u2019\n(default \u2018small\u2019)</p>\n</dd>\n<dt><strong>refine</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Enable refine recognized bunle (default False)</p>\n</dd>\n<dt><strong>r_reduction_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Refine reduce search space by (mm) (default 12)</p>\n</dd>\n<dt><strong>r_pruning_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Refine pruning after matching (default 6).</p>\n</dd>\n<dt><strong>no_r_slr</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Don\u2019t enable Refine local Streamline-based Linear\nRegistration (default False).</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_recognized_transf</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Recognized bundle in the space of the model bundle\n(default \u2018recognized.trk\u2019)</p>\n</dd>\n<dt><strong>out_recognized_labels</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Indices of recognized bundle in the original tractogram\n(default \u2018labels.npy\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rbfdf3a404c62-garyfallidis17\"><span class=\"brackets\">Garyfallidis17</span></dt>\n<dd><p>Garyfallidis et al. Recognition of white matter\nbundles using local and global streamline-based registration and\nclustering, Neuroimage, 2017.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id130\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow\" title=\"dipy.workflows.segment.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id130\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.segment.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_io_iterator\" title=\"dipy.workflows.segment.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_short_name\" title=\"dipy.workflows.segment.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.get_sub_runs\" title=\"dipy.workflows.segment.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.manage_output_overwrite\" title=\"dipy.workflows.segment.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.segment.Workflow.run\" title=\"dipy.workflows.segment.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.segment.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id131\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id131\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"median-otsu\">\n<h3>median_otsu<a class=\"headerlink\" href=\"#median-otsu\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.median_otsu\">\n<code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">median_otsu</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input_volume</em>, <em class=\"sig-param\">vol_idx=None</em>, <em class=\"sig-param\">median_radius=4</em>, <em class=\"sig-param\">numpass=4</em>, <em class=\"sig-param\">autocrop=False</em>, <em class=\"sig-param\">dilate=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.median_otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Simple brain extraction tool method for images from DWI data.</p>\n<p>It uses a median filter smoothing of the input_volumes <cite>vol_idx</cite> and an\nautomatic histogram Otsu thresholding technique, hence the name\n<em>median_otsu</em>.</p>\n<p>This function is inspired from Mrtrix\u2019s bet which has default values\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=3</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=2</span></code>. However, from tests on multiple 1.5T\nand 3T data     from GE, Philips, Siemens, the most robust choice is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=4</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=4</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_volume</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D or 4D array of the brain volume.</p>\n</dd>\n<dt><strong>vol_idx</strong><span class=\"classifier\">None or array, optional.</span></dt><dd><p>1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite>.\nNone is only an acceptable input if <code class=\"docutils literal notranslate\"><span class=\"pre\">input_volume</span></code> is 3D.</p>\n</dd>\n<dt><strong>median_radius</strong><span class=\"classifier\">int</span></dt><dd><p>Radius (in voxels) of the applied median filter (default: 4).</p>\n</dd>\n<dt><strong>numpass: int</strong></dt><dd><p>Number of pass of the median filter (default: 4).</p>\n</dd>\n<dt><strong>autocrop: bool, optional</strong></dt><dd><p>if True, the masked input_volume will also be cropped using the\nbounding box defined by the masked data. Should be on if DWI is\nupsampled to 1x1x1 resolution. (default: False).</p>\n</dd>\n<dt><strong>dilate</strong><span class=\"classifier\">None or int, optional</span></dt><dd><p>number of iterations for binary dilation</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>maskedvolume</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Masked input_volume</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>The binary brain mask</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Copyright (C) 2011, the scikit-image team\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</p></li>\n<li><p>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</p></li>\n<li><p>Neither the name of skimage nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.</p></li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id132\"><span class=\"problematic\" id=\"id133\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id134\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id134\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"time\">\n<h3>time<a class=\"headerlink\" href=\"#time\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.segment.time\">\n<code class=\"sig-prename descclassname\">dipy.workflows.segment.</code><code class=\"sig-name descname\">time</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.segment.time\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the current time in seconds since the Epoch.\nFractions of a second may be present if the system clock provides them.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundleanalysispopulationflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow\" title=\"dipy.workflows.stats.BundleAnalysisPopulationFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleAnalysisPopulationFlow</span></code></a><a class=\"headerlink\" href=\"#bundleanalysispopulationflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.BundleAnalysisPopulationFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">BundleAnalysisPopulationFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name\" title=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.run\" title=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0model_bundle_folder,\u00a0subject_folder)</p></td>\n<td><p>Workflow of bundle analytics.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.BundleAnalysisPopulationFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">model_bundle_folder</em>, <em class=\"sig-param\">subject_folder</em>, <em class=\"sig-param\">no_disks=100</em>, <em class=\"sig-param\">out_dir=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.BundleAnalysisPopulationFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow of bundle analytics.</p>\n<p>Applies statistical analysis on bundles of subjects and saves the\nresults in a directory specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>model_bundle_folder</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input model bundle files. This path may\ncontain wildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>subject_folder</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input subject folder. This path may contain\nwildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>no_disks</strong><span class=\"classifier\">integer, optional</span></dt><dd><p>Number of disks used for dividing bundle into disks. (Default 100)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r0dbfe1688493-chandio19\"><span class=\"brackets\">Chandio19</span></dt>\n<dd><p>Chandio, B.Q., S. Koudoro, D. Reagan, J. Harezlak,</p>\n</dd>\n</dl>\n<p>E. Garyfallidis, Bundle Analytics: a computational and statistical\nanalyses framework for tractometric studies, Proceedings of:\nInternational Society of Magnetic Resonance in Medicine (ISMRM),\nMontreal, Canada, 2019.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"linearmixedmodelsflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow\" title=\"dipy.workflows.stats.LinearMixedModelsFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LinearMixedModelsFlow</span></code></a><a class=\"headerlink\" href=\"#linearmixedmodelsflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.LinearMixedModelsFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">LinearMixedModelsFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.get_short_name\" title=\"dipy.workflows.stats.LinearMixedModelsFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.run\" title=\"dipy.workflows.stats.LinearMixedModelsFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0h5_files[,\u00a0no_disks,\u00a0out_dir])</p></td>\n<td><p>Workflow of linear Mixed Models.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.LinearMixedModelsFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.LinearMixedModelsFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.LinearMixedModelsFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">h5_files</em>, <em class=\"sig-param\">no_disks=100</em>, <em class=\"sig-param\">out_dir=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.LinearMixedModelsFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow of linear Mixed Models.</p>\n<p>Applies linear Mixed Models on bundles of subjects and saves the\nresults in a directory specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>h5_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input metric files. This path may\ncontain wildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>no_disks</strong><span class=\"classifier\">integer, optional</span></dt><dd><p>Number of disks used for dividing bundle into disks. (Default 100)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"snrinccflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"dipy.workflows.stats.SNRinCCFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a><a class=\"headerlink\" href=\"#snrinccflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">SNRinCCFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow.get_short_name\" title=\"dipy.workflows.stats.SNRinCCFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.SNRinCCFlow.run\" title=\"dipy.workflows.stats.SNRinCCFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0data_files,\u00a0bvals_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Compute the signal-to-noise ratio in the corpus callosum.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.SNRinCCFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self, data_files, bvals_files, bvecs_files, mask_file, bbox_threshold=[0.6, 1, 0, 0.1, 0, 0.1], out_dir='', out_file='product.json', out_mask_cc='cc.nii.gz', out_mask_noise='mask_noise.nii.gz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.SNRinCCFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the signal-to-noise ratio in the corpus callosum.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the dwi.nii.gz file. This path may contain wildcards to\nprocess multiple inputs at once.</p>\n</dd>\n<dt><strong>bvals_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path of bvals.</p>\n</dd>\n<dt><strong>bvecs_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path of bvecs.</p>\n</dd>\n<dt><strong>mask_file</strong><span class=\"classifier\">string</span></dt><dd><p>Path of a brain mask file.</p>\n</dd>\n<dt><strong>bbox_threshold</strong><span class=\"classifier\">variable float, optional</span></dt><dd><p>Threshold for bounding box, values separated with commas for ex.\n[0.6,1,0,0.1,0,0.1]. (default (0.6, 1, 0, 0.1, 0, 0.1))</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Where the resulting file will be saved. (default \u2018\u2019)</p>\n</dd>\n<dt><strong>out_file</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the result file to be saved. (default \u2018product.json\u2019)</p>\n</dd>\n<dt><strong>out_mask_cc</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the CC mask volume to be saved (default \u2018cc.nii.gz\u2019)</p>\n</dd>\n<dt><strong>out_mask_noise</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the mask noise volume to be saved\n(default \u2018mask_noise.nii.gz\u2019)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id136\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel\" title=\"dipy.workflows.stats.TensorModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a><a class=\"headerlink\" href=\"#id136\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.TensorModel\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">TensorModel</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">fit_method='WLS'</em>, <em class=\"sig-param\">return_S0_hat=False</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.reconst/#dipy.reconst.base.ReconstModel\" title=\"dipy.reconst.base.ReconstModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.base.ReconstModel</span></code></a></p>\n<p>Diffusion Tensor</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel.fit\" title=\"dipy.workflows.stats.TensorModel.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(self,\u00a0data[,\u00a0mask])</p></td>\n<td><p>Fit method of the DTI model class</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.TensorModel.predict\" title=\"dipy.workflows.stats.TensorModel.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(self,\u00a0dti_params[,\u00a0S0])</p></td>\n<td><p>Predict a signal for this TensorModel class instance given parameters.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">fit_method='WLS'</em>, <em class=\"sig-param\">return_S0_hat=False</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A Diffusion Tensor Model <a class=\"reference internal\" href=\"#r6966379adcdc-1\" id=\"id137\">[1]</a>, <a class=\"reference internal\" href=\"#r6966379adcdc-2\" id=\"id138\">[2]</a>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable class instance</span></dt><dd></dd>\n<dt><strong>fit_method</strong><span class=\"classifier\">str or callable</span></dt><dd><p>str can be one of the following:</p>\n<dl class=\"simple\">\n<dt>\u2018WLS\u2019 for weighted least squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.wls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018LS\u2019 or \u2018OLS\u2019 for ordinary least squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.ols_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018NLLS\u2019 for non-linear least-squares</dt><dd><p><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.nlls_fit_tensor()</span></code></p>\n</dd>\n<dt>\u2018RT\u2019 or \u2018restore\u2019 or \u2018RESTORE\u2019 for RESTORE robust tensor</dt><dd><p>fitting <a class=\"reference internal\" href=\"#r6966379adcdc-3\" id=\"id139\">[3]</a>\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">dti.restore_fit_tensor()</span></code></p>\n</dd>\n<dt>callable has to have the signature:</dt><dd><p>fit_method(design_matrix, data, <a href=\"#id140\"><span class=\"problematic\" id=\"id141\">*</span></a>args, <a href=\"#id142\"><span class=\"problematic\" id=\"id143\">**</span></a>kwargs)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>return_S0_hat</strong><span class=\"classifier\">bool</span></dt><dd><p>Boolean to return (True) or not (False) the S0 values for the fit.</p>\n</dd>\n<dt><strong>args, kwargs</strong><span class=\"classifier\">arguments and key-word arguments passed to the</span></dt><dd><p>fit_method. See dti.wls_fit_tensor, dti.ols_fit_tensor for details</p>\n</dd>\n<dt><strong>min_signal</strong><span class=\"classifier\">float</span></dt><dd><p>The minimum signal value. Needs to be a strictly positive\nnumber. Default: minimal signal in the data provided to <cite>fit</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>In order to increase speed of processing, tensor fitting is done\nsimultaneously over many voxels. Many fit_methods use the \u2018step\u2019\nparameter to set the number of voxels that will be fit at once in each\niteration. This is the chunk size as a number of voxels. A larger step\nvalue should speed things up, but it will also take up more memory. It\nis advisable to keep an eye on memory consumption as this value is\nincreased.</p>\n<p>E.g., in <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter_fit_tensor()</span></code> we have a default step value of\n1e4</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r6966379adcdc-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id137\">1</a></span></dt>\n<dd><p>Basser, P.J., Mattiello, J., LeBihan, D., 1994. Estimation of\nthe effective self-diffusion tensor from the NMR spin echo. J Magn\nReson B 103, 247-254.</p>\n</dd>\n<dt class=\"label\" id=\"r6966379adcdc-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id138\">2</a></span></dt>\n<dd><p>Basser, P., Pierpaoli, C., 1996. Microstructural and\nphysiological features of tissues elucidated by quantitative\ndiffusion-tensor MRI.  Journal of Magnetic Resonance 111, 209-219.</p>\n</dd>\n<dt class=\"label\" id=\"r6966379adcdc-3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id139\">3</a></span></dt>\n<dd><p>Lin-Ching C., Jones D.K., Pierpaoli, C. 2005. RESTORE: Robust\nestimation of tensors by outlier rejection. MRM 53: 1088-1095</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.fit\">\n<code class=\"sig-name descname\">fit</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">mask=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit method of the DTI model class</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">array</span></dt><dd><p>The measured signal from one voxel.</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">array</span></dt><dd><p>A boolean array used to mark the coordinates in the data that\nshould be analyzed that has the shape data.shape[:-1]</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.TensorModel.predict\">\n<code class=\"sig-name descname\">predict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">dti_params</em>, <em class=\"sig-param\">S0=1.0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.TensorModel.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict a signal for this TensorModel class instance given parameters.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dti_params</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The last dimension should have 12 tensor parameters: 3\neigenvalues, followed by the 3 eigenvectors</p>\n</dd>\n<dt><strong>S0</strong><span class=\"classifier\">float or ndarray</span></dt><dd><p>The non diffusion-weighted signal in every voxel, or across all\nvoxels. Default: 1</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id147\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow\" title=\"dipy.workflows.stats.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id147\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.stats.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_io_iterator\" title=\"dipy.workflows.stats.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_short_name\" title=\"dipy.workflows.stats.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.get_sub_runs\" title=\"dipy.workflows.stats.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.manage_output_overwrite\" title=\"dipy.workflows.stats.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.stats.Workflow.run\" title=\"dipy.workflows.stats.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.stats.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"binary-dilation\">\n<h3>binary_dilation<a class=\"headerlink\" href=\"#binary-dilation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.binary_dilation\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">binary_dilation</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input</em>, <em class=\"sig-param\">structure=None</em>, <em class=\"sig-param\">iterations=1</em>, <em class=\"sig-param\">mask=None</em>, <em class=\"sig-param\">output=None</em>, <em class=\"sig-param\">border_value=0</em>, <em class=\"sig-param\">origin=0</em>, <em class=\"sig-param\">brute_force=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.binary_dilation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multi-dimensional binary dilation with the given structuring element.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input</strong><span class=\"classifier\">array_like</span></dt><dd><p>Binary array_like to be dilated. Non-zero (True) elements form\nthe subset to be dilated.</p>\n</dd>\n<dt><strong>structure</strong><span class=\"classifier\">array_like, optional</span></dt><dd><p>Structuring element used for the dilation. Non-zero elements are\nconsidered True. If no structuring element is provided an element\nis generated with a square connectivity equal to one.</p>\n</dd>\n<dt><strong>iterations</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The dilation is repeated <cite>iterations</cite> times (one, by default).\nIf iterations is less than 1, the dilation is repeated until the\nresult does not change anymore. Only an integer of iterations is\naccepted.</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">array_like, optional</span></dt><dd><p>If a mask is given, only those elements with a True value at\nthe corresponding mask element are modified at each iteration.</p>\n</dd>\n<dt><strong>output</strong><span class=\"classifier\">ndarray, optional</span></dt><dd><p>Array of the same shape as input, into which the output is placed.\nBy default, a new array is created.</p>\n</dd>\n<dt><strong>border_value</strong><span class=\"classifier\">int (cast to 0 or 1), optional</span></dt><dd><p>Value at the border in the output array.</p>\n</dd>\n<dt><strong>origin</strong><span class=\"classifier\">int or tuple of ints, optional</span></dt><dd><p>Placement of the filter, by default 0.</p>\n</dd>\n<dt><strong>brute_force</strong><span class=\"classifier\">boolean, optional</span></dt><dd><p>Memory condition: if False, only the pixels whose value was changed in\nthe last iteration are tracked as candidates to be updated (dilated)\nin the current iteration; if True all pixels are considered as\ncandidates for dilation, regardless of what happened in the previous\niteration. False by default.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>binary_dilation</strong><span class=\"classifier\">ndarray of bools</span></dt><dd><p>Dilation of the input by the structuring element.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">grey_dilation</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_erosion</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_closing</span></code>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">binary_opening</span></code></dt><dd></dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generate_binary_structure</span></code></dt><dd></dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>Dilation <a class=\"reference internal\" href=\"#rf074e351565f-1\" id=\"id148\">[1]</a> is a mathematical morphology operation <a class=\"reference internal\" href=\"#rf074e351565f-2\" id=\"id149\">[2]</a> that uses a\nstructuring element for expanding the shapes in an image. The binary\ndilation of an image by a structuring element is the locus of the points\ncovered by the structuring element, when its center lies within the\nnon-zero points of the image.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rf074e351565f-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id148\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Dilation_%28morphology%29\">https://en.wikipedia.org/wiki/Dilation_%28morphology%29</a></p>\n</dd>\n<dt class=\"label\" id=\"rf074e351565f-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id149\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Mathematical_morphology\">https://en.wikipedia.org/wiki/Mathematical_morphology</a></p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"k\">import</span> <span class=\"n\">ndimage</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">array([[False, False, False, False, False],</span>\n<span class=\"go\">       [False, False,  True, False, False],</span>\n<span class=\"go\">       [False,  True,  True,  True, False],</span>\n<span class=\"go\">       [False, False,  True, False, False],</span>\n<span class=\"go\">       [False, False, False, False, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3x3 structuring element with connectivity 1, used by default</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct1</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct1</span>\n<span class=\"go\">array([[False,  True, False],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [False,  True, False]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># 3x3 structuring element with connectivity 2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct2</span> <span class=\"o\">=</span> <span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">generate_binary_structure</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">struct2</span>\n<span class=\"go\">array([[ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True],</span>\n<span class=\"go\">       [ True,  True,  True]], dtype=bool)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  0.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  0.,  0.,  0.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ndimage</span><span class=\"o\">.</span><span class=\"n\">binary_dilation</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">structure</span><span class=\"o\">=</span><span class=\"n\">struct1</span><span class=\"p\">,</span>\\\n<span class=\"gp\">... </span><span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.,  0.,  1.,  0.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 1.,  1.,  1.,  1.,  1.],</span>\n<span class=\"go\">       [ 0.,  1.,  1.,  1.,  0.],</span>\n<span class=\"go\">       [ 0.,  0.,  1.,  0.,  0.]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bounding-box\">\n<h3>bounding_box<a class=\"headerlink\" href=\"#bounding-box\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.bounding_box\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">bounding_box</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vol</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.bounding_box\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the bounding box of nonzero intensity voxels in the volume.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vol</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Volume to compute bounding box on.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>npmins</strong><span class=\"classifier\">list</span></dt><dd><p>Array containg minimum index of each dimension</p>\n</dd>\n<dt><strong>npmaxs</strong><span class=\"classifier\">list</span></dt><dd><p>Array containg maximum index of each dimension</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bundle-analysis\">\n<h3>bundle_analysis<a class=\"headerlink\" href=\"#bundle-analysis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.bundle_analysis\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">bundle_analysis</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">model_bundle_folder</em>, <em class=\"sig-param\">bundle_folder</em>, <em class=\"sig-param\">orig_bundle_folder</em>, <em class=\"sig-param\">metric_folder</em>, <em class=\"sig-param\">group</em>, <em class=\"sig-param\">subject</em>, <em class=\"sig-param\">no_disks=100</em>, <em class=\"sig-param\">out_dir=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.bundle_analysis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies statistical analysis on bundles and saves the results\nin a directory specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">out_dir</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>model_bundle_folder</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input model bundle files. This path may contain\nwildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>bundle_folder</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input bundle files in common space. This path may\ncontain wildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>orig_folder</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input bundle files in native space. This path may\ncontain wildcards to process multiple inputs at once.</p>\n</dd>\n<dt><strong>metric_folder</strong><span class=\"classifier\">string</span></dt><dd><p>Path to the input dti metric or/and peak files. It will be used as\nmetric for statistical analysis of bundles.</p>\n</dd>\n<dt><strong>group</strong><span class=\"classifier\">string</span></dt><dd><p>what group subject belongs to e.g. control or patient</p>\n</dd>\n<dt><strong>subject</strong><span class=\"classifier\">string</span></dt><dd><p>subject id e.g. 10001</p>\n</dd>\n<dt><strong>no_disks</strong><span class=\"classifier\">integer, optional</span></dt><dd><p>Number of disks used for dividing bundle into disks. (Default 100)</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rb50b70434d87-chandio19\"><span class=\"brackets\">Chandio19</span></dt>\n<dd><p>Chandio, B.Q., S. Koudoro, D. Reagan, J. Harezlak,</p>\n</dd>\n</dl>\n<p>E. Garyfallidis, Bundle Analytics: a computational and statistical\nanalyses framework for tractometric studies, Proceedings of:\nInternational Society of Magnetic Resonance in Medicine (ISMRM),\nMontreal, Canada, 2019.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id153\">\n<h3>gradient_table<a class=\"headerlink\" href=\"#id153\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.gradient_table\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">gradient_table</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bvecs=None</em>, <em class=\"sig-param\">big_delta=None</em>, <em class=\"sig-param\">small_delta=None</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.gradient_table\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">can be any of the four options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N,) or (1, N) or (N, 1) with the b-values.</p></li>\n<li><p>a path for the file which contains an array like the above (1).</p></li>\n<li><p>an array of shape (N, 4) or (4, N). Then this parameter is\nconsidered to be a b-table which contains both bvals and bvecs. In\nthis case the next parameter is skipped.</p></li>\n<li><p>a path for the file which contains an array like the one at (3).</p></li>\n</ol>\n</dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">can be any of two options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N, 3) or (3, N) with the b-vectors.</p></li>\n<li><p>a path for the file which contains an array like the previous.</p></li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse separation time in seconds (default None)</p>\n</dd>\n<dt><strong>small_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse duration time in seconds (default None)</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float</span></dt><dd><p>All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li><p>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</p></li>\n<li><p>We assume that the minimum number of b-values is 7.</p></li>\n<li><p>B-vectors should be unit vectors.</p></li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id154\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id154\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id155\">\n<h3>median_otsu<a class=\"headerlink\" href=\"#id155\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.median_otsu\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">median_otsu</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input_volume</em>, <em class=\"sig-param\">vol_idx=None</em>, <em class=\"sig-param\">median_radius=4</em>, <em class=\"sig-param\">numpass=4</em>, <em class=\"sig-param\">autocrop=False</em>, <em class=\"sig-param\">dilate=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.median_otsu\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Simple brain extraction tool method for images from DWI data.</p>\n<p>It uses a median filter smoothing of the input_volumes <cite>vol_idx</cite> and an\nautomatic histogram Otsu thresholding technique, hence the name\n<em>median_otsu</em>.</p>\n<p>This function is inspired from Mrtrix\u2019s bet which has default values\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=3</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=2</span></code>. However, from tests on multiple 1.5T\nand 3T data     from GE, Philips, Siemens, the most robust choice is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">median_radius=4</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">numpass=4</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_volume</strong><span class=\"classifier\">ndarray</span></dt><dd><p>3D or 4D array of the brain volume.</p>\n</dd>\n<dt><strong>vol_idx</strong><span class=\"classifier\">None or array, optional.</span></dt><dd><p>1D array representing indices of <code class=\"docutils literal notranslate\"><span class=\"pre\">axis=3</span></code> of a 4D <cite>input_volume</cite>.\nNone is only an acceptable input if <code class=\"docutils literal notranslate\"><span class=\"pre\">input_volume</span></code> is 3D.</p>\n</dd>\n<dt><strong>median_radius</strong><span class=\"classifier\">int</span></dt><dd><p>Radius (in voxels) of the applied median filter (default: 4).</p>\n</dd>\n<dt><strong>numpass: int</strong></dt><dd><p>Number of pass of the median filter (default: 4).</p>\n</dd>\n<dt><strong>autocrop: bool, optional</strong></dt><dd><p>if True, the masked input_volume will also be cropped using the\nbounding box defined by the masked data. Should be on if DWI is\nupsampled to 1x1x1 resolution. (default: False).</p>\n</dd>\n<dt><strong>dilate</strong><span class=\"classifier\">None or int, optional</span></dt><dd><p>number of iterations for binary dilation</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>maskedvolume</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Masked input_volume</p>\n</dd>\n<dt><strong>mask</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>The binary brain mask</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Copyright (C) 2011, the scikit-image team\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</p></li>\n<li><p>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in\nthe documentation and/or other materials provided with the\ndistribution.</p></li>\n<li><p>Neither the name of skimage nor the names of its contributors may be\nused to endorse or promote products derived from this software without\nspecific prior written permission.</p></li>\n</ol>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE AUTHOR <a href=\"#id156\"><span class=\"problematic\" id=\"id157\">``</span></a>AS IS\u2019\u2019 AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,\nINDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\nIN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optional-package\">\n<h3>optional_package<a class=\"headerlink\" href=\"#optional-package\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.optional_package\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">optional_package</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>name</strong><span class=\"classifier\">str</span></dt><dd><p>package name</p>\n</dd>\n<dt><strong>trip_msg</strong><span class=\"classifier\">None or str</span></dt><dd><p>message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>pkg_like</strong><span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt><dd><p>If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong><span class=\"classifier\">bool</span></dt><dd><p>True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong><span class=\"classifier\">function</span></dt><dd><p>callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>Typical use would be something like this at the top of a module using an\noptional package:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.utils.optpkg</span> <span class=\"k\">import</span> <span class=\"n\">optional_package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">have_pkg</span><span class=\"p\">,</span> <span class=\"n\">setup_module</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;not_a_package&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Of course in this case the package doesn\u2019t exist, and so, in the module:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">have_pkg</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n<p>and</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">some_function</span><span class=\"p\">()</span> \n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">TripWireError</span>: <span class=\"n\">We need package not_a_package for these functions, but</span>\n<span class=\"go\">``import not_a_package`` raised an ImportError</span>\n</pre></div>\n</div>\n<p>If the module does exist - we get the module</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Or a submodule if that\u2019s what we asked for</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os.path&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dirname&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id158\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#id158\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.read_bvals_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fbvals</em>, <em class=\"sig-param\">fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fbvals</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong><span class=\"classifier\">str</span></dt><dd><p>Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">array, (N,) or None</span></dt><dd></dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">array, (N, 3) or None</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id159\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id159\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"segment-from-cfa\">\n<h3>segment_from_cfa<a class=\"headerlink\" href=\"#segment-from-cfa\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.segment_from_cfa\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">segment_from_cfa</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tensor_fit</em>, <em class=\"sig-param\">roi</em>, <em class=\"sig-param\">threshold</em>, <em class=\"sig-param\">return_cfa=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.segment_from_cfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Segment the cfa inside roi using the values from threshold as bounds.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>tensor_fit</strong><span class=\"classifier\">TensorFit object</span></dt><dd><p>TensorFit object</p>\n</dd>\n<dt><strong>roi</strong><span class=\"classifier\">ndarray</span></dt><dd><p>A binary mask, which contains the bounding box for the segmentation.</p>\n</dd>\n<dt><strong>threshold</strong><span class=\"classifier\">array-like</span></dt><dd><p>An iterable that defines the min and max values to use for the\nthresholding.\nThe values are specified as (R_min, R_max, G_min, G_max, B_min, B_max)</p>\n</dd>\n<dt><strong>return_cfa</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, the cfa is also returned.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>mask</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Binary mask of the segmentation.</p>\n</dd>\n<dt><strong>cfa</strong><span class=\"classifier\">ndarray, optional</span></dt><dd><p>Array with shape = (\u2026, 3), where \u2026 is the shape of tensor_fit.\nThe color fractional anisotropy, ordered as a nd array with the last\ndimension of size 3 for the R, G and B channels.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"simple-plot\">\n<h3>simple_plot<a class=\"headerlink\" href=\"#simple-plot\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.stats.simple_plot\">\n<code class=\"sig-prename descclassname\">dipy.workflows.stats.</code><code class=\"sig-name descname\">simple_plot</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">file_name</em>, <em class=\"sig-param\">title</em>, <em class=\"sig-param\">x</em>, <em class=\"sig-param\">y</em>, <em class=\"sig-param\">xlabel</em>, <em class=\"sig-param\">ylabel</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.stats.simple_plot\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Saves the simple plot with given x and y values</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>file_name</strong><span class=\"classifier\">string</span></dt><dd><p>file name for saving the plot</p>\n</dd>\n<dt><strong>title</strong><span class=\"classifier\">string</span></dt><dd><p>title of the plot</p>\n</dd>\n<dt><strong>x</strong><span class=\"classifier\">integer list</span></dt><dd><p>x-axis values to be ploted</p>\n</dd>\n<dt><strong>y</strong><span class=\"classifier\">integer list</span></dt><dd><p>y-axis values to be ploted</p>\n</dd>\n<dt><strong>xlabel</strong><span class=\"classifier\">string</span></dt><dd><p>label for x-axis</p>\n</dd>\n<dt><strong>ylable</strong><span class=\"classifier\">string</span></dt><dd><p>label for y-axis</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"binarystoppingcriterion\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.BinaryStoppingCriterion\" title=\"dipy.workflows.tracking.BinaryStoppingCriterion\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BinaryStoppingCriterion</span></code></a><a class=\"headerlink\" href=\"#binarystoppingcriterion\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.BinaryStoppingCriterion\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">BinaryStoppingCriterion</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.BinaryStoppingCriterion\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.stopping_criterion.StoppingCriterion</span></code></p>\n<dl class=\"simple\">\n<dt>cdef:</dt><dd><p>unsigned char[:, :, :] mask</p>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 60%\" />\n<col style=\"width: 40%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>check_point</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.BinaryStoppingCriterion.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.BinaryStoppingCriterion.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"closestpeakdirectiongetter\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ClosestPeakDirectionGetter\" title=\"dipy.workflows.tracking.ClosestPeakDirectionGetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClosestPeakDirectionGetter</span></code></a><a class=\"headerlink\" href=\"#closestpeakdirectiongetter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ClosestPeakDirectionGetter\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">ClosestPeakDirectionGetter</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ClosestPeakDirectionGetter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.direction.closest_peak_direction_getter.PmfGenDirectionGetter</span></code></p>\n<p>A direction getter that returns the closest odf peak to previous tracking\ndirection.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pmf</span></code>()</p></td>\n<td><p>Constructor for making a DirectionGetter from an array of Pmfs</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_shcoeff</span></code>()</p></td>\n<td><p>Probabilistic direction getter from a distribution of directions on the sphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code>()</p></td>\n<td><p>Returns best directions at seed location to start tracking.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 63%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_direction</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ClosestPeakDirectionGetter.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ClosestPeakDirectionGetter.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"cmcstoppingcriterion\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.CmcStoppingCriterion\" title=\"dipy.workflows.tracking.CmcStoppingCriterion\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CmcStoppingCriterion</span></code></a><a class=\"headerlink\" href=\"#cmcstoppingcriterion\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.CmcStoppingCriterion\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">CmcStoppingCriterion</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.CmcStoppingCriterion\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.stopping_criterion.AnatomicalStoppingCriterion</span></code></p>\n<p>Continuous map criterion (CMC) stopping criterion from <a class=\"reference internal\" href=\"#r835b9b2babc4-1\" id=\"id160\"><span>[R835b9b2babc4-1]</span></a>.\nThis implements the use of partial volume fraction (PVE) maps to\ndetermine when the tracking stops.</p>\n<dl class=\"simple\">\n<dt>cdef:</dt><dd><p>double interp_out_double[1]\ndouble[:]  interp_out_view = interp_out_view\ndouble[:, :, :] include_map, exclude_map\ndouble step_size\ndouble average_voxel_size\ndouble correction_factor</p>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r835b9b2babc4-1\"><span class=\"brackets\">R835b9b2babc4-1</span><span class=\"fn-backref\">(<a href=\"#id5\">1</a>,<a href=\"#id160\">2</a>)</span></dt>\n<dd><p>Girard, G., Whittingstall, K., Deriche, R., &amp; Descoteaux, M.</p>\n</dd>\n</dl>\n<p>\u201cTowards quantitative connectivity analysis: reducing tractography biases.\u201d\nNeuroImage, 98, 266-278, 2014.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pve</span></code>()</p></td>\n<td><p>AnatomicalStoppingCriterion from partial volume fraction (PVE) maps.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 60%\" />\n<col style=\"width: 40%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>check_point</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>get_exclude</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>get_include</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.CmcStoppingCriterion.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.CmcStoppingCriterion.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"deterministicmaximumdirectiongetter\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a><a class=\"headerlink\" href=\"#deterministicmaximumdirectiongetter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">DeterministicMaximumDirectionGetter</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.direction.probabilistic_direction_getter.ProbabilisticDirectionGetter</span></code></p>\n<p>Return direction of a sphere with the highest probability mass\nfunction (pmf).</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pmf</span></code>()</p></td>\n<td><p>Constructor for making a DirectionGetter from an array of Pmfs</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_shcoeff</span></code>()</p></td>\n<td><p>Probabilistic direction getter from a distribution of directions on the sphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code>()</p></td>\n<td><p>Returns best directions at seed location to start tracking.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 63%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_direction</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.DeterministicMaximumDirectionGetter.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.DeterministicMaximumDirectionGetter.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"localfibertrackingpamflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow\" title=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocalFiberTrackingPAMFlow</span></code></a><a class=\"headerlink\" href=\"#localfibertrackingpamflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">LocalFiberTrackingPAMFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name\" title=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run\" title=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0pam_files,\u00a0stopping_files,\u00a0\u2026[,\u00a0\u2026])</p></td>\n<td><p>Workflow for Local Fiber Tracking.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">pam_files</em>, <em class=\"sig-param\">stopping_files</em>, <em class=\"sig-param\">seeding_files</em>, <em class=\"sig-param\">use_binary_mask=False</em>, <em class=\"sig-param\">stopping_thr=0.2</em>, <em class=\"sig-param\">seed_density=1</em>, <em class=\"sig-param\">step_size=0.5</em>, <em class=\"sig-param\">tracking_method='eudx'</em>, <em class=\"sig-param\">pmf_threshold=0.1</em>, <em class=\"sig-param\">max_angle=30.0</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_tractogram='tractogram.trk'</em>, <em class=\"sig-param\">save_seeds=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalFiberTrackingPAMFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Local Fiber Tracking.</p>\n<p>This workflow use a saved peaks and metrics (PAM) file as input.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>pam_files</strong><span class=\"classifier\">string</span></dt><dd><dl class=\"simple\">\n<dt>Path to the peaks and metrics files. This path may contain</dt><dd><p>wildcards to use multiple masks at once.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>stopping_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to images (e.g. FA) used for stopping criterion for tracking.</p>\n</dd>\n<dt><strong>seeding_files</strong><span class=\"classifier\">string</span></dt><dd><p>A binary image showing where we need to seed for tracking.</p>\n</dd>\n<dt><strong>use_binary_mask</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, uses a binary stopping criterion. If the provided\n<cite>stopping_files</cite> are not binary, <cite>stopping_thr</cite> will be used to\nbinarize the images.</p>\n</dd>\n<dt><strong>stopping_thr</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold applied to stopping volume\u2019s data to identify where\ntracking has to stop (default 0.2).</p>\n</dd>\n<dt><strong>seed_density</strong><span class=\"classifier\">int, optional</span></dt><dd><dl class=\"simple\">\n<dt>Number of seeds per dimension inside voxel (default 1).</dt><dd><p>For example, seed_density of 2 means 8 regularly distributed\npoints in the voxel. And seed density of 1 means 1 point at the\ncenter of the voxel.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>step_size</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Step size used for tracking (default 0.5mm).</p>\n</dd>\n<dt><strong>tracking_method</strong><span class=\"classifier\">string, optional</span></dt><dd><dl class=\"simple\">\n<dt>Select direction getter strategy :</dt><dd><ul class=\"simple\">\n<li><p>\u201ceudx\u201d (Uses the peaks saved in the pam_files)</p></li>\n<li><p>\u201cdeterministic\u201d or \u201cdet\u201d for a deterministic tracking\n(Uses the sh saved in the pam_files, default)</p></li>\n<li><p>\u201cprobabilistic\u201d or \u201cprob\u201d for a Probabilistic tracking\n(Uses the sh saved in the pam_files)</p></li>\n<li><p>\u201cclosestpeaks\u201d or \u201ccp\u201d for a ClosestPeaks tracking\n(Uses the sh saved in the pam_files)</p></li>\n</ul>\n</dd>\n</dl>\n</dd>\n<dt><strong>pmf_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold for ODF functions (default 0.1).</p>\n</dd>\n<dt><strong>max_angle</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Maximum angle between streamline segments (range [0, 90],\ndefault 30).</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory).</p>\n</dd>\n<dt><strong>out_tractogram</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the tractogram file to be saved (default \u2018tractogram.trk\u2019).</p>\n</dd>\n<dt><strong>save_seeds</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If true, save the seeds associated to their streamline\nin the \u2018data_per_streamline\u2019 Tractogram dictionary using\n\u2018seeds\u2019 as the key.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<p>Garyfallidis, University of Cambridge, PhD thesis 2012.\nAmirbekian, University of California San Francisco, PhD thesis 2017.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"localtracking\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"dipy.workflows.tracking.LocalTracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a><a class=\"headerlink\" href=\"#localtracking\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.LocalTracking\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">LocalTracking</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">direction_getter</em>, <em class=\"sig-param\">stopping_criterion</em>, <em class=\"sig-param\">seeds</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">step_size</em>, <em class=\"sig-param\">max_cross=None</em>, <em class=\"sig-param\">maxlen=500</em>, <em class=\"sig-param\">fixedstep=True</em>, <em class=\"sig-param\">return_all=True</em>, <em class=\"sig-param\">random_seed=None</em>, <em class=\"sig-param\">save_seeds=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalTracking\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.LocalTracking.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">direction_getter</em>, <em class=\"sig-param\">stopping_criterion</em>, <em class=\"sig-param\">seeds</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">step_size</em>, <em class=\"sig-param\">max_cross=None</em>, <em class=\"sig-param\">maxlen=500</em>, <em class=\"sig-param\">fixedstep=True</em>, <em class=\"sig-param\">return_all=True</em>, <em class=\"sig-param\">random_seed=None</em>, <em class=\"sig-param\">save_seeds=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.LocalTracking.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates streamlines by using local fiber-tracking.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>direction_getter</strong><span class=\"classifier\">instance of DirectionGetter</span></dt><dd><p>Used to get directions for fiber tracking.</p>\n</dd>\n<dt><strong>stopping_criterion</strong><span class=\"classifier\">instance of StoppingCriterion</span></dt><dd><p>Identifies endpoints and invalid points to inform tracking.</p>\n</dd>\n<dt><strong>seeds</strong><span class=\"classifier\">array (N, 3)</span></dt><dd><p>Points to seed the tracking. Seed points should be given in point\nspace of the track (see <code class=\"docutils literal notranslate\"><span class=\"pre\">affine</span></code>).</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">array (4, 4)</span></dt><dd><p>Coordinate space for the streamline point with respect to voxel\nindices of input data. This affine can contain scaling, rotational,\nand translational components but should not contain any shearing.\nAn identity matrix can be used to generate streamlines in \u201cvoxel\ncoordinates\u201d as long as isotropic voxels were used to acquire the\ndata.</p>\n</dd>\n<dt><strong>step_size</strong><span class=\"classifier\">float</span></dt><dd><p>Step size used for tracking.</p>\n</dd>\n<dt><strong>max_cross</strong><span class=\"classifier\">int or None</span></dt><dd><p>The maximum number of direction to track from each seed in crossing\nvoxels. By default all initial directions are tracked.</p>\n</dd>\n<dt><strong>maxlen</strong><span class=\"classifier\">int</span></dt><dd><p>Maximum number of steps to track from seed. Used to prevent\ninfinite loops.</p>\n</dd>\n<dt><strong>fixedstep</strong><span class=\"classifier\">bool</span></dt><dd><p>If true, a fixed stepsize is used, otherwise a variable step size\nis used.</p>\n</dd>\n<dt><strong>return_all</strong><span class=\"classifier\">bool</span></dt><dd><p>If true, return all generated streamlines, otherwise only\nstreamlines reaching end points or exiting the image.</p>\n</dd>\n<dt><strong>random_seed</strong><span class=\"classifier\">int</span></dt><dd><p>The seed for the random seed generator (numpy.random.seed and\nrandom.seed).</p>\n</dd>\n<dt><strong>save_seeds</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, return seeds alongside streamlines</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"pftrackingpamflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow\" title=\"dipy.workflows.tracking.PFTrackingPAMFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PFTrackingPAMFlow</span></code></a><a class=\"headerlink\" href=\"#pftrackingpamflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.PFTrackingPAMFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">PFTrackingPAMFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name\" title=\"dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.run\" title=\"dipy.workflows.tracking.PFTrackingPAMFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0pam_files,\u00a0wm_files,\u00a0gm_files,\u00a0\u2026)</p></td>\n<td><p>Workflow for Particle Filtering Tracking.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.PFTrackingPAMFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.PFTrackingPAMFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">pam_files</em>, <em class=\"sig-param\">wm_files</em>, <em class=\"sig-param\">gm_files</em>, <em class=\"sig-param\">csf_files</em>, <em class=\"sig-param\">seeding_files</em>, <em class=\"sig-param\">step_size=0.2</em>, <em class=\"sig-param\">seed_density=1</em>, <em class=\"sig-param\">pmf_threshold=0.1</em>, <em class=\"sig-param\">max_angle=20.0</em>, <em class=\"sig-param\">pft_back=2</em>, <em class=\"sig-param\">pft_front=1</em>, <em class=\"sig-param\">pft_count=15</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_tractogram='tractogram.trk'</em>, <em class=\"sig-param\">save_seeds=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.PFTrackingPAMFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Workflow for Particle Filtering Tracking.</p>\n<p>This workflow use a saved peaks and metrics (PAM) file as input.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>pam_files</strong><span class=\"classifier\">string</span></dt><dd><dl class=\"simple\">\n<dt>Path to the peaks and metrics files. This path may contain</dt><dd><p>wildcards to use multiple masks at once.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>wm_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to white matter partial volume estimate for tracking (CMC).</p>\n</dd>\n<dt><strong>gm_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to grey matter partial volume estimate for tracking (CMC).</p>\n</dd>\n<dt><strong>csf_files</strong><span class=\"classifier\">string</span></dt><dd><p>Path to cerebrospinal fluid partial volume estimate for tracking\n(CMC).</p>\n</dd>\n<dt><strong>seeding_files</strong><span class=\"classifier\">string</span></dt><dd><p>A binary image showing where we need to seed for tracking.</p>\n</dd>\n<dt><strong>step_size</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Step size used for tracking (default 0.2mm).</p>\n</dd>\n<dt><strong>seed_density</strong><span class=\"classifier\">int, optional</span></dt><dd><dl class=\"simple\">\n<dt>Number of seeds per dimension inside voxel (default 1).</dt><dd><p>For example, seed_density of 2 means 8 regularly distributed\npoints in the voxel. And seed density of 1 means 1 point at the\ncenter of the voxel.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>pmf_threshold</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Threshold for ODF functions (default 0.1).</p>\n</dd>\n<dt><strong>max_angle</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Maximum angle between streamline segments (range [0, 90],\ndefault 20).</p>\n</dd>\n<dt><strong>pft_back</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Distance in mm to back track before starting the particle filtering\ntractography (default 2mm). The total particle filtering\ntractography distance is equal to back_tracking_dist +\nfront_tracking_dist.</p>\n</dd>\n<dt><strong>pft_front</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Distance in mm to run the particle filtering tractography after the\nthe back track distance (default 1mm). The total particle filtering\ntractography distance is equal to back_tracking_dist +\nfront_tracking_dist.</p>\n</dd>\n<dt><strong>pft_count</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of particles to use in the particle filter (default 15).</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Output directory (default input file directory)</p>\n</dd>\n<dt><strong>out_tractogram</strong><span class=\"classifier\">string, optional</span></dt><dd><p>Name of the tractogram file to be saved (default \u2018tractogram.trk\u2019)</p>\n</dd>\n<dt><strong>save_seeds</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If true, save the seeds associated to their streamline\nin the \u2018data_per_streamline\u2019 Tractogram dictionary using\n\u2018seeds\u2019 as the key</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<p>Girard, G., Whittingstall, K., Deriche, R., &amp; Descoteaux, M. Towards\nquantitative connectivity analysis: reducing tractography biases.\nNeuroImage, 98, 266-278, 2014.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"particlefilteringtracking\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ParticleFilteringTracking\" title=\"dipy.workflows.tracking.ParticleFilteringTracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ParticleFilteringTracking</span></code></a><a class=\"headerlink\" href=\"#particlefilteringtracking\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ParticleFilteringTracking\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">ParticleFilteringTracking</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">direction_getter</em>, <em class=\"sig-param\">stopping_criterion</em>, <em class=\"sig-param\">seeds</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">step_size</em>, <em class=\"sig-param\">max_cross=None</em>, <em class=\"sig-param\">maxlen=500</em>, <em class=\"sig-param\">pft_back_tracking_dist=2</em>, <em class=\"sig-param\">pft_front_tracking_dist=1</em>, <em class=\"sig-param\">pft_max_trial=20</em>, <em class=\"sig-param\">particle_count=15</em>, <em class=\"sig-param\">return_all=True</em>, <em class=\"sig-param\">random_seed=None</em>, <em class=\"sig-param\">save_seeds=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ParticleFilteringTracking\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"../dipy.tracking/#dipy.tracking.local_tracking.LocalTracking\" title=\"dipy.tracking.local_tracking.LocalTracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.local_tracking.LocalTracking</span></code></a></p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ParticleFilteringTracking.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">direction_getter</em>, <em class=\"sig-param\">stopping_criterion</em>, <em class=\"sig-param\">seeds</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">step_size</em>, <em class=\"sig-param\">max_cross=None</em>, <em class=\"sig-param\">maxlen=500</em>, <em class=\"sig-param\">pft_back_tracking_dist=2</em>, <em class=\"sig-param\">pft_front_tracking_dist=1</em>, <em class=\"sig-param\">pft_max_trial=20</em>, <em class=\"sig-param\">particle_count=15</em>, <em class=\"sig-param\">return_all=True</em>, <em class=\"sig-param\">random_seed=None</em>, <em class=\"sig-param\">save_seeds=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ParticleFilteringTracking.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A streamline generator using the particle filtering tractography\nmethod <a class=\"reference internal\" href=\"#rc5e8c566eb0a-1\" id=\"id162\">[1]</a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>direction_getter</strong><span class=\"classifier\">instance of ProbabilisticDirectionGetter</span></dt><dd><p>Used to get directions for fiber tracking.</p>\n</dd>\n<dt><strong>stopping_criterion</strong><span class=\"classifier\">instance of AnatomicalStoppingCriterion</span></dt><dd><p>Identifies endpoints and invalid points to inform tracking.</p>\n</dd>\n<dt><strong>seeds</strong><span class=\"classifier\">array (N, 3)</span></dt><dd><p>Points to seed the tracking. Seed points should be given in point\nspace of the track (see <code class=\"docutils literal notranslate\"><span class=\"pre\">affine</span></code>).</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">array (4, 4)</span></dt><dd><p>Coordinate space for the streamline point with respect to voxel\nindices of input data. This affine can contain scaling, rotational,\nand translational components but should not contain any shearing.\nAn identity matrix can be used to generate streamlines in \u201cvoxel\ncoordinates\u201d as long as isotropic voxels were used to acquire the\ndata.</p>\n</dd>\n<dt><strong>step_size</strong><span class=\"classifier\">float</span></dt><dd><p>Step size used for tracking.</p>\n</dd>\n<dt><strong>max_cross</strong><span class=\"classifier\">int or None</span></dt><dd><p>The maximum number of direction to track from each seed in crossing\nvoxels. By default all initial directions are tracked.</p>\n</dd>\n<dt><strong>maxlen</strong><span class=\"classifier\">int</span></dt><dd><p>Maximum number of steps to track from seed. Used to prevent\ninfinite loops.</p>\n</dd>\n<dt><strong>pft_back_tracking_dist</strong><span class=\"classifier\">float</span></dt><dd><p>Distance in mm to back track before starting the particle filtering\ntractography. The total particle filtering tractography distance is\nequal to back_tracking_dist + front_tracking_dist.\nBy default this is set to 2 mm.</p>\n</dd>\n<dt><strong>pft_front_tracking_dist</strong><span class=\"classifier\">float</span></dt><dd><p>Distance in mm to run the particle filtering tractography after the\nthe back track distance. The total particle filtering tractography\ndistance is equal to back_tracking_dist + front_tracking_dist. By\ndefault this is set to 1 mm.</p>\n</dd>\n<dt><strong>pft_max_trial</strong><span class=\"classifier\">int</span></dt><dd><p>Maximum number of trial for the particle filtering tractography\n(Prevents infinite loops).</p>\n</dd>\n<dt><strong>particle_count</strong><span class=\"classifier\">int</span></dt><dd><p>Number of particles to use in the particle filter.</p>\n</dd>\n<dt><strong>return_all</strong><span class=\"classifier\">bool</span></dt><dd><p>If true, return all generated streamlines, otherwise only\nstreamlines reaching end points or exiting the image.</p>\n</dd>\n<dt><strong>random_seed</strong><span class=\"classifier\">int</span></dt><dd><p>The seed for the random seed generator (numpy.random.seed and\nrandom.seed).</p>\n</dd>\n<dt><strong>save_seeds</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, return seeds alongside streamlines</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rc5e8c566eb0a-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id162\">1</a></span></dt>\n<dd><p>Girard, G., Whittingstall, K., Deriche, R., &amp; Descoteaux, M.\nTowards quantitative connectivity analysis: reducing\ntractography biases. NeuroImage, 98, 266-278, 2014.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"probabilisticdirectiongetter\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ProbabilisticDirectionGetter\" title=\"dipy.workflows.tracking.ProbabilisticDirectionGetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ProbabilisticDirectionGetter</span></code></a><a class=\"headerlink\" href=\"#probabilisticdirectiongetter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ProbabilisticDirectionGetter\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">ProbabilisticDirectionGetter</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ProbabilisticDirectionGetter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.direction.closest_peak_direction_getter.PmfGenDirectionGetter</span></code></p>\n<p>Randomly samples direction of a sphere based on probability mass\nfunction (pmf).</p>\n<p>The main constructors for this class are current from_pmf and from_shcoeff.\nThe pmf gives the probability that each direction on the sphere should be\nchosen as the next direction. To get the true pmf from the \u201craw pmf\u201d\ndirections more than <code class=\"docutils literal notranslate\"><span class=\"pre\">max_angle</span></code> degrees from the incoming direction are\nset to 0 and the result is normalized.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_pmf</span></code>()</p></td>\n<td><p>Constructor for making a DirectionGetter from an array of Pmfs</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_shcoeff</span></code>()</p></td>\n<td><p>Probabilistic direction getter from a distribution of directions on the sphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code>()</p></td>\n<td><p>Returns best directions at seed location to start tracking.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 63%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_direction</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ProbabilisticDirectionGetter.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ProbabilisticDirectionGetter.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Direction getter from a pmf generator.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>pmf_gen</strong><span class=\"classifier\">PmfGen</span></dt><dd><p>Used to get probability mass function for selecting tracking\ndirections.</p>\n</dd>\n<dt><strong>max_angle</strong><span class=\"classifier\">float, [0, 90]</span></dt><dd><p>The maximum allowed angle between incoming direction and new\ndirection.</p>\n</dd>\n<dt><strong>sphere</strong><span class=\"classifier\">Sphere</span></dt><dd><p>The set of directions to be used for tracking.</p>\n</dd>\n<dt><strong>pmf_threshold</strong><span class=\"classifier\">float [0., 1.]</span></dt><dd><p>Used to remove direction from the probability mass function for\nselecting the tracking direction.</p>\n</dd>\n<dt><strong>relative_peak_threshold</strong><span class=\"classifier\">float in [0., 1.]</span></dt><dd><p>Used for extracting initial tracking directions. Passed to\npeak_directions.</p>\n</dd>\n<dt><strong>min_separation_angle</strong><span class=\"classifier\">float in [0, 90]</span></dt><dd><p>Used for extracting initial tracking directions. Passed to\npeak_directions.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"../dipy.direction/#dipy.direction.peaks.peak_directions\" title=\"dipy.direction.peaks.peak_directions\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dipy.direction.peaks.peak_directions</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"space\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Space\" title=\"dipy.workflows.tracking.Space\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Space</span></code></a><a class=\"headerlink\" href=\"#space\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.Space\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">Space</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/enum.html#enum.Enum\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">enum.Enum</span></code></a></p>\n<p>Enum to simplify future change to convention</p>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Space.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Space.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Space.RASMM\">\n<code class=\"sig-name descname\">RASMM</code><em class=\"property\"> = 'rasmm'</em><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Space.RASMM\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Space.VOX\">\n<code class=\"sig-name descname\">VOX</code><em class=\"property\"> = 'vox'</em><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Space.VOX\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.workflows.tracking.Space.VOXMM\">\n<code class=\"sig-name descname\">VOXMM</code><em class=\"property\"> = 'voxmm'</em><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Space.VOXMM\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"statefultractogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram\" title=\"dipy.workflows.tracking.StatefulTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a><a class=\"headerlink\" href=\"#statefultractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">StatefulTractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">space</em>, <em class=\"sig-param\">origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Class for stateful representation of collections of streamlines\nObject designed to be identical no matter the file format\n(trk, tck, vtk, fib, dpy). Facilitate transformation between space and\ndata manipulation for each streamline / point.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.affine\" title=\"dipy.workflows.tracking.StatefulTractogram.affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></a></dt><dd><p>Getter for the reference affine</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.data_per_point\" title=\"dipy.workflows.tracking.StatefulTractogram.data_per_point\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">data_per_point</span></code></a></dt><dd><p>Getter for data_per_point</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.data_per_streamline\" title=\"dipy.workflows.tracking.StatefulTractogram.data_per_streamline\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">data_per_streamline</span></code></a></dt><dd><p>Getter for data_per_streamline</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.dimensions\" title=\"dipy.workflows.tracking.StatefulTractogram.dimensions\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dimensions</span></code></a></dt><dd><p>Getter for the reference dimensions</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.origin\" title=\"dipy.workflows.tracking.StatefulTractogram.origin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">origin</span></code></a></dt><dd><p>Getter for origin standard</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.space\" title=\"dipy.workflows.tracking.StatefulTractogram.space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">space</span></code></a></dt><dd><p>Getter for the current space</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.space_attributes\" title=\"dipy.workflows.tracking.StatefulTractogram.space_attributes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">space_attributes</span></code></a></dt><dd><p>Getter for spatial attribute</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.streamlines\" title=\"dipy.workflows.tracking.StatefulTractogram.streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">streamlines</span></code></a></dt><dd><p>Partially safe getter for streamlines</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.voxel_order\" title=\"dipy.workflows.tracking.StatefulTractogram.voxel_order\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">voxel_order</span></code></a></dt><dd><p>Getter for the reference voxel order</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.voxel_sizes\" title=\"dipy.workflows.tracking.StatefulTractogram.voxel_sizes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">voxel_sizes</span></code></a></dt><dd><p>Getter for the reference voxel sizes</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.compute_bounding_box\" title=\"dipy.workflows.tracking.StatefulTractogram.compute_bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_bounding_box</span></code></a>(self)</p></td>\n<td><p>Compute the bounding box of the streamlines in their current state</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.from_sft\" title=\"dipy.workflows.tracking.StatefulTractogram.from_sft\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_sft</span></code></a>(streamlines,\u00a0sft[,\u00a0data_per_point,\u00a0\u2026])</p></td>\n<td><p>Create an instance of <cite>StatefulTractogram</cite> from another instance of <cite>StatefulTractogram</cite>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.get_streamlines_copy\" title=\"dipy.workflows.tracking.StatefulTractogram.get_streamlines_copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_streamlines_copy</span></code></a>(self)</p></td>\n<td><p>Safe getter for streamlines (for slicing)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.is_bbox_in_vox_valid\" title=\"dipy.workflows.tracking.StatefulTractogram.is_bbox_in_vox_valid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_bbox_in_vox_valid</span></code></a>(self)</p></td>\n<td><p>Verify that the bounding box is valid in voxel space.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.remove_invalid_streamlines\" title=\"dipy.workflows.tracking.StatefulTractogram.remove_invalid_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_invalid_streamlines</span></code></a>(self)</p></td>\n<td><p>Remove streamlines with invalid coordinates from the object.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_center\" title=\"dipy.workflows.tracking.StatefulTractogram.to_center\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_center</span></code></a>(self)</p></td>\n<td><p>Safe function to shift streamlines so the center of voxel is the origin</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_corner\" title=\"dipy.workflows.tracking.StatefulTractogram.to_corner\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_corner</span></code></a>(self)</p></td>\n<td><p>Safe function to shift streamlines so the corner of voxel is the origin</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_origin\" title=\"dipy.workflows.tracking.StatefulTractogram.to_origin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_origin</span></code></a>(self,\u00a0target_origin)</p></td>\n<td><p>Safe function to change streamlines to a particular origin standard False means NIFTI (center) and True means TrackVis (corner)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_rasmm\" title=\"dipy.workflows.tracking.StatefulTractogram.to_rasmm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_rasmm</span></code></a>(self)</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_space\" title=\"dipy.workflows.tracking.StatefulTractogram.to_space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_space</span></code></a>(self,\u00a0target_space)</p></td>\n<td><p>Safe function to transform streamlines to a particular space using an enum and update state</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_vox\" title=\"dipy.workflows.tracking.StatefulTractogram.to_vox\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_vox</span></code></a>(self)</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_voxmm\" title=\"dipy.workflows.tracking.StatefulTractogram.to_voxmm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_voxmm</span></code></a>(self)</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">space</em>, <em class=\"sig-param\">origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a strict, state-aware, robust tractogram</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list or ArraySequence</span></dt><dd><p>Streamlines of the tractogram</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header, trk.header (dict) or another Stateful Tractogram\nReference that provides the spatial attributes.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Current space in which the streamlines are (vox, voxmm or rasmm)\nAfter tracking the space is VOX, after loading with nibabel\nthe space is RASMM</p>\n</dd>\n<dt><strong>origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin), optional</span></dt><dd><p>Current origin in which the streamlines are (center or corner)\nAfter loading with nibabel the origin is CENTER</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items, each items has Y_i items\nX being the number of streamlines\nY_i being the number of points on streamlines #i</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items\nX being the number of streamlines</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Very important to respect the convention, verify that streamlines\nmatch the reference and are effectively in the right space.</p>\n<p>Any change to the number of streamlines, data_per_point or\ndata_per_streamline requires particular verification.</p>\n<p>In a case of manipulation not allowed by this object, use Nibabel\ndirectly and be careful.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.affine\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">affine</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference affine</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.compute_bounding_box\">\n<code class=\"sig-name descname\">compute_bounding_box</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.compute_bounding_box\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the bounding box of the streamlines in their current state</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">ndarray</span></dt><dd><p>8 corners of the XYZ aligned box, all zeros if no streamlines</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.data_per_point\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for data_per_point</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.data_per_streamline\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for data_per_streamline</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.dimensions\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">dimensions</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.dimensions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference dimensions</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.from_sft\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">from_sft</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">sft</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.from_sft\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an instance of <cite>StatefulTractogram</cite> from another instance\nof <cite>StatefulTractogram</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list or ArraySequence</span></dt><dd><p>Streamlines of the tractogram</p>\n</dd>\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractgram,</span></dt><dd><p>The other StatefulTractgram to copy the space_attribute AND\nstate from.</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items, each items has Y_i items\nX being the number of streamlines\nY_i being the number of points on streamlines #i</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items\nX being the number of streamlines</p>\n</dd>\n<dt><strong>\u2014\u2013</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.get_streamlines_copy\">\n<code class=\"sig-name descname\">get_streamlines_copy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.get_streamlines_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe getter for streamlines (for slicing)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.is_bbox_in_vox_valid\">\n<code class=\"sig-name descname\">is_bbox_in_vox_valid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.is_bbox_in_vox_valid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Verify that the bounding box is valid in voxel space.\nNegative coordinates or coordinates above the volume dimensions\nare considered invalid in voxel space.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>Are the streamlines within the volume of the associated reference</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.origin\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">origin</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for origin standard</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.remove_invalid_streamlines\">\n<code class=\"sig-name descname\">remove_invalid_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.remove_invalid_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove streamlines with invalid coordinates from the object.\nWill also remove the data_per_point and data_per_streamline.\nInvalid coordinates are any X,Y,Z values above the reference\ndimensions or below zero\nReturns\n\u2014\u2014-\noutput : tuple</p>\n<blockquote>\n<div><p>Tuple of two list, indices_to_remove, indices_to_keep</p>\n</div></blockquote>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.space\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">space</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the current space</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.space_attributes\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">space_attributes</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.space_attributes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for spatial attribute</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.streamlines\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partially safe getter for streamlines</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.to_center\">\n<code class=\"sig-name descname\">to_center</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_center\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to shift streamlines so the center of voxel is\nthe origin</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.to_corner\">\n<code class=\"sig-name descname\">to_corner</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_corner\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to shift streamlines so the corner of voxel is\nthe origin</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.to_origin\">\n<code class=\"sig-name descname\">to_origin</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">target_origin</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to change streamlines to a particular origin standard\nFalse means NIFTI (center) and True means TrackVis (corner)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.to_rasmm\">\n<code class=\"sig-name descname\">to_rasmm</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_rasmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.to_space\">\n<code class=\"sig-name descname\">to_space</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">target_space</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines to a particular space using\nan enum and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.to_vox\">\n<code class=\"sig-name descname\">to_vox</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_vox\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.to_voxmm\">\n<code class=\"sig-name descname\">to_voxmm</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.to_voxmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.voxel_order\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">voxel_order</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.voxel_order\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference voxel order</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.StatefulTractogram.voxel_sizes\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">voxel_sizes</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.StatefulTractogram.voxel_sizes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference voxel sizes</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"thresholdstoppingcriterion\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.ThresholdStoppingCriterion\" title=\"dipy.workflows.tracking.ThresholdStoppingCriterion\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ThresholdStoppingCriterion</span></code></a><a class=\"headerlink\" href=\"#thresholdstoppingcriterion\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.ThresholdStoppingCriterion\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">ThresholdStoppingCriterion</code><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ThresholdStoppingCriterion\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.tracking.stopping_criterion.StoppingCriterion</span></code></p>\n<p># Declarations from stopping_criterion.pxd bellow\ncdef:</p>\n<blockquote>\n<div><p>double threshold, interp_out_double[1]\ndouble[:]  interp_out_view = interp_out_view\ndouble[:, :, :] metric_map</p>\n</div></blockquote>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 60%\" />\n<col style=\"width: 40%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>check_point</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.ThresholdStoppingCriterion.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.ThresholdStoppingCriterion.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id164\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow\" title=\"dipy.workflows.tracking.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id164\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.tracking.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_io_iterator\" title=\"dipy.workflows.tracking.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_short_name\" title=\"dipy.workflows.tracking.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.get_sub_runs\" title=\"dipy.workflows.tracking.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.manage_output_overwrite\" title=\"dipy.workflows.tracking.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.tracking.Workflow.run\" title=\"dipy.workflows.tracking.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.tracking.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id165\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id165\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-peaks\">\n<h3>load_peaks<a class=\"headerlink\" href=\"#load-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.load_peaks\">\n<code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">load_peaks</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.load_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">string</span></dt><dd><p>Filename of PAM5 file.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool</span></dt><dd><p>Print summary information about the loaded file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>pam</strong><span class=\"classifier\">PeaksAndMetrics object</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-tractogram\">\n<h3>save_tractogram<a class=\"headerlink\" href=\"#save-tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.tracking.save_tractogram\">\n<code class=\"sig-prename descclassname\">dipy.workflows.tracking.</code><code class=\"sig-name descname\">save_tractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">bbox_valid_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.tracking.save_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save the stateful tractogram in any format (trk, tck, vtk, fib, dpy)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The stateful tractogram to save</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>True if the saving operation was successful</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"horizonflow\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.viz.HorizonFlow\" title=\"dipy.workflows.viz.HorizonFlow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HorizonFlow</span></code></a><a class=\"headerlink\" href=\"#horizonflow\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.viz.HorizonFlow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.viz.</code><code class=\"sig-name descname\">HorizonFlow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.HorizonFlow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.workflows.workflow.Workflow</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.HorizonFlow.get_short_name\" title=\"dipy.workflows.viz.HorizonFlow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.HorizonFlow.run\" title=\"dipy.workflows.viz.HorizonFlow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0input_files[,\u00a0cluster,\u00a0\u2026])</p></td>\n<td><p>Interactive medical visualization - Invert the Horizon!</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.HorizonFlow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.HorizonFlow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.HorizonFlow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.HorizonFlow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.HorizonFlow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_files</em>, <em class=\"sig-param\">cluster=False</em>, <em class=\"sig-param\">cluster_thr=15.0</em>, <em class=\"sig-param\">random_colors=False</em>, <em class=\"sig-param\">length_gt=0</em>, <em class=\"sig-param\">length_lt=1000</em>, <em class=\"sig-param\">clusters_gt=0</em>, <em class=\"sig-param\">clusters_lt=100000000</em>, <em class=\"sig-param\">native_coords=False</em>, <em class=\"sig-param\">stealth=False</em>, <em class=\"sig-param\">emergency_header='icbm_2009a'</em>, <em class=\"sig-param\">out_dir=''</em>, <em class=\"sig-param\">out_stealth_png='tmp.png'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.HorizonFlow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Interactive medical visualization - Invert the Horizon!</p>\n<p>Interact with any number of .trk, .tck or .dpy tractograms and anatomy\nfiles .nii or .nii.gz. Cluster streamlines on loading.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_files</strong><span class=\"classifier\">variable string</span></dt><dd></dd>\n<dt><strong>cluster</strong><span class=\"classifier\">bool</span></dt><dd><p>Enable QuickBundlesX clustering</p>\n</dd>\n<dt><strong>cluster_thr</strong><span class=\"classifier\">float</span></dt><dd><p>Distance threshold used for clustering. Default value 15.0 for\nsmall animal brains you may need to use something smaller such\nas 2.0. The distance is in mm. For this parameter to be active\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cluster</span></code> should be enabled</p>\n</dd>\n<dt><strong>random_colors</strong><span class=\"classifier\">bool</span></dt><dd><p>Given multiple tractograms have been included then each tractogram\nwill be shown with different color</p>\n</dd>\n<dt><strong>length_gt</strong><span class=\"classifier\">float</span></dt><dd><p>Clusters with average length greater than <code class=\"docutils literal notranslate\"><span class=\"pre\">length_gt</span></code> amount\nin mm will be shown</p>\n</dd>\n<dt><strong>length_lt</strong><span class=\"classifier\">float</span></dt><dd><p>Clusters with average length less than <code class=\"docutils literal notranslate\"><span class=\"pre\">length_lt</span></code> amount in\nmm will be shown</p>\n</dd>\n<dt><strong>clusters_gt</strong><span class=\"classifier\">int</span></dt><dd><p>Clusters with size greater than <code class=\"docutils literal notranslate\"><span class=\"pre\">clusters_gt</span></code> will be shown.</p>\n</dd>\n<dt><strong>clusters_lt</strong><span class=\"classifier\">int</span></dt><dd><p>Clusters with size less than <code class=\"docutils literal notranslate\"><span class=\"pre\">clusters_gt</span></code> will be shown.</p>\n</dd>\n<dt><strong>native_coords</strong><span class=\"classifier\">bool</span></dt><dd><p>Show results in native coordinates</p>\n</dd>\n<dt><strong>stealth</strong><span class=\"classifier\">bool</span></dt><dd><p>Do not use interactive mode just save figure.</p>\n</dd>\n<dt><strong>emergency_header</strong><span class=\"classifier\">str</span></dt><dd><p>If no anatomy reference is provided an emergency header is\nprovided. Current options \u2018icbm_2009a\u2019 and \u2018icbm_2009c\u2019.</p>\n</dd>\n<dt><strong>out_dir</strong><span class=\"classifier\">string</span></dt><dd><p>Output directory. Default current directory.</p>\n</dd>\n<dt><strong>out_stealth_png</strong><span class=\"classifier\">string</span></dt><dd><p>Filename of saved picture.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r1c3f2df048ff-horizon-ismrm19\"><span class=\"brackets\">Horizon_ISMRM19</span></dt>\n<dd><p>Garyfallidis E., M-A. Cote, B.Q. Chandio,\nS. Fadnavis, J. Guaje, R. Aggarwal, E. St-Onge, K.S. Juneja,\nS. Koudoro, D. Reagan, DIPY Horizon: fast, modular, unified and\nadaptive visualization, Proceedings of: International Society of\nMagnetic Resonance in Medicine (ISMRM), Montreal, Canada, 2019.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id167\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow\" title=\"dipy.workflows.viz.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id167\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.viz.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.viz.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.get_io_iterator\" title=\"dipy.workflows.viz.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.get_short_name\" title=\"dipy.workflows.viz.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.get_sub_runs\" title=\"dipy.workflows.viz.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.manage_output_overwrite\" title=\"dipy.workflows.viz.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.viz.Workflow.run\" title=\"dipy.workflows.viz.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.viz.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"create-nifti-header\">\n<h3>create_nifti_header<a class=\"headerlink\" href=\"#create-nifti-header\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.create_nifti_header\">\n<code class=\"sig-prename descclassname\">dipy.workflows.viz.</code><code class=\"sig-name descname\">create_nifti_header</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">dimensions</em>, <em class=\"sig-param\">voxel_sizes</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.create_nifti_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write a standard nifti header from spatial attribute</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"horizon\">\n<h3>horizon<a class=\"headerlink\" href=\"#horizon\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.horizon\">\n<code class=\"sig-prename descclassname\">dipy.workflows.viz.</code><code class=\"sig-name descname\">horizon</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tractograms=None</em>, <em class=\"sig-param\">images=None</em>, <em class=\"sig-param\">pams=None</em>, <em class=\"sig-param\">cluster=False</em>, <em class=\"sig-param\">cluster_thr=15.0</em>, <em class=\"sig-param\">random_colors=False</em>, <em class=\"sig-param\">length_gt=0</em>, <em class=\"sig-param\">length_lt=1000</em>, <em class=\"sig-param\">clusters_gt=0</em>, <em class=\"sig-param\">clusters_lt=10000</em>, <em class=\"sig-param\">world_coords=True</em>, <em class=\"sig-param\">interactive=True</em>, <em class=\"sig-param\">out_png='tmp.png'</em>, <em class=\"sig-param\">recorded_events=None</em>, <em class=\"sig-param\">return_showm=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.horizon\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Interactive medical visualization - Invert the Horizon!</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>tractograms</strong><span class=\"classifier\">sequence of StatefulTractograms</span></dt><dd><blockquote>\n<div><p>StatefulTractograms are used for making sure that the coordinate\nsystems are correct</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>images<span class=\"classifier\">sequence of tuples</span></dt><dd><p>Each tuple contains data and affine</p>\n</dd>\n<dt>pams<span class=\"classifier\">sequence of PeakAndMetrics</span></dt><dd><p>Contains peak directions and spherical harmonic coefficients</p>\n</dd>\n<dt>cluster<span class=\"classifier\">bool</span></dt><dd><p>Enable QuickBundlesX clustering</p>\n</dd>\n<dt>cluster_thr<span class=\"classifier\">float</span></dt><dd><p>Distance threshold used for clustering. Default value 15.0 for\nsmall animal data you may need to use something smaller such\nas 2.0. The threshold is in mm. For this parameter to be active\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cluster</span></code> should be enabled.</p>\n</dd>\n<dt>random_colors<span class=\"classifier\">bool</span></dt><dd><p>Given multiple tractograms have been included then each tractogram\nwill be shown with different color</p>\n</dd>\n<dt>length_gt<span class=\"classifier\">float</span></dt><dd><p>Clusters with average length greater than <code class=\"docutils literal notranslate\"><span class=\"pre\">length_gt</span></code> amount\nin mm will be shown.</p>\n</dd>\n<dt>length_lt<span class=\"classifier\">float</span></dt><dd><p>Clusters with average length less than <code class=\"docutils literal notranslate\"><span class=\"pre\">length_lt</span></code> amount in mm\nwill be shown.</p>\n</dd>\n<dt>clusters_gt<span class=\"classifier\">int</span></dt><dd><p>Clusters with size greater than <code class=\"docutils literal notranslate\"><span class=\"pre\">clusters_gt</span></code> will be shown.</p>\n</dd>\n<dt>clusters_lt<span class=\"classifier\">int</span></dt><dd><p>Clusters with size less than <code class=\"docutils literal notranslate\"><span class=\"pre\">clusters_lt</span></code> will be shown.</p>\n</dd>\n<dt>world_coords<span class=\"classifier\">bool</span></dt><dd><p>Show data in their world coordinates (not native voxel coordinates)\nDefault True.</p>\n</dd>\n<dt>interactive<span class=\"classifier\">bool</span></dt><dd><p>Allow user interaction. If False then Horizon goes on stealth mode\nand just saves pictures.</p>\n</dd>\n<dt>out_png<span class=\"classifier\">string</span></dt><dd><p>Filename of saved picture.</p>\n</dd>\n<dt>recorded_events<span class=\"classifier\">string</span></dt><dd><p>File path to replay recorded events</p>\n</dd>\n<dt>return_showm<span class=\"classifier\">bool</span></dt><dd><p>Return ShowManager object. Used only at Python level. Can be used\nfor extending Horizon\u2019s cababilities externally and for testing\npurposes.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"re42ff0d3eae3-horizon-ismrm19\"><span class=\"brackets\">Horizon_ISMRM19</span></dt>\n<dd><p>Garyfallidis E., M-A. Cote, B.Q. Chandio,\nS. Fadnavis, J. Guaje, R. Aggarwal, E. St-Onge, K.S. Juneja,\nS. Koudoro, D. Reagan, DIPY Horizon: fast, modular, unified and\nadaptive visualization, Proceedings of: International Society of\nMagnetic Resonance in Medicine (ISMRM), Montreal, Canada, 2019.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id169\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#id169\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.workflows.viz.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id170\">\n<h3>load_peaks<a class=\"headerlink\" href=\"#id170\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.load_peaks\">\n<code class=\"sig-prename descclassname\">dipy.workflows.viz.</code><code class=\"sig-name descname\">load_peaks</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.load_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">string</span></dt><dd><p>Filename of PAM5 file.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool</span></dt><dd><p>Print summary information about the loaded file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>pam</strong><span class=\"classifier\">PeaksAndMetrics object</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-tractogram\">\n<h3>load_tractogram<a class=\"headerlink\" href=\"#load-tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.load_tractogram\">\n<code class=\"sig-prename descclassname\">dipy.workflows.viz.</code><code class=\"sig-name descname\">load_tractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">to_space=&lt;Space.RASMM: 'rasmm'&gt;</em>, <em class=\"sig-param\">to_origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">bbox_valid_check=True</em>, <em class=\"sig-param\">trk_header_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.load_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram from any format (trk, tck, vtk, fib, dpy)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"pjoin\">\n<h3>pjoin<a class=\"headerlink\" href=\"#pjoin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.viz.pjoin\">\n<code class=\"sig-prename descclassname\">dipy.workflows.viz.</code><code class=\"sig-name descname\">pjoin</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">a</em>, <em class=\"sig-param\">*p</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.viz.pjoin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Join two or more pathname components, inserting \u2018/\u2019 as needed.\nIf any component is an absolute path, all previous path components\nwill be discarded.  An empty last part will result in a path that\nends with a separator.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id171\">\n<h3><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow\" title=\"dipy.workflows.workflow.Workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a><a class=\"headerlink\" href=\"#id171\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.workflows.workflow.Workflow\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.workflows.workflow.</code><code class=\"sig-name descname\">Workflow</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_io_iterator\" title=\"dipy.workflows.workflow.Workflow.get_io_iterator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_io_iterator</span></code></a>(self)</p></td>\n<td><p>Create an iterator for IO.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_short_name\" title=\"dipy.workflows.workflow.Workflow.get_short_name\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_short_name</span></code></a>()</p></td>\n<td><p>Return A short name for the workflow used to subdivide.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.get_sub_runs\" title=\"dipy.workflows.workflow.Workflow.get_sub_runs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sub_runs</span></code></a>(self)</p></td>\n<td><p>Return No sub runs since this is a simple workflow.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.manage_output_overwrite\" title=\"dipy.workflows.workflow.Workflow.manage_output_overwrite\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">manage_output_overwrite</span></code></a>(self)</p></td>\n<td><p>Check if a file will be overwritten upon processing the inputs.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.workflows.workflow.Workflow.run\" title=\"dipy.workflows.workflow.Workflow.run\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">run</span></code></a>(self,\u00a0\\*args,\u00a0\\*\\*kwargs)</p></td>\n<td><p>Execute the workflow.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em>, <em class=\"sig-param\">force=False</em>, <em class=\"sig-param\">skip=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize the basic workflow object.</p>\n<p>This object takes care of any workflow operation that is common to all\nthe workflows. Every new workflow should extend this class.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_io_iterator\">\n<code class=\"sig-name descname\">get_io_iterator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_io_iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an iterator for IO.</p>\n<p>Use a couple of inspection tricks to build an IOIterator using the\nprevious frame (values of local variables and other contextuals) and\nthe run method\u2019s docstring.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_short_name\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">get_short_name</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return A short name for the workflow used to subdivide.</p>\n<p>The short name is used by CombinedWorkflows and the argparser to\nsubdivide the commandline parameters avoiding the trouble of having\nsubworkflows parameters with the same name.</p>\n<p>For example, a combined workflow with dti reconstruction and csd\nreconstruction might en up with the b0_threshold parameter. Using short\nnames, we will have dti.b0_threshold and csd.b0_threshold available.</p>\n<p>Returns class name by default but it is strongly advised to set it to\nsomething shorter and easier to write on commandline.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.get_sub_runs\">\n<code class=\"sig-name descname\">get_sub_runs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.get_sub_runs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return No sub runs since this is a simple workflow.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.manage_output_overwrite\">\n<code class=\"sig-name descname\">manage_output_overwrite</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.manage_output_overwrite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if a file will be overwritten upon processing the inputs.</p>\n<p>If it is bound to happen, an action is taken depending on\nself._force_overwrite (or \u2013force via command line). A log message is\noutput independently of the outcome to tell the user something\nhappened.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.workflows.workflow.Workflow.run\">\n<code class=\"sig-name descname\">run</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.Workflow.run\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Execute the workflow.</p>\n<p>Since this is an abstract class, raise exception if this code is\nreached (not implemented in child class or literally called on this\nclass)</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id172\">\n<h3><a href=\"#id175\"><span class=\"problematic\" id=\"id176\">io_iterator_</span></a><a class=\"headerlink\" href=\"#id172\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.workflows.workflow.io_iterator_\">\n<code class=\"sig-prename descclassname\">dipy.workflows.workflow.</code><code class=\"sig-name descname\">io_iterator_</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">frame</em>, <em class=\"sig-param\">fnc</em>, <em class=\"sig-param\">output_strategy='absolute'</em>, <em class=\"sig-param\">mix_names=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.workflows.workflow.io_iterator_\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates an IOIterator using introspection.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>frame</strong><span class=\"classifier\">frameobject</span></dt><dd><blockquote>\n<div><p>Contains the info about the current local variables values.</p>\n</div></blockquote>\n<dl class=\"simple\">\n<dt>fnc<span class=\"classifier\">function</span></dt><dd><p>The function to inspect</p>\n</dd>\n<dt>output_strategy<span class=\"classifier\">string</span></dt><dd><p>Controls the behavior of the IOIterator for output paths.</p>\n</dd>\n<dt>mix_names<span class=\"classifier\">bool</span></dt><dd><p>Whether or not to append a mix of input names at the beginning.</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt><dd><p>Properly instantiated IOIterator object.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference_cmd/index", "Command Line Utilities Reference", "N", "next"], ["reference/dipy.viz", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">viz</span></code>", "P", "previous"]], "sourcename": "reference/dipy.workflows.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.align\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.align</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.base\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.base</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.combined_workflow\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.combined_workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.denoise\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.denoise</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.docstring_parser\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.docstring_parser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.flow_runner\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.flow_runner</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.io\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.io</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.mask\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.mask</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.multi_io\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.multi_io</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.reconst\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.reconst</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.segment\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.segment</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.stats\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.stats</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.tracking\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.tracking</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.viz\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.viz</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.workflows.workflow\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">workflows.workflow</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#affinemap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affineregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#affinetransform3d\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AffineTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#applytransformflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ApplyTransformFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ccmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CCMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffeomorphicmap\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffeomorphicMap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#emmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EMMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#imageregistrationflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageRegistrationFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mutualinformationmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutualInformationMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#resliceflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResliceFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#rigidtransform3d\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RigidTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ssdmetric\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SSDMetric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#slrwithqbxflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SlrWithQbxFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#symmetricdiffeomorphicregistration\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SymmetricDiffeomorphicRegistration</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#synregistrationflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SynRegistrationFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#translationtransform3d\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TranslationTransform3D</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#workflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#check-dimensions\">check_dimensions</a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#reslice\">reslice</a></li>\n<li><a class=\"reference internal\" href=\"#save-nifti\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-qa-metric\">save_qa_metric</a></li>\n<li><a class=\"reference internal\" href=\"#slr-with-qbx\">slr_with_qbx</a></li>\n<li><a class=\"reference internal\" href=\"#transform-centers-of-mass\">transform_centers_of_mass</a></li>\n<li><a class=\"reference internal\" href=\"#transform-streamlines\">transform_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#introspectiveargumentparser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#numpydocstring\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-args-default\">get_args_default</a></li>\n<li><a class=\"reference internal\" href=\"#combinedworkflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CombinedWorkflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id16\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#gibbsringingflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GibbsRingingFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#lpcaflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LPCAFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mppcaflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MPPCAFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#nlmeansflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NLMeansFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id29\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#estimate-sigma\">estimate_sigma</a></li>\n<li><a class=\"reference internal\" href=\"#gibbs-removal\">gibbs_removal</a></li>\n<li><a class=\"reference internal\" href=\"#gradient-table\">gradient_table</a></li>\n<li><a class=\"reference internal\" href=\"#id36\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#localpca\">localpca</a></li>\n<li><a class=\"reference internal\" href=\"#mppca\">mppca</a></li>\n<li><a class=\"reference internal\" href=\"#nlmeans\">nlmeans</a></li>\n<li><a class=\"reference internal\" href=\"#pca-noise-estimate\">pca_noise_estimate</a></li>\n<li><a class=\"reference internal\" href=\"#read-bvals-bvecs\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id49\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id50\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NumpyDocString</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Reader</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dedent-lines\">dedent_lines</a></li>\n<li><a class=\"reference internal\" href=\"#warn\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#id51\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntrospectiveArgumentParser</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-level\">get_level</a></li>\n<li><a class=\"reference internal\" href=\"#run-flow\">run_flow</a></li>\n<li><a class=\"reference internal\" href=\"#fetchflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FetchFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ioinfoflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IoInfoFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#splitflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SplitFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id52\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#getfullargspec\">getfullargspec</a></li>\n<li><a class=\"reference internal\" href=\"#getmembers\">getmembers</a></li>\n<li><a class=\"reference internal\" href=\"#isfunction\">isfunction</a></li>\n<li><a class=\"reference internal\" href=\"#id53\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id54\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#maskflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MaskFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id55\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id56\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id57\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#ioiterator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IOIterator</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#basename-without-extension\">basename_without_extension</a></li>\n<li><a class=\"reference internal\" href=\"#common-start\">common_start</a></li>\n<li><a class=\"reference internal\" href=\"#concatenate-inputs\">concatenate_inputs</a></li>\n<li><a class=\"reference internal\" href=\"#connect-output-paths\">connect_output_paths</a></li>\n<li><a class=\"reference internal\" href=\"#id58\">get_args_default</a></li>\n<li><a class=\"reference internal\" href=\"#glob\">glob</a></li>\n<li><a class=\"reference internal\" href=\"#io-iterator\">io_iterator</a></li>\n<li><a class=\"reference internal\" href=\"#id59\">io_iterator_</a></li>\n<li><a class=\"reference internal\" href=\"#slash-to-under\">slash_to_under</a></li>\n<li><a class=\"reference internal\" href=\"#constrainedsphericaldeconvmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConstrainedSphericalDeconvModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#csaodfmodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsaOdfModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#diffusionkurtosismodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiffusionKurtosisModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstcsaflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstCSAFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstcsdflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstCSDFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstdkiflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstDkiFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstdtiflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstDtiFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstivimflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstIvimFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reconstmapmriflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ReconstMAPMRIFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tensormodel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id97\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ivimmodel\">IvimModel</a></li>\n<li><a class=\"reference internal\" href=\"#auto-response\">auto_response</a></li>\n<li><a class=\"reference internal\" href=\"#axial-diffusivity\">axial_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#color-fa\">color_fa</a></li>\n<li><a class=\"reference internal\" href=\"#fractional-anisotropy\">fractional_anisotropy</a></li>\n<li><a class=\"reference internal\" href=\"#geodesic-anisotropy\">geodesic_anisotropy</a></li>\n<li><a class=\"reference internal\" href=\"#get-mode\">get_mode</a></li>\n<li><a class=\"reference internal\" href=\"#id115\">gradient_table</a></li>\n<li><a class=\"reference internal\" href=\"#literal-eval\">literal_eval</a></li>\n<li><a class=\"reference internal\" href=\"#id116\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti-data\">load_nifti_data</a></li>\n<li><a class=\"reference internal\" href=\"#lower-triangular\">lower_triangular</a></li>\n<li><a class=\"reference internal\" href=\"#mean-diffusivity\">mean_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#nifti1-symmat\">nifti1_symmat</a></li>\n<li><a class=\"reference internal\" href=\"#peaks-from-model\">peaks_from_model</a></li>\n<li><a class=\"reference internal\" href=\"#peaks-to-niftis\">peaks_to_niftis</a></li>\n<li><a class=\"reference internal\" href=\"#radial-diffusivity\">radial_diffusivity</a></li>\n<li><a class=\"reference internal\" href=\"#id121\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id122\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-peaks\">save_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#split-dki-param\">split_dki_param</a></li>\n<li><a class=\"reference internal\" href=\"#id123\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#labelsbundlesflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LabelsBundlesFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#medianotsuflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MedianOtsuFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#recobundles\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundles</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#recobundlesflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RecoBundlesFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id130\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id131\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#median-otsu\">median_otsu</a></li>\n<li><a class=\"reference internal\" href=\"#id134\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#time\">time</a></li>\n<li><a class=\"reference internal\" href=\"#bundleanalysispopulationflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BundleAnalysisPopulationFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#linearmixedmodelsflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LinearMixedModelsFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#snrinccflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SNRinCCFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id136\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TensorModel</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id147\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#binary-dilation\">binary_dilation</a></li>\n<li><a class=\"reference internal\" href=\"#bounding-box\">bounding_box</a></li>\n<li><a class=\"reference internal\" href=\"#bundle-analysis\">bundle_analysis</a></li>\n<li><a class=\"reference internal\" href=\"#id153\">gradient_table</a></li>\n<li><a class=\"reference internal\" href=\"#id154\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id155\">median_otsu</a></li>\n<li><a class=\"reference internal\" href=\"#optional-package\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#id158\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id159\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#segment-from-cfa\">segment_from_cfa</a></li>\n<li><a class=\"reference internal\" href=\"#simple-plot\">simple_plot</a></li>\n<li><a class=\"reference internal\" href=\"#binarystoppingcriterion\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BinaryStoppingCriterion</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#closestpeakdirectiongetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClosestPeakDirectionGetter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cmcstoppingcriterion\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CmcStoppingCriterion</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#deterministicmaximumdirectiongetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeterministicMaximumDirectionGetter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#localfibertrackingpamflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocalFiberTrackingPAMFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#localtracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#pftrackingpamflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PFTrackingPAMFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#particlefilteringtracking\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ParticleFilteringTracking</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#probabilisticdirectiongetter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ProbabilisticDirectionGetter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#space\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Space</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#statefultractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#thresholdstoppingcriterion\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ThresholdStoppingCriterion</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id164\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id165\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-peaks\">load_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#save-tractogram\">save_tractogram</a></li>\n<li><a class=\"reference internal\" href=\"#horizonflow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HorizonFlow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id167\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#create-nifti-header\">create_nifti_header</a></li>\n<li><a class=\"reference internal\" href=\"#horizon\">horizon</a></li>\n<li><a class=\"reference internal\" href=\"#id169\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#id170\">load_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#load-tractogram\">load_tractogram</a></li>\n<li><a class=\"reference internal\" href=\"#pjoin\">pjoin</a></li>\n<li><a class=\"reference internal\" href=\"#id171\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Workflow</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id172\">io_iterator_</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.workflows", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}