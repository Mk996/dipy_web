{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.direction/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">direction</span></code>"}, "next": {"link": "../dipy.nn/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn</span></code>"}, "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.io\">\n<span id=\"io\"></span><h1><a class=\"reference external\" href=\"https://docs.python.org/3/library/io.html#module-io\" title=\"(in Python v3.9)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code></a><a class=\"headerlink\" href=\"#module-dipy.io\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.Dpy\" title=\"dipy.io.Dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a>(fname[,\u00a0mode,\u00a0compression])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.load_pickle\" title=\"dipy.io.load_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_pickle</span></code></a>(fname)</p></td>\n<td><p>Load object from pickle file <cite>fname</cite>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.orientation_from_string\" title=\"dipy.io.orientation_from_string\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orientation_from_string</span></code></a>(string_ornt)</p></td>\n<td><p>Returns an array representation of an ornt string</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.orientation_to_string\" title=\"dipy.io.orientation_to_string\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orientation_to_string</span></code></a>(ornt)</p></td>\n<td><p>Returns a string representation of a 3d ornt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.ornt_mapping\" title=\"dipy.io.ornt_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ornt_mapping</span></code></a>(ornt1,\u00a0ornt2)</p></td>\n<td><p>Calculates the mapping needing to get from orn1 to orn2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.read_bvals_bvecs\" title=\"dipy.io.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,\u00a0fbvecs)</p></td>\n<td><p>Read b-values and b-vectors from disk.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.read_bvec_file\" title=\"dipy.io.read_bvec_file\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvec_file</span></code></a>(filename[,\u00a0atol])</p></td>\n<td><p>Read gradient table information from a pair of files with extentions .bvec and .bval.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.reorient_on_axis\" title=\"dipy.io.reorient_on_axis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_on_axis</span></code></a>(input,\u00a0current_ornt,\u00a0new_ornt)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.reorient_vectors\" title=\"dipy.io.reorient_vectors\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_vectors</span></code></a>(input,\u00a0current_ornt,\u00a0new_ornt)</p></td>\n<td><p>Changes the orientation of a gradients or other vectors</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.save_pickle\" title=\"dipy.io.save_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_pickle</span></code></a>(fname,\u00a0dix)</p></td>\n<td><p>Save <cite>dix</cite> to <cite>fname</cite> as pickle.</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.io.bvectxt\">\n<span id=\"module-io-bvectxt\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.bvectxt</span></code><a class=\"headerlink\" href=\"#module-dipy.io.bvectxt\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.bvectxt.orientation_from_string\" title=\"dipy.io.bvectxt.orientation_from_string\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orientation_from_string</span></code></a>(string_ornt)</p></td>\n<td><p>Returns an array representation of an ornt string</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.bvectxt.orientation_to_string\" title=\"dipy.io.bvectxt.orientation_to_string\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orientation_to_string</span></code></a>(ornt)</p></td>\n<td><p>Returns a string representation of a 3d ornt</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.bvectxt.ornt_mapping\" title=\"dipy.io.bvectxt.ornt_mapping\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ornt_mapping</span></code></a>(ornt1,\u00a0ornt2)</p></td>\n<td><p>Calculates the mapping needing to get from orn1 to orn2</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.bvectxt.read_bvec_file\" title=\"dipy.io.bvectxt.read_bvec_file\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvec_file</span></code></a>(filename[,\u00a0atol])</p></td>\n<td><p>Read gradient table information from a pair of files with extentions .bvec and .bval.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.bvectxt.reorient_on_axis\" title=\"dipy.io.bvectxt.reorient_on_axis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_on_axis</span></code></a>(input,\u00a0current_ornt,\u00a0new_ornt)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.bvectxt.reorient_vectors\" title=\"dipy.io.bvectxt.reorient_vectors\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_vectors</span></code></a>(input,\u00a0current_ornt,\u00a0new_ornt)</p></td>\n<td><p>Changes the orientation of a gradients or other vectors</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.bvectxt.splitext\" title=\"dipy.io.bvectxt.splitext\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">splitext</span></code></a>(p)</p></td>\n<td><p>Split the extension from a pathname.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.dpy\">\n<span id=\"module-io-dpy\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.dpy</span></code><a class=\"headerlink\" href=\"#module-dipy.io.dpy\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A class for handling large tractography datasets.</p>\n<p>It is built using the h5py which in turn implement\nkey features of the HDF5 (hierachical data format) API <a class=\"reference internal\" href=\"#r223c5a1ac171-1\" id=\"id1\">[1]</a>.</p>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r223c5a1ac171-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id1\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://www.hdfgroup.org/HDF5/doc/H5.intro.html\">http://www.hdfgroup.org/HDF5/doc/H5.intro.html</a></p>\n</dd>\n</dl>\n</div>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy\" title=\"dipy.io.dpy.Dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a>(fname[,\u00a0mode,\u00a0compression])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.dpy.Streamlines\" title=\"dipy.io.dpy.Streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.gradients\">\n<span id=\"module-io-gradients\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.gradients</span></code><a class=\"headerlink\" href=\"#module-dipy.io.gradients\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.gradients.InTemporaryDirectory\" title=\"dipy.io.gradients.InTemporaryDirectory\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">InTemporaryDirectory</span></code></a>([suffix,\u00a0prefix,\u00a0dir])</p></td>\n<td><p>Create, return, and change directory to a temporary directory</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.gradients.read_bvals_bvecs\" title=\"dipy.io.gradients.read_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_bvals_bvecs</span></code></a>(fbvals,\u00a0fbvecs)</p></td>\n<td><p>Read b-values and b-vectors from disk.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.gradients.splitext\" title=\"dipy.io.gradients.splitext\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">splitext</span></code></a>(p)</p></td>\n<td><p>Split the extension from a pathname.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.image\">\n<span id=\"module-io-image\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.image</span></code><a class=\"headerlink\" href=\"#module-dipy.io.image\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.image.load_nifti\" title=\"dipy.io.image.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a>(fname[,\u00a0return_img,\u00a0\u2026])</p></td>\n<td><p>Load data and other information from a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.image.load_nifti_data\" title=\"dipy.io.image.load_nifti_data\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></a>(fname[,\u00a0as_ndarray])</p></td>\n<td><p>Load only the data array from a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.image.save_nifti\" title=\"dipy.io.image.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.image.save_qa_metric\" title=\"dipy.io.image.save_qa_metric\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_qa_metric</span></code></a>(fname,\u00a0xopt,\u00a0fopt)</p></td>\n<td><p>Save Quality Assurance metrics.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.peaks\">\n<span id=\"module-io-peaks\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.peaks</span></code><a class=\"headerlink\" href=\"#module-dipy.io.peaks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.PeaksAndMetrics\" title=\"dipy.io.peaks.PeaksAndMetrics\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">PeaksAndMetrics</span></code></a></p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.Sphere\" title=\"dipy.io.peaks.Sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a>([x,\u00a0y,\u00a0z,\u00a0theta,\u00a0phi,\u00a0xyz,\u00a0faces,\u00a0edges])</p></td>\n<td><p>Points on the unit sphere.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.load_peaks\" title=\"dipy.io.peaks.load_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_peaks</span></code></a>(fname[,\u00a0verbose])</p></td>\n<td><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.peaks_to_niftis\" title=\"dipy.io.peaks.peaks_to_niftis\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">peaks_to_niftis</span></code></a>(pam,\u00a0fname_shm,\u00a0fname_dirs,\u00a0\u2026)</p></td>\n<td><p>Save SH, directions, indices and values of peaks to Nifti.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.reshape_peaks_for_visualization\" title=\"dipy.io.peaks.reshape_peaks_for_visualization\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reshape_peaks_for_visualization</span></code></a>(peaks)</p></td>\n<td><p>Reshape peaks for visualization.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.save_nifti\" title=\"dipy.io.peaks.save_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_nifti</span></code></a>(fname,\u00a0data,\u00a0affine[,\u00a0hdr])</p></td>\n<td><p>Save a data array into a nifti file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.save_peaks\" title=\"dipy.io.peaks.save_peaks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_peaks</span></code></a>(fname,\u00a0pam[,\u00a0affine,\u00a0verbose])</p></td>\n<td><p>Save all important attributes of object PeaksAndMetrics in a PAM5 file (HDF5).</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.pickles\">\n<span id=\"module-io-pickles\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.pickles</span></code><a class=\"headerlink\" href=\"#module-dipy.io.pickles\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Load and save pickles</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.pickles.load_pickle\" title=\"dipy.io.pickles.load_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_pickle</span></code></a>(fname)</p></td>\n<td><p>Load object from pickle file <cite>fname</cite>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.pickles.save_pickle\" title=\"dipy.io.pickles.save_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_pickle</span></code></a>(fname,\u00a0dix)</p></td>\n<td><p>Save <cite>dix</cite> to <cite>fname</cite> as pickle.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.stateful_tractogram\">\n<span id=\"module-io-stateful-tractogram\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.stateful_tractogram</span></code><a class=\"headerlink\" href=\"#module-dipy.io.stateful_tractogram\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Origin\" title=\"dipy.io.stateful_tractogram.Origin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a></p></td>\n<td><p>Enum to simplify future change to convention</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArrayDict\" title=\"dipy.io.stateful_tractogram.PerArrayDict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code></a>([n_rows])</p></td>\n<td><p>Dictionary for which key access can do slicing on the values.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArraySequenceDict\" title=\"dipy.io.stateful_tractogram.PerArraySequenceDict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">PerArraySequenceDict</span></code></a>([n_rows])</p></td>\n<td><p>Dictionary for which key access can do slicing on the values.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Space\" title=\"dipy.io.stateful_tractogram.Space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Space</span></code></a></p></td>\n<td><p>Enum to simplify future change to convention</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram\" title=\"dipy.io.stateful_tractogram.StatefulTractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a>(streamlines,\u00a0reference,\u00a0space)</p></td>\n<td><p>Class for stateful representation of collections of streamlines Object designed to be identical no matter the file format (trk, tck, vtk, fib, dpy).</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Streamlines\" title=\"dipy.io.stateful_tractogram.Streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>([streamlines,\u00a0\u2026])</p></td>\n<td><p>Container for streamlines and their data information.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.product\" title=\"dipy.io.stateful_tractogram.product\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">product</span></code></a></p></td>\n<td><p>product(<a href=\"#id2\"><span class=\"problematic\" id=\"id3\">*</span></a>iterables, repeat=1) \u2013&gt; product object</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.apply_affine\" title=\"dipy.io.stateful_tractogram.apply_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apply_affine</span></code></a>(aff,\u00a0pts)</p></td>\n<td><p>Apply affine matrix <cite>aff</cite> to points <cite>pts</cite></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.bisect\" title=\"dipy.io.stateful_tractogram.bisect\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bisect</span></code></a></p></td>\n<td><p>bisect_right(a, x[, lo[, hi]]) -&gt; index</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.deepcopy\" title=\"dipy.io.stateful_tractogram.deepcopy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">deepcopy</span></code></a>(x[,\u00a0memo,\u00a0_nil])</p></td>\n<td><p>Deep copy operation on arbitrary Python objects.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.get_reference_info\" title=\"dipy.io.stateful_tractogram.get_reference_info\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_reference_info</span></code></a>(reference)</p></td>\n<td><p>Will compare the spatial attribute of 2 references</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.is_header_compatible\" title=\"dipy.io.stateful_tractogram.is_header_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_header_compatible</span></code></a>(reference_1,\u00a0reference_2)</p></td>\n<td><p>Will compare the spatial attribute of 2 references</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.is_reference_info_valid\" title=\"dipy.io.stateful_tractogram.is_reference_info_valid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_reference_info_valid</span></code></a>(affine,\u00a0dimensions,\u00a0\u2026)</p></td>\n<td><p>Validate basic data type and value of spatial attribute.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.set_sft_logger_level\" title=\"dipy.io.stateful_tractogram.set_sft_logger_level\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_sft_logger_level</span></code></a>(log_level)</p></td>\n<td><p>Change the logger of the StatefulTractogram to one on the following: DEBUG, INFO, WARNING, CRITICAL, ERROR</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.streamline\">\n<span id=\"module-io-streamline\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.streamline</span></code><a class=\"headerlink\" href=\"#module-dipy.io.streamline\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy\" title=\"dipy.io.streamline.Dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a>(fname[,\u00a0mode,\u00a0compression])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Origin\" title=\"dipy.io.streamline.Origin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a></p></td>\n<td><p>Enum to simplify future change to convention</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Space\" title=\"dipy.io.streamline.Space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Space</span></code></a></p></td>\n<td><p>Enum to simplify future change to convention</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram\" title=\"dipy.io.streamline.StatefulTractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a>(streamlines,\u00a0reference,\u00a0space)</p></td>\n<td><p>Class for stateful representation of collections of streamlines Object designed to be identical no matter the file format (trk, tck, vtk, fib, dpy).</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>([streamlines,\u00a0\u2026])</p></td>\n<td><p>Container for streamlines and their data information.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.create_tractogram_header\" title=\"dipy.io.streamline.create_tractogram_header\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_tractogram_header</span></code></a>(tractogram_type,\u00a0\u2026)</p></td>\n<td><p>Write a standard trk/tck header from spatial attribute</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.deepcopy\" title=\"dipy.io.streamline.deepcopy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">deepcopy</span></code></a>(x[,\u00a0memo,\u00a0_nil])</p></td>\n<td><p>Deep copy operation on arbitrary Python objects.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.detect_format\" title=\"dipy.io.streamline.detect_format\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">detect_format</span></code></a>(fileobj)</p></td>\n<td><p>Returns the StreamlinesFile object guessed from the file-like object.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.is_header_compatible\" title=\"dipy.io.streamline.is_header_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_header_compatible</span></code></a>(reference_1,\u00a0reference_2)</p></td>\n<td><p>Will compare the spatial attribute of 2 references</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.load_dpy\" title=\"dipy.io.streamline.load_dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_dpy</span></code></a>(filename,\u00a0reference[,\u00a0to_space,\u00a0\u2026])</p></td>\n<td><p>Load the stateful tractogram of the .dpy format</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.load_fib\" title=\"dipy.io.streamline.load_fib\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_fib</span></code></a>(filename,\u00a0reference[,\u00a0to_space,\u00a0\u2026])</p></td>\n<td><p>Load the stateful tractogram of the .fib format</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.load_generator\" title=\"dipy.io.streamline.load_generator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_generator</span></code></a>(ttype)</p></td>\n<td><p>Generate a loading function that performs a file extension check to restrict the user to a single file format.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.load_tck\" title=\"dipy.io.streamline.load_tck\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_tck</span></code></a>(filename,\u00a0reference[,\u00a0to_space,\u00a0\u2026])</p></td>\n<td><p>Load the stateful tractogram of the .tck format</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.load_tractogram\" title=\"dipy.io.streamline.load_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_tractogram</span></code></a>(filename,\u00a0reference[,\u00a0\u2026])</p></td>\n<td><p>Load the stateful tractogram from any format (trk, tck, vtk, fib, dpy)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.load_trk\" title=\"dipy.io.streamline.load_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_trk</span></code></a>(filename,\u00a0reference[,\u00a0to_space,\u00a0\u2026])</p></td>\n<td><p>Load the stateful tractogram of the .trk format</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.load_vtk\" title=\"dipy.io.streamline.load_vtk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_vtk</span></code></a>(filename,\u00a0reference[,\u00a0to_space,\u00a0\u2026])</p></td>\n<td><p>Load the stateful tractogram of the .vtk format</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.load_vtk_streamlines\" title=\"dipy.io.streamline.load_vtk_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_vtk_streamlines</span></code></a>(filename[,\u00a0to_lps])</p></td>\n<td><p>Load streamlines from vtk polydata.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.save_dpy\" title=\"dipy.io.streamline.save_dpy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_dpy</span></code></a>(sft,\u00a0filename[,\u00a0bbox_valid_check])</p></td>\n<td><p>Save the stateful tractogram of the .dpy format</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.save_fib\" title=\"dipy.io.streamline.save_fib\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_fib</span></code></a>(sft,\u00a0filename[,\u00a0bbox_valid_check])</p></td>\n<td><p>Save the stateful tractogram of the .fib format</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.save_generator\" title=\"dipy.io.streamline.save_generator\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_generator</span></code></a>(ttype)</p></td>\n<td><p>Generate a saving function that performs a file extension check to restrict the user to a single file format.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.save_tck\" title=\"dipy.io.streamline.save_tck\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_tck</span></code></a>(sft,\u00a0filename[,\u00a0bbox_valid_check])</p></td>\n<td><p>Save the stateful tractogram of the .tck format</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.save_tractogram\" title=\"dipy.io.streamline.save_tractogram\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_tractogram</span></code></a>(sft,\u00a0filename[,\u00a0\u2026])</p></td>\n<td><p>Save the stateful tractogram in any format (trk, tck, vtk, fib, dpy)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.save_trk\" title=\"dipy.io.streamline.save_trk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_trk</span></code></a>(sft,\u00a0filename[,\u00a0bbox_valid_check])</p></td>\n<td><p>Save the stateful tractogram of the .trk format</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.save_vtk\" title=\"dipy.io.streamline.save_vtk\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_vtk</span></code></a>(sft,\u00a0filename[,\u00a0bbox_valid_check])</p></td>\n<td><p>Save the stateful tractogram of the .vtk format</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.save_vtk_streamlines\" title=\"dipy.io.streamline.save_vtk_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_vtk_streamlines</span></code></a>(streamlines,\u00a0filename)</p></td>\n<td><p>Save streamlines as vtk polydata to a supported format file.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.utils\">\n<span id=\"module-io-utils\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.utils</span></code><a class=\"headerlink\" href=\"#module-dipy.io.utils\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Utility functions for file formats</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.Nifti1Image\" title=\"dipy.io.utils.Nifti1Image\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Nifti1Image</span></code></a>(dataobj,\u00a0affine[,\u00a0header,\u00a0\u2026])</p></td>\n<td><p>Class for single file NIfTI1 format image</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.create_nifti_header\" title=\"dipy.io.utils.create_nifti_header\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_nifti_header</span></code></a>(affine,\u00a0dimensions,\u00a0\u2026)</p></td>\n<td><p>Write a standard nifti header from spatial attribute</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.create_tractogram_header\" title=\"dipy.io.utils.create_tractogram_header\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_tractogram_header</span></code></a>(tractogram_type,\u00a0\u2026)</p></td>\n<td><p>Write a standard trk/tck header from spatial attribute</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.decfa\" title=\"dipy.io.utils.decfa\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">decfa</span></code></a>(img_orig[,\u00a0scale])</p></td>\n<td><p>Create a nifti-compliant directional-encoded color FA image.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.decfa_to_float\" title=\"dipy.io.utils.decfa_to_float\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">decfa_to_float</span></code></a>(img_orig)</p></td>\n<td><p>Convert a nifti-compliant directional-encoded color FA image into a nifti image with RGB encoded in floating point resolution.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.detect_format\" title=\"dipy.io.utils.detect_format\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">detect_format</span></code></a>(fileobj)</p></td>\n<td><p>Returns the StreamlinesFile object guessed from the file-like object.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.get_reference_info\" title=\"dipy.io.utils.get_reference_info\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_reference_info</span></code></a>(reference)</p></td>\n<td><p>Will compare the spatial attribute of 2 references</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.is_header_compatible\" title=\"dipy.io.utils.is_header_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_header_compatible</span></code></a>(reference_1,\u00a0reference_2)</p></td>\n<td><p>Will compare the spatial attribute of 2 references</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.is_reference_info_valid\" title=\"dipy.io.utils.is_reference_info_valid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_reference_info_valid</span></code></a>(affine,\u00a0dimensions,\u00a0\u2026)</p></td>\n<td><p>Validate basic data type and value of spatial attribute.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.make5d\" title=\"dipy.io.utils.make5d\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">make5d</span></code></a>(input)</p></td>\n<td><p>reshapes the input to have 5 dimensions, adds extra dimensions just before the last dimession</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.nifti1_symmat\" title=\"dipy.io.utils.nifti1_symmat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nifti1_symmat</span></code></a>(image_data,\u00a0*args,\u00a0**kwargs)</p></td>\n<td><p>Returns a Nifti1Image with a symmetric matrix intent</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.optional_package\" title=\"dipy.io.utils.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,\u00a0trip_msg])</p></td>\n<td><p>Return package-like thing and module setup for package <cite>name</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.read_img_arr_or_path\" title=\"dipy.io.utils.read_img_arr_or_path\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_img_arr_or_path</span></code></a>(data[,\u00a0affine])</p></td>\n<td><p>Helper function that handles inputs that can be paths, nifti img or arrays</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.save_buan_profiles_hdf5\" title=\"dipy.io.utils.save_buan_profiles_hdf5\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_buan_profiles_hdf5</span></code></a>(fname,\u00a0dt)</p></td>\n<td><p>Saves the given input dataframe to .h5 file</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.io.vtk\">\n<span id=\"module-io-vtk\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.vtk</span></code><a class=\"headerlink\" href=\"#module-dipy.io.vtk\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.vtk.load_polydata\" title=\"dipy.io.vtk.load_polydata\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_polydata</span></code></a>(file_name)</p></td>\n<td><p>Load a vtk polydata to a supported format file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.vtk.load_vtk_streamlines\" title=\"dipy.io.vtk.load_vtk_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_vtk_streamlines</span></code></a>(filename[,\u00a0to_lps])</p></td>\n<td><p>Load streamlines from vtk polydata.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.vtk.optional_package\" title=\"dipy.io.vtk.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,\u00a0trip_msg])</p></td>\n<td><p>Return package-like thing and module setup for package <cite>name</cite></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.vtk.save_polydata\" title=\"dipy.io.vtk.save_polydata\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_polydata</span></code></a>(polydata,\u00a0file_name[,\u00a0binary,\u00a0\u2026])</p></td>\n<td><p>Save a vtk polydata to a supported format file.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.vtk.save_vtk_streamlines\" title=\"dipy.io.vtk.save_vtk_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">save_vtk_streamlines</span></code></a>(streamlines,\u00a0filename)</p></td>\n<td><p>Save streamlines as vtk polydata to a supported format file.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.vtk.setup_module\" title=\"dipy.io.vtk.setup_module\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setup_module</span></code></a>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.vtk.transform_streamlines\" title=\"dipy.io.vtk.transform_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">transform_streamlines</span></code></a>(streamlines,\u00a0mat[,\u00a0\u2026])</p></td>\n<td><p>Apply affine transformation to streamlines</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"dpy\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.Dpy\" title=\"dipy.io.Dpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a><a class=\"headerlink\" href=\"#dpy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.Dpy\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">Dpy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">mode='r'</em>, <em class=\"sig-param\">compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.Dpy.read_track\" title=\"dipy.io.Dpy.read_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_track</span></code></a>()</p></td>\n<td><p>read one track each time</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.Dpy.read_tracks\" title=\"dipy.io.Dpy.read_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracks</span></code></a>()</p></td>\n<td><p>read the entire tractography</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.Dpy.read_tracksi\" title=\"dipy.io.Dpy.read_tracksi\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracksi</span></code></a>(indices)</p></td>\n<td><p>read tracks with specific indices</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.Dpy.write_track\" title=\"dipy.io.Dpy.write_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_track</span></code></a>(track)</p></td>\n<td><p>write on track each time</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.Dpy.write_tracks\" title=\"dipy.io.Dpy.write_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_tracks</span></code></a>(tracks)</p></td>\n<td><p>write many tracks together</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 52%\" />\n<col style=\"width: 48%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>close</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>version</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">mode='r'</em>, <em class=\"sig-param\">compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Advanced storage system for tractography based on HDF5</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str, full filename</span></dt><dd></dd>\n<dt><strong>mode</strong><span class=\"classifier\">\u2018r\u2019 read</span></dt><dd><p>\u2018w\u2019 write\n\u2018r+\u2019 read and write only if file already exists</p>\n</dd>\n<dt><strong>compression</strong><span class=\"classifier\">0 no compression to 9 maximum compression</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span> <span class=\"c1\">#temp file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.dpy</span> <span class=\"k\">import</span> <span class=\"n\">Dpy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">dpy_example</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fname</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;.dpy&#39;</span><span class=\"c1\">#add correct extension</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_tracksi</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span> <span class=\"c1\">#delete file from disk</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpy_example</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.close\">\n<code class=\"sig-name descname\">close</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.close\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.read_track\">\n<code class=\"sig-name descname\">read_track</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.read_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read one track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.read_tracks\">\n<code class=\"sig-name descname\">read_tracks</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.read_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read the entire tractography</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.read_tracksi\">\n<code class=\"sig-name descname\">read_tracksi</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">indices</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.read_tracksi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read tracks with specific indices</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.version\">\n<code class=\"sig-name descname\">version</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.version\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.write_track\">\n<code class=\"sig-name descname\">write_track</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">track</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.write_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write on track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.Dpy.write_tracks\">\n<code class=\"sig-name descname\">write_tracks</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tracks</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.Dpy.write_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write many tracks together</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-pickle\">\n<h3>load_pickle<a class=\"headerlink\" href=\"#load-pickle\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.load_pickle\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">load_pickle</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.load_pickle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load object from pickle file <cite>fname</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>filename to load dict or other python object</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>dix</strong><span class=\"classifier\">object</span></dt><dd><p>dictionary or other object</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>dipy.io.pickles.save_pickle</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"orientation-from-string\">\n<h3>orientation_from_string<a class=\"headerlink\" href=\"#orientation-from-string\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.orientation_from_string\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">orientation_from_string</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">string_ornt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.orientation_from_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an array representation of an ornt string</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"orientation-to-string\">\n<h3>orientation_to_string<a class=\"headerlink\" href=\"#orientation-to-string\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.orientation_to_string\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">orientation_to_string</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ornt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.orientation_to_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a string representation of a 3d ornt</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ornt-mapping\">\n<h3>ornt_mapping<a class=\"headerlink\" href=\"#ornt-mapping\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.ornt_mapping\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">ornt_mapping</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ornt1</em>, <em class=\"sig-param\">ornt2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.ornt_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the mapping needing to get from orn1 to orn2</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-bvals-bvecs\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#read-bvals-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.read_bvals_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fbvals</em>, <em class=\"sig-param\">fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fbvals</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong><span class=\"classifier\">str</span></dt><dd><p>Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">array, (N,) or None</span></dt><dd></dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">array, (N, 3) or None</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-bvec-file\">\n<h3>read_bvec_file<a class=\"headerlink\" href=\"#read-bvec-file\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.read_bvec_file\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">read_bvec_file</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">atol=0.001</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.read_bvec_file\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read gradient table information from a pair of files with extentions\n.bvec and .bval. The bval file should have one row of values\nrepresenting the bvalues of each volume in the dwi data set. The bvec\nfile should have three rows, where the rows are the x, y, and z\ncomponents of the normalized gradient direction for each of the\nvolumes.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename :</strong></dt><dd><p>The path to the either the bvec or bval file</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>The tolorance used to check all the gradient directions are\nnormalized. Defult is .001</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reorient-on-axis\">\n<h3>reorient_on_axis<a class=\"headerlink\" href=\"#reorient-on-axis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.reorient_on_axis\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">reorient_on_axis</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input</em>, <em class=\"sig-param\">current_ornt</em>, <em class=\"sig-param\">new_ornt</em>, <em class=\"sig-param\">axis=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.reorient_on_axis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"reorient-vectors\">\n<h3>reorient_vectors<a class=\"headerlink\" href=\"#reorient-vectors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.reorient_vectors\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">reorient_vectors</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input</em>, <em class=\"sig-param\">current_ornt</em>, <em class=\"sig-param\">new_ornt</em>, <em class=\"sig-param\">axis=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.reorient_vectors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Changes the orientation of a gradients or other vectors</p>\n<p>Moves vectors, storted along axis, from current_ornt to new_ornt. For\nexample the vector [x, y, z] in \u201cRAS\u201d will be [-x, -y, z] in \u201cLPS\u201d.</p>\n<p>R: Right\nA: Anterior\nS: Superior\nL: Left\nP: Posterior\nI: Inferior</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;asr&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([[1, 1, 1],</span>\n<span class=\"go\">       [2, 3, 1]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lps&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1,  1],</span>\n<span class=\"go\">       [-1, -2,  3]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvec</span> <span class=\"o\">=</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">bvec</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lps&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1],</span>\n<span class=\"go\">       [-1, -2],</span>\n<span class=\"go\">       [ 1,  3]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">bvec</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lsp&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1],</span>\n<span class=\"go\">       [ 1,  3],</span>\n<span class=\"go\">       [-1, -2]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-pickle\">\n<h3>save_pickle<a class=\"headerlink\" href=\"#save-pickle\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.save_pickle\">\n<code class=\"sig-prename descclassname\">dipy.io.</code><code class=\"sig-name descname\">save_pickle</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">dix</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.save_pickle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save <cite>dix</cite> to <cite>fname</cite> as pickle.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>filename to save object e.g. a dictionary</p>\n</dd>\n<dt><strong>dix</strong><span class=\"classifier\">str</span></dt><dd><p>dictionary or other object</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.io.pickles.load_pickle\" title=\"dipy.io.pickles.load_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dipy.io.pickles.load_pickle</span></code></a></dt><dd></dd>\n</dl>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span> <span class=\"c1\"># make temporary file (opened, attached to fh)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:{</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">save_pickle</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"n\">load_pickle</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We remove the temporary file we created for neatness</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span> <span class=\"c1\"># the file is still open, we need to close the fh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id4\">\n<h3>orientation_from_string<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.orientation_from_string\">\n<code class=\"sig-prename descclassname\">dipy.io.bvectxt.</code><code class=\"sig-name descname\">orientation_from_string</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">string_ornt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.orientation_from_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an array representation of an ornt string</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id5\">\n<h3>orientation_to_string<a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.orientation_to_string\">\n<code class=\"sig-prename descclassname\">dipy.io.bvectxt.</code><code class=\"sig-name descname\">orientation_to_string</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ornt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.orientation_to_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a string representation of a 3d ornt</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id6\">\n<h3>ornt_mapping<a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.ornt_mapping\">\n<code class=\"sig-prename descclassname\">dipy.io.bvectxt.</code><code class=\"sig-name descname\">ornt_mapping</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ornt1</em>, <em class=\"sig-param\">ornt2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.ornt_mapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculates the mapping needing to get from orn1 to orn2</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id7\">\n<h3>read_bvec_file<a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.read_bvec_file\">\n<code class=\"sig-prename descclassname\">dipy.io.bvectxt.</code><code class=\"sig-name descname\">read_bvec_file</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">atol=0.001</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.read_bvec_file\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read gradient table information from a pair of files with extentions\n.bvec and .bval. The bval file should have one row of values\nrepresenting the bvalues of each volume in the dwi data set. The bvec\nfile should have three rows, where the rows are the x, y, and z\ncomponents of the normalized gradient direction for each of the\nvolumes.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename :</strong></dt><dd><p>The path to the either the bvec or bval file</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>The tolorance used to check all the gradient directions are\nnormalized. Defult is .001</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id8\">\n<h3>reorient_on_axis<a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.reorient_on_axis\">\n<code class=\"sig-prename descclassname\">dipy.io.bvectxt.</code><code class=\"sig-name descname\">reorient_on_axis</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input</em>, <em class=\"sig-param\">current_ornt</em>, <em class=\"sig-param\">new_ornt</em>, <em class=\"sig-param\">axis=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.reorient_on_axis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"id9\">\n<h3>reorient_vectors<a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.reorient_vectors\">\n<code class=\"sig-prename descclassname\">dipy.io.bvectxt.</code><code class=\"sig-name descname\">reorient_vectors</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input</em>, <em class=\"sig-param\">current_ornt</em>, <em class=\"sig-param\">new_ornt</em>, <em class=\"sig-param\">axis=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.reorient_vectors\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Changes the orientation of a gradients or other vectors</p>\n<p>Moves vectors, storted along axis, from current_ornt to new_ornt. For\nexample the vector [x, y, z] in \u201cRAS\u201d will be [-x, -y, z] in \u201cLPS\u201d.</p>\n<p>R: Right\nA: Anterior\nS: Superior\nL: Left\nP: Posterior\nI: Inferior</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;asr&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([[1, 1, 1],</span>\n<span class=\"go\">       [2, 3, 1]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lps&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1,  1],</span>\n<span class=\"go\">       [-1, -2,  3]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvec</span> <span class=\"o\">=</span> <span class=\"n\">gtab</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">bvec</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lps&#39;</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1],</span>\n<span class=\"go\">       [-1, -2],</span>\n<span class=\"go\">       [ 1,  3]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reorient_vectors</span><span class=\"p\">(</span><span class=\"n\">bvec</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ras&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lsp&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-1, -1],</span>\n<span class=\"go\">       [ 1,  3],</span>\n<span class=\"go\">       [-1, -2]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"splitext\">\n<h3>splitext<a class=\"headerlink\" href=\"#splitext\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.bvectxt.splitext\">\n<code class=\"sig-prename descclassname\">dipy.io.bvectxt.</code><code class=\"sig-name descname\">splitext</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">p</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.bvectxt.splitext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Split the extension from a pathname.</p>\n<p>Extension is everything from the last dot to the end, ignoring\nleading dots.  Returns \u201c(root, ext)\u201d; ext may be empty.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id10\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy\" title=\"dipy.io.dpy.Dpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a><a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.dpy.Dpy\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.dpy.</code><code class=\"sig-name descname\">Dpy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">mode='r'</em>, <em class=\"sig-param\">compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.read_track\" title=\"dipy.io.dpy.Dpy.read_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_track</span></code></a>()</p></td>\n<td><p>read one track each time</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.read_tracks\" title=\"dipy.io.dpy.Dpy.read_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracks</span></code></a>()</p></td>\n<td><p>read the entire tractography</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.read_tracksi\" title=\"dipy.io.dpy.Dpy.read_tracksi\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracksi</span></code></a>(indices)</p></td>\n<td><p>read tracks with specific indices</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.write_track\" title=\"dipy.io.dpy.Dpy.write_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_track</span></code></a>(track)</p></td>\n<td><p>write on track each time</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.dpy.Dpy.write_tracks\" title=\"dipy.io.dpy.Dpy.write_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_tracks</span></code></a>(tracks)</p></td>\n<td><p>write many tracks together</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 52%\" />\n<col style=\"width: 48%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>close</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>version</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">mode='r'</em>, <em class=\"sig-param\">compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Advanced storage system for tractography based on HDF5</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str, full filename</span></dt><dd></dd>\n<dt><strong>mode</strong><span class=\"classifier\">\u2018r\u2019 read</span></dt><dd><p>\u2018w\u2019 write\n\u2018r+\u2019 read and write only if file already exists</p>\n</dd>\n<dt><strong>compression</strong><span class=\"classifier\">0 no compression to 9 maximum compression</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span> <span class=\"c1\">#temp file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.dpy</span> <span class=\"k\">import</span> <span class=\"n\">Dpy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">dpy_example</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fname</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;.dpy&#39;</span><span class=\"c1\">#add correct extension</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_tracksi</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span> <span class=\"c1\">#delete file from disk</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpy_example</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.close\">\n<code class=\"sig-name descname\">close</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.close\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.read_track\">\n<code class=\"sig-name descname\">read_track</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.read_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read one track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.read_tracks\">\n<code class=\"sig-name descname\">read_tracks</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.read_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read the entire tractography</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.read_tracksi\">\n<code class=\"sig-name descname\">read_tracksi</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">indices</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.read_tracksi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read tracks with specific indices</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.version\">\n<code class=\"sig-name descname\">version</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.version\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.write_track\">\n<code class=\"sig-name descname\">write_track</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">track</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.write_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write on track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.dpy.Dpy.write_tracks\">\n<code class=\"sig-name descname\">write_tracks</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tracks</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.dpy.Dpy.write_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write many tracks together</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"streamlines\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.dpy.Streamlines\" title=\"dipy.io.dpy.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><a class=\"headerlink\" href=\"#streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.io.dpy.Streamlines\">\n<code class=\"sig-prename descclassname\">dipy.io.dpy.</code><code class=\"sig-name descname\">Streamlines</code><a class=\"headerlink\" href=\"#dipy.io.dpy.Streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"intemporarydirectory\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.gradients.InTemporaryDirectory\" title=\"dipy.io.gradients.InTemporaryDirectory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InTemporaryDirectory</span></code></a><a class=\"headerlink\" href=\"#intemporarydirectory\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.gradients.InTemporaryDirectory\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.gradients.</code><code class=\"sig-name descname\">InTemporaryDirectory</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">suffix=''</em>, <em class=\"sig-param\">prefix='tmp'</em>, <em class=\"sig-param\">dir=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.gradients.InTemporaryDirectory\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.tmpdirs.TemporaryDirectory</span></code></p>\n<p>Create, return, and change directory to a temporary directory</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">my_cwd</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">InTemporaryDirectory</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tmpdir</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.txt&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wt&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s1\">&#39;some text&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.txt&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test.txt&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">tmpdir</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getcwd</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">my_cwd</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 52%\" />\n<col style=\"width: 48%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>cleanup</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.gradients.InTemporaryDirectory.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">suffix=''</em>, <em class=\"sig-param\">prefix='tmp'</em>, <em class=\"sig-param\">dir=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.gradients.InTemporaryDirectory.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id11\">\n<h3>read_bvals_bvecs<a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.gradients.read_bvals_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.io.gradients.</code><code class=\"sig-name descname\">read_bvals_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fbvals</em>, <em class=\"sig-param\">fbvecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.gradients.read_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read b-values and b-vectors from disk.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fbvals</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to file with b-values. None to not read bvals.</p>\n</dd>\n<dt><strong>fbvecs</strong><span class=\"classifier\">str</span></dt><dd><p>Full path of file with b-vectors. None to not read bvecs.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">array, (N,) or None</span></dt><dd></dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">array, (N, 3) or None</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Files can be either \u2018.bvals\u2019/\u2019.bvecs\u2019 or \u2018.txt\u2019 or \u2018.npy\u2019 (containing\narrays stored with the appropriate values).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id12\">\n<h3>splitext<a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.gradients.splitext\">\n<code class=\"sig-prename descclassname\">dipy.io.gradients.</code><code class=\"sig-name descname\">splitext</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">p</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.gradients.splitext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Split the extension from a pathname.</p>\n<p>Extension is everything from the last dot to the end, ignoring\nleading dots.  Returns \u201c(root, ext)\u201d; ext may be empty.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti\">\n<h3>load_nifti<a class=\"headerlink\" href=\"#load-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.image.load_nifti\">\n<code class=\"sig-prename descclassname\">dipy.io.image.</code><code class=\"sig-name descname\">load_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">return_img=False</em>, <em class=\"sig-param\">return_voxsize=False</em>, <em class=\"sig-param\">return_coords=False</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.image.load_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load data and other information from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to a nifti file.</p>\n</dd>\n<dt><strong>return_img</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nibabel nifti img object. Default: False</p>\n</dd>\n<dt><strong>return_voxsize: bool, optional</strong></dt><dd><p>Whether to return the nifti header zooms. Default: False</p>\n</dd>\n<dt><strong>return_coords</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to return the nifti header aff2axcodes. Default: False</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>A tuple, with (at the most, if all keyword args are set to True):</dt><dd></dd>\n<dt>(data, img.affine, img, vox_size, nib.aff2axcodes(img.affine))</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.io.image.load_nifti_data\" title=\"dipy.io.image.load_nifti_data\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti_data</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-nifti-data\">\n<h3>load_nifti_data<a class=\"headerlink\" href=\"#load-nifti-data\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.image.load_nifti_data\">\n<code class=\"sig-prename descclassname\">dipy.io.image.</code><code class=\"sig-name descname\">load_nifti_data</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">as_ndarray=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.image.load_nifti_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load only the data array from a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>Full path to the file.</p>\n</dd>\n<dt><strong>as_ndarray: bool, optional</strong></dt><dd><p>convert nibabel ArrayProxy to a numpy.ndarray.\nIf you want to save memory and delay this casting, just turn this\noption to False (default: True)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>data: np.ndarray or nib.ArrayProxy</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.io.image.load_nifti\" title=\"dipy.io.image.load_nifti\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load_nifti</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-nifti\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#save-nifti\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.image.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.io.image.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.image.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-qa-metric\">\n<h3>save_qa_metric<a class=\"headerlink\" href=\"#save-qa-metric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.image.save_qa_metric\">\n<code class=\"sig-prename descclassname\">dipy.io.image.</code><code class=\"sig-name descname\">save_qa_metric</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">xopt</em>, <em class=\"sig-param\">fopt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.image.save_qa_metric\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save Quality Assurance metrics.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname: string</strong></dt><dd><p>File name to save the metric values.</p>\n</dd>\n<dt><strong>xopt: numpy array</strong></dt><dd><p>The metric containing the\noptimal parameters for\nimage registration.</p>\n</dd>\n<dt><strong>fopt: int</strong></dt><dd><p>The distance between the registered images.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaksandmetrics\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.peaks.PeaksAndMetrics\" title=\"dipy.io.peaks.PeaksAndMetrics\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PeaksAndMetrics</span></code></a><a class=\"headerlink\" href=\"#peaksandmetrics\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.peaks.PeaksAndMetrics\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.peaks.</code><code class=\"sig-name descname\">PeaksAndMetrics</code><a class=\"headerlink\" href=\"#dipy.io.peaks.PeaksAndMetrics\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.reconst.eudx_direction_getter.EuDXDirectionGetter</span></code></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>ang_thr</strong></dt><dd></dd>\n<dt><strong>qa_thr</strong></dt><dd></dd>\n<dt><strong>total_weight</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">initial_direction</span></code></p></td>\n<td><p>The best starting directions for fiber tracking from point</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 63%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_direction</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.PeaksAndMetrics.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.PeaksAndMetrics.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sphere\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.peaks.Sphere\" title=\"dipy.io.peaks.Sphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a><a class=\"headerlink\" href=\"#sphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.peaks.Sphere\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.peaks.</code><code class=\"sig-name descname\">Sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Points on the unit sphere.</p>\n<p>The sphere can be constructed using one of three conventions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"n\">xyz</span><span class=\"p\">)</span>\n<span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x, y, z</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>theta, phi</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as spherical coordinates.  Theta and phi are the inclination\nand azimuth angles respectively.</p>\n</dd>\n<dt><strong>xyz</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>faces</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Indices into vertices that form triangular faces.  If unspecified,\nthe faces are computed using a Delaunay triangulation.</p>\n</dd>\n<dt><strong>edges</strong><span class=\"classifier\">(N, 2) ndarray</span></dt><dd><p>Edges between vertices.  If unspecified, the edges are\nderived from the faces.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Attributes</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>x</strong></dt><dd></dd>\n<dt><strong>y</strong></dt><dd></dd>\n<dt><strong>z</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.Sphere.find_closest\" title=\"dipy.io.peaks.Sphere.find_closest\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">find_closest</span></code></a>(xyz)</p></td>\n<td><p>Find the index of the vertex in the Sphere closest to the input vector</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.peaks.Sphere.subdivide\" title=\"dipy.io.peaks.Sphere.subdivide\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">subdivide</span></code></a>([n])</p></td>\n<td><p>Subdivides each face of the sphere into four new faces.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 55%\" />\n<col style=\"width: 45%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>edges</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>faces</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>vertices</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.edges\">\n<code class=\"sig-name descname\">edges</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.faces\">\n<code class=\"sig-name descname\">faces</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.faces\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.find_closest\">\n<code class=\"sig-name descname\">find_closest</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">xyz</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.find_closest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the index of the vertex in the Sphere closest to the input vector</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xyz</strong><span class=\"classifier\">array-like, 3 elements</span></dt><dd><p>A unit vector</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>idx</strong><span class=\"classifier\">int</span></dt><dd><p>The index into the Sphere.vertices array that gives the closest\nvertex (in angle).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.subdivide\">\n<code class=\"sig-name descname\">subdivide</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">n=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.subdivide\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subdivides each face of the sphere into four new faces.</p>\n<p>New vertices are created at a, b, and c. Then each face [x, y, z] is\ndivided into faces [x, a, c], [y, a, b], [z, b, c], and [a, b, c].</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>      <span class=\"n\">y</span>\n      <span class=\"o\">/</span>\\\n     <span class=\"o\">/</span>  \\\n   <span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">____</span>\\<span class=\"n\">b</span>\n   <span class=\"o\">/</span>\\    <span class=\"o\">/</span>\\\n  <span class=\"o\">/</span>  \\  <span class=\"o\">/</span>  \\\n <span class=\"o\">/</span><span class=\"n\">____</span>\\<span class=\"o\">/</span><span class=\"n\">____</span>\\\n<span class=\"n\">x</span>      <span class=\"n\">c</span>     <span class=\"n\">z</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>n</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The number of subdivisions to preform.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_sphere</strong><span class=\"classifier\">Sphere</span></dt><dd><p>The subdivided sphere.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.vertices\">\n<code class=\"sig-name descname\">vertices</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.vertices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.x\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">x</code><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.x\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.y\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">y</code><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.y\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.peaks.Sphere.z\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">z</code><a class=\"headerlink\" href=\"#dipy.io.peaks.Sphere.z\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-peaks\">\n<h3>load_peaks<a class=\"headerlink\" href=\"#load-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.load_peaks\">\n<code class=\"sig-prename descclassname\">dipy.io.peaks.</code><code class=\"sig-name descname\">load_peaks</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.load_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a PeaksAndMetrics HDF5 file (PAM5)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">string</span></dt><dd><p>Filename of PAM5 file.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool</span></dt><dd><p>Print summary information about the loaded file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>pam</strong><span class=\"classifier\">PeaksAndMetrics object</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"peaks-to-niftis\">\n<h3>peaks_to_niftis<a class=\"headerlink\" href=\"#peaks-to-niftis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.peaks_to_niftis\">\n<code class=\"sig-prename descclassname\">dipy.io.peaks.</code><code class=\"sig-name descname\">peaks_to_niftis</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">pam</em>, <em class=\"sig-param\">fname_shm</em>, <em class=\"sig-param\">fname_dirs</em>, <em class=\"sig-param\">fname_values</em>, <em class=\"sig-param\">fname_indices</em>, <em class=\"sig-param\">fname_gfa</em>, <em class=\"sig-param\">reshape_dirs=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.peaks_to_niftis\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save SH, directions, indices and values of peaks to Nifti.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reshape-peaks-for-visualization\">\n<h3>reshape_peaks_for_visualization<a class=\"headerlink\" href=\"#reshape-peaks-for-visualization\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.reshape_peaks_for_visualization\">\n<code class=\"sig-prename descclassname\">dipy.io.peaks.</code><code class=\"sig-name descname\">reshape_peaks_for_visualization</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">peaks</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.reshape_peaks_for_visualization\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reshape peaks for visualization.</p>\n<p>Reshape and convert to float32 a set of peaks for visualisation with mrtrix\nor the fibernavigator.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>peaks: nd array (\u2026, N, 3) or PeaksAndMetrics object</strong></dt><dd><p>The peaks to be reshaped and converted to float32.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>peaks</strong><span class=\"classifier\">nd array (\u2026, 3*N)</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id13\">\n<h3>save_nifti<a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.save_nifti\">\n<code class=\"sig-prename descclassname\">dipy.io.peaks.</code><code class=\"sig-name descname\">save_nifti</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">hdr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.save_nifti\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a data array into a nifti file.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>The full path to the file to be saved.</p>\n</dd>\n<dt><strong>data</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The array with the data to save.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array</span></dt><dd><p>The affine transform associated with the file.</p>\n</dd>\n<dt><strong>hdr</strong><span class=\"classifier\">nifti header, optional</span></dt><dd><p>May contain additional information to store in the file header.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-peaks\">\n<h3>save_peaks<a class=\"headerlink\" href=\"#save-peaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.peaks.save_peaks\">\n<code class=\"sig-prename descclassname\">dipy.io.peaks.</code><code class=\"sig-name descname\">save_peaks</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">pam</em>, <em class=\"sig-param\">affine=None</em>, <em class=\"sig-param\">verbose=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.peaks.save_peaks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save all important attributes of object PeaksAndMetrics in a PAM5 file\n(HDF5).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">string</span></dt><dd><p>Filename of PAM5 file</p>\n</dd>\n<dt><strong>pam</strong><span class=\"classifier\">PeaksAndMetrics</span></dt><dd><p>Object holding peak_dirs, shm_coeffs and other attributes</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">array</span></dt><dd><p>The 4x4 matrix transforming the date from native to world coordinates.\nPeaksAndMetrics should have that attribute but if not it can be\nprovided here. Default None.</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">bool</span></dt><dd><p>Print summary information about the saved file.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id14\">\n<h3>load_pickle<a class=\"headerlink\" href=\"#id14\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.pickles.load_pickle\">\n<code class=\"sig-prename descclassname\">dipy.io.pickles.</code><code class=\"sig-name descname\">load_pickle</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.pickles.load_pickle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load object from pickle file <cite>fname</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>filename to load dict or other python object</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>dix</strong><span class=\"classifier\">object</span></dt><dd><p>dictionary or other object</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>dipy.io.pickles.save_pickle</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id15\">\n<h3>save_pickle<a class=\"headerlink\" href=\"#id15\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.pickles.save_pickle\">\n<code class=\"sig-prename descclassname\">dipy.io.pickles.</code><code class=\"sig-name descname\">save_pickle</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">dix</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.pickles.save_pickle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save <cite>dix</cite> to <cite>fname</cite> as pickle.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str</span></dt><dd><p>filename to save object e.g. a dictionary</p>\n</dd>\n<dt><strong>dix</strong><span class=\"classifier\">str</span></dt><dd><p>dictionary or other object</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.io.pickles.load_pickle\" title=\"dipy.io.pickles.load_pickle\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dipy.io.pickles.load_pickle</span></code></a></dt><dd></dd>\n</dl>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span> <span class=\"c1\"># make temporary file (opened, attached to fh)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">:{</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">save_pickle</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d2</span><span class=\"o\">=</span><span class=\"n\">load_pickle</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We remove the temporary file we created for neatness</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span> <span class=\"c1\"># the file is still open, we need to close the fh</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"origin\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Origin\" title=\"dipy.io.stateful_tractogram.Origin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a><a class=\"headerlink\" href=\"#origin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.stateful_tractogram.Origin\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">Origin</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/enum.html#enum.Enum\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">enum.Enum</span></code></a></p>\n<p>Enum to simplify future change to convention</p>\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Origin.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Origin.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.stateful_tractogram.Origin.NIFTI\">\n<code class=\"sig-name descname\">NIFTI</code><em class=\"property\"> = 'center'</em><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Origin.NIFTI\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.stateful_tractogram.Origin.TRACKVIS\">\n<code class=\"sig-name descname\">TRACKVIS</code><em class=\"property\"> = 'corner'</em><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Origin.TRACKVIS\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"perarraydict\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArrayDict\" title=\"dipy.io.stateful_tractogram.PerArrayDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code></a><a class=\"headerlink\" href=\"#perarraydict\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.stateful_tractogram.PerArrayDict\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">PerArrayDict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">n_rows=0</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.PerArrayDict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.tractogram.SliceableDataDict</span></code></p>\n<p>Dictionary for which key access can do slicing on the values.</p>\n<p>This container behaves like a standard dictionary but extends key access to\nallow keys for key access to be indices slicing into the contained ndarray\nvalues. The elements must also be ndarrays.</p>\n<p>In addition, it makes sure the amount of data contained in those ndarrays\nmatches the number of streamlines given at the instantiation of this\ninstance.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>n_rows</strong><span class=\"classifier\">None or int, optional</span></dt><dd><p>Number of rows per value in each key, value pair or None for not\nspecified.</p>\n</dd>\n<dt><strong>*args :</strong></dt><dd></dd>\n<dt><strong>**kwargs :</strong></dt><dd><p>Positional and keyword arguments, passed straight through the <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>\nconstructor.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clear</span></code>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArrayDict.extend\" title=\"dipy.io.stateful_tractogram.PerArrayDict.extend\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extend</span></code></a>(other)</p></td>\n<td><p>Appends the elements of another <a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArrayDict\" title=\"dipy.io.stateful_tractogram.PerArrayDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code></a>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get</span></code>(k[,d])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">items</span></code>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">keys</span></code>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">pop</span></code>(k[,d])</p></td>\n<td><p>If key is not found, d is returned if given, otherwise KeyError is raised.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">popitem</span></code>()</p></td>\n<td><p>as a 2-tuple; but raise KeyError if D is empty.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setdefault</span></code>(k[,d])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code>([E,\u00a0]**F)</p></td>\n<td><p>If E present and has a .keys() method, does:     for k in E: D[k] = E[k] If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v In either case, this is followed by: for k, v in F.items(): D[k] = v</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">values</span></code>()</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.PerArrayDict.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">n_rows=0</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.PerArrayDict.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.PerArrayDict.extend\">\n<code class=\"sig-name descname\">extend</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">other</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.PerArrayDict.extend\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Appends the elements of another <a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArrayDict\" title=\"dipy.io.stateful_tractogram.PerArrayDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code></a>.</p>\n<p>That is, for each entry in this dictionary, we append the elements\ncoming from the other dictionary at the corresponding entry.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>other</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArrayDict\" title=\"dipy.io.stateful_tractogram.PerArrayDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code></a> object</span></dt><dd><p>Its data will be appended to the data of this dictionary.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The keys in both dictionaries must be the same.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"perarraysequencedict\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArraySequenceDict\" title=\"dipy.io.stateful_tractogram.PerArraySequenceDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArraySequenceDict</span></code></a><a class=\"headerlink\" href=\"#perarraysequencedict\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.stateful_tractogram.PerArraySequenceDict\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">PerArraySequenceDict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">n_rows=0</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.PerArraySequenceDict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.tractogram.PerArrayDict</span></code></p>\n<p>Dictionary for which key access can do slicing on the values.</p>\n<p>This container behaves like a standard dictionary but extends key access to\nallow keys for key access to be indices slicing into the contained ndarray\nvalues.  The elements must also be <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>.</p>\n<p>In addition, it makes sure the amount of data contained in those array\nsequences matches the number of elements given at the instantiation\nof the instance.</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">clear</span></code>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extend</span></code>(other)</p></td>\n<td><p>Appends the elements of another <a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArrayDict\" title=\"dipy.io.stateful_tractogram.PerArrayDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code></a>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get</span></code>(k[,d])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">items</span></code>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">keys</span></code>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">pop</span></code>(k[,d])</p></td>\n<td><p>If key is not found, d is returned if given, otherwise KeyError is raised.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">popitem</span></code>()</p></td>\n<td><p>as a 2-tuple; but raise KeyError if D is empty.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">setdefault</span></code>(k[,d])</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update</span></code>([E,\u00a0]**F)</p></td>\n<td><p>If E present and has a .keys() method, does:     for k in E: D[k] = E[k] If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v In either case, this is followed by: for k, v in F.items(): D[k] = v</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">values</span></code>()</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.PerArraySequenceDict.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">n_rows=0</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.PerArraySequenceDict.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"space\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Space\" title=\"dipy.io.stateful_tractogram.Space\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Space</span></code></a><a class=\"headerlink\" href=\"#space\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.stateful_tractogram.Space\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">Space</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/enum.html#enum.Enum\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">enum.Enum</span></code></a></p>\n<p>Enum to simplify future change to convention</p>\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Space.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Space.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.stateful_tractogram.Space.RASMM\">\n<code class=\"sig-name descname\">RASMM</code><em class=\"property\"> = 'rasmm'</em><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Space.RASMM\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.stateful_tractogram.Space.VOX\">\n<code class=\"sig-name descname\">VOX</code><em class=\"property\"> = 'vox'</em><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Space.VOX\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.stateful_tractogram.Space.VOXMM\">\n<code class=\"sig-name descname\">VOXMM</code><em class=\"property\"> = 'voxmm'</em><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Space.VOXMM\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"statefultractogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram\" title=\"dipy.io.stateful_tractogram.StatefulTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a><a class=\"headerlink\" href=\"#statefultractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">StatefulTractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">space</em>, <em class=\"sig-param\">origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Class for stateful representation of collections of streamlines\nObject designed to be identical no matter the file format\n(trk, tck, vtk, fib, dpy). Facilitate transformation between space and\ndata manipulation for each streamline / point.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.affine\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></a></dt><dd><p>Getter for the reference affine</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.data_per_point\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.data_per_point\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">data_per_point</span></code></a></dt><dd><p>Getter for data_per_point</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.data_per_streamline\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.data_per_streamline\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">data_per_streamline</span></code></a></dt><dd><p>Getter for data_per_streamline</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.dimensions\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.dimensions\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dimensions</span></code></a></dt><dd><p>Getter for the reference dimensions</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.origin\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.origin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">origin</span></code></a></dt><dd><p>Getter for origin standard</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.space\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">space</span></code></a></dt><dd><p>Getter for the current space</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.space_attributes\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.space_attributes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">space_attributes</span></code></a></dt><dd><p>Getter for spatial attribute</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.streamlines\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">streamlines</span></code></a></dt><dd><p>Partially safe getter for streamlines</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.voxel_order\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.voxel_order\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">voxel_order</span></code></a></dt><dd><p>Getter for the reference voxel order</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.voxel_sizes\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.voxel_sizes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">voxel_sizes</span></code></a></dt><dd><p>Getter for the reference voxel sizes</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.are_compatible\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.are_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></a>(sft_1,\u00a0sft_2)</p></td>\n<td><p>Compatibility verification of two StatefulTractogram to ensure space, origin, data_per_point and data_per_streamline consistency</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.compute_bounding_box\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.compute_bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_bounding_box</span></code></a>()</p></td>\n<td><p>Compute the bounding box of the streamlines in their current state</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.from_sft\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.from_sft\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_sft</span></code></a>(streamlines,\u00a0sft[,\u00a0data_per_point,\u00a0\u2026])</p></td>\n<td><p>Create an instance of <cite>StatefulTractogram</cite> from another instance of <cite>StatefulTractogram</cite>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_point_keys\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_point_keys\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_data_per_point_keys</span></code></a>()</p></td>\n<td><p>Return a list of the data_per_point attribute names</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_streamline_keys\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_streamline_keys\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_data_per_streamline_keys</span></code></a>()</p></td>\n<td><p>Return a list of the data_per_streamline attribute names</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.get_streamlines_copy\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.get_streamlines_copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_streamlines_copy</span></code></a>()</p></td>\n<td><p>Safe getter for streamlines (for slicing)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.is_bbox_in_vox_valid\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.is_bbox_in_vox_valid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_bbox_in_vox_valid</span></code></a>()</p></td>\n<td><p>Verify that the bounding box is valid in voxel space.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.remove_invalid_streamlines\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.remove_invalid_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_invalid_streamlines</span></code></a>([epsilon])</p></td>\n<td><p>Remove streamlines with invalid coordinates from the object.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_center\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.to_center\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_center</span></code></a>()</p></td>\n<td><p>Safe function to shift streamlines so the center of voxel is the origin</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_corner\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.to_corner\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_corner</span></code></a>()</p></td>\n<td><p>Safe function to shift streamlines so the corner of voxel is the origin</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_origin\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.to_origin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_origin</span></code></a>(target_origin)</p></td>\n<td><p>Safe function to change streamlines to a particular origin standard False means NIFTI (center) and True means TrackVis (corner)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_rasmm\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.to_rasmm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_rasmm</span></code></a>()</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_space\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.to_space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_space</span></code></a>(target_space)</p></td>\n<td><p>Safe function to transform streamlines to a particular space using an enum and update state</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_vox\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.to_vox\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_vox</span></code></a>()</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_voxmm\" title=\"dipy.io.stateful_tractogram.StatefulTractogram.to_voxmm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_voxmm</span></code></a>()</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">space</em>, <em class=\"sig-param\">origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a strict, state-aware, robust tractogram</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list or ArraySequence</span></dt><dd><p>Streamlines of the tractogram</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header, trk.header (dict) or another Stateful Tractogram\nReference that provides the spatial attributes.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Current space in which the streamlines are (vox, voxmm or rasmm)\nAfter tracking the space is VOX, after loading with nibabel\nthe space is RASMM</p>\n</dd>\n<dt><strong>origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin), optional</span></dt><dd><p>Current origin in which the streamlines are (center or corner)\nAfter loading with nibabel the origin is CENTER</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items, each items has Y_i items\nX being the number of streamlines\nY_i being the number of points on streamlines #i</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items\nX being the number of streamlines</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Very important to respect the convention, verify that streamlines\nmatch the reference and are effectively in the right space.</p>\n<p>Any change to the number of streamlines, data_per_point or\ndata_per_streamline requires particular verification.</p>\n<p>In a case of manipulation not allowed by this object, use Nibabel\ndirectly and be careful.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.affine\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">affine</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference affine</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.are_compatible\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">are_compatible</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft_1</em>, <em class=\"sig-param\">sft_2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.are_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compatibility verification of two StatefulTractogram to ensure space,\norigin, data_per_point and data_per_streamline consistency</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.compute_bounding_box\">\n<code class=\"sig-name descname\">compute_bounding_box</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.compute_bounding_box\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the bounding box of the streamlines in their current state</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">ndarray</span></dt><dd><p>8 corners of the XYZ aligned box, all zeros if no streamlines</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.data_per_point\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for data_per_point</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.data_per_streamline\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for data_per_streamline</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.dimensions\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">dimensions</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.dimensions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference dimensions</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.from_sft\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">from_sft</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">sft</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.from_sft\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an instance of <cite>StatefulTractogram</cite> from another instance\nof <cite>StatefulTractogram</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list or ArraySequence</span></dt><dd><p>Streamlines of the tractogram</p>\n</dd>\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractgram,</span></dt><dd><p>The other StatefulTractgram to copy the space_attribute AND\nstate from.</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items, each items has Y_i items\nX being the number of streamlines\nY_i being the number of points on streamlines #i</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items\nX being the number of streamlines</p>\n</dd>\n<dt><strong>\u2014\u2013</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_point_keys\">\n<code class=\"sig-name descname\">get_data_per_point_keys</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_point_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a list of the data_per_point attribute names</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_streamline_keys\">\n<code class=\"sig-name descname\">get_data_per_streamline_keys</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.get_data_per_streamline_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a list of the data_per_streamline attribute names</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.get_streamlines_copy\">\n<code class=\"sig-name descname\">get_streamlines_copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.get_streamlines_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe getter for streamlines (for slicing)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.is_bbox_in_vox_valid\">\n<code class=\"sig-name descname\">is_bbox_in_vox_valid</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.is_bbox_in_vox_valid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Verify that the bounding box is valid in voxel space.\nNegative coordinates or coordinates above the volume dimensions\nare considered invalid in voxel space.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>Are the streamlines within the volume of the associated reference</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.origin\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">origin</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for origin standard</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.remove_invalid_streamlines\">\n<code class=\"sig-name descname\">remove_invalid_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">epsilon=0.001</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.remove_invalid_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove streamlines with invalid coordinates from the object.\nWill also remove the data_per_point and data_per_streamline.\nInvalid coordinates are any X,Y,Z values above the reference\ndimensions or below zero</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>epsilon</strong><span class=\"classifier\">float (optional)</span></dt><dd><p>Epsilon value for the bounding box verification.\nDefault is 1e-6.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">tuple</span></dt><dd><p>Tuple of two list, indices_to_remove, indices_to_keep</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.space\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">space</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the current space</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.space_attributes\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">space_attributes</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.space_attributes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for spatial attribute</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.streamlines\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partially safe getter for streamlines</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.to_center\">\n<code class=\"sig-name descname\">to_center</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_center\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to shift streamlines so the center of voxel is\nthe origin</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.to_corner\">\n<code class=\"sig-name descname\">to_corner</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_corner\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to shift streamlines so the corner of voxel is\nthe origin</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.to_origin\">\n<code class=\"sig-name descname\">to_origin</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">target_origin</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to change streamlines to a particular origin standard\nFalse means NIFTI (center) and True means TrackVis (corner)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.to_rasmm\">\n<code class=\"sig-name descname\">to_rasmm</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_rasmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.to_space\">\n<code class=\"sig-name descname\">to_space</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">target_space</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines to a particular space using\nan enum and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.to_vox\">\n<code class=\"sig-name descname\">to_vox</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_vox\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.to_voxmm\">\n<code class=\"sig-name descname\">to_voxmm</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.to_voxmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.voxel_order\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">voxel_order</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.voxel_order\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference voxel order</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.StatefulTractogram.voxel_sizes\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">voxel_sizes</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.StatefulTractogram.voxel_sizes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference voxel sizes</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id16\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Streamlines\" title=\"dipy.io.stateful_tractogram.Streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a><a class=\"headerlink\" href=\"#id16\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"attribute\">\n<dt id=\"dipy.io.stateful_tractogram.Streamlines\">\n<code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">Streamlines</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.streamlines.array_sequence.ArraySequence</span></code></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"tractogram\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a><a class=\"headerlink\" href=\"#tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">Tractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines=None</em>, <em class=\"sig-param\">data_per_streamline=None</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Container for streamlines and their data information.</p>\n<p>Streamlines of a tractogram can be in any coordinate system of your\nchoice as long as you provide the correct <cite>affine_to_rasmm</cite> matrix, at\nconstruction time. When applied to streamlines coordinates, that\ntransformation matrix should bring the streamlines back to world space\n(RAS+ and mm space) <a class=\"footnote-reference brackets\" href=\"#id19\" id=\"id17\">1</a>.</p>\n<p>Moreover, when streamlines are mapped back to voxel space <a class=\"footnote-reference brackets\" href=\"#id20\" id=\"id18\">2</a>, a\nstreamline point located at an integer coordinate (i,j,k) is considered\nto be at the center of the corresponding voxel. This is in contrast with\nother conventions where it might have referred to a corner.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id19\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id17\">1</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces\">http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces</a></p>\n</dd>\n<dt class=\"label\" id=\"id20\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id18\">2</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space\">http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space</a></p>\n</dd>\n</dl>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code> object</span></dt><dd><p>Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArrayDict\" title=\"dipy.io.stateful_tractogram.PerArrayDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code></a> object</span></dt><dd><p>Dictionary where the items are (str, 2D array).  Each key represents a\npiece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every streamline, and its\nassociated value is a 2D array of shape (<span class=\"math notranslate nohighlight\">\\(T\\)</span>, <span class=\"math notranslate nohighlight\">\\(P_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(T\\)</span> is the\nnumber of streamlines and <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of values to store for\nthat particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.PerArraySequenceDict\" title=\"dipy.io.stateful_tractogram.PerArraySequenceDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArraySequenceDict</span></code></a> object</span></dt><dd><p>Dictionary where the items are (str, <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>).  Each key\nrepresents a piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every point\nof every streamline, and its associated value is an iterable of\nndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points\nfor a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number values to store\nfor that particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram.apply_affine\" title=\"dipy.io.stateful_tractogram.Tractogram.apply_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apply_affine</span></code></a>(affine[,\u00a0lazy])</p></td>\n<td><p>Applies an affine transformation on the points of each streamline.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram.copy\" title=\"dipy.io.stateful_tractogram.Tractogram.copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">copy</span></code></a>()</p></td>\n<td><p>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram.extend\" title=\"dipy.io.stateful_tractogram.Tractogram.extend\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extend</span></code></a>(other)</p></td>\n<td><p>Appends the data of another <a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram.to_world\" title=\"dipy.io.stateful_tractogram.Tractogram.to_world\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_world</span></code></a>([lazy])</p></td>\n<td><p>Brings the streamlines to world space (i.e.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines=None</em>, <em class=\"sig-param\">data_per_streamline=None</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">iterable of ndarrays or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>, optional</span></dt><dd><p>Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt><dd><p>Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\nstreamline, and its associated value is an iterable of ndarrays of\nshape (<span class=\"math notranslate nohighlight\">\\(P_i\\)</span>,) where <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of scalar values to store\nfor that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt><dd><p>Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\npoint of every streamline, and its associated value is an iterable\nof ndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of\npoints for a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number\nscalar values to store for that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>affine_to_rasmm</strong><span class=\"classifier\">ndarray of shape (4, 4) or None, optional</span></dt><dd><p>Transformation matrix that brings the streamlines contained in\nthis tractogram to <em>RAS+</em> and <em>mm</em> space where coordinate (0,0,0)\nrefers to the center of the voxel. By default, the streamlines\nare in an unknown space, i.e. affine_to_rasmm is None.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.affine_to_rasmm\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">affine_to_rasmm</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.affine_to_rasmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Affine bringing streamlines in this tractogram to RAS+mm.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.apply_affine\">\n<code class=\"sig-name descname\">apply_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.apply_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies an affine transformation on the points of each streamline.</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">ndarray of shape (4, 4)</span></dt><dd><p>Transformation that will be applied to every streamline.</p>\n</dd>\n<dt><strong>lazy</strong><span class=\"classifier\">{False, True}, optional</span></dt><dd><p>If True, streamlines are <em>not</em> transformed in-place and a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>tractogram</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object</span></dt><dd><p>Tractogram where the streamlines have been transformed according\nto the given affine transformation. If the <cite>lazy</cite> option is true,\nit returns a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object, otherwise it returns a\nreference to this <a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated\nstreamlines.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.copy\">\n<code class=\"sig-name descname\">copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.data_per_point\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.data_per_streamline\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.extend\">\n<code class=\"sig-name descname\">extend</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">other</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.extend\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Appends the data of another <a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</p>\n<p>Data that will be appended includes the streamlines and the content\nof both dictionaries <cite>data_per_streamline</cite> and <cite>data_per_point</cite>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>other</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object</span></dt><dd><p>Its data will be appended to the data of this tractogram.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The entries in both dictionaries <cite>self.data_per_streamline</cite> and\n<cite>self.data_per_point</cite> must match respectively those contained in\nthe other tractogram.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.streamlines\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.Tractogram.to_world\">\n<code class=\"sig-name descname\">to_world</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.Tractogram.to_world\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Brings the streamlines to world space (i.e. RAS+ and mm).</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>lazy</strong><span class=\"classifier\">{False, True}, optional</span></dt><dd><p>If True, streamlines are <em>not</em> transformed in-place and a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>tractogram</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object</span></dt><dd><p>Tractogram where the streamlines have been sent to world space.\nIf the <cite>lazy</cite> option is true, it returns a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code>\nobject, otherwise it returns a reference to this\n<a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.Tractogram\" title=\"dipy.io.stateful_tractogram.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated streamlines.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"product\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.stateful_tractogram.product\" title=\"dipy.io.stateful_tractogram.product\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">product</span></code></a><a class=\"headerlink\" href=\"#product\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.stateful_tractogram.product\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">product</code><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.product\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>product(<a href=\"#id21\"><span class=\"problematic\" id=\"id22\">*</span></a>iterables, repeat=1) \u2013&gt; product object</p>\n<p>Cartesian product of input iterables.  Equivalent to nested for-loops.</p>\n<p>For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).\nThe leftmost iterators are in the outermost for-loop, so the output tuples\ncycle in a manner similar to an odometer (with the rightmost element changing\non every iteration).</p>\n<p>To compute the product of an iterable with itself, specify the number\nof repetitions with the optional repeat keyword argument. For example,\nproduct(A, repeat=4) means the same as product(A, A, A, A).</p>\n<p>product(\u2018ab\u2019, range(3)) \u2013&gt; (\u2018a\u2019,0) (\u2018a\u2019,1) (\u2018a\u2019,2) (\u2018b\u2019,0) (\u2018b\u2019,1) (\u2018b\u2019,2)\nproduct((0,1), (0,1), (0,1)) \u2013&gt; (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) \u2026</p>\n<dl class=\"method\">\n<dt id=\"dipy.io.stateful_tractogram.product.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.product.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"apply-affine\">\n<h3>apply_affine<a class=\"headerlink\" href=\"#apply-affine\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.stateful_tractogram.apply_affine\">\n<code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">apply_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">aff</em>, <em class=\"sig-param\">pts</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.apply_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine matrix <cite>aff</cite> to points <cite>pts</cite></p>\n<p>Returns result of application of <cite>aff</cite> to the <em>right</em> of <cite>pts</cite>.  The\ncoordinate dimension of <cite>pts</cite> should be the last.</p>\n<p>For the 3D case, <cite>aff</cite> will be shape (4,4) and <cite>pts</cite> will have final axis\nlength 3 - maybe it will just be N by 3. The return value is the\ntransformed points, in this case:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,:</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">aff</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"n\">transformed_pts</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">T</span>\n</pre></div>\n</div>\n<p>This routine is more general than 3D, in that <cite>aff</cite> can have any shape\n(N,N), and <cite>pts</cite> can have any shape, as long as the last dimension is for\nthe coordinates, and is therefore length N-1.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>aff</strong><span class=\"classifier\">(N, N) array-like</span></dt><dd><p>Homogenous affine, for 3D points, will be 4 by 4. Contrary to first\nappearance, the affine will be applied on the left of <cite>pts</cite>.</p>\n</dd>\n<dt><strong>pts</strong><span class=\"classifier\">(\u2026, N-1) array-like</span></dt><dd><p>Points, where the last dimension contains the coordinates of each\npoint.  For 3D, the last dimension will be length 3.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>transformed_pts</strong><span class=\"classifier\">(\u2026, N-1) array</span></dt><dd><p>transformed points</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">aff</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">12</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">apply_affine</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">,</span> <span class=\"n\">pts</span><span class=\"p\">)</span> \n<span class=\"go\">array([[14, 14, 24],</span>\n<span class=\"go\">       [16, 17, 28],</span>\n<span class=\"go\">       [20, 23, 36],</span>\n<span class=\"go\">       [24, 29, 44]]...)</span>\n</pre></div>\n</div>\n<p>Just to show that in the simple 3D case, it is equivalent to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,:</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">aff</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">T</span> \n<span class=\"go\">array([[14, 14, 24],</span>\n<span class=\"go\">       [16, 17, 28],</span>\n<span class=\"go\">       [20, 23, 36],</span>\n<span class=\"go\">       [24, 29, 44]]...)</span>\n</pre></div>\n</div>\n<p>But <cite>pts</cite> can be a more complicated shape:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pts</span> <span class=\"o\">=</span> <span class=\"n\">pts</span><span class=\"o\">.</span><span class=\"n\">reshape</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">apply_affine</span><span class=\"p\">(</span><span class=\"n\">aff</span><span class=\"p\">,</span> <span class=\"n\">pts</span><span class=\"p\">)</span> \n<span class=\"go\">array([[[14, 14, 24],</span>\n<span class=\"go\">        [16, 17, 28]],</span>\n\n<span class=\"go\">       [[20, 23, 36],</span>\n<span class=\"go\">        [24, 29, 44]]]...)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bisect\">\n<h3>bisect<a class=\"headerlink\" href=\"#bisect\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.stateful_tractogram.bisect\">\n<code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">bisect</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.bisect\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>bisect_right(a, x[, lo[, hi]]) -&gt; index</p>\n<p>Return the index where to insert item x in list a, assuming a is sorted.</p>\n<p>The return value i is such that all e in a[:i] have e &lt;= x, and all e in\na[i:] have e &gt; x.  So if x already appears in the list, i points just\nbeyond the rightmost x already there</p>\n<p>Optional args lo (default 0) and hi (default len(a)) bound the\nslice of a to be searched.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"deepcopy\">\n<h3>deepcopy<a class=\"headerlink\" href=\"#deepcopy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.stateful_tractogram.deepcopy\">\n<code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">deepcopy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">memo=None</em>, <em class=\"sig-param\">_nil=[]</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.deepcopy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deep copy operation on arbitrary Python objects.</p>\n<p>See the module\u2019s __doc__ string for more info.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-reference-info\">\n<h3>get_reference_info<a class=\"headerlink\" href=\"#get-reference-info\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.stateful_tractogram.get_reference_info\">\n<code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">get_reference_info</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">reference</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.get_reference_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Will compare the spatial attribute of 2 references</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict)\nReference that provides the spatial attribute.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">tuple</span></dt><dd><ul class=\"simple\">\n<li><p>affine ndarray (4,4), np.float32, tranformation of VOX to RASMM</p></li>\n<li><p>dimensions ndarray (3,), int16, volume shape for each axis</p></li>\n<li><p>voxel_sizes  ndarray (3,), float32, size of voxel for each axis</p></li>\n<li><p>voxel_order, string, Typically \u2018RAS\u2019 or \u2018LPS\u2019</p></li>\n</ul>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"is-header-compatible\">\n<h3>is_header_compatible<a class=\"headerlink\" href=\"#is-header-compatible\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.stateful_tractogram.is_header_compatible\">\n<code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">is_header_compatible</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">reference_1</em>, <em class=\"sig-param\">reference_2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.is_header_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Will compare the spatial attribute of 2 references</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>reference_1</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header or trk.header (dict)\nReference that provides the spatial attribute.</p>\n</dd>\n<dt><strong>reference_2</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header or trk.header (dict)\nReference that provides the spatial attribute.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>Does all the spatial attribute match</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"is-reference-info-valid\">\n<h3>is_reference_info_valid<a class=\"headerlink\" href=\"#is-reference-info-valid\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.stateful_tractogram.is_reference_info_valid\">\n<code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">is_reference_info_valid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">dimensions</em>, <em class=\"sig-param\">voxel_sizes</em>, <em class=\"sig-param\">voxel_order</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.is_reference_info_valid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Validate basic data type and value of spatial attribute.</p>\n<p>Does not ensure that voxel_sizes and voxel_order are self-coherent with\nthe affine.\nOnly verify the following:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>affine is of the right type (float) and dimension (4,4)</p></li>\n<li><p>affine contain values in the rotation part</p></li>\n<li><p>dimensions is of right type (int) and length (3)</p></li>\n<li><p>voxel_sizes is of right type (float) and length (3)</p></li>\n<li><p>voxel_order is of right type (str) and length (3)</p></li>\n</ul>\n</div></blockquote>\n<p>The listed parameters are what is expected, provide something else and this\nfunction should fail (cover common mistakes).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine: ndarray (4,4)</strong></dt><dd><p>Tranformation of VOX to RASMM</p>\n</dd>\n<dt><strong>dimensions: ndarray (3,), int16</strong></dt><dd><p>Volume shape for each axis</p>\n</dd>\n<dt><strong>voxel_sizes:  ndarray (3,), float32</strong></dt><dd><p>Size of voxel for each axis</p>\n</dd>\n<dt><strong>voxel_order: string</strong></dt><dd><p>Typically \u2018RAS\u2019 or \u2018LPS\u2019</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>Does the input represent a valid \u2018state\u2019 of spatial attribute</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"set-sft-logger-level\">\n<h3>set_sft_logger_level<a class=\"headerlink\" href=\"#set-sft-logger-level\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.stateful_tractogram.set_sft_logger_level\">\n<code class=\"sig-prename descclassname\">dipy.io.stateful_tractogram.</code><code class=\"sig-name descname\">set_sft_logger_level</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">log_level</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.stateful_tractogram.set_sft_logger_level\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Change the logger of the StatefulTractogram\nto one on the following: DEBUG, INFO, WARNING, CRITICAL, ERROR</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>log_level</strong><span class=\"classifier\">str</span></dt><dd><p>Log level for the StatefulTractogram only</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id23\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy\" title=\"dipy.io.streamline.Dpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a><a class=\"headerlink\" href=\"#id23\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.Dpy\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">Dpy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">mode='r'</em>, <em class=\"sig-param\">compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.read_track\" title=\"dipy.io.streamline.Dpy.read_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_track</span></code></a>()</p></td>\n<td><p>read one track each time</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.read_tracks\" title=\"dipy.io.streamline.Dpy.read_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracks</span></code></a>()</p></td>\n<td><p>read the entire tractography</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.read_tracksi\" title=\"dipy.io.streamline.Dpy.read_tracksi\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">read_tracksi</span></code></a>(indices)</p></td>\n<td><p>read tracks with specific indices</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.write_track\" title=\"dipy.io.streamline.Dpy.write_track\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_track</span></code></a>(track)</p></td>\n<td><p>write on track each time</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Dpy.write_tracks\" title=\"dipy.io.streamline.Dpy.write_tracks\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">write_tracks</span></code></a>(tracks)</p></td>\n<td><p>write many tracks together</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 52%\" />\n<col style=\"width: 48%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>close</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>version</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">mode='r'</em>, <em class=\"sig-param\">compression=0</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Advanced storage system for tractography based on HDF5</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">str, full filename</span></dt><dd></dd>\n<dt><strong>mode</strong><span class=\"classifier\">\u2018r\u2019 read</span></dt><dd><p>\u2018w\u2019 write\n\u2018r+\u2019 read and write only if file already exists</p>\n</dd>\n<dt><strong>compression</strong><span class=\"classifier\">0 no compression to 9 maximum compression</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">tempfile</span> <span class=\"k\">import</span> <span class=\"n\">mkstemp</span> <span class=\"c1\">#temp file</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.dpy</span> <span class=\"k\">import</span> <span class=\"n\">Dpy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">def</span> <span class=\"nf\">dpy_example</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fd</span><span class=\"p\">,</span><span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"n\">mkstemp</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">fname</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39;.dpy&#39;</span><span class=\"c1\">#add correct extension</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">A</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"n\">B</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">C</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"o\">*</span><span class=\"n\">A</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">write_track</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpw</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span> <span class=\"o\">=</span> <span class=\"n\">Dpy</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_track</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">read_tracksi</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"gp\">... </span>    <span class=\"n\">dpr</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span> <span class=\"c1\">#delete file from disk</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dpy_example</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.close\">\n<code class=\"sig-name descname\">close</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.close\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.read_track\">\n<code class=\"sig-name descname\">read_track</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.read_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read one track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.read_tracks\">\n<code class=\"sig-name descname\">read_tracks</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.read_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read the entire tractography</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.read_tracksi\">\n<code class=\"sig-name descname\">read_tracksi</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">indices</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.read_tracksi\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>read tracks with specific indices</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.version\">\n<code class=\"sig-name descname\">version</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.version\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.write_track\">\n<code class=\"sig-name descname\">write_track</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">track</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.write_track\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write on track each time</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Dpy.write_tracks\">\n<code class=\"sig-name descname\">write_tracks</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tracks</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Dpy.write_tracks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>write many tracks together</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id24\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.Origin\" title=\"dipy.io.streamline.Origin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a><a class=\"headerlink\" href=\"#id24\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.Origin\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">Origin</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/enum.html#enum.Enum\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">enum.Enum</span></code></a></p>\n<p>Enum to simplify future change to convention</p>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Origin.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Origin.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Origin.NIFTI\">\n<code class=\"sig-name descname\">NIFTI</code><em class=\"property\"> = 'center'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Origin.NIFTI\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Origin.TRACKVIS\">\n<code class=\"sig-name descname\">TRACKVIS</code><em class=\"property\"> = 'corner'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Origin.TRACKVIS\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id25\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.Space\" title=\"dipy.io.streamline.Space\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Space</span></code></a><a class=\"headerlink\" href=\"#id25\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.Space\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">Space</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/enum.html#enum.Enum\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">enum.Enum</span></code></a></p>\n<p>Enum to simplify future change to convention</p>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Space.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Space.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Space.RASMM\">\n<code class=\"sig-name descname\">RASMM</code><em class=\"property\"> = 'rasmm'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Space.RASMM\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Space.VOX\">\n<code class=\"sig-name descname\">VOX</code><em class=\"property\"> = 'vox'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Space.VOX\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.streamline.Space.VOXMM\">\n<code class=\"sig-name descname\">VOXMM</code><em class=\"property\"> = 'voxmm'</em><a class=\"headerlink\" href=\"#dipy.io.streamline.Space.VOXMM\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id26\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram\" title=\"dipy.io.streamline.StatefulTractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a><a class=\"headerlink\" href=\"#id26\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.StatefulTractogram\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">StatefulTractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">space</em>, <em class=\"sig-param\">origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Class for stateful representation of collections of streamlines\nObject designed to be identical no matter the file format\n(trk, tck, vtk, fib, dpy). Facilitate transformation between space and\ndata manipulation for each streamline / point.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.affine\" title=\"dipy.io.streamline.StatefulTractogram.affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">affine</span></code></a></dt><dd><p>Getter for the reference affine</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.data_per_point\" title=\"dipy.io.streamline.StatefulTractogram.data_per_point\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">data_per_point</span></code></a></dt><dd><p>Getter for data_per_point</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.data_per_streamline\" title=\"dipy.io.streamline.StatefulTractogram.data_per_streamline\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">data_per_streamline</span></code></a></dt><dd><p>Getter for data_per_streamline</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.dimensions\" title=\"dipy.io.streamline.StatefulTractogram.dimensions\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dimensions</span></code></a></dt><dd><p>Getter for the reference dimensions</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.origin\" title=\"dipy.io.streamline.StatefulTractogram.origin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">origin</span></code></a></dt><dd><p>Getter for origin standard</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.space\" title=\"dipy.io.streamline.StatefulTractogram.space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">space</span></code></a></dt><dd><p>Getter for the current space</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.space_attributes\" title=\"dipy.io.streamline.StatefulTractogram.space_attributes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">space_attributes</span></code></a></dt><dd><p>Getter for spatial attribute</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.streamlines\" title=\"dipy.io.streamline.StatefulTractogram.streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">streamlines</span></code></a></dt><dd><p>Partially safe getter for streamlines</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.voxel_order\" title=\"dipy.io.streamline.StatefulTractogram.voxel_order\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">voxel_order</span></code></a></dt><dd><p>Getter for the reference voxel order</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.voxel_sizes\" title=\"dipy.io.streamline.StatefulTractogram.voxel_sizes\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">voxel_sizes</span></code></a></dt><dd><p>Getter for the reference voxel sizes</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.are_compatible\" title=\"dipy.io.streamline.StatefulTractogram.are_compatible\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">are_compatible</span></code></a>(sft_1,\u00a0sft_2)</p></td>\n<td><p>Compatibility verification of two StatefulTractogram to ensure space, origin, data_per_point and data_per_streamline consistency</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.compute_bounding_box\" title=\"dipy.io.streamline.StatefulTractogram.compute_bounding_box\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compute_bounding_box</span></code></a>()</p></td>\n<td><p>Compute the bounding box of the streamlines in their current state</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.from_sft\" title=\"dipy.io.streamline.StatefulTractogram.from_sft\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_sft</span></code></a>(streamlines,\u00a0sft[,\u00a0data_per_point,\u00a0\u2026])</p></td>\n<td><p>Create an instance of <cite>StatefulTractogram</cite> from another instance of <cite>StatefulTractogram</cite>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.get_data_per_point_keys\" title=\"dipy.io.streamline.StatefulTractogram.get_data_per_point_keys\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_data_per_point_keys</span></code></a>()</p></td>\n<td><p>Return a list of the data_per_point attribute names</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.get_data_per_streamline_keys\" title=\"dipy.io.streamline.StatefulTractogram.get_data_per_streamline_keys\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_data_per_streamline_keys</span></code></a>()</p></td>\n<td><p>Return a list of the data_per_streamline attribute names</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.get_streamlines_copy\" title=\"dipy.io.streamline.StatefulTractogram.get_streamlines_copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_streamlines_copy</span></code></a>()</p></td>\n<td><p>Safe getter for streamlines (for slicing)</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.is_bbox_in_vox_valid\" title=\"dipy.io.streamline.StatefulTractogram.is_bbox_in_vox_valid\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_bbox_in_vox_valid</span></code></a>()</p></td>\n<td><p>Verify that the bounding box is valid in voxel space.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.remove_invalid_streamlines\" title=\"dipy.io.streamline.StatefulTractogram.remove_invalid_streamlines\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_invalid_streamlines</span></code></a>([epsilon])</p></td>\n<td><p>Remove streamlines with invalid coordinates from the object.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.to_center\" title=\"dipy.io.streamline.StatefulTractogram.to_center\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_center</span></code></a>()</p></td>\n<td><p>Safe function to shift streamlines so the center of voxel is the origin</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.to_corner\" title=\"dipy.io.streamline.StatefulTractogram.to_corner\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_corner</span></code></a>()</p></td>\n<td><p>Safe function to shift streamlines so the corner of voxel is the origin</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.to_origin\" title=\"dipy.io.streamline.StatefulTractogram.to_origin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_origin</span></code></a>(target_origin)</p></td>\n<td><p>Safe function to change streamlines to a particular origin standard False means NIFTI (center) and True means TrackVis (corner)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.to_rasmm\" title=\"dipy.io.streamline.StatefulTractogram.to_rasmm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_rasmm</span></code></a>()</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.to_space\" title=\"dipy.io.streamline.StatefulTractogram.to_space\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_space</span></code></a>(target_space)</p></td>\n<td><p>Safe function to transform streamlines to a particular space using an enum and update state</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.to_vox\" title=\"dipy.io.streamline.StatefulTractogram.to_vox\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_vox</span></code></a>()</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.StatefulTractogram.to_voxmm\" title=\"dipy.io.streamline.StatefulTractogram.to_voxmm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_voxmm</span></code></a>()</p></td>\n<td><p>Safe function to transform streamlines and update state</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">space</em>, <em class=\"sig-param\">origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a strict, state-aware, robust tractogram</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list or ArraySequence</span></dt><dd><p>Streamlines of the tractogram</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header, trk.header (dict) or another Stateful Tractogram\nReference that provides the spatial attributes.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Current space in which the streamlines are (vox, voxmm or rasmm)\nAfter tracking the space is VOX, after loading with nibabel\nthe space is RASMM</p>\n</dd>\n<dt><strong>origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin), optional</span></dt><dd><p>Current origin in which the streamlines are (center or corner)\nAfter loading with nibabel the origin is CENTER</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items, each items has Y_i items\nX being the number of streamlines\nY_i being the number of points on streamlines #i</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items\nX being the number of streamlines</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Very important to respect the convention, verify that streamlines\nmatch the reference and are effectively in the right space.</p>\n<p>Any change to the number of streamlines, data_per_point or\ndata_per_streamline requires particular verification.</p>\n<p>In a case of manipulation not allowed by this object, use Nibabel\ndirectly and be careful.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.affine\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">affine</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference affine</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.are_compatible\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">are_compatible</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft_1</em>, <em class=\"sig-param\">sft_2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.are_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compatibility verification of two StatefulTractogram to ensure space,\norigin, data_per_point and data_per_streamline consistency</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.compute_bounding_box\">\n<code class=\"sig-name descname\">compute_bounding_box</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.compute_bounding_box\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the bounding box of the streamlines in their current state</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">ndarray</span></dt><dd><p>8 corners of the XYZ aligned box, all zeros if no streamlines</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.data_per_point\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for data_per_point</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.data_per_streamline\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for data_per_streamline</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.dimensions\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">dimensions</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.dimensions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference dimensions</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.from_sft\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">from_sft</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">sft</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">data_per_streamline=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.from_sft\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an instance of <cite>StatefulTractogram</cite> from another instance\nof <cite>StatefulTractogram</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list or ArraySequence</span></dt><dd><p>Streamlines of the tractogram</p>\n</dd>\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractgram,</span></dt><dd><p>The other StatefulTractgram to copy the space_attribute AND\nstate from.</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items, each items has Y_i items\nX being the number of streamlines\nY_i being the number of points on streamlines #i</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>Dictionary in which each key has X items\nX being the number of streamlines</p>\n</dd>\n<dt><strong>\u2014\u2013</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.get_data_per_point_keys\">\n<code class=\"sig-name descname\">get_data_per_point_keys</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.get_data_per_point_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a list of the data_per_point attribute names</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.get_data_per_streamline_keys\">\n<code class=\"sig-name descname\">get_data_per_streamline_keys</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.get_data_per_streamline_keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a list of the data_per_streamline attribute names</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.get_streamlines_copy\">\n<code class=\"sig-name descname\">get_streamlines_copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.get_streamlines_copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe getter for streamlines (for slicing)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.is_bbox_in_vox_valid\">\n<code class=\"sig-name descname\">is_bbox_in_vox_valid</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.is_bbox_in_vox_valid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Verify that the bounding box is valid in voxel space.\nNegative coordinates or coordinates above the volume dimensions\nare considered invalid in voxel space.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>Are the streamlines within the volume of the associated reference</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.origin\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">origin</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for origin standard</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.remove_invalid_streamlines\">\n<code class=\"sig-name descname\">remove_invalid_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">epsilon=0.001</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.remove_invalid_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove streamlines with invalid coordinates from the object.\nWill also remove the data_per_point and data_per_streamline.\nInvalid coordinates are any X,Y,Z values above the reference\ndimensions or below zero</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>epsilon</strong><span class=\"classifier\">float (optional)</span></dt><dd><p>Epsilon value for the bounding box verification.\nDefault is 1e-6.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">tuple</span></dt><dd><p>Tuple of two list, indices_to_remove, indices_to_keep</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.space\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">space</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the current space</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.space_attributes\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">space_attributes</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.space_attributes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for spatial attribute</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.streamlines\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Partially safe getter for streamlines</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.to_center\">\n<code class=\"sig-name descname\">to_center</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.to_center\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to shift streamlines so the center of voxel is\nthe origin</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.to_corner\">\n<code class=\"sig-name descname\">to_corner</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.to_corner\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to shift streamlines so the corner of voxel is\nthe origin</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.to_origin\">\n<code class=\"sig-name descname\">to_origin</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">target_origin</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.to_origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to change streamlines to a particular origin standard\nFalse means NIFTI (center) and True means TrackVis (corner)</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.to_rasmm\">\n<code class=\"sig-name descname\">to_rasmm</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.to_rasmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.to_space\">\n<code class=\"sig-name descname\">to_space</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">target_space</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.to_space\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines to a particular space using\nan enum and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.to_vox\">\n<code class=\"sig-name descname\">to_vox</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.to_vox\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.to_voxmm\">\n<code class=\"sig-name descname\">to_voxmm</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.to_voxmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Safe function to transform streamlines and update state</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.voxel_order\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">voxel_order</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.voxel_order\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference voxel order</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.StatefulTractogram.voxel_sizes\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">voxel_sizes</code><a class=\"headerlink\" href=\"#dipy.io.streamline.StatefulTractogram.voxel_sizes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Getter for the reference voxel sizes</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id27\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a><a class=\"headerlink\" href=\"#id27\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.streamline.Tractogram\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">Tractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines=None</em>, <em class=\"sig-param\">data_per_streamline=None</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.9)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Container for streamlines and their data information.</p>\n<p>Streamlines of a tractogram can be in any coordinate system of your\nchoice as long as you provide the correct <cite>affine_to_rasmm</cite> matrix, at\nconstruction time. When applied to streamlines coordinates, that\ntransformation matrix should bring the streamlines back to world space\n(RAS+ and mm space) <a class=\"footnote-reference brackets\" href=\"#id30\" id=\"id28\">3</a>.</p>\n<p>Moreover, when streamlines are mapped back to voxel space <a class=\"footnote-reference brackets\" href=\"#id31\" id=\"id29\">4</a>, a\nstreamline point located at an integer coordinate (i,j,k) is considered\nto be at the center of the corresponding voxel. This is in contrast with\nother conventions where it might have referred to a corner.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"footnote brackets\">\n<dt class=\"label\" id=\"id30\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id28\">3</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces\">http://nipy.org/nibabel/coordinate_systems.html#naming-reference-spaces</a></p>\n</dd>\n<dt class=\"label\" id=\"id31\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id29\">4</a></span></dt>\n<dd><p><a class=\"reference external\" href=\"http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space\">http://nipy.org/nibabel/coordinate_systems.html#voxel-coordinates-are-in-voxel-space</a></p>\n</dd>\n</dl>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code> object</span></dt><dd><p>Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code> object</span></dt><dd><p>Dictionary where the items are (str, 2D array).  Each key represents a\npiece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every streamline, and its\nassociated value is a 2D array of shape (<span class=\"math notranslate nohighlight\">\\(T\\)</span>, <span class=\"math notranslate nohighlight\">\\(P_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(T\\)</span> is the\nnumber of streamlines and <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of values to store for\nthat particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArraySequenceDict</span></code> object</span></dt><dd><p>Dictionary where the items are (str, <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>).  Each key\nrepresents a piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every point\nof every streamline, and its associated value is an iterable of\nndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points\nfor a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number values to store\nfor that particular piece of information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram.apply_affine\" title=\"dipy.io.streamline.Tractogram.apply_affine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">apply_affine</span></code></a>(affine[,\u00a0lazy])</p></td>\n<td><p>Applies an affine transformation on the points of each streamline.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram.copy\" title=\"dipy.io.streamline.Tractogram.copy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">copy</span></code></a>()</p></td>\n<td><p>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram.extend\" title=\"dipy.io.streamline.Tractogram.extend\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">extend</span></code></a>(other)</p></td>\n<td><p>Appends the data of another <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram.to_world\" title=\"dipy.io.streamline.Tractogram.to_world\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_world</span></code></a>([lazy])</p></td>\n<td><p>Brings the streamlines to world space (i.e.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines=None</em>, <em class=\"sig-param\">data_per_streamline=None</em>, <em class=\"sig-param\">data_per_point=None</em>, <em class=\"sig-param\">affine_to_rasmm=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>streamlines</strong><span class=\"classifier\">iterable of ndarrays or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArraySequence</span></code>, optional</span></dt><dd><p>Sequence of <span class=\"math notranslate nohighlight\">\\(T\\)</span> streamlines. Each streamline is an ndarray of\nshape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, 3) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of points of\nstreamline <span class=\"math notranslate nohighlight\">\\(t\\)</span>.</p>\n</dd>\n<dt><strong>data_per_streamline</strong><span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt><dd><p>Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\nstreamline, and its associated value is an iterable of ndarrays of\nshape (<span class=\"math notranslate nohighlight\">\\(P_i\\)</span>,) where <span class=\"math notranslate nohighlight\">\\(P_i\\)</span> is the number of scalar values to store\nfor that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>data_per_point</strong><span class=\"classifier\">dict of iterable of ndarrays, optional</span></dt><dd><p>Dictionary where the items are (str, iterable).\nEach key represents an information <span class=\"math notranslate nohighlight\">\\(i\\)</span> to be kept alongside every\npoint of every streamline, and its associated value is an iterable\nof ndarrays of shape (<span class=\"math notranslate nohighlight\">\\(N_t\\)</span>, <span class=\"math notranslate nohighlight\">\\(M_i\\)</span>) where <span class=\"math notranslate nohighlight\">\\(N_t\\)</span> is the number of\npoints for a particular streamline <span class=\"math notranslate nohighlight\">\\(t\\)</span> and <span class=\"math notranslate nohighlight\">\\(M_i\\)</span> is the number\nscalar values to store for that particular information <span class=\"math notranslate nohighlight\">\\(i\\)</span>.</p>\n</dd>\n<dt><strong>affine_to_rasmm</strong><span class=\"classifier\">ndarray of shape (4, 4) or None, optional</span></dt><dd><p>Transformation matrix that brings the streamlines contained in\nthis tractogram to <em>RAS+</em> and <em>mm</em> space where coordinate (0,0,0)\nrefers to the center of the voxel. By default, the streamlines\nare in an unknown space, i.e. affine_to_rasmm is None.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.affine_to_rasmm\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">affine_to_rasmm</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.affine_to_rasmm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Affine bringing streamlines in this tractogram to RAS+mm.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.apply_affine\">\n<code class=\"sig-name descname\">apply_affine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.apply_affine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies an affine transformation on the points of each streamline.</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">ndarray of shape (4, 4)</span></dt><dd><p>Transformation that will be applied to every streamline.</p>\n</dd>\n<dt><strong>lazy</strong><span class=\"classifier\">{False, True}, optional</span></dt><dd><p>If True, streamlines are <em>not</em> transformed in-place and a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>tractogram</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object</span></dt><dd><p>Tractogram where the streamlines have been transformed according\nto the given affine transformation. If the <cite>lazy</cite> option is true,\nit returns a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object, otherwise it returns a\nreference to this <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated\nstreamlines.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.copy\">\n<code class=\"sig-name descname\">copy</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a copy of this <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.data_per_point\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_point</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.data_per_point\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.data_per_streamline\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">data_per_streamline</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.data_per_streamline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.extend\">\n<code class=\"sig-name descname\">extend</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">other</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.extend\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Appends the data of another <a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a>.</p>\n<p>Data that will be appended includes the streamlines and the content\nof both dictionaries <cite>data_per_streamline</cite> and <cite>data_per_point</cite>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>other</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object</span></dt><dd><p>Its data will be appended to the data of this tractogram.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>None</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The entries in both dictionaries <cite>self.data_per_streamline</cite> and\n<cite>self.data_per_point</cite> must match respectively those contained in\nthe other tractogram.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.streamlines\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">streamlines</code><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.streamline.Tractogram.to_world\">\n<code class=\"sig-name descname\">to_world</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">lazy=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.Tractogram.to_world\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Brings the streamlines to world space (i.e. RAS+ and mm).</p>\n<p>If <cite>lazy</cite> is not specified, this is performed <em>in-place</em>.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>lazy</strong><span class=\"classifier\">{False, True}, optional</span></dt><dd><p>If True, streamlines are <em>not</em> transformed in-place and a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object is returned. Otherwise, streamlines\nare modified in-place.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>tractogram</strong><span class=\"classifier\"><a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> or <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code> object</span></dt><dd><p>Tractogram where the streamlines have been sent to world space.\nIf the <cite>lazy</cite> option is true, it returns a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LazyTractogram</span></code>\nobject, otherwise it returns a reference to this\n<a class=\"reference internal\" href=\"#dipy.io.streamline.Tractogram\" title=\"dipy.io.streamline.Tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a> object with updated streamlines.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"create-tractogram-header\">\n<h3>create_tractogram_header<a class=\"headerlink\" href=\"#create-tractogram-header\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.create_tractogram_header\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">create_tractogram_header</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tractogram_type</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">dimensions</em>, <em class=\"sig-param\">voxel_sizes</em>, <em class=\"sig-param\">voxel_order</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.create_tractogram_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write a standard trk/tck header from spatial attribute</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id32\">\n<h3>deepcopy<a class=\"headerlink\" href=\"#id32\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.deepcopy\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">deepcopy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">memo=None</em>, <em class=\"sig-param\">_nil=[]</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.deepcopy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deep copy operation on arbitrary Python objects.</p>\n<p>See the module\u2019s __doc__ string for more info.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"detect-format\">\n<h3>detect_format<a class=\"headerlink\" href=\"#detect-format\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.detect_format\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">detect_format</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fileobj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.detect_format\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the StreamlinesFile object guessed from the file-like object.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fileobj</strong><span class=\"classifier\">string or file-like object</span></dt><dd><p>If string, a filename; otherwise an open file-like object pointing\nto a tractogram file (and ready to read from the beginning of the\nheader)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>tractogram_file</strong><span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> class</span></dt><dd><p>The class type guessed from the content of <cite>fileobj</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id33\">\n<h3>is_header_compatible<a class=\"headerlink\" href=\"#id33\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.is_header_compatible\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">is_header_compatible</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">reference_1</em>, <em class=\"sig-param\">reference_2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.is_header_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Will compare the spatial attribute of 2 references</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>reference_1</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header or trk.header (dict)\nReference that provides the spatial attribute.</p>\n</dd>\n<dt><strong>reference_2</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header or trk.header (dict)\nReference that provides the spatial attribute.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>Does all the spatial attribute match</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-dpy\">\n<h3>load_dpy<a class=\"headerlink\" href=\"#load-dpy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_dpy\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">load_dpy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">to_space=&lt;Space.RASMM: 'rasmm'&gt;</em>, <em class=\"sig-param\">to_origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">bbox_valid_check=True</em>, <em class=\"sig-param\">trk_header_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram of the .dpy format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-fib\">\n<h3>load_fib<a class=\"headerlink\" href=\"#load-fib\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_fib\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">load_fib</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">to_space=&lt;Space.RASMM: 'rasmm'&gt;</em>, <em class=\"sig-param\">to_origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">bbox_valid_check=True</em>, <em class=\"sig-param\">trk_header_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_fib\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram of the .fib format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-generator\">\n<h3>load_generator<a class=\"headerlink\" href=\"#load-generator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_generator\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">load_generator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ttype</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_generator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate a loading function that performs a file extension\ncheck to restrict the user to a single file format.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>ttype</strong><span class=\"classifier\">string</span></dt><dd><p>Extension of the file format that requires a loader</p>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt><dd></dd>\n<dt><strong>output</strong><span class=\"classifier\">function</span></dt><dd><p>Function (load_tractogram) that handle only one file format</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-tck\">\n<h3>load_tck<a class=\"headerlink\" href=\"#load-tck\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_tck\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">load_tck</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">to_space=&lt;Space.RASMM: 'rasmm'&gt;</em>, <em class=\"sig-param\">to_origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">bbox_valid_check=True</em>, <em class=\"sig-param\">trk_header_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_tck\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram of the .tck format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-tractogram\">\n<h3>load_tractogram<a class=\"headerlink\" href=\"#load-tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_tractogram\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">load_tractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">to_space=&lt;Space.RASMM: 'rasmm'&gt;</em>, <em class=\"sig-param\">to_origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">bbox_valid_check=True</em>, <em class=\"sig-param\">trk_header_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram from any format (trk, tck, vtk, fib, dpy)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-trk\">\n<h3>load_trk<a class=\"headerlink\" href=\"#load-trk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_trk\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">load_trk</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">to_space=&lt;Space.RASMM: 'rasmm'&gt;</em>, <em class=\"sig-param\">to_origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">bbox_valid_check=True</em>, <em class=\"sig-param\">trk_header_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram of the .trk format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-vtk\">\n<h3>load_vtk<a class=\"headerlink\" href=\"#load-vtk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_vtk\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">load_vtk</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">reference</em>, <em class=\"sig-param\">to_space=&lt;Space.RASMM: 'rasmm'&gt;</em>, <em class=\"sig-param\">to_origin=&lt;Origin.NIFTI: 'center'&gt;</em>, <em class=\"sig-param\">bbox_valid_check=True</em>, <em class=\"sig-param\">trk_header_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_vtk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load the stateful tractogram of the .vtk format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict), or \u2018same\u2019 if the input is a trk file.\nReference that provides the spatial attribute.\nTypically a nifti-related object from the native diffusion used for\nstreamlines generation</p>\n</dd>\n<dt><strong>to_space</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Space)</span></dt><dd><p>Space to which the streamlines will be transformed after loading</p>\n</dd>\n<dt><strong>to_origin</strong><span class=\"classifier\">Enum (dipy.io.stateful_tractogram.Origin)</span></dt><dd><dl class=\"simple\">\n<dt>Origin to which the streamlines will be transformed after loading</dt><dd><p>NIFTI standard, default (center of the voxel)\nTRACKVIS standard (corner of the voxel)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n<dt><strong>trk_header_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification that the reference has the same header as the spatial\nattributes as the input tractogram when a Trk is loaded</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The tractogram to load (must have been saved properly)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-vtk-streamlines\">\n<h3>load_vtk_streamlines<a class=\"headerlink\" href=\"#load-vtk-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.load_vtk_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">load_vtk_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">to_lps=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.load_vtk_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load streamlines from vtk polydata.</p>\n<p>Load formats can be VTK, FIB</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>input filename (.vtk or .fib)</p>\n</dd>\n<dt><strong>to_lps</strong><span class=\"classifier\">bool</span></dt><dd><p>Default to True, will follow the vtk file convention for streamlines\nWill be supported by MITKDiffusion and MI-Brain</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">list</span></dt><dd><p>list of 2D arrays</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-dpy\">\n<h3>save_dpy<a class=\"headerlink\" href=\"#save-dpy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_dpy\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">save_dpy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">bbox_valid_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_dpy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save the stateful tractogram of the .dpy format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The stateful tractogram to save</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>True if the saving operation was successful</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-fib\">\n<h3>save_fib<a class=\"headerlink\" href=\"#save-fib\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_fib\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">save_fib</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">bbox_valid_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_fib\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save the stateful tractogram of the .fib format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The stateful tractogram to save</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>True if the saving operation was successful</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-generator\">\n<h3>save_generator<a class=\"headerlink\" href=\"#save-generator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_generator\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">save_generator</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ttype</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_generator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generate a saving function that performs a file extension\ncheck to restrict the user to a single file format.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>ttype</strong><span class=\"classifier\">string</span></dt><dd><p>Extension of the file format that requires a saver</p>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014-</strong></dt><dd></dd>\n<dt><strong>output</strong><span class=\"classifier\">function</span></dt><dd><p>Function (save_tractogram) that handle only one file format</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-tck\">\n<h3>save_tck<a class=\"headerlink\" href=\"#save-tck\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_tck\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">save_tck</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">bbox_valid_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_tck\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save the stateful tractogram of the .tck format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The stateful tractogram to save</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>True if the saving operation was successful</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-tractogram\">\n<h3>save_tractogram<a class=\"headerlink\" href=\"#save-tractogram\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_tractogram\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">save_tractogram</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">bbox_valid_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_tractogram\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save the stateful tractogram in any format (trk, tck, vtk, fib, dpy)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The stateful tractogram to save</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>True if the saving operation was successful</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-trk\">\n<h3>save_trk<a class=\"headerlink\" href=\"#save-trk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_trk\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">save_trk</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">bbox_valid_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_trk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save the stateful tractogram of the .trk format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The stateful tractogram to save</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>True if the saving operation was successful</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-vtk\">\n<h3>save_vtk<a class=\"headerlink\" href=\"#save-vtk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_vtk\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">save_vtk</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sft</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">bbox_valid_check=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_vtk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save the stateful tractogram of the .vtk format</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sft</strong><span class=\"classifier\">StatefulTractogram</span></dt><dd><p>The stateful tractogram to save</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>Filename with valid extension</p>\n</dd>\n<dt><strong>bbox_valid_check</strong><span class=\"classifier\">bool</span></dt><dd><p>Verification for negative voxel coordinates or values above the\nvolume dimensions. Default is True, to enforce valid file.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>True if the saving operation was successful</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-vtk-streamlines\">\n<h3>save_vtk_streamlines<a class=\"headerlink\" href=\"#save-vtk-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.streamline.save_vtk_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.io.streamline.</code><code class=\"sig-name descname\">save_vtk_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">to_lps=True</em>, <em class=\"sig-param\">binary=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.streamline.save_vtk_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save streamlines as vtk polydata to a supported format file.</p>\n<p>File formats can be OBJ, VTK, FIB, PLY, STL and XML</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list</span></dt><dd><p>list of 2D arrays or ArraySequence</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>output filename (.obj, .vtk, .fib, .ply, .stl and .xml)</p>\n</dd>\n<dt><strong>to_lps</strong><span class=\"classifier\">bool</span></dt><dd><p>Default to True, will follow the vtk file convention for streamlines\nWill be supported by MITKDiffusion and MI-Brain</p>\n</dd>\n<dt><strong>binary</strong><span class=\"classifier\">bool</span></dt><dd><p>save the file as binary</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nifti1image\">\n<h3><a class=\"reference internal\" href=\"#dipy.io.utils.Nifti1Image\" title=\"dipy.io.utils.Nifti1Image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Nifti1Image</span></code></a><a class=\"headerlink\" href=\"#nifti1image\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.io.utils.Nifti1Image\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">Nifti1Image</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dataobj</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">header=None</em>, <em class=\"sig-param\">extra=None</em>, <em class=\"sig-param\">file_map=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.nifti1.Nifti1Pair</span></code>, <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.filebasedimages.SerializableImage</span></code></p>\n<p>Class for single file NIfTI1 format image</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong></dt><dd></dd>\n<dt><strong>dataobj</strong></dt><dd></dd>\n<dt><strong>header</strong></dt><dd></dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">in_memory</span></code></dt><dd><p>True when any array data is in memory cache</p>\n</dd>\n<dt><strong>ndim</strong></dt><dd></dd>\n<dt><strong>shape</strong></dt><dd></dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">slicer</span></code></dt><dd><p>Slicer object that returns cropped and subsampled images</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ImageArrayProxy</span></code></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.arrayproxy.ArrayProxy</span></code></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ImageSlicer</span></code></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">nibabel.spatialimages.SpatialFirstSlicer</span></code></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">as_reoriented</span></code>(ornt)</p></td>\n<td><p>Apply an orientation change and return a new image</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">filespec_to_file_map</span></code>(filespec)</p></td>\n<td><p>Make <cite>file_map</cite> for this class from filename <cite>filespec</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">filespec_to_files</span></code>(filespec)</p></td>\n<td><p>filespec_to_files class method is deprecated.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_bytes</span></code>(bytestring)</p></td>\n<td><p>Construct image from a byte string</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_file_map</span></code>(file_map,\u00a0*[,\u00a0mmap,\u00a0\u2026])</p></td>\n<td><p>Class method to create image from mapping in <code class=\"docutils literal notranslate\"><span class=\"pre\">file_map</span></code></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_filename</span></code>(filename,\u00a0*[,\u00a0mmap,\u00a0\u2026])</p></td>\n<td><p>Class method to create image from filename <cite>filename</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_files</span></code>(file_map)</p></td>\n<td><p>from_files class method is deprecated.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_image</span></code>(img)</p></td>\n<td><p>Class method to create new instance of own class from <cite>img</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_affine</span></code>()</p></td>\n<td><p>Get affine from image</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_data</span></code>([caching])</p></td>\n<td><p>Return image data from image with any necessary scaling applied</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_fdata</span></code>([caching,\u00a0dtype])</p></td>\n<td><p>Return floating point image data with necessary scaling applied</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_filename</span></code>()</p></td>\n<td><p>Fetch the image filename</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_header</span></code>()</p></td>\n<td><p>Get header from image</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_qform</span></code>([coded])</p></td>\n<td><p>Return 4x4 affine matrix from qform parameters in header</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_sform</span></code>([coded])</p></td>\n<td><p>Return 4x4 affine matrix from sform parameters in header</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_shape</span></code>()</p></td>\n<td><p>Return shape for image</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.Nifti1Image.header_class\" title=\"dipy.io.utils.Nifti1Image.header_class\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">header_class</span></code></a></p></td>\n<td><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Nifti1Header</span></code></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">instance_to_filename</span></code>(img,\u00a0filename)</p></td>\n<td><p>Save <cite>img</cite> in our own format, to name implied by <cite>filename</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">load</span></code>(filename,\u00a0*[,\u00a0mmap,\u00a0keep_file_open])</p></td>\n<td><p>Class method to create image from filename <cite>filename</cite></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">make_file_map</span></code>([mapping])</p></td>\n<td><p>Class method to make files holder for this image type</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">orthoview</span></code>()</p></td>\n<td><p>Plot the image using OrthoSlicer3D</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">path_maybe_image</span></code>(filename[,\u00a0sniff,\u00a0sniff_max])</p></td>\n<td><p>Return True if <cite>filename</cite> may be image matching this class</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_filename</span></code>(filename)</p></td>\n<td><p>Sets the files in the object from a given filename</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_qform</span></code>(affine[,\u00a0code,\u00a0strip_shears])</p></td>\n<td><p>Set qform header values from 4x4 affine</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">set_sform</span></code>(affine[,\u00a0code])</p></td>\n<td><p>Set sform transform from 4x4 affine</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_bytes</span></code>()</p></td>\n<td><p>Return a <code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code> object with the contents of the file that would be written if the image were saved.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_file_map</span></code>([file_map])</p></td>\n<td><p>Write image to <cite>file_map</cite> or contained <code class=\"docutils literal notranslate\"><span class=\"pre\">self.file_map</span></code></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_filename</span></code>(filename)</p></td>\n<td><p>Write image to files implied by filename string</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_files</span></code>([file_map])</p></td>\n<td><p>to_files method is deprecated.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">to_filespec</span></code>(filename)</p></td>\n<td><p>to_filespec method is deprecated.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">uncache</span></code>()</p></td>\n<td><p>Delete any cached read of data from proxied data</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.io.utils.Nifti1Image.update_header\" title=\"dipy.io.utils.Nifti1Image.update_header\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">update_header</span></code></a>()</p></td>\n<td><p>Harmonize header with image data and affine</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 64%\" />\n<col style=\"width: 36%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>get_data_dtype</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>set_data_dtype</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.io.utils.Nifti1Image.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dataobj</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">header=None</em>, <em class=\"sig-param\">extra=None</em>, <em class=\"sig-param\">file_map=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize image</p>\n<p>The image is a combination of (array-like, affine matrix, header), with\noptional metadata in <cite>extra</cite>, and filename / file-like objects\ncontained in the <cite>file_map</cite> mapping.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>dataobj</strong><span class=\"classifier\">object</span></dt><dd><p>Object containg image data.  It should be some object that retuns an\narray from <code class=\"docutils literal notranslate\"><span class=\"pre\">np.asanyarray</span></code>.  It should have a <code class=\"docutils literal notranslate\"><span class=\"pre\">shape</span></code> attribute\nor property</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">None or (4,4) array-like</span></dt><dd><p>homogenous affine giving relationship between voxel coordinates and\nworld coordinates.  Affine can also be None.  In this case,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">obj.affine</span></code> also returns None, and the affine as written to disk\nwill depend on the file format.</p>\n</dd>\n<dt><strong>header</strong><span class=\"classifier\">None or mapping or header instance, optional</span></dt><dd><p>metadata for this image format</p>\n</dd>\n<dt><strong>extra</strong><span class=\"classifier\">None or mapping, optional</span></dt><dd><p>metadata to associate with image that cannot be stored in the\nmetadata of this image type</p>\n</dd>\n<dt><strong>file_map</strong><span class=\"classifier\">mapping, optional</span></dt><dd><p>mapping giving file information for this image format</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>If both a <cite>header</cite> and an <cite>affine</cite> are specified, and the <cite>affine</cite> does\nnot match the affine that is in the <cite>header</cite>, the <cite>affine</cite> will be used,\nbut the <code class=\"docutils literal notranslate\"><span class=\"pre\">sform_code</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">qform_code</span></code> fields in the header will be\nre-initialised to their default values. This is performed on the basis\nthat, if you are changing the affine, you are likely to be changing the\nspace to which the affine is pointing.  The <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_sform()</span></code> and\n<code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_qform()</span></code> methods can be used to update the codes after an image\nhas been created - see those methods, and the <span class=\"xref std std-ref\">manual</span> for more details.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.utils.Nifti1Image.files_types\">\n<code class=\"sig-name descname\">files_types</code><em class=\"property\"> = (('image', '.nii'),)</em><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.files_types\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.utils.Nifti1Image.header_class\">\n<code class=\"sig-name descname\">header_class</code><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.header_class\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>alias of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Nifti1Header</span></code></p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.io.utils.Nifti1Image.update_header\">\n<code class=\"sig-name descname\">update_header</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.update_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Harmonize header with image data and affine</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.io.utils.Nifti1Image.valid_exts\">\n<code class=\"sig-name descname\">valid_exts</code><em class=\"property\"> = ('.nii',)</em><a class=\"headerlink\" href=\"#dipy.io.utils.Nifti1Image.valid_exts\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"create-nifti-header\">\n<h3>create_nifti_header<a class=\"headerlink\" href=\"#create-nifti-header\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.create_nifti_header\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">create_nifti_header</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">dimensions</em>, <em class=\"sig-param\">voxel_sizes</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.create_nifti_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write a standard nifti header from spatial attribute</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id34\">\n<h3>create_tractogram_header<a class=\"headerlink\" href=\"#id34\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.create_tractogram_header\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">create_tractogram_header</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">tractogram_type</em>, <em class=\"sig-param\">affine</em>, <em class=\"sig-param\">dimensions</em>, <em class=\"sig-param\">voxel_sizes</em>, <em class=\"sig-param\">voxel_order</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.create_tractogram_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Write a standard trk/tck header from spatial attribute</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decfa\">\n<h3>decfa<a class=\"headerlink\" href=\"#decfa\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.decfa\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">decfa</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">img_orig</em>, <em class=\"sig-param\">scale=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.decfa\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a nifti-compliant directional-encoded color FA image.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>img_orig</strong><span class=\"classifier\">Nifti1Image class instance.</span></dt><dd><p>Contains encoding of the DEC FA image with a 4D volume of data, where\nthe elements on the last dimension represent R, G and B components.</p>\n</dd>\n<dt><strong>scale: bool.</strong></dt><dd><p>Whether to scale the incoming data from the 0-1 to the 0-255 range\nexpected in the output.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>img</strong><span class=\"classifier\">Nifti1Image class instance with dtype set to store tuples of</span></dt><dd><p>uint8 in (R, G, B) order.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>For a description of this format, see:</p>\n<p><a class=\"reference external\" href=\"https://nifti.nimh.nih.gov/nifti-1/documentation/nifti1fields/nifti1fields_pages/datatype.html\">https://nifti.nimh.nih.gov/nifti-1/documentation/nifti1fields/nifti1fields_pages/datatype.html</a></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decfa-to-float\">\n<h3>decfa_to_float<a class=\"headerlink\" href=\"#decfa-to-float\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.decfa_to_float\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">decfa_to_float</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">img_orig</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.decfa_to_float\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert a nifti-compliant directional-encoded color FA image into a\nnifti image with RGB encoded in floating point resolution.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>img_orig</strong><span class=\"classifier\">Nifti1Image class instance.</span></dt><dd><p>Contains encoding of the DEC FA image with a 3D volume of data, where\neach element is a (R, G, B) tuple in uint8.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>img</strong><span class=\"classifier\">Nifti1Image class instance with float dtype.</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>For a description of this format, see:</p>\n<p><a class=\"reference external\" href=\"https://nifti.nimh.nih.gov/nifti-1/documentation/nifti1fields/nifti1fields_pages/datatype.html\">https://nifti.nimh.nih.gov/nifti-1/documentation/nifti1fields/nifti1fields_pages/datatype.html</a></p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id35\">\n<h3>detect_format<a class=\"headerlink\" href=\"#id35\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.detect_format\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">detect_format</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fileobj</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.detect_format\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the StreamlinesFile object guessed from the file-like object.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fileobj</strong><span class=\"classifier\">string or file-like object</span></dt><dd><p>If string, a filename; otherwise an open file-like object pointing\nto a tractogram file (and ready to read from the beginning of the\nheader)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>tractogram_file</strong><span class=\"classifier\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TractogramFile</span></code> class</span></dt><dd><p>The class type guessed from the content of <cite>fileobj</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id36\">\n<h3>get_reference_info<a class=\"headerlink\" href=\"#id36\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.get_reference_info\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">get_reference_info</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">reference</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.get_reference_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Will compare the spatial attribute of 2 references</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>reference</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile, Nifti1Header or</span></dt><dd><p>trk.header (dict)\nReference that provides the spatial attribute.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">tuple</span></dt><dd><ul class=\"simple\">\n<li><p>affine ndarray (4,4), np.float32, tranformation of VOX to RASMM</p></li>\n<li><p>dimensions ndarray (3,), int16, volume shape for each axis</p></li>\n<li><p>voxel_sizes  ndarray (3,), float32, size of voxel for each axis</p></li>\n<li><p>voxel_order, string, Typically \u2018RAS\u2019 or \u2018LPS\u2019</p></li>\n</ul>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id37\">\n<h3>is_header_compatible<a class=\"headerlink\" href=\"#id37\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.is_header_compatible\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">is_header_compatible</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">reference_1</em>, <em class=\"sig-param\">reference_2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.is_header_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Will compare the spatial attribute of 2 references</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>reference_1</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header or trk.header (dict)\nReference that provides the spatial attribute.</p>\n</dd>\n<dt><strong>reference_2</strong><span class=\"classifier\">Nifti or Trk filename, Nifti1Image or TrkFile,</span></dt><dd><p>Nifti1Header or trk.header (dict)\nReference that provides the spatial attribute.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>Does all the spatial attribute match</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id38\">\n<h3>is_reference_info_valid<a class=\"headerlink\" href=\"#id38\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.is_reference_info_valid\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">is_reference_info_valid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em>, <em class=\"sig-param\">dimensions</em>, <em class=\"sig-param\">voxel_sizes</em>, <em class=\"sig-param\">voxel_order</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.is_reference_info_valid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Validate basic data type and value of spatial attribute.</p>\n<p>Does not ensure that voxel_sizes and voxel_order are self-coherent with\nthe affine.\nOnly verify the following:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>affine is of the right type (float) and dimension (4,4)</p></li>\n<li><p>affine contain values in the rotation part</p></li>\n<li><p>dimensions is of right type (int) and length (3)</p></li>\n<li><p>voxel_sizes is of right type (float) and length (3)</p></li>\n<li><p>voxel_order is of right type (str) and length (3)</p></li>\n</ul>\n</div></blockquote>\n<p>The listed parameters are what is expected, provide something else and this\nfunction should fail (cover common mistakes).</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine: ndarray (4,4)</strong></dt><dd><p>Tranformation of VOX to RASMM</p>\n</dd>\n<dt><strong>dimensions: ndarray (3,), int16</strong></dt><dd><p>Volume shape for each axis</p>\n</dd>\n<dt><strong>voxel_sizes:  ndarray (3,), float32</strong></dt><dd><p>Size of voxel for each axis</p>\n</dd>\n<dt><strong>voxel_order: string</strong></dt><dd><p>Typically \u2018RAS\u2019 or \u2018LPS\u2019</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">bool</span></dt><dd><p>Does the input represent a valid \u2018state\u2019 of spatial attribute</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"make5d\">\n<h3>make5d<a class=\"headerlink\" href=\"#make5d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.make5d\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">make5d</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.make5d\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>reshapes the input to have 5 dimensions, adds extra dimensions just\nbefore the last dimession</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nifti1-symmat\">\n<h3>nifti1_symmat<a class=\"headerlink\" href=\"#nifti1-symmat\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.nifti1_symmat\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">nifti1_symmat</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">image_data</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.nifti1_symmat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a Nifti1Image with a symmetric matrix intent</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>image_data</strong><span class=\"classifier\">array-like</span></dt><dd><p>should have lower triangular elements of a symmetric matrix along the\nlast dimension</p>\n</dd>\n<dt><strong>all other arguments and keywords are passed to Nifti1Image</strong></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>image</strong><span class=\"classifier\">Nifti1Image</span></dt><dd><p>5d, extra dimensions addes before the last. Has symmetric matrix intent\ncode</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optional-package\">\n<h3>optional_package<a class=\"headerlink\" href=\"#optional-package\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.optional_package\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">optional_package</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>name</strong><span class=\"classifier\">str</span></dt><dd><p>package name</p>\n</dd>\n<dt><strong>trip_msg</strong><span class=\"classifier\">None or str</span></dt><dd><p>message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>pkg_like</strong><span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt><dd><p>If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong><span class=\"classifier\">bool</span></dt><dd><p>True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong><span class=\"classifier\">function</span></dt><dd><p>callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>Typical use would be something like this at the top of a module using an\noptional package:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.utils.optpkg</span> <span class=\"k\">import</span> <span class=\"n\">optional_package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">have_pkg</span><span class=\"p\">,</span> <span class=\"n\">setup_module</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;not_a_package&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Of course in this case the package doesn\u2019t exist, and so, in the module:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">have_pkg</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n<p>and</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">some_function</span><span class=\"p\">()</span> \n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">TripWireError</span>: <span class=\"n\">We need package not_a_package for these functions, but</span>\n<span class=\"go\">``import not_a_package`` raised an ImportError</span>\n</pre></div>\n</div>\n<p>If the module does exist - we get the module</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Or a submodule if that\u2019s what we asked for</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os.path&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dirname&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"read-img-arr-or-path\">\n<h3>read_img_arr_or_path<a class=\"headerlink\" href=\"#read-img-arr-or-path\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.read_img_arr_or_path\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">read_img_arr_or_path</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">data</em>, <em class=\"sig-param\">affine=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.read_img_arr_or_path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Helper function that handles inputs that can be paths, nifti img or arrays</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>data</strong><span class=\"classifier\">array or nib.Nifti1Image or str.</span></dt><dd><p>Either as a 3D/4D array or as a nifti image object, or as\na string containing the full path to a nifti file.</p>\n</dd>\n<dt><strong>affine</strong><span class=\"classifier\">4x4 array, optional.</span></dt><dd><p>Must be provided for <cite>data</cite> provided as an array. If provided together\nwith Nifti1Image or str <cite>data</cite>, this input will over-ride the affine\nthat is stored in the <cite>data</cite> input. Default: use the affine stored\nin <cite>data</cite>.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>data, affine</strong><span class=\"classifier\">ndarray and 4x4 array</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-buan-profiles-hdf5\">\n<h3>save_buan_profiles_hdf5<a class=\"headerlink\" href=\"#save-buan-profiles-hdf5\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.utils.save_buan_profiles_hdf5\">\n<code class=\"sig-prename descclassname\">dipy.io.utils.</code><code class=\"sig-name descname\">save_buan_profiles_hdf5</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fname</em>, <em class=\"sig-param\">dt</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.utils.save_buan_profiles_hdf5\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Saves the given input dataframe to .h5 file</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>fname</strong><span class=\"classifier\">string</span></dt><dd><p>file name for saving the hdf5 file</p>\n</dd>\n<dt><strong>dt</strong><span class=\"classifier\">Pandas DataFrame</span></dt><dd><p>DataFrame to be saved as .h5 file</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"load-polydata\">\n<h3>load_polydata<a class=\"headerlink\" href=\"#load-polydata\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.load_polydata\">\n<code class=\"sig-prename descclassname\">dipy.io.vtk.</code><code class=\"sig-name descname\">load_polydata</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">file_name</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.load_polydata\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load a vtk polydata to a supported format file.</p>\n<p>Supported file formats are OBJ, VTK, FIB, PLY, STL and XML</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>file_name</strong><span class=\"classifier\">string</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">vtkPolyData</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id39\">\n<h3>load_vtk_streamlines<a class=\"headerlink\" href=\"#id39\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.load_vtk_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.io.vtk.</code><code class=\"sig-name descname\">load_vtk_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">filename</em>, <em class=\"sig-param\">to_lps=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.load_vtk_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Load streamlines from vtk polydata.</p>\n<p>Load formats can be VTK, FIB</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>input filename (.vtk or .fib)</p>\n</dd>\n<dt><strong>to_lps</strong><span class=\"classifier\">bool</span></dt><dd><p>Default to True, will follow the vtk file convention for streamlines\nWill be supported by MITKDiffusion and MI-Brain</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>output</strong><span class=\"classifier\">list</span></dt><dd><p>list of 2D arrays</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id40\">\n<h3>optional_package<a class=\"headerlink\" href=\"#id40\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.optional_package\">\n<code class=\"sig-prename descclassname\">dipy.io.vtk.</code><code class=\"sig-name descname\">optional_package</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>name</strong><span class=\"classifier\">str</span></dt><dd><p>package name</p>\n</dd>\n<dt><strong>trip_msg</strong><span class=\"classifier\">None or str</span></dt><dd><p>message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>pkg_like</strong><span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt><dd><p>If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong><span class=\"classifier\">bool</span></dt><dd><p>True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong><span class=\"classifier\">function</span></dt><dd><p>callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>Typical use would be something like this at the top of a module using an\noptional package:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.utils.optpkg</span> <span class=\"k\">import</span> <span class=\"n\">optional_package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">have_pkg</span><span class=\"p\">,</span> <span class=\"n\">setup_module</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;not_a_package&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Of course in this case the package doesn\u2019t exist, and so, in the module:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">have_pkg</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n<p>and</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">some_function</span><span class=\"p\">()</span> \n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">TripWireError</span>: <span class=\"n\">We need package not_a_package for these functions, but</span>\n<span class=\"go\">``import not_a_package`` raised an ImportError</span>\n</pre></div>\n</div>\n<p>If the module does exist - we get the module</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Or a submodule if that\u2019s what we asked for</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os.path&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dirname&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"save-polydata\">\n<h3>save_polydata<a class=\"headerlink\" href=\"#save-polydata\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.save_polydata\">\n<code class=\"sig-prename descclassname\">dipy.io.vtk.</code><code class=\"sig-name descname\">save_polydata</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">polydata</em>, <em class=\"sig-param\">file_name</em>, <em class=\"sig-param\">binary=False</em>, <em class=\"sig-param\">color_array_name=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.save_polydata\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save a vtk polydata to a supported format file.</p>\n<p>Save formats can be VTK, FIB, PLY, STL and XML.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>polydata</strong><span class=\"classifier\">vtkPolyData</span></dt><dd></dd>\n<dt><strong>file_name</strong><span class=\"classifier\">string</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id41\">\n<h3>save_vtk_streamlines<a class=\"headerlink\" href=\"#id41\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.save_vtk_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.io.vtk.</code><code class=\"sig-name descname\">save_vtk_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">filename</em>, <em class=\"sig-param\">to_lps=True</em>, <em class=\"sig-param\">binary=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.save_vtk_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Save streamlines as vtk polydata to a supported format file.</p>\n<p>File formats can be OBJ, VTK, FIB, PLY, STL and XML</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">list</span></dt><dd><p>list of 2D arrays or ArraySequence</p>\n</dd>\n<dt><strong>filename</strong><span class=\"classifier\">string</span></dt><dd><p>output filename (.obj, .vtk, .fib, .ply, .stl and .xml)</p>\n</dd>\n<dt><strong>to_lps</strong><span class=\"classifier\">bool</span></dt><dd><p>Default to True, will follow the vtk file convention for streamlines\nWill be supported by MITKDiffusion and MI-Brain</p>\n</dd>\n<dt><strong>binary</strong><span class=\"classifier\">bool</span></dt><dd><p>save the file as binary</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"setup-module\">\n<h3>setup_module<a class=\"headerlink\" href=\"#setup-module\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.setup_module\">\n<code class=\"sig-prename descclassname\">dipy.io.vtk.</code><code class=\"sig-name descname\">setup_module</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.setup_module\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"transform-streamlines\">\n<h3>transform_streamlines<a class=\"headerlink\" href=\"#transform-streamlines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.io.vtk.transform_streamlines\">\n<code class=\"sig-prename descclassname\">dipy.io.vtk.</code><code class=\"sig-name descname\">transform_streamlines</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">streamlines</em>, <em class=\"sig-param\">mat</em>, <em class=\"sig-param\">in_place=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.io.vtk.transform_streamlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Apply affine transformation to streamlines</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Streamlines object</p>\n</dd>\n<dt><strong>mat</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd><p>transformation matrix</p>\n</dd>\n<dt><strong>in_place</strong><span class=\"classifier\">bool</span></dt><dd><p>If True then change data in place.\nBe careful changes input streamlines.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_streamlines</strong><span class=\"classifier\">Streamlines</span></dt><dd><p>Sequence transformed 2D ndarrays of shape[-1]==3</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.nn", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn</span></code>", "N", "next"], ["reference/dipy.direction", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">direction</span></code>", "P", "previous"]], "sourcename": "reference/dipy.io.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.bvectxt\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.bvectxt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.dpy\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.dpy</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.gradients\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.gradients</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.image\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.image</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.peaks\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.peaks</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.pickles\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.pickles</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.stateful_tractogram\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.stateful_tractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.streamline\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.streamline</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.utils\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.utils</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.io.vtk\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io.vtk</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#dpy\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#load-pickle\">load_pickle</a></li>\n<li><a class=\"reference internal\" href=\"#orientation-from-string\">orientation_from_string</a></li>\n<li><a class=\"reference internal\" href=\"#orientation-to-string\">orientation_to_string</a></li>\n<li><a class=\"reference internal\" href=\"#ornt-mapping\">ornt_mapping</a></li>\n<li><a class=\"reference internal\" href=\"#read-bvals-bvecs\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#read-bvec-file\">read_bvec_file</a></li>\n<li><a class=\"reference internal\" href=\"#reorient-on-axis\">reorient_on_axis</a></li>\n<li><a class=\"reference internal\" href=\"#reorient-vectors\">reorient_vectors</a></li>\n<li><a class=\"reference internal\" href=\"#save-pickle\">save_pickle</a></li>\n<li><a class=\"reference internal\" href=\"#id4\">orientation_from_string</a></li>\n<li><a class=\"reference internal\" href=\"#id5\">orientation_to_string</a></li>\n<li><a class=\"reference internal\" href=\"#id6\">ornt_mapping</a></li>\n<li><a class=\"reference internal\" href=\"#id7\">read_bvec_file</a></li>\n<li><a class=\"reference internal\" href=\"#id8\">reorient_on_axis</a></li>\n<li><a class=\"reference internal\" href=\"#id9\">reorient_vectors</a></li>\n<li><a class=\"reference internal\" href=\"#splitext\">splitext</a></li>\n<li><a class=\"reference internal\" href=\"#id10\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streamlines\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#intemporarydirectory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InTemporaryDirectory</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id11\">read_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#id12\">splitext</a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti\">load_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#load-nifti-data\">load_nifti_data</a></li>\n<li><a class=\"reference internal\" href=\"#save-nifti\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-qa-metric\">save_qa_metric</a></li>\n<li><a class=\"reference internal\" href=\"#peaksandmetrics\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PeaksAndMetrics</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#sphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#load-peaks\">load_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#peaks-to-niftis\">peaks_to_niftis</a></li>\n<li><a class=\"reference internal\" href=\"#reshape-peaks-for-visualization\">reshape_peaks_for_visualization</a></li>\n<li><a class=\"reference internal\" href=\"#id13\">save_nifti</a></li>\n<li><a class=\"reference internal\" href=\"#save-peaks\">save_peaks</a></li>\n<li><a class=\"reference internal\" href=\"#id14\">load_pickle</a></li>\n<li><a class=\"reference internal\" href=\"#id15\">save_pickle</a></li>\n<li><a class=\"reference internal\" href=\"#origin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#perarraydict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArrayDict</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#perarraysequencedict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PerArraySequenceDict</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#space\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Space</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#statefultractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id16\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Streamlines</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tractogram\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#product\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">product</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#apply-affine\">apply_affine</a></li>\n<li><a class=\"reference internal\" href=\"#bisect\">bisect</a></li>\n<li><a class=\"reference internal\" href=\"#deepcopy\">deepcopy</a></li>\n<li><a class=\"reference internal\" href=\"#get-reference-info\">get_reference_info</a></li>\n<li><a class=\"reference internal\" href=\"#is-header-compatible\">is_header_compatible</a></li>\n<li><a class=\"reference internal\" href=\"#is-reference-info-valid\">is_reference_info_valid</a></li>\n<li><a class=\"reference internal\" href=\"#set-sft-logger-level\">set_sft_logger_level</a></li>\n<li><a class=\"reference internal\" href=\"#id23\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dpy</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id24\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id25\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Space</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id26\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StatefulTractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id27\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Tractogram</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#create-tractogram-header\">create_tractogram_header</a></li>\n<li><a class=\"reference internal\" href=\"#id32\">deepcopy</a></li>\n<li><a class=\"reference internal\" href=\"#detect-format\">detect_format</a></li>\n<li><a class=\"reference internal\" href=\"#id33\">is_header_compatible</a></li>\n<li><a class=\"reference internal\" href=\"#load-dpy\">load_dpy</a></li>\n<li><a class=\"reference internal\" href=\"#load-fib\">load_fib</a></li>\n<li><a class=\"reference internal\" href=\"#load-generator\">load_generator</a></li>\n<li><a class=\"reference internal\" href=\"#load-tck\">load_tck</a></li>\n<li><a class=\"reference internal\" href=\"#load-tractogram\">load_tractogram</a></li>\n<li><a class=\"reference internal\" href=\"#load-trk\">load_trk</a></li>\n<li><a class=\"reference internal\" href=\"#load-vtk\">load_vtk</a></li>\n<li><a class=\"reference internal\" href=\"#load-vtk-streamlines\">load_vtk_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#save-dpy\">save_dpy</a></li>\n<li><a class=\"reference internal\" href=\"#save-fib\">save_fib</a></li>\n<li><a class=\"reference internal\" href=\"#save-generator\">save_generator</a></li>\n<li><a class=\"reference internal\" href=\"#save-tck\">save_tck</a></li>\n<li><a class=\"reference internal\" href=\"#save-tractogram\">save_tractogram</a></li>\n<li><a class=\"reference internal\" href=\"#save-trk\">save_trk</a></li>\n<li><a class=\"reference internal\" href=\"#save-vtk\">save_vtk</a></li>\n<li><a class=\"reference internal\" href=\"#save-vtk-streamlines\">save_vtk_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#nifti1image\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Nifti1Image</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#create-nifti-header\">create_nifti_header</a></li>\n<li><a class=\"reference internal\" href=\"#id34\">create_tractogram_header</a></li>\n<li><a class=\"reference internal\" href=\"#decfa\">decfa</a></li>\n<li><a class=\"reference internal\" href=\"#decfa-to-float\">decfa_to_float</a></li>\n<li><a class=\"reference internal\" href=\"#id35\">detect_format</a></li>\n<li><a class=\"reference internal\" href=\"#id36\">get_reference_info</a></li>\n<li><a class=\"reference internal\" href=\"#id37\">is_header_compatible</a></li>\n<li><a class=\"reference internal\" href=\"#id38\">is_reference_info_valid</a></li>\n<li><a class=\"reference internal\" href=\"#make5d\">make5d</a></li>\n<li><a class=\"reference internal\" href=\"#nifti1-symmat\">nifti1_symmat</a></li>\n<li><a class=\"reference internal\" href=\"#optional-package\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#read-img-arr-or-path\">read_img_arr_or_path</a></li>\n<li><a class=\"reference internal\" href=\"#save-buan-profiles-hdf5\">save_buan_profiles_hdf5</a></li>\n<li><a class=\"reference internal\" href=\"#load-polydata\">load_polydata</a></li>\n<li><a class=\"reference internal\" href=\"#id39\">load_vtk_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#id40\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#save-polydata\">save_polydata</a></li>\n<li><a class=\"reference internal\" href=\"#id41\">save_vtk_streamlines</a></li>\n<li><a class=\"reference internal\" href=\"#setup-module\">setup_module</a></li>\n<li><a class=\"reference internal\" href=\"#transform-streamlines\">transform_streamlines</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.io", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}