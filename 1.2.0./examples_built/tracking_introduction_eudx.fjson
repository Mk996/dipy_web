{"parents": [], "prev": null, "next": null, "title": "Introduction to Basic Tracking", "meta": {}, "body": "<div class=\"section\" id=\"introduction-to-basic-tracking\">\n<span id=\"intro-basic-tracking\"></span><span id=\"example-tracking-introduction-eudx\"></span><h1>Introduction to Basic Tracking<a class=\"headerlink\" href=\"#introduction-to-basic-tracking\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Local fiber tracking is an approach used to model white matter fibers by\ncreating streamlines from local directional information. The idea is as\nfollows: if the local directionality of a tract/pathway segment is known, one\ncan integrate along those directions to build a complete representation of that\nstructure. Local fiber tracking is widely used in the field of diffusion MRI\nbecause it is simple and robust.</p>\n<p>In order to perform local fiber tracking, three things are needed: 1) A method\nfor getting directions from a diffusion data set. 2) A method for identifying\nwhen the tracking must stop. 3) A set of seeds from which to\nbegin tracking. This example shows how to combine the 3 parts described above\nto create a tractography reconstruction from a diffusion data set.</p>\n<p>To begin, let\u2019s load an example HARDI data set from Stanford. If you have\nnot already downloaded this data set, the first time you run this example you\nwill need to be connected to the internet and this dataset will be downloaded\nto your computer.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Enables/disables interactive visualization</span>\n<span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">get_fnames</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.gradients</span> <span class=\"k\">import</span> <span class=\"n\">read_bvals_bvecs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.image</span> <span class=\"k\">import</span> <span class=\"n\">load_nifti</span><span class=\"p\">,</span> <span class=\"n\">load_nifti_data</span>\n\n<span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_hardi&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">label_fname</span> <span class=\"o\">=</span> <span class=\"n\">get_fnames</span><span class=\"p\">(</span><span class=\"s1\">&#39;stanford_labels&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti</span><span class=\"p\">(</span><span class=\"n\">hardi_fname</span><span class=\"p\">,</span> <span class=\"n\">return_img</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"n\">load_nifti_data</span><span class=\"p\">(</span><span class=\"n\">label_fname</span><span class=\"p\">)</span>\n<span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">read_bvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">hardi_bval_fname</span><span class=\"p\">,</span> <span class=\"n\">hardi_bvec_fname</span><span class=\"p\">)</span>\n<span class=\"n\">gtab</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This dataset provides a label map in which all white matter tissues are\nlabeled either 1 or 2. Lets create a white matter mask to restrict tracking to\nthe white matter.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">white_matter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>1. The first thing we need to begin fiber tracking is a way of getting\ndirections from this diffusion data set. In order to do that, we can fit the\ndata to a Constant Solid Angle ODF Model. This model will estimate the\nOrientation Distribution Function (ODF) at each voxel. The ODF is the\ndistribution of water diffusion as a function of direction. The peaks of an ODF\nare good estimates for the orientation of tract segments at a point in the\nimage. Here, we use <code class=\"docutils literal notranslate\"><span class=\"pre\">peaks_from_model</span></code> to fit the data and calculated the\nfiber directions in all voxels of the white matter.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.csdeconv</span> <span class=\"k\">import</span> <span class=\"n\">auto_response_ssst</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.reconst.shm</span> <span class=\"k\">import</span> <span class=\"n\">CsaOdfModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.data</span> <span class=\"k\">import</span> <span class=\"n\">default_sphere</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.direction</span> <span class=\"k\">import</span> <span class=\"n\">peaks_from_model</span>\n\n<span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">ratio</span> <span class=\"o\">=</span> <span class=\"n\">auto_response_ssst</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">roi_radii</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">fa_thr</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">)</span>\n<span class=\"n\">csa_model</span> <span class=\"o\">=</span> <span class=\"n\">CsaOdfModel</span><span class=\"p\">(</span><span class=\"n\">gtab</span><span class=\"p\">,</span> <span class=\"n\">sh_order</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"n\">csa_peaks</span> <span class=\"o\">=</span> <span class=\"n\">peaks_from_model</span><span class=\"p\">(</span><span class=\"n\">csa_model</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">default_sphere</span><span class=\"p\">,</span>\n                             <span class=\"n\">relative_peak_threshold</span><span class=\"o\">=.</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n                             <span class=\"n\">min_separation_angle</span><span class=\"o\">=</span><span class=\"mi\">45</span><span class=\"p\">,</span>\n                             <span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"n\">white_matter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For quality assurance we can also visualize a slice from the direction field\nwhich we will use as the basis to perform the tracking. The visualization will\nbe done using the <code class=\"docutils literal notranslate\"><span class=\"pre\">fury</span></code> python package</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">window</span><span class=\"p\">,</span> <span class=\"n\">actor</span><span class=\"p\">,</span> <span class=\"n\">has_fury</span>\n\n<span class=\"k\">if</span> <span class=\"n\">has_fury</span><span class=\"p\">:</span>\n    <span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n    <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">peak_slicer</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_dirs</span><span class=\"p\">,</span>\n                                <span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">peak_values</span><span class=\"p\">,</span>\n                                <span class=\"n\">colors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">))</span>\n\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;csa_direction_field.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">900</span><span class=\"p\">,</span> <span class=\"mi\">900</span><span class=\"p\">))</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n        <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id4\">\n<img alt=\"../../_images/csa_direction_field.png\" src=\"../../_images/csa_direction_field.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Direction Field (peaks)</strong></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p>2. Next we need some way of restricting the fiber tracking to areas with good\ndirectionality information. We\u2019ve already created the white matter mask,\nbut we can go a step further and restrict fiber tracking to those areas where\nthe ODF shows significant restricted diffusion by thresholding on\nthe generalized fractional anisotropy (GFA).</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.stopping_criterion</span> <span class=\"k\">import</span> <span class=\"n\">ThresholdStoppingCriterion</span>\n\n<span class=\"n\">stopping_criterion</span> <span class=\"o\">=</span> <span class=\"n\">ThresholdStoppingCriterion</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Again, for quality assurance we can also visualize a slice the GFA and the\nresulting tracking mask.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">sli</span> <span class=\"o\">=</span> <span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"s1\">&#39;GFA&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_axis_off</span><span class=\"p\">()</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">((</span><span class=\"n\">csa_peaks</span><span class=\"o\">.</span><span class=\"n\">gfa</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"n\">sli</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.25</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">&#39;lower&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"s1\">&#39;gfa_tracking_mask.png&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id5\">\n<img alt=\"../../_images/gfa_tracking_mask.png\" src=\"../../_images/gfa_tracking_mask.png\" />\n<p class=\"caption\"><span class=\"caption-text\">An example of tracking mask derived from the generalized fractional\nanisotropy (GFA).</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p>3. Before we can begin tracking is to specify where to \u201cseed\u201d (begin) the fiber\ntracking. Generally, the seeds chosen will depend on the pathways one is\ninterested in modeling. In this example, we\u2019ll use a <span class=\"math notranslate nohighlight\">\\(2 \\times 2 \\times 2\\)</span> grid\nof seeds per voxel, in a sagittal slice of the corpus callosum. Tracking from\nthis region will give us a model of the corpus callosum tract. This slice has\nlabel value <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span></code> in the labels image.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking</span> <span class=\"k\">import</span> <span class=\"n\">utils</span>\n\n<span class=\"n\">seed_mask</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">labels</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">seeds</span> <span class=\"o\">=</span> <span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">seeds_from_mask</span><span class=\"p\">(</span><span class=\"n\">seed_mask</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">density</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>Finally, we can bring it all together using <code class=\"docutils literal notranslate\"><span class=\"pre\">LocalTracking</span></code>, performing Using\nthe EuDX algorithm <a class=\"reference internal\" href=\"../../interfaces/basic_flow/#garyfallidis12\" id=\"id1\"><span>[Garyfallidis12]</span></a>. <code class=\"docutils literal notranslate\"><span class=\"pre\">EuDX</span></code> <a class=\"reference internal\" href=\"../../interfaces/basic_flow/#garyfallidis12\" id=\"id2\"><span>[Garyfallidis12]</span></a> is a fast\nalgorithm that we use here to generate streamlines. This algorithm is what is\nused here and the default option when providing the output of peaks directly\nin LocalTracking.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.local_tracking</span> <span class=\"k\">import</span> <span class=\"n\">LocalTracking</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.tracking.streamline</span> <span class=\"k\">import</span> <span class=\"n\">Streamlines</span>\n\n<span class=\"c1\"># Initialization of LocalTracking. The computation happens in the next step.</span>\n<span class=\"n\">streamlines_generator</span> <span class=\"o\">=</span> <span class=\"n\">LocalTracking</span><span class=\"p\">(</span><span class=\"n\">csa_peaks</span><span class=\"p\">,</span> <span class=\"n\">stopping_criterion</span><span class=\"p\">,</span> <span class=\"n\">seeds</span><span class=\"p\">,</span>\n                                      <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"n\">affine</span><span class=\"p\">,</span> <span class=\"n\">step_size</span><span class=\"o\">=.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"c1\"># Generate streamlines object</span>\n<span class=\"n\">streamlines</span> <span class=\"o\">=</span> <span class=\"n\">Streamlines</span><span class=\"p\">(</span><span class=\"n\">streamlines_generator</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We will then display the resulting streamlines using the <code class=\"docutils literal notranslate\"><span class=\"pre\">fury</span></code>\npython package.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.viz</span> <span class=\"k\">import</span> <span class=\"n\">colormap</span>\n\n<span class=\"k\">if</span> <span class=\"n\">has_fury</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Prepare the display objects.</span>\n    <span class=\"n\">color</span> <span class=\"o\">=</span> <span class=\"n\">colormap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">)</span>\n\n    <span class=\"n\">streamlines_actor</span> <span class=\"o\">=</span> <span class=\"n\">actor</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span>\n                                   <span class=\"n\">colormap</span><span class=\"o\">.</span><span class=\"n\">line_colors</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># Create the 3D display.</span>\n    <span class=\"n\">scene</span> <span class=\"o\">=</span> <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">Scene</span><span class=\"p\">()</span>\n    <span class=\"n\">scene</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">streamlines_actor</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Save still images for this static example. Or for interactivity use</span>\n    <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">record</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">,</span> <span class=\"n\">out_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;tractogram_EuDX.png&#39;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">800</span><span class=\"p\">,</span> <span class=\"mi\">800</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">interactive</span><span class=\"p\">:</span>\n        <span class=\"n\">window</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"figure align-center\" id=\"id6\">\n<img alt=\"../../_images/tractogram_EuDX.png\" src=\"../../_images/tractogram_EuDX.png\" />\n<p class=\"caption\"><span class=\"caption-text\"><strong>Corpus Callosum using EuDx</strong></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p>We\u2019ve created a deterministic set of streamlines using the EuDX algorithm. This\nis so called deterministic because if you repeat the fiber tracking (keeping\nall the inputs the same) you will get exactly the same set of streamlines.\nWe can save the streamlines as a Trackvis file so it can be loaded into other\nsoftware for visualization or further analysis.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dipy.io.stateful_tractogram</span> <span class=\"k\">import</span> <span class=\"n\">Space</span><span class=\"p\">,</span> <span class=\"n\">StatefulTractogram</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dipy.io.streamline</span> <span class=\"k\">import</span> <span class=\"n\">save_trk</span>\n\n<span class=\"n\">sft</span> <span class=\"o\">=</span> <span class=\"n\">StatefulTractogram</span><span class=\"p\">(</span><span class=\"n\">streamlines</span><span class=\"p\">,</span> <span class=\"n\">hardi_img</span><span class=\"p\">,</span> <span class=\"n\">Space</span><span class=\"o\">.</span><span class=\"n\">RASMM</span><span class=\"p\">)</span>\n<span class=\"n\">save_trk</span><span class=\"p\">(</span><span class=\"n\">sft</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tractogram_EuDX.trk&quot;</span><span class=\"p\">,</span> <span class=\"n\">streamlines</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"garyfallidis12\"><span class=\"brackets\">Garyfallidis12</span><span class=\"fn-backref\">(<a href=\"#id1\">1</a>,<a href=\"#id2\">2</a>)</span></dt>\n<dd><p>Garyfallidis E., \u201cTowards an accurate brain tractography\u201d,</p>\n</dd>\n</dl>\n<p>PhD thesis, University of Cambridge, 2012.</p>\n<div class=\"admonition-example-source-code admonition\">\n<p class=\"admonition-title\">Example source code</p>\n<p>You can download <a class=\"reference download internal\" download=\"\" href=\"../../_downloads/631e47256d4430083b80b02406e01f5d/tracking_introduction_eudx.py\"><code class=\"xref download docutils literal notranslate\"><span class=\"pre\">the</span> <span class=\"pre\">full</span> <span class=\"pre\">source</span> <span class=\"pre\">code</span> <span class=\"pre\">of</span> <span class=\"pre\">this</span> <span class=\"pre\">example</span></code></a>. This same script is also included in the dipy source distribution under the <code class=\"file docutils literal notranslate\"><span class=\"pre\">doc/examples/</span></code> directory.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"]], "sourcename": "examples_built/tracking_introduction_eudx.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Introduction to Basic Tracking</a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "examples_built/tracking_introduction_eudx", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}