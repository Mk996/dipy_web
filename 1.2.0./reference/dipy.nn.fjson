{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.io/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code>"}, "next": {"link": "../dipy.reconst/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst</span></code>"}, "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.nn\">\n<span id=\"nn\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn</span></code><a class=\"headerlink\" href=\"#module-dipy.nn\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.bench\" title=\"dipy.nn.bench\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bench</span></code></a>([label,\u00a0verbose,\u00a0extra_argv])</p></td>\n<td><p>Run benchmarks for module using nose.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.test\" title=\"dipy.nn.test\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">test</span></code></a>([label,\u00a0verbose,\u00a0extra_argv,\u00a0doctests,\u00a0\u2026])</p></td>\n<td><p>Run tests for module using nose.</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.nn.model\">\n<span id=\"module-nn-model\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn.model</span></code><a class=\"headerlink\" href=\"#module-dipy.nn.model\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.LooseVersion\" title=\"dipy.nn.model.LooseVersion\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LooseVersion</span></code></a>([vstring])</p></td>\n<td><p>Version numbering for anarchists and software realists.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.MultipleLayerPercepton\" title=\"dipy.nn.model.MultipleLayerPercepton\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">MultipleLayerPercepton</span></code></a>([input_shape,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.SingleLayerPerceptron\" title=\"dipy.nn.model.SingleLayerPerceptron\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SingleLayerPerceptron</span></code></a>([input_shape,\u00a0\u2026])</p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.optional_package\" title=\"dipy.nn.model.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,\u00a0trip_msg])</p></td>\n<td><p>Return package-like thing and module setup for package <cite>name</cite></p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"bench\">\n<h3>bench<a class=\"headerlink\" href=\"#bench\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.nn.bench\">\n<code class=\"sig-prename descclassname\">dipy.nn.</code><code class=\"sig-name descname\">bench</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">label='fast'</em>, <em class=\"sig-param\">verbose=1</em>, <em class=\"sig-param\">extra_argv=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.bench\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run benchmarks for module using nose.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>label</strong><span class=\"classifier\">{\u2018fast\u2019, \u2018full\u2019, \u2018\u2019, attribute identifier}, optional</span></dt><dd><p>Identifies the benchmarks to run. This can be a string to pass to\nthe nosetests executable with the \u2018-A\u2019 option, or one of several\nspecial values.  Special values are:</p>\n<ul class=\"simple\">\n<li><p>\u2018fast\u2019 - the default - which corresponds to the <code class=\"docutils literal notranslate\"><span class=\"pre\">nosetests</span> <span class=\"pre\">-A</span></code>\noption of \u2018not slow\u2019.</p></li>\n<li><p>\u2018full\u2019 - fast (as above) and slow benchmarks as in the\n\u2018no -A\u2019 option to nosetests - this is the same as \u2018\u2019.</p></li>\n<li><p>None or \u2018\u2019 - run all tests.</p></li>\n<li><p>attribute_identifier - string passed directly to nosetests as \u2018-A\u2019.</p></li>\n</ul>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Verbosity value for benchmark outputs, in the range 1-10. Default is 1.</p>\n</dd>\n<dt><strong>extra_argv</strong><span class=\"classifier\">list, optional</span></dt><dd><p>List with any extra arguments to pass to nosetests.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>success</strong><span class=\"classifier\">bool</span></dt><dd><p>Returns True if running the benchmarks works, False if an error\noccurred.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Benchmarks are like tests, but have names starting with \u201cbench\u201d instead\nof \u201ctest\u201d, and can be found under the \u201cbenchmarks\u201d sub-directory of the\nmodule.</p>\n<p>Each NumPy module exposes <cite>bench</cite> in its namespace to run all benchmarks\nfor it.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span> \n<span class=\"go\">Running benchmarks for numpy.lib</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">using 562341 items:</span>\n<span class=\"go\">unique:</span>\n<span class=\"go\">0.11</span>\n<span class=\"go\">unique1d:</span>\n<span class=\"go\">0.11</span>\n<span class=\"go\">ratio: 1.0</span>\n<span class=\"go\">nUnique: 56230 == 56230</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">OK</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">success</span> \n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"test\">\n<h3>test<a class=\"headerlink\" href=\"#test\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.nn.test\">\n<code class=\"sig-prename descclassname\">dipy.nn.</code><code class=\"sig-name descname\">test</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">label='fast'</em>, <em class=\"sig-param\">verbose=1</em>, <em class=\"sig-param\">extra_argv=None</em>, <em class=\"sig-param\">doctests=False</em>, <em class=\"sig-param\">coverage=False</em>, <em class=\"sig-param\">raise_warnings=None</em>, <em class=\"sig-param\">timer=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.test\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run tests for module using nose.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>label</strong><span class=\"classifier\">{\u2018fast\u2019, \u2018full\u2019, \u2018\u2019, attribute identifier}, optional</span></dt><dd><p>Identifies the tests to run. This can be a string to pass to\nthe nosetests executable with the \u2018-A\u2019 option, or one of several\nspecial values.  Special values are:</p>\n<ul class=\"simple\">\n<li><p>\u2018fast\u2019 - the default - which corresponds to the <code class=\"docutils literal notranslate\"><span class=\"pre\">nosetests</span> <span class=\"pre\">-A</span></code>\noption of \u2018not slow\u2019.</p></li>\n<li><p>\u2018full\u2019 - fast (as above) and slow tests as in the\n\u2018no -A\u2019 option to nosetests - this is the same as \u2018\u2019.</p></li>\n<li><p>None or \u2018\u2019 - run all tests.</p></li>\n<li><p>attribute_identifier - string passed directly to nosetests as \u2018-A\u2019.</p></li>\n</ul>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Verbosity value for test outputs, in the range 1-10. Default is 1.</p>\n</dd>\n<dt><strong>extra_argv</strong><span class=\"classifier\">list, optional</span></dt><dd><p>List with any extra arguments to pass to nosetests.</p>\n</dd>\n<dt><strong>doctests</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, run doctests in module. Default is False.</p>\n</dd>\n<dt><strong>coverage</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, report coverage of NumPy code. Default is False.\n(This requires the\n<a class=\"reference external\" href=\"https://nedbatchelder.com/code/modules/coveragehtml\">coverage module</a>).</p>\n</dd>\n<dt><strong>raise_warnings</strong><span class=\"classifier\">None, str or sequence of warnings, optional</span></dt><dd><p>This specifies which warnings to configure as \u2018raise\u2019 instead\nof being shown once during the test execution. Valid strings are:</p>\n<ul class=\"simple\">\n<li><p>\u201cdevelop\u201d : equals <code class=\"docutils literal notranslate\"><span class=\"pre\">(Warning,)</span></code></p></li>\n<li><p>\u201crelease\u201d : equals <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code>, do not raise on any warnings.</p></li>\n</ul>\n</dd>\n<dt><strong>timer</strong><span class=\"classifier\">bool or int, optional</span></dt><dd><p>Timing of individual tests with <code class=\"docutils literal notranslate\"><span class=\"pre\">nose-timer</span></code> (which needs to be\ninstalled).  If True, time tests and report on all of them.\nIf an integer (say <code class=\"docutils literal notranslate\"><span class=\"pre\">N</span></code>), report timing results for <code class=\"docutils literal notranslate\"><span class=\"pre\">N</span></code> slowest\ntests.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>result</strong><span class=\"classifier\">object</span></dt><dd><p>Returns the result of running the tests as a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">nose.result.TextTestResult</span></code> object.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Each NumPy module exposes <cite>test</cite> in its namespace to run all tests for it.\nFor example, to run all tests for numpy.lib:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span> \n</pre></div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span> \n<span class=\"go\">Running unit tests for numpy.lib</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">Ran 976 tests in 3.933s</span>\n</pre></div>\n</div>\n<p>OK</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span> \n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">knownfail</span> \n<span class=\"go\">[]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"looseversion\">\n<h3><a class=\"reference internal\" href=\"#dipy.nn.model.LooseVersion\" title=\"dipy.nn.model.LooseVersion\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LooseVersion</span></code></a><a class=\"headerlink\" href=\"#looseversion\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.nn.model.LooseVersion\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.nn.model.</code><code class=\"sig-name descname\">LooseVersion</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vstring=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.LooseVersion\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">distutils.version.Version</span></code></p>\n<p>Version numbering for anarchists and software realists.\nImplements the standard interface for version number classes as\ndescribed above.  A version number consists of a series of numbers,\nseparated by either periods or strings of letters.  When comparing\nversion numbers, the numeric components will be compared\nnumerically, and the alphabetic components lexically.  The following\nare all valid version numbers, in no particular order:</p>\n<blockquote>\n<div><p>1.5.1\n1.5.2b2\n161\n3.10a\n8.02\n3.4j\n1996.07.12\n3.2.pl0\n3.1.1.6\n2g6\n11g\n0.960923\n2.2beta29\n1.13++\n5.5.kw\n2.0b1pl0</p>\n</div></blockquote>\n<p>In fact, there is no such thing as an invalid version number under\nthis scheme; the rules for comparison are simple and predictable,\nbut may not always give the results you want (for some definition\nof \u201cwant\u201d).</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 47%\" />\n<col style=\"width: 53%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>parse</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.LooseVersion.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">vstring=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.LooseVersion.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dipy.nn.model.LooseVersion.component_re\">\n<code class=\"sig-name descname\">component_re</code><em class=\"property\"> = re.compile('(\\\\d+ | [a-z]+ | \\\\.)', re.VERBOSE)</em><a class=\"headerlink\" href=\"#dipy.nn.model.LooseVersion.component_re\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.LooseVersion.parse\">\n<code class=\"sig-name descname\">parse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">vstring</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.LooseVersion.parse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"multiplelayerpercepton\">\n<h3><a class=\"reference internal\" href=\"#dipy.nn.model.MultipleLayerPercepton\" title=\"dipy.nn.model.MultipleLayerPercepton\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleLayerPercepton</span></code></a><a class=\"headerlink\" href=\"#multiplelayerpercepton\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.nn.model.MultipleLayerPercepton\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.nn.model.</code><code class=\"sig-name descname\">MultipleLayerPercepton</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input_shape=(28, 28), num_hidden=[128], act_hidden='relu', dropout=0.2, num_out=10, act_out='softmax', loss='sparse_categorical_crossentropy', optimizer='adam'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.MultipleLayerPercepton\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.MultipleLayerPercepton.evaluate\" title=\"dipy.nn.model.MultipleLayerPercepton.evaluate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evaluate</span></code></a>(self,\u00a0x_test,\u00a0y_test[,\u00a0verbose])</p></td>\n<td><p>Evaluate the model on test dataset.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.MultipleLayerPercepton.fit\" title=\"dipy.nn.model.MultipleLayerPercepton.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(self,\u00a0x_train,\u00a0y_train[,\u00a0epochs])</p></td>\n<td><p>Train the model on train dataset.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.MultipleLayerPercepton.predict\" title=\"dipy.nn.model.MultipleLayerPercepton.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(self,\u00a0x_test)</p></td>\n<td><p>Predict the output from input samples.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.MultipleLayerPercepton.summary\" title=\"dipy.nn.model.MultipleLayerPercepton.summary\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">summary</span></code></a>(self)</p></td>\n<td><p>Get the summary of the model.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.MultipleLayerPercepton.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self, input_shape=(28, 28), num_hidden=[128], act_hidden='relu', dropout=0.2, num_out=10, act_out='softmax', loss='sparse_categorical_crossentropy', optimizer='adam'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.MultipleLayerPercepton.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Multiple Layer Perceptron with Dropout.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_shape</strong><span class=\"classifier\">tuple</span></dt><dd><p>Shape of data to be trained</p>\n</dd>\n<dt><strong>num_hidden</strong><span class=\"classifier\">list</span></dt><dd><p>List of number of nodes in hidden layers</p>\n</dd>\n<dt><strong>act_hidden</strong><span class=\"classifier\">string</span></dt><dd><p>Activation function used in hidden layer</p>\n</dd>\n<dt><strong>dropout</strong><span class=\"classifier\">float</span></dt><dd><p>Dropout ratio</p>\n</dd>\n<dt><strong>num_out</strong><span class=\"classifier\">10</span></dt><dd><p>Number of nodes in output layer</p>\n</dd>\n<dt><strong>act_out</strong><span class=\"classifier\">string</span></dt><dd><p>Activation function used in output layer</p>\n</dd>\n<dt><strong>optimizer</strong><span class=\"classifier\">string</span></dt><dd><p>Select optimizer. Default adam.</p>\n</dd>\n<dt><strong>loss</strong><span class=\"classifier\">string</span></dt><dd><p>Select loss function for measuring accuracy.\nDefault sparse_categorical_crossentropy.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.MultipleLayerPercepton.evaluate\">\n<code class=\"sig-name descname\">evaluate</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x_test</em>, <em class=\"sig-param\">y_test</em>, <em class=\"sig-param\">verbose=2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.MultipleLayerPercepton.evaluate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Evaluate the model on test dataset.</p>\n<p>The evaluate method will evaluate the model on a test\ndataset.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x_test</strong><span class=\"classifier\">ndarray</span></dt><dd><p>the x_test is the test dataset</p>\n</dd>\n<dt><strong>y_test</strong><span class=\"classifier\">ndarray shape=(BatchSize,)</span></dt><dd><p>the y_test is the labels of the test dataset</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">int (Default = 2)</span></dt><dd><p>By setting verbose 0, 1 or 2 you just say how do you want to\n\u2018see\u2019 the training progress for each epoch.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>evaluate</strong><span class=\"classifier\">List</span></dt><dd><p>return list of loss value and accuracy value on test dataset</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.MultipleLayerPercepton.fit\">\n<code class=\"sig-name descname\">fit</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x_train</em>, <em class=\"sig-param\">y_train</em>, <em class=\"sig-param\">epochs=5</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.MultipleLayerPercepton.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Train the model on train dataset.</p>\n<p>The fit method will train the model for a fixed\nnumber of epochs (iterations) on a dataset.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x_train</strong><span class=\"classifier\">ndarray</span></dt><dd><p>the x_train is the train dataset</p>\n</dd>\n<dt><strong>y_train</strong><span class=\"classifier\">ndarray shape=(BatchSize,)</span></dt><dd><p>the y_train is the labels of the train dataset</p>\n</dd>\n<dt><strong>epochs</strong><span class=\"classifier\">int (Default = 5)</span></dt><dd><p>the number of epochs</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>hist</strong><span class=\"classifier\">object</span></dt><dd><p>A History object. Its History.history attribute is a record of\ntraining loss values and metrics values at successive epochs</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.MultipleLayerPercepton.predict\">\n<code class=\"sig-name descname\">predict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x_test</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.MultipleLayerPercepton.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict the output from input samples.</p>\n<p>The predict method will generates output predictions\nfor the input samples.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x_train</strong><span class=\"classifier\">ndarray</span></dt><dd><p>the x_test is the test dataset or input samples</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>predict</strong><span class=\"classifier\">ndarray shape(TestSize,OutputSize)</span></dt><dd><p>Numpy array(s) of predictions.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.MultipleLayerPercepton.summary\">\n<code class=\"sig-name descname\">summary</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.MultipleLayerPercepton.summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get the summary of the model.</p>\n<p>The summary is textual and includes information about:\nThe layers and their order in the model.\nThe output shape of each layer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>summary</strong><span class=\"classifier\">NoneType</span></dt><dd><p>the summary of the model</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"singlelayerperceptron\">\n<h3><a class=\"reference internal\" href=\"#dipy.nn.model.SingleLayerPerceptron\" title=\"dipy.nn.model.SingleLayerPerceptron\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleLayerPerceptron</span></code></a><a class=\"headerlink\" href=\"#singlelayerperceptron\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.nn.model.SingleLayerPerceptron\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.nn.model.</code><code class=\"sig-name descname\">SingleLayerPerceptron</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">input_shape=(28</em>, <em class=\"sig-param\">28)</em>, <em class=\"sig-param\">num_hidden=128</em>, <em class=\"sig-param\">act_hidden='relu'</em>, <em class=\"sig-param\">dropout=0.2</em>, <em class=\"sig-param\">num_out=10</em>, <em class=\"sig-param\">act_out='softmax'</em>, <em class=\"sig-param\">optimizer='adam'</em>, <em class=\"sig-param\">loss='sparse_categorical_crossentropy'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.SingleLayerPerceptron\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.SingleLayerPerceptron.evaluate\" title=\"dipy.nn.model.SingleLayerPerceptron.evaluate\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">evaluate</span></code></a>(self,\u00a0x_test,\u00a0y_test[,\u00a0verbose])</p></td>\n<td><p>Evaluate the model on test dataset.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.SingleLayerPerceptron.fit\" title=\"dipy.nn.model.SingleLayerPerceptron.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(self,\u00a0x_train,\u00a0y_train[,\u00a0epochs])</p></td>\n<td><p>Train the model on train dataset.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.SingleLayerPerceptron.predict\" title=\"dipy.nn.model.SingleLayerPerceptron.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(self,\u00a0x_test)</p></td>\n<td><p>Predict the output from input samples.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.nn.model.SingleLayerPerceptron.summary\" title=\"dipy.nn.model.SingleLayerPerceptron.summary\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">summary</span></code></a>(self)</p></td>\n<td><p>Get the summary of the model.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.SingleLayerPerceptron.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">input_shape=(28</em>, <em class=\"sig-param\">28)</em>, <em class=\"sig-param\">num_hidden=128</em>, <em class=\"sig-param\">act_hidden='relu'</em>, <em class=\"sig-param\">dropout=0.2</em>, <em class=\"sig-param\">num_out=10</em>, <em class=\"sig-param\">act_out='softmax'</em>, <em class=\"sig-param\">optimizer='adam'</em>, <em class=\"sig-param\">loss='sparse_categorical_crossentropy'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.SingleLayerPerceptron.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Single Layer Perceptron with Dropout.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>input_shape</strong><span class=\"classifier\">tuple</span></dt><dd><p>Shape of data to be trained</p>\n</dd>\n<dt><strong>num_hidden</strong><span class=\"classifier\">int</span></dt><dd><p>Number of nodes in hidden layer</p>\n</dd>\n<dt><strong>act_hidden</strong><span class=\"classifier\">string</span></dt><dd><p>Activation function used in hidden layer</p>\n</dd>\n<dt><strong>dropout</strong><span class=\"classifier\">float</span></dt><dd><p>Dropout ratio</p>\n</dd>\n<dt><strong>num_out</strong><span class=\"classifier\">10</span></dt><dd><p>Number of nodes in output layer</p>\n</dd>\n<dt><strong>act_out</strong><span class=\"classifier\">string</span></dt><dd><p>Activation function used in output layer</p>\n</dd>\n<dt><strong>optimizer</strong><span class=\"classifier\">string</span></dt><dd><p>Select optimizer. Default adam.</p>\n</dd>\n<dt><strong>loss</strong><span class=\"classifier\">string</span></dt><dd><p>Select loss function for measuring accuracy.\nDefault sparse_categorical_crossentropy.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.SingleLayerPerceptron.evaluate\">\n<code class=\"sig-name descname\">evaluate</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x_test</em>, <em class=\"sig-param\">y_test</em>, <em class=\"sig-param\">verbose=2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.SingleLayerPerceptron.evaluate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Evaluate the model on test dataset.</p>\n<p>The evaluate method will evaluate the model on a test\ndataset.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x_test</strong><span class=\"classifier\">ndarray</span></dt><dd><p>the x_test is the test dataset</p>\n</dd>\n<dt><strong>y_test</strong><span class=\"classifier\">ndarray shape=(BatchSize,)</span></dt><dd><p>the y_test is the labels of the test dataset</p>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">int (Default = 2)</span></dt><dd><p>By setting verbose 0, 1 or 2 you just say how do you want to\n\u2018see\u2019 the training progress for each epoch.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>evaluate</strong><span class=\"classifier\">List</span></dt><dd><p>return list of loss value and accuracy value on test dataset</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.SingleLayerPerceptron.fit\">\n<code class=\"sig-name descname\">fit</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x_train</em>, <em class=\"sig-param\">y_train</em>, <em class=\"sig-param\">epochs=5</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.SingleLayerPerceptron.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Train the model on train dataset.</p>\n<p>The fit method will train the model for a fixed\nnumber of epochs (iterations) on a dataset.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x_train</strong><span class=\"classifier\">ndarray</span></dt><dd><p>the x_train is the train dataset</p>\n</dd>\n<dt><strong>y_train</strong><span class=\"classifier\">ndarray shape=(BatchSize,)</span></dt><dd><p>the y_train is the labels of the train dataset</p>\n</dd>\n<dt><strong>epochs</strong><span class=\"classifier\">int (Default = 5)</span></dt><dd><p>the number of epochs</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>hist</strong><span class=\"classifier\">object</span></dt><dd><p>A History object. Its History.history attribute is a record of\ntraining loss values and metrics values at successive epochs</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.SingleLayerPerceptron.predict\">\n<code class=\"sig-name descname\">predict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x_test</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.SingleLayerPerceptron.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict the output from input samples.</p>\n<p>The predict method will generates output predictions\nfor the input samples.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x_train</strong><span class=\"classifier\">ndarray</span></dt><dd><p>the x_test is the test dataset or input samples</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>predict</strong><span class=\"classifier\">ndarray shape(TestSize,OutputSize)</span></dt><dd><p>Numpy array(s) of predictions.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.nn.model.SingleLayerPerceptron.summary\">\n<code class=\"sig-name descname\">summary</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.SingleLayerPerceptron.summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get the summary of the model.</p>\n<p>The summary is textual and includes information about:\nThe layers and their order in the model.\nThe output shape of each layer.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>summary</strong><span class=\"classifier\">NoneType</span></dt><dd><p>the summary of the model</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optional-package\">\n<h3>optional_package<a class=\"headerlink\" href=\"#optional-package\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.nn.model.optional_package\">\n<code class=\"sig-prename descclassname\">dipy.nn.model.</code><code class=\"sig-name descname\">optional_package</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.nn.model.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>name</strong><span class=\"classifier\">str</span></dt><dd><p>package name</p>\n</dd>\n<dt><strong>trip_msg</strong><span class=\"classifier\">None or str</span></dt><dd><p>message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>pkg_like</strong><span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt><dd><p>If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong><span class=\"classifier\">bool</span></dt><dd><p>True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong><span class=\"classifier\">function</span></dt><dd><p>callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>Typical use would be something like this at the top of a module using an\noptional package:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.utils.optpkg</span> <span class=\"k\">import</span> <span class=\"n\">optional_package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">have_pkg</span><span class=\"p\">,</span> <span class=\"n\">setup_module</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;not_a_package&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Of course in this case the package doesn\u2019t exist, and so, in the module:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">have_pkg</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n<p>and</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">some_function</span><span class=\"p\">()</span> \n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">TripWireError</span>: <span class=\"n\">We need package not_a_package for these functions, but</span>\n<span class=\"go\">``import not_a_package`` raised an ImportError</span>\n</pre></div>\n</div>\n<p>If the module does exist - we get the module</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Or a submodule if that\u2019s what we asked for</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os.path&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dirname&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.reconst", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reconst</span></code>", "N", "next"], ["reference/dipy.io", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code>", "P", "previous"]], "sourcename": "reference/dipy.nn.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.nn.model\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nn.model</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#bench\">bench</a></li>\n<li><a class=\"reference internal\" href=\"#test\">test</a></li>\n<li><a class=\"reference internal\" href=\"#looseversion\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LooseVersion</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#multiplelayerpercepton\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleLayerPercepton</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#singlelayerperceptron\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleLayerPerceptron</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#optional-package\">optional_package</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.nn", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}