{"parents": [{"link": "../../documentation/", "title": "Documentation"}, {"link": "../", "title": "API Reference"}], "prev": {"link": "../dipy.boots/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">boots</span></code>"}, "next": {"link": "../dipy.data/", "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">data</span></code>"}, "title": "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core</span></code>", "meta": {}, "body": "<div class=\"section\" id=\"module-dipy.core\">\n<span id=\"core\"></span><h1><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core</span></code><a class=\"headerlink\" href=\"#module-dipy.core\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Core objects</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.test\" title=\"dipy.core.test\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">test</span></code></a>([label,\u00a0verbose,\u00a0extra_argv,\u00a0doctests,\u00a0\u2026])</p></td>\n<td><p>Run tests for module using nose.</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"module-dipy.core.benchmarks\">\n<span id=\"module-core-benchmarks\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.benchmarks</span></code><a class=\"headerlink\" href=\"#module-dipy.core.benchmarks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.benchmarks.bench_sphere\">\n<span id=\"module-core-benchmarks-bench-sphere\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.benchmarks.bench_sphere</span></code><a class=\"headerlink\" href=\"#module-dipy.core.benchmarks.bench_sphere\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Benchmarks for sphere</p>\n<p>Run all benchmarks with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dipy.core</span> <span class=\"k\">as</span> <span class=\"nn\">dipycore</span>\n<span class=\"n\">dipycore</span><span class=\"o\">.</span><span class=\"n\">bench</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>With Pytest, Run this benchmark with:</p>\n<blockquote>\n<div><p>pytest -svv -c bench.ini /path/to/bench_sphere.py</p>\n</div></blockquote>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.benchmarks.bench_sphere.Timer\" title=\"dipy.core.benchmarks.bench_sphere.Timer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Timer</span></code></a></p></td>\n<td><p><p class=\"rubric\">Methods</p>\n</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.benchmarks.bench_sphere.bench_disperse_charges_alt\" title=\"dipy.core.benchmarks.bench_sphere.bench_disperse_charges_alt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">bench_disperse_charges_alt</span></code></a>()</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.benchmarks.bench_sphere.func_minimize_adhoc\" title=\"dipy.core.benchmarks.bench_sphere.func_minimize_adhoc\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">func_minimize_adhoc</span></code></a>(init_hemisphere,\u00a0\u2026)</p></td>\n<td><p></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.benchmarks.bench_sphere.func_minimize_scipy\" title=\"dipy.core.benchmarks.bench_sphere.func_minimize_scipy\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">func_minimize_scipy</span></code></a>(init_pointset,\u00a0\u2026)</p></td>\n<td><p></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.geometry\">\n<span id=\"module-core-geometry\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.geometry</span></code><a class=\"headerlink\" href=\"#module-dipy.core.geometry\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Utility functions for algebra etc</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.cart2sphere\" title=\"dipy.core.geometry.cart2sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cart2sphere</span></code></a>(x,\u00a0y,\u00a0z)</p></td>\n<td><p>Return angles for Cartesian 3D coordinates <cite>x</cite>, <cite>y</cite>, and <cite>z</cite></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.cart_distance\" title=\"dipy.core.geometry.cart_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cart_distance</span></code></a>(pts1,\u00a0pts2)</p></td>\n<td><p>Cartesian distance between <cite>pts1</cite> and <cite>pts2</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.circumradius\" title=\"dipy.core.geometry.circumradius\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">circumradius</span></code></a>(a,\u00a0b,\u00a0c)</p></td>\n<td><p>a, b and c are 3-dimensional vectors which are the vertices of a triangle.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.compose_matrix\" title=\"dipy.core.geometry.compose_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compose_matrix</span></code></a>([scale,\u00a0shear,\u00a0angles,\u00a0\u2026])</p></td>\n<td><p>Return 4x4 transformation matrix from sequence of transformations.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.compose_transformations\" title=\"dipy.core.geometry.compose_transformations\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compose_transformations</span></code></a>(\\*mats)</p></td>\n<td><p>Compose multiple 4x4 affine transformations in one 4x4 matrix</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.decompose_matrix\" title=\"dipy.core.geometry.decompose_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">decompose_matrix</span></code></a>(matrix)</p></td>\n<td><p>Return sequence of transformations from transformation matrix.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.dist_to_corner\" title=\"dipy.core.geometry.dist_to_corner\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dist_to_corner</span></code></a>(affine)</p></td>\n<td><p>Calculate the maximal distance from the center to a corner of a voxel, given an affine</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.euler_matrix\" title=\"dipy.core.geometry.euler_matrix\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">euler_matrix</span></code></a>(ai,\u00a0aj,\u00a0ak[,\u00a0axes])</p></td>\n<td><p>Return homogeneous rotation matrix from Euler angles and axis sequence.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.is_hemispherical\" title=\"dipy.core.geometry.is_hemispherical\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">is_hemispherical</span></code></a>(vecs)</p></td>\n<td><p>Test whether all points on a unit sphere lie in the same hemisphere.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.lambert_equal_area_projection_cart\" title=\"dipy.core.geometry.lambert_equal_area_projection_cart\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lambert_equal_area_projection_cart</span></code></a>(x,\u00a0y,\u00a0z)</p></td>\n<td><p>Lambert Equal Area Projection from cartesian vector to plane</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.lambert_equal_area_projection_polar\" title=\"dipy.core.geometry.lambert_equal_area_projection_polar\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">lambert_equal_area_projection_polar</span></code></a>(theta,\u00a0phi)</p></td>\n<td><p>Lambert Equal Area Projection from polar sphere to plane</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.nearest_pos_semi_def\" title=\"dipy.core.geometry.nearest_pos_semi_def\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">nearest_pos_semi_def</span></code></a>(B)</p></td>\n<td><p>Least squares positive semi-definite tensor estimation</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.normalized_vector\" title=\"dipy.core.geometry.normalized_vector\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">normalized_vector</span></code></a>(vec[,\u00a0axis])</p></td>\n<td><p>Return vector divided by its Euclidean (L2) norm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.perpendicular_directions\" title=\"dipy.core.geometry.perpendicular_directions\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">perpendicular_directions</span></code></a>(v[,\u00a0num,\u00a0half])</p></td>\n<td><p>Computes n evenly spaced perpendicular directions relative to a given vector v</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.rodrigues_axis_rotation\" title=\"dipy.core.geometry.rodrigues_axis_rotation\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">rodrigues_axis_rotation</span></code></a>(r,\u00a0theta)</p></td>\n<td><p>Rodrigues formula</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.sph2latlon\" title=\"dipy.core.geometry.sph2latlon\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sph2latlon</span></code></a>(theta,\u00a0phi)</p></td>\n<td><p>Convert spherical coordinates to latitude and longitude.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.sphere2cart\" title=\"dipy.core.geometry.sphere2cart\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sphere2cart</span></code></a>(r,\u00a0theta,\u00a0phi)</p></td>\n<td><p>Spherical to Cartesian coordinates</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.sphere_distance\" title=\"dipy.core.geometry.sphere_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sphere_distance</span></code></a>(pts1,\u00a0pts2[,\u00a0radius,\u00a0\u2026])</p></td>\n<td><p>Distance across sphere surface between <cite>pts1</cite> and <cite>pts2</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.vec2vec_rotmat\" title=\"dipy.core.geometry.vec2vec_rotmat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">vec2vec_rotmat</span></code></a>(u,\u00a0v)</p></td>\n<td><p>rotation matrix from 2 unit vectors</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.vector_cosine\" title=\"dipy.core.geometry.vector_cosine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">vector_cosine</span></code></a>(vecs1,\u00a0vecs2)</p></td>\n<td><p>Cosine of angle between two (sets of) vectors</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.geometry.vector_norm\" title=\"dipy.core.geometry.vector_norm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">vector_norm</span></code></a>(vec[,\u00a0axis,\u00a0keepdims])</p></td>\n<td><p>Return vector Euclidean (L2) norm</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.gradients\">\n<span id=\"module-core-gradients\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.gradients</span></code><a class=\"headerlink\" href=\"#module-dipy.core.gradients\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.GradientTable\" title=\"dipy.core.gradients.GradientTable\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GradientTable</span></code></a>(gradients[,\u00a0big_delta,\u00a0\u2026])</p></td>\n<td><p>Diffusion gradient information</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.HemiSphere\" title=\"dipy.core.gradients.HemiSphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a>([x,\u00a0y,\u00a0z,\u00a0theta,\u00a0phi,\u00a0xyz,\u00a0\u2026])</p></td>\n<td><p>Points on the unit sphere.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.auto_attr\" title=\"dipy.core.gradients.auto_attr\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_attr</span></code></a>(func)</p></td>\n<td><p>Decorator to create OneTimeProperty attributes.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.btens_to_params\" title=\"dipy.core.gradients.btens_to_params\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">btens_to_params</span></code></a>(btens[,\u00a0ztol])</p></td>\n<td><p>Compute trace, anisotropy and assymetry parameters from b-tensors</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.check_multi_b\" title=\"dipy.core.gradients.check_multi_b\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">check_multi_b</span></code></a>(gtab,\u00a0n_bvals[,\u00a0non_zero,\u00a0bmag])</p></td>\n<td><p>Check if you have enough different b-values in your gradient table</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.deprecate_with_version\" title=\"dipy.core.gradients.deprecate_with_version\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">deprecate_with_version</span></code></a>(message[,\u00a0since,\u00a0\u2026])</p></td>\n<td><p>Return decorator function function for deprecation warning / error.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.disperse_charges\" title=\"dipy.core.gradients.disperse_charges\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">disperse_charges</span></code></a>(hemi,\u00a0iters[,\u00a0const])</p></td>\n<td><p>Models electrostatic repulsion on the unit sphere</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.generate_bvecs\" title=\"dipy.core.gradients.generate_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">generate_bvecs</span></code></a>(N[,\u00a0iters])</p></td>\n<td><p>Generates N bvectors.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.get_bval_indices\" title=\"dipy.core.gradients.get_bval_indices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">get_bval_indices</span></code></a>(bvals,\u00a0bval[,\u00a0tol])</p></td>\n<td><p>Get indices where the b-value is <cite>bval</cite></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.gradient_table\" title=\"dipy.core.gradients.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a>(bvals[,\u00a0bvecs,\u00a0big_delta,\u00a0\u2026])</p></td>\n<td><p>A general function for creating diffusion MR gradients.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.gradient_table_from_bvals_bvecs\" title=\"dipy.core.gradients.gradient_table_from_bvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table_from_bvals_bvecs</span></code></a>(bvals,\u00a0bvecs)</p></td>\n<td><p>Creates a GradientTable from a bvals array and a bvecs array</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.gradient_table_from_gradient_strength_bvecs\" title=\"dipy.core.gradients.gradient_table_from_gradient_strength_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table_from_gradient_strength_bvecs</span></code></a>(\u2026)</p></td>\n<td><p>A general function for creating diffusion MR gradients.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.gradient_table_from_qvals_bvecs\" title=\"dipy.core.gradients.gradient_table_from_qvals_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table_from_qvals_bvecs</span></code></a>(qvals,\u00a0\u2026)</p></td>\n<td><p>A general function for creating diffusion MR gradients.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.inv\" title=\"dipy.core.gradients.inv\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">inv</span></code></a>(a[,\u00a0overwrite_a,\u00a0check_finite])</p></td>\n<td><p>Compute the inverse of a matrix.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.params_to_btens\" title=\"dipy.core.gradients.params_to_btens\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">params_to_btens</span></code></a>(bval,\u00a0bdelta,\u00a0b_eta)</p></td>\n<td><p>Compute b-tensor from trace, anisotropy and assymetry parameters</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.polar\" title=\"dipy.core.gradients.polar\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">polar</span></code></a>(a[,\u00a0side])</p></td>\n<td><p>Compute the polar decomposition.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.reorient_bvecs\" title=\"dipy.core.gradients.reorient_bvecs\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reorient_bvecs</span></code></a>(gtab,\u00a0affines[,\u00a0atol])</p></td>\n<td><p>Reorient the directions in a GradientTable.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.round_bvals\" title=\"dipy.core.gradients.round_bvals\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">round_bvals</span></code></a>(bvals[,\u00a0bmag])</p></td>\n<td><p>\u201cThis function rounds the b-values</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.unique_bvals\" title=\"dipy.core.gradients.unique_bvals\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">unique_bvals</span></code></a>(bvals[,\u00a0bmag,\u00a0rbvals])</p></td>\n<td><p>This function gives the unique rounded b-values of the data</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.unique_bvals_magnitude\" title=\"dipy.core.gradients.unique_bvals_magnitude\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">unique_bvals_magnitude</span></code></a>(bvals[,\u00a0bmag,\u00a0rbvals])</p></td>\n<td><p>This function gives the unique rounded b-values of the data</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.unique_bvals_tolerance\" title=\"dipy.core.gradients.unique_bvals_tolerance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">unique_bvals_tolerance</span></code></a>(bvals[,\u00a0tol])</p></td>\n<td><p>Gives the unique b-values of the data, within a tolerance gap</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.vec2vec_rotmat\" title=\"dipy.core.gradients.vec2vec_rotmat\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">vec2vec_rotmat</span></code></a>(u,\u00a0v)</p></td>\n<td><p>rotation matrix from 2 unit vectors</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.vector_norm\" title=\"dipy.core.gradients.vector_norm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">vector_norm</span></code></a>(vec[,\u00a0axis,\u00a0keepdims])</p></td>\n<td><p>Return vector Euclidean (L2) norm</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.warn\" title=\"dipy.core.gradients.warn\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">warn</span></code></a>(message[,\u00a0category,\u00a0stacklevel,\u00a0source])</p></td>\n<td><p>Issue a warning, or maybe ignore it or raise an exception.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.graph\">\n<span id=\"module-core-graph\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.graph</span></code><a class=\"headerlink\" href=\"#module-dipy.core.graph\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A simple graph class</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.graph.Graph\" title=\"dipy.core.graph.Graph\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Graph</span></code></a>()</p></td>\n<td><p>A simple graph class</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.histeq\">\n<span id=\"module-core-histeq\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.histeq</span></code><a class=\"headerlink\" href=\"#module-dipy.core.histeq\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.histeq.histeq\" title=\"dipy.core.histeq.histeq\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">histeq</span></code></a>(arr[,\u00a0num_bins])</p></td>\n<td><p>Performs an histogram equalization on <code class=\"docutils literal notranslate\"><span class=\"pre\">arr</span></code>.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.ndindex\">\n<span id=\"module-core-ndindex\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.ndindex</span></code><a class=\"headerlink\" href=\"#module-dipy.core.ndindex\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.ndindex.as_strided\" title=\"dipy.core.ndindex.as_strided\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">as_strided</span></code></a>(x[,\u00a0shape,\u00a0strides,\u00a0subok,\u00a0writeable])</p></td>\n<td><p>Create a view into the array with the given shape and strides.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.ndindex.ndindex\" title=\"dipy.core.ndindex.ndindex\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ndindex</span></code></a>(shape)</p></td>\n<td><p>An N-dimensional iterator object to index arrays.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.onetime\">\n<span id=\"module-core-onetime\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.onetime</span></code><a class=\"headerlink\" href=\"#module-dipy.core.onetime\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Descriptor support for NIPY.</p>\n<p>Copyright (c) 2006-2011, NIPY Developers\nAll rights reserved.</p>\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><dl class=\"simple\">\n<dt>Redistributions of source code must retain the above copyright</dt><dd><p>notice, this list of conditions and the following disclaimer.</p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Redistributions in binary form must reproduce the above</dt><dd><p>copyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided\nwith the distribution.</p>\n</dd>\n</dl>\n</li>\n<li><dl class=\"simple\">\n<dt>Neither the name of the NIPY Developers nor the names of any</dt><dd><p>contributors may be used to endorse or promote products derived\nfrom this software without specific prior written permission.</p>\n</dd>\n</dl>\n</li>\n</ul>\n</div></blockquote>\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\u201cAS IS\u201d AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>\n<p>Utilities to support special Python descriptors [1,2], in particular the use of\na useful pattern for properties we call \u2018one time properties\u2019.  These are\nobject attributes which are declared as properties, but become regular\nattributes once they\u2019ve been read the first time.  They can thus be evaluated\nlater in the object\u2019s life cycle, but once evaluated they become normal, static\nattributes with no function call overhead on access or any other constraints.</p>\n<p>A special ResetMixin class is provided to add a .reset() method to users who\nmay want to have their objects capable of resetting these computed properties\nto their \u2018untriggered\u2019 state.</p>\n<div class=\"section\" id=\"references\">\n<h3>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>[1] How-To Guide for Descriptors, Raymond\nHettinger. <a class=\"reference external\" href=\"http://users.rcn.com/python/download/Descriptor.htm\">http://users.rcn.com/python/download/Descriptor.htm</a></p>\n<p>[2] Python data model, <a class=\"reference external\" href=\"http://docs.python.org/reference/datamodel.html\">http://docs.python.org/reference/datamodel.html</a></p>\n</div>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.onetime.OneTimeProperty\" title=\"dipy.core.onetime.OneTimeProperty\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">OneTimeProperty</span></code></a>(func)</p></td>\n<td><p>A descriptor to make special properties that become normal attributes.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.onetime.ResetMixin\" title=\"dipy.core.onetime.ResetMixin\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">ResetMixin</span></code></a></p></td>\n<td><p>A Mixin class to add a .reset() method to users of OneTimeProperty.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.onetime.auto_attr\" title=\"dipy.core.onetime.auto_attr\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_attr</span></code></a>(func)</p></td>\n<td><p>Decorator to create OneTimeProperty attributes.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.optimize\">\n<span id=\"module-core-optimize\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.optimize</span></code><a class=\"headerlink\" href=\"#module-dipy.core.optimize\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A unified interface for performing and debugging optimization problems.</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.NonNegativeLeastSquares\" title=\"dipy.core.optimize.NonNegativeLeastSquares\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">NonNegativeLeastSquares</span></code></a>(*args,\u00a0**kwargs)</p></td>\n<td><p>A sklearn-like interface to scipy.optimize.nnls</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.Optimizer\" title=\"dipy.core.optimize.Optimizer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a>(fun,\u00a0x0[,\u00a0args,\u00a0method,\u00a0jac,\u00a0\u2026])</p></td>\n<td><p><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><p></p></dd>\n</dl>\n</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.SKLearnLinearSolver\" title=\"dipy.core.optimize.SKLearnLinearSolver\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">SKLearnLinearSolver</span></code></a>(*args,\u00a0**kwargs)</p></td>\n<td><p>Provide a sklearn-like uniform interface to algorithms that solve problems of the form: <span class=\"math notranslate nohighlight\">\\(y = Ax\\)</span> for <span class=\"math notranslate nohighlight\">\\(x\\)</span></p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.minimize\" title=\"dipy.core.optimize.minimize\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">minimize</span></code></a>(fun,\u00a0x0[,\u00a0args,\u00a0method,\u00a0jac,\u00a0hess,\u00a0\u2026])</p></td>\n<td><p>Minimization of scalar function of one or more variables.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.sparse_nnls\" title=\"dipy.core.optimize.sparse_nnls\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sparse_nnls</span></code></a>(y,\u00a0X[,\u00a0momentum,\u00a0step_size,\u00a0\u2026])</p></td>\n<td><p>Solve y=Xh for h, using gradient descent, with X a sparse matrix.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.spdot\" title=\"dipy.core.optimize.spdot\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">spdot</span></code></a>(A,\u00a0B)</p></td>\n<td><p>The same as np.dot(A, B), except it works even if A or B or both are sparse matrices.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.profile\">\n<span id=\"module-core-profile\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.profile</span></code><a class=\"headerlink\" href=\"#module-dipy.core.profile\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Class for profiling cython code</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.profile.Profiler\" title=\"dipy.core.profile.Profiler\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Profiler</span></code></a>([call])</p></td>\n<td><p>Profile python/cython files or functions</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.profile.optional_package\" title=\"dipy.core.profile.optional_package\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">optional_package</span></code></a>(name[,\u00a0trip_msg])</p></td>\n<td><p>Return package-like thing and module setup for package <cite>name</cite></p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.rng\">\n<span id=\"module-core-rng\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.rng</span></code><a class=\"headerlink\" href=\"#module-dipy.core.rng\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Random number generation utilities.</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.rng.LEcuyer\" title=\"dipy.core.rng.LEcuyer\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">LEcuyer</span></code></a>([s1,\u00a0s2])</p></td>\n<td><p>Return a LEcuyer random number generator.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.rng.WichmannHill1982\" title=\"dipy.core.rng.WichmannHill1982\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">WichmannHill1982</span></code></a>([ix,\u00a0iy,\u00a0iz])</p></td>\n<td><p>Algorithm AS 183 Appl.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.rng.WichmannHill2006\" title=\"dipy.core.rng.WichmannHill2006\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">WichmannHill2006</span></code></a>([ix,\u00a0iy,\u00a0iz,\u00a0it])</p></td>\n<td><p>Wichmann Hill (2006) random number generator.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.rng.architecture\" title=\"dipy.core.rng.architecture\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">architecture</span></code></a>([executable,\u00a0bits,\u00a0linkage])</p></td>\n<td><p>Queries the given executable (defaults to the Python interpreter binary) for various architecture information.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.rng.floor\" title=\"dipy.core.rng.floor\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">floor</span></code></a>(x,\u00a0/)</p></td>\n<td><p>Return the floor of x as an Integral.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.sphere\">\n<span id=\"module-core-sphere\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.sphere</span></code><a class=\"headerlink\" href=\"#module-dipy.core.sphere\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.HemiSphere\" title=\"dipy.core.sphere.HemiSphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a>([x,\u00a0y,\u00a0z,\u00a0theta,\u00a0phi,\u00a0xyz,\u00a0\u2026])</p></td>\n<td><p>Points on the unit sphere.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.Sphere\" title=\"dipy.core.sphere.Sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a>([x,\u00a0y,\u00a0z,\u00a0theta,\u00a0phi,\u00a0xyz,\u00a0faces,\u00a0edges])</p></td>\n<td><p>Points on the unit sphere.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.auto_attr\" title=\"dipy.core.sphere.auto_attr\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">auto_attr</span></code></a>(func)</p></td>\n<td><p>Decorator to create OneTimeProperty attributes.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.cart2sphere\" title=\"dipy.core.sphere.cart2sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cart2sphere</span></code></a>(x,\u00a0y,\u00a0z)</p></td>\n<td><p>Return angles for Cartesian 3D coordinates <cite>x</cite>, <cite>y</cite>, and <cite>z</cite></p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.disperse_charges\" title=\"dipy.core.sphere.disperse_charges\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">disperse_charges</span></code></a>(hemi,\u00a0iters[,\u00a0const])</p></td>\n<td><p>Models electrostatic repulsion on the unit sphere</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.disperse_charges_alt\" title=\"dipy.core.sphere.disperse_charges_alt\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">disperse_charges_alt</span></code></a>(init_pointset,\u00a0iters[,\u00a0tol])</p></td>\n<td><p>Reimplementation of disperse_charges making use of <cite>scipy.optimize.fmin_slsqp</cite>.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.euler_characteristic_check\" title=\"dipy.core.sphere.euler_characteristic_check\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">euler_characteristic_check</span></code></a>(sphere[,\u00a0chi])</p></td>\n<td><p>Checks the euler characteristic of a sphere</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.faces_from_sphere_vertices\" title=\"dipy.core.sphere.faces_from_sphere_vertices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">faces_from_sphere_vertices</span></code></a>(vertices)</p></td>\n<td><p>Triangulate a set of vertices on the sphere.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.remove_similar_vertices\" title=\"dipy.core.sphere.remove_similar_vertices\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">remove_similar_vertices</span></code></a>()</p></td>\n<td><p>Remove vertices that are less than <cite>theta</cite> degrees from any other</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.sphere2cart\" title=\"dipy.core.sphere.sphere2cart\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sphere2cart</span></code></a>(r,\u00a0theta,\u00a0phi)</p></td>\n<td><p>Spherical to Cartesian coordinates</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.unique_edges\" title=\"dipy.core.sphere.unique_edges\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">unique_edges</span></code></a>(faces[,\u00a0return_mapping])</p></td>\n<td><p>Extract all unique edges from given triangular faces.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.unique_sets\" title=\"dipy.core.sphere.unique_sets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">unique_sets</span></code></a>(sets[,\u00a0return_inverse])</p></td>\n<td><p>Remove duplicate sets.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.vector_norm\" title=\"dipy.core.sphere.vector_norm\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">vector_norm</span></code></a>(vec[,\u00a0axis,\u00a0keepdims])</p></td>\n<td><p>Return vector Euclidean (L2) norm</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.sphere_stats\">\n<span id=\"module-core-sphere-stats\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.sphere_stats</span></code><a class=\"headerlink\" href=\"#module-dipy.core.sphere_stats\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Statistics on spheres</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere_stats.permutations\" title=\"dipy.core.sphere_stats.permutations\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">permutations</span></code></a></p></td>\n<td><p>permutations(iterable[, r]) \u2013&gt; permutations object</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere_stats.angular_similarity\" title=\"dipy.core.sphere_stats.angular_similarity\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">angular_similarity</span></code></a>(S,\u00a0T)</p></td>\n<td><p>Computes the cosine distance of the best match between points of two sets of vectors S and T</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere_stats.compare_orientation_sets\" title=\"dipy.core.sphere_stats.compare_orientation_sets\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">compare_orientation_sets</span></code></a>(S,\u00a0T)</p></td>\n<td><p>Computes the mean cosine distance of the best match between points of two sets of vectors S and T (angular similarity)</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere_stats.eigenstats\" title=\"dipy.core.sphere_stats.eigenstats\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">eigenstats</span></code></a>(points[,\u00a0alpha])</p></td>\n<td><p>Principal direction and confidence ellipse</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere_stats.random_uniform_on_sphere\" title=\"dipy.core.sphere_stats.random_uniform_on_sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">random_uniform_on_sphere</span></code></a>([n,\u00a0coords])</p></td>\n<td><p>Random unit vectors from a uniform distribution on the sphere.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.subdivide_octahedron\">\n<span id=\"module-core-subdivide-octahedron\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.subdivide_octahedron</span></code><a class=\"headerlink\" href=\"#module-dipy.core.subdivide_octahedron\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Create a unit sphere by subdividing all triangles of an octahedron\nrecursively.</p>\n<p>The unit sphere has a radius of 1, which also means that all points in this\nsphere (assumed to have centre at [0, 0, 0]) have an absolute value (modulus)\nof 1. Another feature of the unit sphere is that the unit normals of this\nsphere are exactly the same as the vertices.</p>\n<p>This recursive method will avoid the common problem of the polar singularity,\nproduced by 2d (lon-lat) parameterization methods.</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.HemiSphere\" title=\"dipy.core.subdivide_octahedron.HemiSphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a>([x,\u00a0y,\u00a0z,\u00a0theta,\u00a0phi,\u00a0xyz,\u00a0\u2026])</p></td>\n<td><p>Points on the unit sphere.</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.create_unit_hemisphere\" title=\"dipy.core.subdivide_octahedron.create_unit_hemisphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_unit_hemisphere</span></code></a>([recursion_level])</p></td>\n<td><p>Creates a unit sphere by subdividing a unit octahedron, returns half the sphere.</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.create_unit_sphere\" title=\"dipy.core.subdivide_octahedron.create_unit_sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_unit_sphere</span></code></a>([recursion_level])</p></td>\n<td><p>Creates a unit sphere by subdividing a unit octahedron.</p></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"module-dipy.core.wavelet\">\n<span id=\"module-core-wavelet\"></span><h2>Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.wavelet</span></code><a class=\"headerlink\" href=\"#module-dipy.core.wavelet\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.wavelet.afb3D\" title=\"dipy.core.wavelet.afb3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">afb3D</span></code></a>(x,\u00a0af1[,\u00a0af2,\u00a0af3])</p></td>\n<td><p>3D Analysis Filter Bank</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.wavelet.afb3D_A\" title=\"dipy.core.wavelet.afb3D_A\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">afb3D_A</span></code></a>(x,\u00a0af,\u00a0d)</p></td>\n<td><p>3D Analysis Filter Bank</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.wavelet.cshift3D\" title=\"dipy.core.wavelet.cshift3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cshift3D</span></code></a>(x,\u00a0m,\u00a0d)</p></td>\n<td><p>3D Circular Shift</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.wavelet.dwt3D\" title=\"dipy.core.wavelet.dwt3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">dwt3D</span></code></a>(x,\u00a0J,\u00a0af)</p></td>\n<td><p>3-D Discrete Wavelet Transform</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.wavelet.idwt3D\" title=\"dipy.core.wavelet.idwt3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">idwt3D</span></code></a>(w,\u00a0J,\u00a0sf)</p></td>\n<td><p>Inverse 3-D Discrete Wavelet Transform</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.wavelet.permutationinverse\" title=\"dipy.core.wavelet.permutationinverse\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">permutationinverse</span></code></a>(perm)</p></td>\n<td><p>Function generating inverse of the permutation</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.wavelet.sfb3D\" title=\"dipy.core.wavelet.sfb3D\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sfb3D</span></code></a>(lo,\u00a0hi,\u00a0sf1[,\u00a0sf2,\u00a0sf3])</p></td>\n<td><p>3D Synthesis Filter Bank</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.wavelet.sfb3D_A\" title=\"dipy.core.wavelet.sfb3D_A\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sfb3D_A</span></code></a>(lo,\u00a0hi,\u00a0sf,\u00a0d)</p></td>\n<td><p>3D Synthesis Filter Bank</p></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"test\">\n<h3>test<a class=\"headerlink\" href=\"#test\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.test\">\n<code class=\"sig-prename descclassname\">dipy.core.</code><code class=\"sig-name descname\">test</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">label='fast'</em>, <em class=\"sig-param\">verbose=1</em>, <em class=\"sig-param\">extra_argv=None</em>, <em class=\"sig-param\">doctests=False</em>, <em class=\"sig-param\">coverage=False</em>, <em class=\"sig-param\">raise_warnings=None</em>, <em class=\"sig-param\">timer=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.test\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run tests for module using nose.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>label</strong><span class=\"classifier\">{\u2018fast\u2019, \u2018full\u2019, \u2018\u2019, attribute identifier}, optional</span></dt><dd><p>Identifies the tests to run. This can be a string to pass to\nthe nosetests executable with the \u2018-A\u2019 option, or one of several\nspecial values.  Special values are:</p>\n<ul class=\"simple\">\n<li><p>\u2018fast\u2019 - the default - which corresponds to the <code class=\"docutils literal notranslate\"><span class=\"pre\">nosetests</span> <span class=\"pre\">-A</span></code>\noption of \u2018not slow\u2019.</p></li>\n<li><p>\u2018full\u2019 - fast (as above) and slow tests as in the\n\u2018no -A\u2019 option to nosetests - this is the same as \u2018\u2019.</p></li>\n<li><p>None or \u2018\u2019 - run all tests.</p></li>\n<li><p>attribute_identifier - string passed directly to nosetests as \u2018-A\u2019.</p></li>\n</ul>\n</dd>\n<dt><strong>verbose</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Verbosity value for test outputs, in the range 1-10. Default is 1.</p>\n</dd>\n<dt><strong>extra_argv</strong><span class=\"classifier\">list, optional</span></dt><dd><p>List with any extra arguments to pass to nosetests.</p>\n</dd>\n<dt><strong>doctests</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, run doctests in module. Default is False.</p>\n</dd>\n<dt><strong>coverage</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, report coverage of NumPy code. Default is False.\n(This requires the\n<a class=\"reference external\" href=\"https://nedbatchelder.com/code/modules/coveragehtml\">coverage module</a>).</p>\n</dd>\n<dt><strong>raise_warnings</strong><span class=\"classifier\">None, str or sequence of warnings, optional</span></dt><dd><p>This specifies which warnings to configure as \u2018raise\u2019 instead\nof being shown once during the test execution. Valid strings are:</p>\n<ul class=\"simple\">\n<li><p>\u201cdevelop\u201d : equals <code class=\"docutils literal notranslate\"><span class=\"pre\">(Warning,)</span></code></p></li>\n<li><p>\u201crelease\u201d : equals <code class=\"docutils literal notranslate\"><span class=\"pre\">()</span></code>, do not raise on any warnings.</p></li>\n</ul>\n</dd>\n<dt><strong>timer</strong><span class=\"classifier\">bool or int, optional</span></dt><dd><p>Timing of individual tests with <code class=\"docutils literal notranslate\"><span class=\"pre\">nose-timer</span></code> (which needs to be\ninstalled).  If True, time tests and report on all of them.\nIf an integer (say <code class=\"docutils literal notranslate\"><span class=\"pre\">N</span></code>), report timing results for <code class=\"docutils literal notranslate\"><span class=\"pre\">N</span></code> slowest\ntests.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>result</strong><span class=\"classifier\">object</span></dt><dd><p>Returns the result of running the tests as a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">nose.result.TextTestResult</span></code> object.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Each NumPy module exposes <cite>test</cite> in its namespace to run all tests for it.\nFor example, to run all tests for numpy.lib:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span> \n</pre></div>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">test</span><span class=\"p\">()</span> \n<span class=\"go\">Running unit tests for numpy.lib</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">Ran 976 tests in 3.933s</span>\n</pre></div>\n</div>\n<p>OK</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span> \n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">knownfail</span> \n<span class=\"go\">[]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"timer\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.benchmarks.bench_sphere.Timer\" title=\"dipy.core.benchmarks.bench_sphere.Timer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Timer</span></code></a><a class=\"headerlink\" href=\"#timer\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.benchmarks.bench_sphere.Timer\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.benchmarks.bench_sphere.</code><code class=\"sig-name descname\">Timer</code><a class=\"headerlink\" href=\"#dipy.core.benchmarks.bench_sphere.Timer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 70%\" />\n<col style=\"width: 30%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>duration_in_seconds</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.benchmarks.bench_sphere.Timer.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.benchmarks.bench_sphere.Timer.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.benchmarks.bench_sphere.Timer.duration_in_seconds\">\n<code class=\"sig-name descname\">duration_in_seconds</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.benchmarks.bench_sphere.Timer.duration_in_seconds\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"bench-disperse-charges-alt\">\n<h3>bench_disperse_charges_alt<a class=\"headerlink\" href=\"#bench-disperse-charges-alt\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.benchmarks.bench_sphere.bench_disperse_charges_alt\">\n<code class=\"sig-prename descclassname\">dipy.core.benchmarks.bench_sphere.</code><code class=\"sig-name descname\">bench_disperse_charges_alt</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.benchmarks.bench_sphere.bench_disperse_charges_alt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"func-minimize-adhoc\">\n<h3>func_minimize_adhoc<a class=\"headerlink\" href=\"#func-minimize-adhoc\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.benchmarks.bench_sphere.func_minimize_adhoc\">\n<code class=\"sig-prename descclassname\">dipy.core.benchmarks.bench_sphere.</code><code class=\"sig-name descname\">func_minimize_adhoc</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">init_hemisphere</em>, <em class=\"sig-param\">num_iterations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.benchmarks.bench_sphere.func_minimize_adhoc\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"func-minimize-scipy\">\n<h3>func_minimize_scipy<a class=\"headerlink\" href=\"#func-minimize-scipy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.benchmarks.bench_sphere.func_minimize_scipy\">\n<code class=\"sig-prename descclassname\">dipy.core.benchmarks.bench_sphere.</code><code class=\"sig-name descname\">func_minimize_scipy</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">init_pointset</em>, <em class=\"sig-param\">num_iterations</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.benchmarks.bench_sphere.func_minimize_scipy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</div>\n<div class=\"section\" id=\"cart2sphere\">\n<h3>cart2sphere<a class=\"headerlink\" href=\"#cart2sphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.cart2sphere\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">cart2sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">y</em>, <em class=\"sig-param\">z</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.cart2sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return angles for Cartesian 3D coordinates <cite>x</cite>, <cite>y</cite>, and <cite>z</cite></p>\n<p>See doc for <code class=\"docutils literal notranslate\"><span class=\"pre\">sphere2cart</span></code> for angle conventions and derivation\nof the formulae.</p>\n<p><span class=\"math notranslate nohighlight\">\\(0\\le\\theta\\mathrm{(theta)}\\le\\pi\\)</span> and <span class=\"math notranslate nohighlight\">\\(-\\pi\\le\\phi\\mathrm{(phi)}\\le\\pi\\)</span></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">array_like</span></dt><dd><p>x coordinate in Cartesian space</p>\n</dd>\n<dt><strong>y</strong><span class=\"classifier\">array_like</span></dt><dd><p>y coordinate in Cartesian space</p>\n</dd>\n<dt><strong>z</strong><span class=\"classifier\">array_like</span></dt><dd><p>z coordinate</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>r</strong><span class=\"classifier\">array</span></dt><dd><p>radius</p>\n</dd>\n<dt><strong>theta</strong><span class=\"classifier\">array</span></dt><dd><p>inclination (polar) angle</p>\n</dd>\n<dt><strong>phi</strong><span class=\"classifier\">array</span></dt><dd><p>azimuth angle</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"cart-distance\">\n<h3>cart_distance<a class=\"headerlink\" href=\"#cart-distance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.cart_distance\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">cart_distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">pts1</em>, <em class=\"sig-param\">pts2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.cart_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Cartesian distance between <cite>pts1</cite> and <cite>pts2</cite></p>\n<p>If either of <cite>pts1</cite> or <cite>pts2</cite> is 2D, then we take the first\ndimension to index points, and the second indexes coordinate.  More\ngenerally, we take the last dimension to be the coordinate\ndimension.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>pts1</strong><span class=\"classifier\">(N,R) or (R,) array_like</span></dt><dd><p>where N is the number of points and R is the number of\ncoordinates defining a point (<code class=\"docutils literal notranslate\"><span class=\"pre\">R==3</span></code> for 3D)</p>\n</dd>\n<dt><strong>pts2</strong><span class=\"classifier\">(N,R) or (R,) array_like</span></dt><dd><p>where N is the number of points and R is the number of\ncoordinates defining a point (<code class=\"docutils literal notranslate\"><span class=\"pre\">R==3</span></code> for 3D).  It should be\npossible to broadcast <cite>pts1</cite> against <cite>pts2</cite></p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>d</strong><span class=\"classifier\">(N,) or (0,) array</span></dt><dd><p>Cartesian distances between corresponding points in <cite>pts1</cite> and\n<cite>pts2</cite></p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.core.geometry.sphere_distance\" title=\"dipy.core.geometry.sphere_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">sphere_distance</span></code></a></dt><dd><p>distance between points on sphere surface</p>\n</dd>\n</dl>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cart_distance</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"go\">3.0</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"circumradius\">\n<h3>circumradius<a class=\"headerlink\" href=\"#circumradius\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.circumradius\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">circumradius</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">a</em>, <em class=\"sig-param\">b</em>, <em class=\"sig-param\">c</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.circumradius\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>a, b and c are 3-dimensional vectors which are the vertices of a\ntriangle. The function returns the circumradius of the triangle, i.e\nthe radius of the smallest circle that can contain the triangle. In\nthe degenerate case when the 3 points are collinear it returns\nhalf the distance between the furthest apart points.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>a, b, c</strong><span class=\"classifier\">(3,) array_like</span></dt><dd><p>the three vertices of the triangle</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>circumradius</strong><span class=\"classifier\">float</span></dt><dd><p>the desired circumradius</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-matrix\">\n<h3>compose_matrix<a class=\"headerlink\" href=\"#compose-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.compose_matrix\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">compose_matrix</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">scale=None</em>, <em class=\"sig-param\">shear=None</em>, <em class=\"sig-param\">angles=None</em>, <em class=\"sig-param\">translate=None</em>, <em class=\"sig-param\">perspective=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.compose_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return 4x4 transformation matrix from sequence of\ntransformations.</p>\n<p>Code modified from the work of Christoph Gohlke link provided here\n<a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<p>This is the inverse of the <code class=\"docutils literal notranslate\"><span class=\"pre\">decompose_matrix</span></code> function.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>scale</strong><span class=\"classifier\">(3,) array_like</span></dt><dd><p>Scaling factors.</p>\n</dd>\n<dt><strong>shear</strong><span class=\"classifier\">array_like</span></dt><dd><p>Shear factors for x-y, x-z, y-z axes.</p>\n</dd>\n<dt><strong>angles</strong><span class=\"classifier\">array_like</span></dt><dd><p>Euler angles about static x, y, z axes.</p>\n</dd>\n<dt><strong>translate</strong><span class=\"classifier\">array_like</span></dt><dd><p>Translation vector along x, y, z axes.</p>\n</dd>\n<dt><strong>perspective</strong><span class=\"classifier\">array_like</span></dt><dd><p>Perspective partition of matrix.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>matrix</strong><span class=\"classifier\">4x4 array</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">dipy.core.geometry</span> <span class=\"k\">as</span> <span class=\"nn\">gm</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scale</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">shear</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angles</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">trans</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">persp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">M0</span> <span class=\"o\">=</span> <span class=\"n\">gm</span><span class=\"o\">.</span><span class=\"n\">compose_matrix</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">trans</span><span class=\"p\">,</span> <span class=\"n\">persp</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compose-transformations\">\n<h3>compose_transformations<a class=\"headerlink\" href=\"#compose-transformations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.compose_transformations\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">compose_transformations</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*mats</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.compose_transformations\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compose multiple 4x4 affine transformations in one 4x4 matrix</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>mat1</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd></dd>\n<dt><strong>mat2</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd></dd>\n<dt><strong>\u2026</strong></dt><dd></dd>\n<dt><strong>matN</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>matN x \u2026 x mat2 x mat1</strong><span class=\"classifier\">array, (4, 4)</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"decompose-matrix\">\n<h3>decompose_matrix<a class=\"headerlink\" href=\"#decompose-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.decompose_matrix\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">decompose_matrix</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">matrix</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.decompose_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return sequence of transformations from transformation matrix.</p>\n<p>Code modified from the excellent work of Christoph Gohlke link provided\nhere: <a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>matrix</strong><span class=\"classifier\">array_like</span></dt><dd><p>Non-degenerative homogeneous transformation matrix</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>scale</strong><span class=\"classifier\">(3,) ndarray</span></dt><dd><p>Three scaling factors.</p>\n</dd>\n<dt><strong>shear</strong><span class=\"classifier\">(3,) ndarray</span></dt><dd><p>Shear factors for x-y, x-z, y-z axes.</p>\n</dd>\n<dt><strong>angles</strong><span class=\"classifier\">(3,) ndarray</span></dt><dd><p>Euler angles about static x, y, z axes.</p>\n</dd>\n<dt><strong>translate</strong><span class=\"classifier\">(3,) ndarray</span></dt><dd><p>Translation vector along x, y, z axes.</p>\n</dd>\n<dt><strong>perspective</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Perspective partition of matrix.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-odd\">Raises</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt>ValueError</dt><dd><p>If matrix is of wrong type or degenerative.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T0</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">([</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"n\">shear</span><span class=\"p\">,</span> <span class=\"n\">angles</span><span class=\"p\">,</span> <span class=\"n\">trans</span><span class=\"p\">,</span> <span class=\"n\">persp</span> <span class=\"o\">=</span> <span class=\"n\">decompose_matrix</span><span class=\"p\">(</span><span class=\"n\">T0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"dist-to-corner\">\n<h3>dist_to_corner<a class=\"headerlink\" href=\"#dist-to-corner\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.dist_to_corner\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">dist_to_corner</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">affine</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.dist_to_corner\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calculate the maximal distance from the center to a corner of a voxel,\ngiven an affine</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>affine</strong><span class=\"classifier\">4 by 4 array.</span></dt><dd><p>The spatial transformation from the measurement to the scanner space.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>dist: float</dt><dd><p>The maximal distance to the corner of a voxel, given voxel size encoded\nin the affine.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"euler-matrix\">\n<h3>euler_matrix<a class=\"headerlink\" href=\"#euler-matrix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.euler_matrix\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">euler_matrix</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ai</em>, <em class=\"sig-param\">aj</em>, <em class=\"sig-param\">ak</em>, <em class=\"sig-param\">axes='sxyz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.euler_matrix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return homogeneous rotation matrix from Euler angles and axis sequence.</p>\n<p>Code modified from the work of Christoph Gohlke link provided here\n<a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>ai, aj, ak</strong><span class=\"classifier\">Euler\u2019s roll, pitch and yaw angles</span></dt><dd></dd>\n<dt><strong>axes</strong><span class=\"classifier\">One of 24 axis sequences as string or encoded tuple</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>matrix</strong><span class=\"classifier\">ndarray (4, 4)</span></dt><dd></dd>\n<dt>Code modified from the work of Christoph Gohlke link provided here</dt><dd></dd>\n<dt><a class=\"reference external\" href=\"http://www.lfd.uci.edu/~gohlke/code/transformations.py.html\">http://www.lfd.uci.edu/~gohlke/code/transformations.py.html</a></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">euler_matrix</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;syxz&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"o\">-</span><span class=\"mf\">1.34786452</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">R</span> <span class=\"o\">=</span> <span class=\"n\">euler_matrix</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"o\">-</span><span class=\"mf\">0.383436184</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ai</span><span class=\"p\">,</span> <span class=\"n\">aj</span><span class=\"p\">,</span> <span class=\"n\">ak</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">4.0</span><span class=\"o\">*</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">pi</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">axes</span> <span class=\"ow\">in</span> <span class=\"n\">_AXES2TUPLE</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>   <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">euler_matrix</span><span class=\"p\">(</span><span class=\"n\">ai</span><span class=\"p\">,</span> <span class=\"n\">aj</span><span class=\"p\">,</span> <span class=\"n\">ak</span><span class=\"p\">,</span> <span class=\"n\">axes</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">axes</span> <span class=\"ow\">in</span> <span class=\"n\">_TUPLE2AXES</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>   <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">euler_matrix</span><span class=\"p\">(</span><span class=\"n\">ai</span><span class=\"p\">,</span> <span class=\"n\">aj</span><span class=\"p\">,</span> <span class=\"n\">ak</span><span class=\"p\">,</span> <span class=\"n\">axes</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"is-hemispherical\">\n<h3>is_hemispherical<a class=\"headerlink\" href=\"#is-hemispherical\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.is_hemispherical\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">is_hemispherical</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vecs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.is_hemispherical\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Test whether all points on a unit sphere lie in the same hemisphere.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vecs</strong><span class=\"classifier\">numpy.ndarray</span></dt><dd><p>2D numpy array with shape (N, 3) where N is the number of points.\nAll points must lie on the unit sphere.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>is_hemi</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, one can find a hemisphere that contains all the points.\nIf False, then the points do not lie in any hemisphere</p>\n</dd>\n<dt><strong>pole</strong><span class=\"classifier\">numpy.ndarray</span></dt><dd><p>If <cite>is_hemi == True</cite>, then pole is the \u201ccentral\u201d pole of the\ninput vectors. Otherwise, pole is the zero vector.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<p><a class=\"reference external\" href=\"https://rstudio-pubs-static.s3.amazonaws.com/27121_a22e51b47c544980bad594d5e0bb2d04.html\">https://rstudio-pubs-static.s3.amazonaws.com/27121_a22e51b47c544980bad594d5e0bb2d04.html</a>  # noqa</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"lambert-equal-area-projection-cart\">\n<h3>lambert_equal_area_projection_cart<a class=\"headerlink\" href=\"#lambert-equal-area-projection-cart\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.lambert_equal_area_projection_cart\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">lambert_equal_area_projection_cart</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">y</em>, <em class=\"sig-param\">z</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.lambert_equal_area_projection_cart\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Lambert Equal Area Projection from cartesian vector to plane</p>\n<p>Return positions in <span class=\"math notranslate nohighlight\">\\((y_1,y_2)\\)</span> plane corresponding to the\ndirections of the vectors with cartesian coordinates xyz under the\nLambert Equal Area Projection mapping (see Mardia and Jupp (2000),\nDirectional Statistics, p. 161).</p>\n<p>The Lambert EAP maps the upper hemisphere to the planar disc of radius 1\nand the lower hemisphere to the planar annulus between radii 1 and 2,\nThe Lambert EAP maps the upper hemisphere to the planar disc of radius 1\nand the lower hemisphere to the planar annulus between radii 1 and 2.\nand <em>vice versa</em>.</p>\n<p>See doc for <code class=\"docutils literal notranslate\"><span class=\"pre\">sphere2cart</span></code> for angle conventions</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">array_like</span></dt><dd><p>x coordinate in Cartesion space</p>\n</dd>\n<dt><strong>y</strong><span class=\"classifier\">array_like</span></dt><dd><p>y coordinate in Cartesian space</p>\n</dd>\n<dt><strong>z</strong><span class=\"classifier\">array_like</span></dt><dd><p>z coordinate</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>y</strong><span class=\"classifier\">(N,2) array</span></dt><dd><p>planar coordinates of points following mapping by Lambert\u2019s EAP.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"lambert-equal-area-projection-polar\">\n<h3>lambert_equal_area_projection_polar<a class=\"headerlink\" href=\"#lambert-equal-area-projection-polar\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.lambert_equal_area_projection_polar\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">lambert_equal_area_projection_polar</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">theta</em>, <em class=\"sig-param\">phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.lambert_equal_area_projection_polar\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Lambert Equal Area Projection from polar sphere to plane</p>\n<p>Return positions in (y1,y2) plane corresponding to the points\nwith polar coordinates (theta, phi) on the unit sphere, under the\nLambert Equal Area Projection mapping (see Mardia and Jupp (2000),\nDirectional Statistics, p. 161).</p>\n<p>See doc for <code class=\"docutils literal notranslate\"><span class=\"pre\">sphere2cart</span></code> for angle conventions</p>\n<ul class=\"simple\">\n<li><p><span class=\"math notranslate nohighlight\">\\(0 \\le \\theta \\le \\pi\\)</span> and <span class=\"math notranslate nohighlight\">\\(0 \\le \\phi \\le 2 \\pi\\)</span></p></li>\n<li><p><span class=\"math notranslate nohighlight\">\\(|(y_1,y_2)| \\le 2\\)</span></p></li>\n</ul>\n<p>The Lambert EAP maps the upper hemisphere to the planar disc of radius 1\nand the lower hemisphere to the planar annulus between radii 1 and 2,\nand <em>vice versa</em>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>theta</strong><span class=\"classifier\">array_like</span></dt><dd><p>theta spherical coordinates</p>\n</dd>\n<dt><strong>phi</strong><span class=\"classifier\">array_like</span></dt><dd><p>phi spherical coordinates</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>y</strong><span class=\"classifier\">(N,2) array</span></dt><dd><p>planar coordinates of points following mapping by Lambert\u2019s EAP.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nearest-pos-semi-def\">\n<h3>nearest_pos_semi_def<a class=\"headerlink\" href=\"#nearest-pos-semi-def\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.nearest_pos_semi_def\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">nearest_pos_semi_def</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">B</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.nearest_pos_semi_def\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Least squares positive semi-definite tensor estimation</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>B</strong><span class=\"classifier\">(3,3) array_like</span></dt><dd><p>B matrix - symmetric. We do not check the symmetry.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>npds</strong><span class=\"classifier\">(3,3) array</span></dt><dd><p>Estimated nearest positive semi-definite array to matrix <cite>B</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r3ce6ea211245-1\"><span class=\"brackets\">1</span></dt>\n<dd><p>Niethammer M, San Jose Estepar R, Bouix S, Shenton M, Westin CF.\nOn diffusion tensor estimation. Conf Proc IEEE Eng Med Biol Soc.\n2006;1:2622-5. PubMed PMID: 17946125; PubMed Central PMCID:\nPMC2791793.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">B</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">diag</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nearest_pos_semi_def</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 0.75,  0.  ,  0.  ],</span>\n<span class=\"go\">       [ 0.  ,  0.75,  0.  ],</span>\n<span class=\"go\">       [ 0.  ,  0.  ,  0.  ]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"normalized-vector\">\n<h3>normalized_vector<a class=\"headerlink\" href=\"#normalized-vector\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.normalized_vector\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">normalized_vector</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vec</em>, <em class=\"sig-param\">axis=-1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.normalized_vector\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return vector divided by its Euclidean (L2) norm</p>\n<p>See <a class=\"reference internal\" href=\"../../glossary/#term-unit-vector\"><span class=\"xref std std-term\">unit vector</span></a> and <a class=\"reference internal\" href=\"../../glossary/#term-euclidean-norm\"><span class=\"xref std std-term\">Euclidean norm</span></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vec</strong><span class=\"classifier\">array_like shape (3,)</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>nvec</strong><span class=\"classifier\">array shape (3,)</span></dt><dd><p>vector divided by L2 norm</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">l2n</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"n\">vec</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nvec</span> <span class=\"o\">=</span> <span class=\"n\">normalized_vector</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">allclose</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">l2n</span><span class=\"p\">,</span> <span class=\"n\">nvec</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vec</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">normalized_vector</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"perpendicular-directions\">\n<h3>perpendicular_directions<a class=\"headerlink\" href=\"#perpendicular-directions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.perpendicular_directions\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">perpendicular_directions</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">v</em>, <em class=\"sig-param\">num=30</em>, <em class=\"sig-param\">half=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.perpendicular_directions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes n evenly spaced perpendicular directions relative to a given\nvector v</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>v</strong><span class=\"classifier\">array (3,)</span></dt><dd><p>Array containing the three cartesian coordinates of vector v</p>\n</dd>\n<dt><strong>num</strong><span class=\"classifier\">int, optional</span></dt><dd><p>Number of perpendicular directions to generate</p>\n</dd>\n<dt><strong>half</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If half is True, perpendicular directions are sampled on half of the\nunit circumference perpendicular to v, otherwive perpendicular\ndirections are sampled on the full circumference. Default of half is\nFalse</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>psamples</strong><span class=\"classifier\">array (n, 3)</span></dt><dd><p>array of vectors perpendicular to v</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Perpendicular directions are estimated using the following two step\nprocedure:</p>\n<blockquote>\n<div><p>1) the perpendicular directions are first sampled in a unit\ncircumference parallel to the plane normal to the x-axis.</p>\n<p>2) Samples are then rotated and aligned to the plane normal to vector\nv. The rotational matrix for this rotation is constructed as reference\nframe basis which axis are the following:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>The first axis is vector v</p></li>\n<li><p>The second axis is defined as the normalized vector given by the</p></li>\n</ul>\n<p>cross product between vector v and the unit vector aligned to the\nx-axis\n- The third axis is defined as the cross product between the\nprevious computed vector and vector v.</p>\n</div></blockquote>\n</div></blockquote>\n<p>Following this two steps, coordinates of the final perpendicular directions\nare given as:</p>\n<div class=\"math notranslate nohighlight\">\n\\[\\left [ -\\sin(a_{i}) \\sqrt{{v_{y}}^{2}+{v_{z}}^{2}}\n\\; , \\;\n\\frac{v_{x}v_{y}\\sin(a_{i})-v_{z}\\cos(a_{i})}\n{\\sqrt{{v_{y}}^{2}+{v_{z}}^{2}}}\n\\; , \\;\n\\frac{v_{x}v_{z}\\sin(a_{i})-v_{y}\\cos(a_{i})}\n{\\sqrt{{v_{y}}^{2}+{v_{z}}^{2}}} \\right  ]\\]</div>\n<p>This procedure has a singularity when vector v is aligned to the x-axis. To\nsolve this singularity, perpendicular directions in procedure\u2019s step 1 are\ndefined in the plane normal to y-axis and the second axis of the rotated\nframe of reference is computed as the normalized vector given by the cross\nproduct between vector v and the unit vector aligned to the y-axis.\nFollowing this, the coordinates of the perpendicular directions are given\nas:</p>\n<blockquote>\n<div><p>left [ -frac{left (v_{x}v_{y}sin(a_{i})+v_{z}cos(a_{i}) right )}\n{sqrt{{v_{x}}^{2}+{v_{z}}^{2}}}\n; , ;\nsin(a_{i}) sqrt{{v_{x}}^{2}+{v_{z}}^{2}}\n; , ;\nfrac{v_{y}v_{z}sin(a_{i})+v_{x}cos(a_{i})}\n{sqrt{{v_{x}}^{2}+{v_{z}}^{2}}} right  ]</p>\n</div></blockquote>\n<p>For more details on this calculation, see ` here &lt;<a class=\"reference external\" href=\"http://gsoc2015dipydki.blogspot.it/2015/07/rnh-post-8-computing-perpendicular.html\">http://gsoc2015dipydki.blogspot.it/2015/07/rnh-post-8-computing-perpendicular.html</a>&gt;`_.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"rodrigues-axis-rotation\">\n<h3>rodrigues_axis_rotation<a class=\"headerlink\" href=\"#rodrigues-axis-rotation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.rodrigues_axis_rotation\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">rodrigues_axis_rotation</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">r</em>, <em class=\"sig-param\">theta</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.rodrigues_axis_rotation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Rodrigues formula</p>\n<p>Rotation matrix for rotation around axis r for angle theta.</p>\n<p>The rotation matrix is given by the Rodrigues formula:</p>\n<p>R = Id + sin(theta)*Sn + (1-cos(theta))*Sn^2</p>\n<p>with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>       <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"n\">nz</span>  <span class=\"n\">ny</span>\n<span class=\"n\">Sn</span> <span class=\"o\">=</span>   <span class=\"n\">nz</span>   <span class=\"mi\">0</span> <span class=\"o\">-</span><span class=\"n\">nx</span>\n      <span class=\"o\">-</span><span class=\"n\">ny</span>  <span class=\"n\">nx</span>   <span class=\"mi\">0</span>\n</pre></div>\n</div>\n<p>where n = r / ||r||</p>\n<p>In case the angle ||r|| is very small, the above formula may lead\nto numerical instabilities. We instead use a Taylor expansion\naround theta=0:</p>\n<p>R = I + sin(theta)/tetha Sr + (1-cos(theta))/teta2 Sr^2</p>\n<p>leading to:</p>\n<p>R = I + (1-theta2/6)*Sr + (1/2-theta2/24)*Sr^2</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>r</strong><span class=\"classifier\">array_like shape (3,), axis</span></dt><dd></dd>\n<dt><strong>theta</strong><span class=\"classifier\">float, angle in degrees</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>R</strong><span class=\"classifier\">array, shape (3,3), rotation matrix</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.geometry</span> <span class=\"k\">import</span> <span class=\"n\">rodrigues_axis_rotation</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"n\">rodrigues_axis_rotation</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ur</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arccos</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">ur</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">))))</span>\n<span class=\"go\">40.0</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sph2latlon\">\n<h3>sph2latlon<a class=\"headerlink\" href=\"#sph2latlon\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.sph2latlon\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">sph2latlon</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">theta</em>, <em class=\"sig-param\">phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.sph2latlon\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Convert spherical coordinates to latitude and longitude.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>lat, lon</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Latitude and longitude.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sphere2cart\">\n<h3>sphere2cart<a class=\"headerlink\" href=\"#sphere2cart\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.sphere2cart\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">sphere2cart</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">r</em>, <em class=\"sig-param\">theta</em>, <em class=\"sig-param\">phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.sphere2cart\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spherical to Cartesian coordinates</p>\n<p>This is the standard physics convention where <cite>theta</cite> is the\ninclination (polar) angle, and <cite>phi</cite> is the azimuth angle.</p>\n<p>Imagine a sphere with center (0,0,0).  Orient it with the z axis\nrunning south-north, the y axis running west-east and the x axis\nfrom posterior to anterior.  <cite>theta</cite> (the inclination angle) is the\nangle to rotate from the z-axis (the zenith) around the y-axis,\ntowards the x axis.  Thus the rotation is counter-clockwise from the\npoint of view of positive y.  <cite>phi</cite> (azimuth) gives the angle of\nrotation around the z-axis towards the y axis.  The rotation is\ncounter-clockwise from the point of view of positive z.</p>\n<p>Equivalently, given a point P on the sphere, with coordinates x, y,\nz, <cite>theta</cite> is the angle between P and the z-axis, and <cite>phi</cite> is\nthe angle between the projection of P onto the XY plane, and the X\naxis.</p>\n<p>Geographical nomenclature designates theta as \u2018co-latitude\u2019, and phi\nas \u2018longitude\u2019</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>r</strong><span class=\"classifier\">array_like</span></dt><dd><p>radius</p>\n</dd>\n<dt><strong>theta</strong><span class=\"classifier\">array_like</span></dt><dd><p>inclination or polar angle</p>\n</dd>\n<dt><strong>phi</strong><span class=\"classifier\">array_like</span></dt><dd><p>azimuth angle</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">array</span></dt><dd><p>x coordinate(s) in Cartesion space</p>\n</dd>\n<dt><strong>y</strong><span class=\"classifier\">array</span></dt><dd><p>y coordinate(s) in Cartesian space</p>\n</dd>\n<dt><strong>z</strong><span class=\"classifier\">array</span></dt><dd><p>z coordinate</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See these pages:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Spherical_coordinate_system\">http://en.wikipedia.org/wiki/Spherical_coordinate_system</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://mathworld.wolfram.com/SphericalCoordinates.html\">http://mathworld.wolfram.com/SphericalCoordinates.html</a></p></li>\n</ul>\n<p>for excellent discussion of the many different conventions\npossible.  Here we use the physics conventions, used in the\nwikipedia page.</p>\n<p>Derivations of the formulae are simple. Consider a vector x, y, z of\nlength r (norm of x, y, z).  The inclination angle (theta) can be\nfound from: cos(theta) == z / r -&gt; z == r * cos(theta).  This gives\nthe hypotenuse of the projection onto the XY plane, which we will\ncall Q. Q == r*sin(theta). Now x / Q == cos(phi) -&gt; x == r *\nsin(theta) * cos(phi) and so on.</p>\n<p>We have deliberately named this function <code class=\"docutils literal notranslate\"><span class=\"pre\">sphere2cart</span></code> rather than\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sph2cart</span></code> to distinguish it from the Matlab function of that\nname, because the Matlab function uses an unusual convention for the\nangles that we did not want to replicate.  The Matlab function is\ntrivial to implement with the formulae given in the Matlab help.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sphere-distance\">\n<h3>sphere_distance<a class=\"headerlink\" href=\"#sphere-distance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.sphere_distance\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">sphere_distance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">pts1</em>, <em class=\"sig-param\">pts2</em>, <em class=\"sig-param\">radius=None</em>, <em class=\"sig-param\">check_radius=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.sphere_distance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Distance across sphere surface between <cite>pts1</cite> and <cite>pts2</cite></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>pts1</strong><span class=\"classifier\">(N,R) or (R,) array_like</span></dt><dd><p>where N is the number of points and R is the number of\ncoordinates defining a point (<code class=\"docutils literal notranslate\"><span class=\"pre\">R==3</span></code> for 3D)</p>\n</dd>\n<dt><strong>pts2</strong><span class=\"classifier\">(N,R) or (R,) array_like</span></dt><dd><p>where N is the number of points and R is the number of\ncoordinates defining a point (<code class=\"docutils literal notranslate\"><span class=\"pre\">R==3</span></code> for 3D).  It should be\npossible to broadcast <cite>pts1</cite> against <cite>pts2</cite></p>\n</dd>\n<dt><strong>radius</strong><span class=\"classifier\">None or float, optional</span></dt><dd><p>Radius of sphere.  Default is to work out radius from mean of the\nlength of each point vector</p>\n</dd>\n<dt><strong>check_radius</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True, check if the points are on the sphere surface - i.e\ncheck if the vector lengths in <cite>pts1</cite> and <cite>pts2</cite> are close to\n<cite>radius</cite>.  Default is True.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>d</strong><span class=\"classifier\">(N,) or (0,) array</span></dt><dd><p>Distances between corresponding points in <cite>pts1</cite> and <cite>pts2</cite>\nacross the spherical surface, i.e. the great circle distance</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.core.geometry.cart_distance\" title=\"dipy.core.geometry.cart_distance\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">cart_distance</span></code></a></dt><dd><p>cartesian distance between points</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"#dipy.core.geometry.vector_cosine\" title=\"dipy.core.geometry.vector_cosine\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">vector_cosine</span></code></a></dt><dd><p>cosine of angle between vectors</p>\n</dd>\n</dl>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%.4f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">sphere_distance</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"go\">1.5708</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%.4f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">sphere_distance</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n<span class=\"go\">4.7124</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"vec2vec-rotmat\">\n<h3>vec2vec_rotmat<a class=\"headerlink\" href=\"#vec2vec-rotmat\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.vec2vec_rotmat\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">vec2vec_rotmat</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">u</em>, <em class=\"sig-param\">v</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.vec2vec_rotmat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>rotation matrix from 2 unit vectors</p>\n<p>u, v being unit 3d vectors return a 3x3 rotation matrix R than aligns u to\nv.</p>\n<p>In general there are many rotations that will map u to v. If S is any\nrotation using v as an axis then R.S will also map u to v since (S.R)u =\nS(Ru) = Sv = v.  The rotation R returned by vec2vec_rotmat leaves fixed the\nperpendicular to the plane spanned by u and v.</p>\n<p>The transpose of R will align v to u.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>u</strong><span class=\"classifier\">array, shape(3,)</span></dt><dd></dd>\n<dt><strong>v</strong><span class=\"classifier\">array, shape(3,)</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>R</strong><span class=\"classifier\">array, shape(3,3)</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.geometry</span> <span class=\"k\">import</span> <span class=\"n\">vec2vec_rotmat</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"n\">vec2vec_rotmat</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 0.,  1.,  0.])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 1.,  0.,  0.])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"vector-cosine\">\n<h3>vector_cosine<a class=\"headerlink\" href=\"#vector-cosine\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.vector_cosine\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">vector_cosine</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vecs1</em>, <em class=\"sig-param\">vecs2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.vector_cosine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Cosine of angle between two (sets of) vectors</p>\n<p>The cosine of the angle between two vectors <code class=\"docutils literal notranslate\"><span class=\"pre\">v1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">v2</span></code> is\ngiven by the inner product of <code class=\"docutils literal notranslate\"><span class=\"pre\">v1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">v2</span></code> divided by the\nproduct of the vector lengths:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">v_cos</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"p\">,</span> <span class=\"n\">v2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">v1</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">*</span>\n                            <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"n\">v2</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vecs1</strong><span class=\"classifier\">(N, R) or (R,) array_like</span></dt><dd><p>N vectors (as rows) or single vector.  Vectors have R elements.</p>\n</dd>\n<dt><strong>vecs1</strong><span class=\"classifier\">(N, R) or (R,) array_like</span></dt><dd><p>N vectors (as rows) or single vector.  Vectors have R elements.\nIt should be possible to broadcast <cite>vecs1</cite> against <cite>vecs2</cite></p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>vcos</strong><span class=\"classifier\">(N,) or (0,) array</span></dt><dd><p>Vector cosines.  To get the angles you will need <code class=\"docutils literal notranslate\"><span class=\"pre\">np.arccos</span></code></p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The vector cosine will be the same as the correlation only if all\nthe input vectors have zero mean.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"vector-norm\">\n<h3>vector_norm<a class=\"headerlink\" href=\"#vector-norm\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.geometry.vector_norm\">\n<code class=\"sig-prename descclassname\">dipy.core.geometry.</code><code class=\"sig-name descname\">vector_norm</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vec</em>, <em class=\"sig-param\">axis=-1</em>, <em class=\"sig-param\">keepdims=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.geometry.vector_norm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return vector Euclidean (L2) norm</p>\n<p>See <a class=\"reference internal\" href=\"../../glossary/#term-unit-vector\"><span class=\"xref std std-term\">unit vector</span></a> and <a class=\"reference internal\" href=\"../../glossary/#term-euclidean-norm\"><span class=\"xref std std-term\">Euclidean norm</span></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vec</strong><span class=\"classifier\">array_like</span></dt><dd><p>Vectors to norm.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis over which to norm. By default norm over last axis. If <cite>axis</cite> is\nNone, <cite>vec</cite> is flattened then normed.</p>\n</dd>\n<dt><strong>keepdims</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, the output will have the same number of dimensions as <cite>vec</cite>,\nwith shape 1 on <cite>axis</cite>.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>norm</strong><span class=\"classifier\">array</span></dt><dd><p>Euclidean norms of vectors.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 17.,  85.])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 17.],</span>\n<span class=\"go\">       [ 85.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">array([  8.,  39.,  77.])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradienttable\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.gradients.GradientTable\" title=\"dipy.core.gradients.GradientTable\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GradientTable</span></code></a><a class=\"headerlink\" href=\"#gradienttable\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.gradients.GradientTable\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">GradientTable</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gradients</em>, <em class=\"sig-param\">big_delta=None</em>, <em class=\"sig-param\">small_delta=None</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">btens=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Diffusion gradient information</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">array_like (N, 3)</span></dt><dd><p>Diffusion gradients. The direction of each of these vectors corresponds\nto the b-vector, and the length corresponds to the b-value.</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>Gradients with b-value less than or equal to <cite>b0_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.core.gradients.gradient_table\" title=\"dipy.core.gradients.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a></dt><dd></dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>The GradientTable object is immutable. Do NOT assign attributes.\nIf you have your gradient table in a bval &amp; bvec format, we recommend\nusing the factory function gradient_table</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">(N,3) ndarray</span></dt><dd><p>diffusion gradients</p>\n</dd>\n<dt><strong>bvals</strong><span class=\"classifier\">(N,) ndarray</span></dt><dd><p>The b-value, or magnitude, of each gradient direction.</p>\n</dd>\n<dt><strong>qvals: (N,) ndarray</strong></dt><dd><p>The q-value for each gradient direction. Needs big and small\ndelta.</p>\n</dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">(N,3) ndarray</span></dt><dd><p>The direction, represented as a unit vector, of each gradient.</p>\n</dd>\n<dt><strong>b0s_mask</strong><span class=\"classifier\">(N,) ndarray</span></dt><dd><p>Boolean array indicating which gradients have no diffusion\nweighting, ie b-value is close to 0.</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>Gradients with b-value less than or equal to <cite>b0_threshold</cite> are\nconsidered to not have diffusion weighting.</p>\n</dd>\n<dt><strong>btens</strong><span class=\"classifier\">(N,3,3) ndarray</span></dt><dd><p>The b-tensor of each gradient direction.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 68%\" />\n<col style=\"width: 32%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>b0s_mask</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>bvals</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>bvecs</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>gradient_strength</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>qvals</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>tau</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.GradientTable.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">gradients</em>, <em class=\"sig-param\">big_delta=None</em>, <em class=\"sig-param\">small_delta=None</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">btens=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructor for GradientTable class</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.GradientTable.b0s_mask\">\n<code class=\"sig-name descname\">b0s_mask</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable.b0s_mask\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.GradientTable.bvals\">\n<code class=\"sig-name descname\">bvals</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable.bvals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.GradientTable.bvecs\">\n<code class=\"sig-name descname\">bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable.bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.GradientTable.gradient_strength\">\n<code class=\"sig-name descname\">gradient_strength</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable.gradient_strength\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.GradientTable.info\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">info</code><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable.info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.GradientTable.qvals\">\n<code class=\"sig-name descname\">qvals</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable.qvals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.GradientTable.tau\">\n<code class=\"sig-name descname\">tau</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.GradientTable.tau\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"hemisphere\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.gradients.HemiSphere\" title=\"dipy.core.gradients.HemiSphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a><a class=\"headerlink\" href=\"#hemisphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.gradients.HemiSphere\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">HemiSphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.HemiSphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.core.sphere.Sphere\" title=\"dipy.core.sphere.Sphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.core.sphere.Sphere</span></code></a></p>\n<p>Points on the unit sphere.</p>\n<p>A HemiSphere is similar to a Sphere but it takes antipodal symmetry into\naccount. Antipodal symmetry means that point v on a HemiSphere is the same\nas the point -v. Duplicate points are discarded when constructing a\nHemiSphere (including antipodal duplicates). <cite>edges</cite> and <cite>faces</cite> are\nremapped to the remaining points as closely as possible.</p>\n<p>The HemiSphere can be constructed using one of three conventions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"n\">xyz</span><span class=\"p\">)</span>\n<span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x, y, z</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>theta, phi</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as spherical coordinates.  Theta and phi are the inclination\nand azimuth angles respectively.</p>\n</dd>\n<dt><strong>xyz</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>faces</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Indices into vertices that form triangular faces.  If unspecified,\nthe faces are computed using a Delaunay triangulation.</p>\n</dd>\n<dt><strong>edges</strong><span class=\"classifier\">(N, 2) ndarray</span></dt><dd><p>Edges between vertices.  If unspecified, the edges are\nderived from the faces.</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">float</span></dt><dd><p>Angle in degrees. Vertices that are less than tol degrees apart are\ntreated as duplicates.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></dt><dd></dd>\n</dl>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong></dt><dd></dd>\n<dt><strong>y</strong></dt><dd></dd>\n<dt><strong>z</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.HemiSphere.find_closest\" title=\"dipy.core.gradients.HemiSphere.find_closest\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">find_closest</span></code></a>(self,\u00a0xyz)</p></td>\n<td><p>Find the index of the vertex in the Sphere closest to the input vector, taking into account antipodal symmetry</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.HemiSphere.from_sphere\" title=\"dipy.core.gradients.HemiSphere.from_sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_sphere</span></code></a>(sphere[,\u00a0tol])</p></td>\n<td><p>Create instance from a Sphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.HemiSphere.mirror\" title=\"dipy.core.gradients.HemiSphere.mirror\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mirror</span></code></a>(self)</p></td>\n<td><p>Create a full Sphere from a HemiSphere</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.gradients.HemiSphere.subdivide\" title=\"dipy.core.gradients.HemiSphere.subdivide\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">subdivide</span></code></a>(self[,\u00a0n])</p></td>\n<td><p>Create a more subdivided HemiSphere</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 55%\" />\n<col style=\"width: 45%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>edges</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>faces</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>vertices</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.HemiSphere.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.HemiSphere.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a HemiSphere from points</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.HemiSphere.faces\">\n<code class=\"sig-name descname\">faces</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.HemiSphere.faces\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.HemiSphere.find_closest\">\n<code class=\"sig-name descname\">find_closest</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">xyz</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.HemiSphere.find_closest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the index of the vertex in the Sphere closest to the input vector,\ntaking into account antipodal symmetry</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xyz</strong><span class=\"classifier\">array-like, 3 elements</span></dt><dd><p>A unit vector</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>idx</strong><span class=\"classifier\">int</span></dt><dd><p>The index into the Sphere.vertices array that gives the closest\nvertex (in angle).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.HemiSphere.from_sphere\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">from_sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sphere</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.HemiSphere.from_sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create instance from a Sphere</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.HemiSphere.mirror\">\n<code class=\"sig-name descname\">mirror</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.HemiSphere.mirror\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a full Sphere from a HemiSphere</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.gradients.HemiSphere.subdivide\">\n<code class=\"sig-name descname\">subdivide</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.HemiSphere.subdivide\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a more subdivided HemiSphere</p>\n<p>See Sphere.subdivide for full documentation.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"auto-attr\">\n<h3>auto_attr<a class=\"headerlink\" href=\"#auto-attr\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.auto_attr\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">auto_attr</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.auto_attr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator to create OneTimeProperty attributes.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>func</strong><span class=\"classifier\">method</span></dt><dd><p>The method that will be called the first time to compute a value.\nAfterwards, the method\u2019s name will be a standard attribute holding the\nvalue of this computation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MagicProp</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nd\">@auto_attr</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"mi\">99</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MagicProp</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"go\">99</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"btens-to-params\">\n<h3>btens_to_params<a class=\"headerlink\" href=\"#btens-to-params\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.btens_to_params\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">btens_to_params</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">btens</em>, <em class=\"sig-param\">ztol=1e-10</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.btens_to_params\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute trace, anisotropy and assymetry parameters from b-tensors</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>btens</strong><span class=\"classifier\">(3, 3) OR (N, 3, 3) numpy.ndarray</span></dt><dd><p>input b-tensor, or b-tensors, where N = number of b-tensors</p>\n</dd>\n<dt><strong>ztol</strong><span class=\"classifier\">float</span></dt><dd><p>Any parameters smaller than this value are considered to be 0</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>bval: numpy.ndarray</dt><dd><p>b-value(s) (trace(s))</p>\n</dd>\n<dt>bdelta: numpy.ndarray</dt><dd><p>normalized tensor anisotropy(s)</p>\n</dd>\n<dt>b_eta: numpy.ndarray</dt><dd><p>tensor assymetry(s)</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This function can be used to get b-tensor parameters directly from the\nGradientTable <cite>btens</cite> attribute.</p>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lte</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bval</span><span class=\"p\">,</span> <span class=\"n\">bdelta</span><span class=\"p\">,</span> <span class=\"n\">b_eta</span> <span class=\"o\">=</span> <span class=\"n\">btens_to_params</span><span class=\"p\">(</span><span class=\"n\">lte</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;bval=</span><span class=\"si\">{}</span><span class=\"s2\">; bdelta=</span><span class=\"si\">{}</span><span class=\"s2\">; b_eta=</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">bdelta</span><span class=\"p\">,</span> <span class=\"n\">bval</span><span class=\"p\">,</span> <span class=\"n\">b_eta</span><span class=\"p\">))</span>\n<span class=\"go\">bval=[ 1.]; bdelta=[ 1.]; b_eta=[ 0.]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"check-multi-b\">\n<h3>check_multi_b<a class=\"headerlink\" href=\"#check-multi-b\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.check_multi_b\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">check_multi_b</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">n_bvals</em>, <em class=\"sig-param\">non_zero=True</em>, <em class=\"sig-param\">bmag=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.check_multi_b\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Check if you have enough different b-values in your gradient table</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable class instance.</span></dt><dd></dd>\n<dt><strong>n_bvals</strong><span class=\"classifier\">int</span></dt><dd><p>The number of different b-values you are checking for.</p>\n</dd>\n<dt><strong>non_zero</strong><span class=\"classifier\">bool</span></dt><dd><p>Whether to check only non-zero bvalues. In this case, we will require\nat least <cite>n_bvals</cite> <em>non-zero</em> b-values (where non-zero is defined\ndepending on the <cite>gtab</cite> object\u2019s <cite>b0_threshold</cite> attribute)</p>\n</dd>\n<dt><strong>bmag</strong><span class=\"classifier\">int</span></dt><dd><p>The order of magnitude of the b-values used. The function will\nnormalize the b-values relative <span class=\"math notranslate nohighlight\">\\(10^{bmag}\\)</span>. Default: derive this\nvalue from the maximal b-value provided:\n<span class=\"math notranslate nohighlight\">\\(bmag=log_{10}(max(bvals)) - 1\\)</span>.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>bool</strong><span class=\"classifier\">Whether there are at least <cite>n_bvals</cite> different b-values in the</span></dt><dd></dd>\n<dt>gradient table used.</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"deprecate-with-version\">\n<h3>deprecate_with_version<a class=\"headerlink\" href=\"#deprecate-with-version\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.deprecate_with_version\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">deprecate_with_version</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">message</em>, <em class=\"sig-param\">since=''</em>, <em class=\"sig-param\">until=''</em>, <em class=\"sig-param\">version_comparator=&lt;function cmp_pkg_version at 0x12c304b00&gt;</em>, <em class=\"sig-param\">warn_class=&lt;class 'DeprecationWarning'&gt;</em>, <em class=\"sig-param\">error_class=&lt;class 'dipy.utils.deprecator.ExpiredDeprecationError'&gt;</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.deprecate_with_version\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return decorator function function for deprecation warning / error.</p>\n<p>The decorated function / method will:</p>\n<ul class=\"simple\">\n<li><p>Raise the given <cite>warning_class</cite> warning when the function / method gets\ncalled, up to (and including) version <cite>until</cite> (if specified);</p></li>\n<li><p>Raise the given <cite>error_class</cite> error when the function / method gets\ncalled, when the package version is greater than version <cite>until</cite> (if\nspecified).</p></li>\n</ul>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>message</strong><span class=\"classifier\">str</span></dt><dd><p>Message explaining deprecation, giving possible alternatives.</p>\n</dd>\n<dt><strong>since</strong><span class=\"classifier\">str, optional</span></dt><dd><p>Released version at which object was first deprecated.</p>\n</dd>\n<dt><strong>until</strong><span class=\"classifier\">str, optional</span></dt><dd><p>Last released version at which this function will still raise a\ndeprecation warning.  Versions higher than this will raise an\nerror.</p>\n</dd>\n<dt><strong>version_comparator</strong><span class=\"classifier\">callable</span></dt><dd><p>Callable accepting string as argument, and return 1 if string\nrepresents a higher version than encoded in the <cite>version_comparator</cite>, 0\nif the version is equal, and -1 if the version is lower.  For example,\nthe <cite>version_comparator</cite> may compare the input version string to the\ncurrent package version string.</p>\n</dd>\n<dt><strong>warn_class</strong><span class=\"classifier\">class, optional</span></dt><dd><p>Class of warning to generate for deprecation.</p>\n</dd>\n<dt><strong>error_class</strong><span class=\"classifier\">class, optional</span></dt><dd><p>Class of error to generate when <cite>version_comparator</cite> returns 1 for a\ngiven argument of <code class=\"docutils literal notranslate\"><span class=\"pre\">until</span></code>.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>deprecator</strong><span class=\"classifier\">func</span></dt><dd><p>Function returning a decorator.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"disperse-charges\">\n<h3>disperse_charges<a class=\"headerlink\" href=\"#disperse-charges\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.disperse_charges\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">disperse_charges</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">hemi</em>, <em class=\"sig-param\">iters</em>, <em class=\"sig-param\">const=0.2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.disperse_charges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Models electrostatic repulsion on the unit sphere</p>\n<p>Places charges on a sphere and simulates the repulsive forces felt by each\none. Allows the charges to move for some number of iterations and returns\ntheir final location as well as the total potential of the system at each\nstep.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>hemi</strong><span class=\"classifier\">HemiSphere</span></dt><dd><p>Points on a unit sphere.</p>\n</dd>\n<dt><strong>iters</strong><span class=\"classifier\">int</span></dt><dd><p>Number of iterations to run.</p>\n</dd>\n<dt><strong>const</strong><span class=\"classifier\">float</span></dt><dd><p>Using a smaller const could provide a more accurate result, but will\nneed more iterations to converge.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>hemi</strong><span class=\"classifier\">HemiSphere</span></dt><dd><p>Distributed points on a unit sphere.</p>\n</dd>\n<dt><strong>potential</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The electrostatic potential at each iteration. This can be useful to\ncheck if the repulsion converged to a minimum.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This function is meant to be used with diffusion imaging so antipodal\nsymmetry is assumed. Therefor each charge must not only be unique, but if\nthere is a charge at +x, there cannot be a charge at -x. These are treated\nas the same location and because the distance between the two charges will\nbe zero, the result will be unstable.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"generate-bvecs\">\n<h3>generate_bvecs<a class=\"headerlink\" href=\"#generate-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.generate_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">generate_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">N</em>, <em class=\"sig-param\">iters=5000</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.generate_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates N bvectors.</p>\n<p>Uses dipy.core.sphere.disperse_charges to model electrostatic repulsion on\na unit sphere.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>N</strong><span class=\"classifier\">int</span></dt><dd><p>The number of bvectors to generate. This should be equal to the number\nof bvals used.</p>\n</dd>\n<dt><strong>iters</strong><span class=\"classifier\">int</span></dt><dd><p>Number of iterations to run.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>bvecs</strong><span class=\"classifier\">(N,3) ndarray</span></dt><dd><p>The generated directions, represented as a unit vector, of each\ngradient.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"get-bval-indices\">\n<h3>get_bval_indices<a class=\"headerlink\" href=\"#get-bval-indices\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.get_bval_indices\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">get_bval_indices</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bval</em>, <em class=\"sig-param\">tol=20</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.get_bval_indices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get indices where the b-value is <cite>bval</cite></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals: ndarray</strong></dt><dd><p>Array containing the b-values</p>\n</dd>\n<dt><strong>bval: float or int</strong></dt><dd><p>b-value to extract indices</p>\n</dd>\n<dt><strong>tol: int</strong></dt><dd><p>The tolerated gap between the b-values to extract\nand the actual b-values.</p>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014</strong></dt><dd></dd>\n<dt><strong>Array of indices where the b-value is `bval`</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient-table\">\n<h3>gradient_table<a class=\"headerlink\" href=\"#gradient-table\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.gradient_table\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">gradient_table</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bvecs=None</em>, <em class=\"sig-param\">big_delta=None</em>, <em class=\"sig-param\">small_delta=None</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">atol=0.01</em>, <em class=\"sig-param\">btens=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.gradient_table\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">can be any of the four options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N,) or (1, N) or (N, 1) with the b-values.</p></li>\n<li><p>a path for the file which contains an array like the above (1).</p></li>\n<li><p>an array of shape (N, 4) or (4, N). Then this parameter is\nconsidered to be a b-table which contains both bvals and bvecs. In\nthis case the next parameter is skipped.</p></li>\n<li><p>a path for the file which contains an array like the one at (3).</p></li>\n</ol>\n</dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">can be any of two options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N, 3) or (3, N) with the b-vectors.</p></li>\n<li><p>a path for the file which contains an array like the previous.</p></li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse separation time in seconds (default None)</p>\n</dd>\n<dt><strong>small_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse duration time in seconds (default None)</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float</span></dt><dd><p>All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n<dt><strong>btens</strong><span class=\"classifier\">can be any of three options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>a string specifying the shape of the encoding tensor for all volumes\nin data. Options: \u2018LTE\u2019, \u2018PTE\u2019, \u2018STE\u2019, \u2018CTE\u2019 corresponding to\nlinear, planar, spherical, and \u201ccigar-shaped\u201d tensor encoding.\nTensors are rotated so that linear and cigar tensors are aligned\nwith the corresponding gradient direction and the planar tensor\u2019s\nnormal is aligned with the corresponding gradient direction.\nMagnitude is scaled to match the b-value.</p></li>\n<li><p>an array of strings of shape (N,), (N, 1), or (1, N) specifying\nencoding tensor shape for each volume separately. N corresponds to\nthe number volumes in data. Options for elements in array: \u2018LTE\u2019,\n\u2018PTE\u2019, \u2018STE\u2019, \u2018CTE\u2019 corresponding to linear, planar, spherical, and\n\u201ccigar-shaped\u201d tensor encoding. Tensors are rotated so that linear\nand cigar tensors are aligned with the corresponding gradient\ndirection and the planar tensor\u2019s normal is aligned with the\ncorresponding gradient direction. Magnitude is scaled to match the\nb-value.</p></li>\n<li><p>an array of shape (N,3,3) specifying the b-tensor of each volume\nexactly. N corresponds to the number volumes in data. No rotation or\nscaling is performed.</p></li>\n</ol>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li><p>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</p></li>\n<li><p>We assume that the minimum number of b-values is 7.</p></li>\n<li><p>B-vectors should be unit vectors.</p></li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span> <span class=\"o\">=</span> <span class=\"mi\">1500</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table</span><span class=\"p\">(</span><span class=\"n\">bvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span><span class=\"o\">.</span><span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">bvecs</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient-table-from-bvals-bvecs\">\n<h3>gradient_table_from_bvals_bvecs<a class=\"headerlink\" href=\"#gradient-table-from-bvals-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.gradient_table_from_bvals_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">gradient_table_from_bvals_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bvecs</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">atol=0.01</em>, <em class=\"sig-param\">btens=None</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.gradient_table_from_bvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a GradientTable from a bvals array and a bvecs array</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">array_like (N,)</span></dt><dd><p>The b-value, or magnitude, of each gradient direction.</p>\n</dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">array_like (N, 3)</span></dt><dd><p>The direction, represented as a unit vector, of each gradient.</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>Gradients with b-value less than or equal to <cite>bo_threshold</cite> are\nconsidered to not have diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float</span></dt><dd><p>Each vector in <cite>bvecs</cite> must be a unit vectors up to a tolerance of\n<cite>atol</cite>.</p>\n</dd>\n<dt><strong>btens</strong><span class=\"classifier\">can be any of three options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>a string specifying the shape of the encoding tensor for all volumes\nin data. Options: \u2018LTE\u2019, \u2018PTE\u2019, \u2018STE\u2019, \u2018CTE\u2019 corresponding to\nlinear, planar, spherical, and \u201ccigar-shaped\u201d tensor encoding.\nTensors are rotated so that linear and cigar tensors are aligned\nwith the corresponding gradient direction and the planar tensor\u2019s\nnormal is aligned with the corresponding gradient direction.\nMagnitude is scaled to match the b-value.</p></li>\n<li><p>an array of strings of shape (N,), (N, 1), or (1, N) specifying\nencoding tensor shape for each volume separately. N corresponds to\nthe number volumes in data. Options for elements in array: \u2018LTE\u2019,\n\u2018PTE\u2019, \u2018STE\u2019, \u2018CTE\u2019 corresponding to linear, planar, spherical, and\n\u201ccigar-shaped\u201d tensor encoding. Tensors are rotated so that linear\nand cigar tensors are aligned with the corresponding gradient\ndirection and the planar tensor\u2019s normal is aligned with the\ncorresponding gradient direction. Magnitude is scaled to match the\nb-value.</p></li>\n<li><p>an array of shape (N,3,3) specifying the b-tensor of each volume\nexactly. N corresponds to the number volumes in data. No rotation or\nscaling is performed.</p></li>\n</ol>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-odd\">Other Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>**kwargs</strong><span class=\"classifier\">dict</span></dt><dd><p>Other keyword inputs are passed to GradientTable.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.core.gradients.GradientTable\" title=\"dipy.core.gradients.GradientTable\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">GradientTable</span></code></a>, <a class=\"reference internal\" href=\"#dipy.core.gradients.gradient_table\" title=\"dipy.core.gradients.gradient_table\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">gradient_table</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient-table-from-gradient-strength-bvecs\">\n<h3>gradient_table_from_gradient_strength_bvecs<a class=\"headerlink\" href=\"#gradient-table-from-gradient-strength-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.gradient_table_from_gradient_strength_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">gradient_table_from_gradient_strength_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gradient_strength</em>, <em class=\"sig-param\">bvecs</em>, <em class=\"sig-param\">big_delta</em>, <em class=\"sig-param\">small_delta</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.gradient_table_from_gradient_strength_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>gradient_strength</strong><span class=\"classifier\">an array of shape (N,),</span></dt><dd><p>gradient strength given in T/mm</p>\n</dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">can be any of two options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N, 3) or (3, N) with the b-vectors.</p></li>\n<li><p>a path for the file which contains an array like the previous.</p></li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong><span class=\"classifier\">float or array of shape (N,)</span></dt><dd><p>acquisition pulse separation time in seconds</p>\n</dd>\n<dt><strong>small_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse duration time in seconds</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float</span></dt><dd><p>All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li><p>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</p></li>\n<li><p>We assume that the minimum number of b-values is 7.</p></li>\n<li><p>B-vectors should be unit vectors.</p></li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"p\">(</span>\n<span class=\"gp\">... </span>   <span class=\"n\">gradient_table_from_gradient_strength_bvecs</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gradient_strength</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mf\">03e-3</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>  <span class=\"c1\"># clinical strength at 30 mT/m</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">big_delta</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">03</span>  <span class=\"c1\"># pulse separation of 30ms</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">small_delta</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>  <span class=\"c1\"># pulse duration of 10ms</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gradient_strength</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table_from_gradient_strength_bvecs</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">gradient_strength</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">,</span> <span class=\"n\">big_delta</span><span class=\"p\">,</span> <span class=\"n\">small_delta</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"gradient-table-from-qvals-bvecs\">\n<h3>gradient_table_from_qvals_bvecs<a class=\"headerlink\" href=\"#gradient-table-from-qvals-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.gradient_table_from_qvals_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">gradient_table_from_qvals_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">qvals</em>, <em class=\"sig-param\">bvecs</em>, <em class=\"sig-param\">big_delta</em>, <em class=\"sig-param\">small_delta</em>, <em class=\"sig-param\">b0_threshold=50</em>, <em class=\"sig-param\">atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.gradient_table_from_qvals_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A general function for creating diffusion MR gradients.</p>\n<p>It reads, loads and prepares scanner parameters like the b-values and\nb-vectors so that they can be useful during the reconstruction process.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>qvals</strong><span class=\"classifier\">an array of shape (N,),</span></dt><dd><p>q-value given in 1/mm</p>\n</dd>\n<dt><strong>bvecs</strong><span class=\"classifier\">can be any of two options</span></dt><dd><ol class=\"arabic simple\">\n<li><p>an array of shape (N, 3) or (3, N) with the b-vectors.</p></li>\n<li><p>a path for the file which contains an array like the previous.</p></li>\n</ol>\n</dd>\n<dt><strong>big_delta</strong><span class=\"classifier\">float or array of shape (N,)</span></dt><dd><p>acquisition pulse separation time in seconds</p>\n</dd>\n<dt><strong>small_delta</strong><span class=\"classifier\">float</span></dt><dd><p>acquisition pulse duration time in seconds</p>\n</dd>\n<dt><strong>b0_threshold</strong><span class=\"classifier\">float</span></dt><dd><p>All b-values with values less than or equal to <cite>bo_threshold</cite> are\nconsidered as b0s i.e. without diffusion weighting.</p>\n</dd>\n<dt><strong>atol</strong><span class=\"classifier\">float</span></dt><dd><p>All b-vectors need to be unit vectors up to a tolerance.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gradients</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>A GradientTable with all the gradient information.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<ol class=\"arabic simple\">\n<li><p>Often b0s (b-values which correspond to images without diffusion\nweighting) have 0 values however in some cases the scanner cannot\nprovide b0s of an exact 0 value and it gives a bit higher values\ne.g. 6 or 12. This is the purpose of the b0_threshold in the __init__.</p></li>\n<li><p>We assume that the minimum number of b-values is 7.</p></li>\n<li><p>B-vectors should be unit vectors.</p></li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.gradients</span> <span class=\"k\">import</span> <span class=\"n\">gradient_table_from_qvals_bvecs</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qvals</span> <span class=\"o\">=</span> <span class=\"mf\">30.</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ones</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">big_delta</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"mi\">03</span>  <span class=\"c1\"># pulse separation of 30ms</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">small_delta</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>  <span class=\"c1\"># pulse duration of 10ms</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qvals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sq2</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bvecs</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>                  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">,</span> <span class=\"n\">sq2</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">gt</span> <span class=\"o\">=</span> <span class=\"n\">gradient_table_from_qvals_bvecs</span><span class=\"p\">(</span><span class=\"n\">qvals</span><span class=\"p\">,</span> <span class=\"n\">bvecs</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                                     <span class=\"n\">big_delta</span><span class=\"p\">,</span> <span class=\"n\">small_delta</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"inv\">\n<h3>inv<a class=\"headerlink\" href=\"#inv\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.inv\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">inv</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">a</em>, <em class=\"sig-param\">overwrite_a=False</em>, <em class=\"sig-param\">check_finite=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.inv\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the inverse of a matrix.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>a</strong><span class=\"classifier\">array_like</span></dt><dd><p>Square matrix to be inverted.</p>\n</dd>\n<dt><strong>overwrite_a</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Discard data in <cite>a</cite> (may improve performance). Default is False.</p>\n</dd>\n<dt><strong>check_finite</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>Whether to check that the input matrix contains only finite numbers.\nDisabling may give a performance gain, but may result in problems\n(crashes, non-termination) if the inputs do contain infinities or NaNs.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>ainv</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Inverse of the matrix <cite>a</cite>.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-odd\">Raises</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt>LinAlgError</dt><dd><p>If <cite>a</cite> is singular.</p>\n</dd>\n<dt>ValueError</dt><dd><p>If <cite>a</cite> is not square, or not 2D.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy</span> <span class=\"k\">import</span> <span class=\"n\">linalg</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">1.</span><span class=\"p\">,</span> <span class=\"mf\">2.</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">3.</span><span class=\"p\">,</span> <span class=\"mf\">4.</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"go\">array([[-2. ,  1. ],</span>\n<span class=\"go\">       [ 1.5, -0.5]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">linalg</span><span class=\"o\">.</span><span class=\"n\">inv</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">))</span>\n<span class=\"go\">array([[ 1.,  0.],</span>\n<span class=\"go\">       [ 0.,  1.]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"params-to-btens\">\n<h3>params_to_btens<a class=\"headerlink\" href=\"#params-to-btens\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.params_to_btens\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">params_to_btens</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bval</em>, <em class=\"sig-param\">bdelta</em>, <em class=\"sig-param\">b_eta</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.params_to_btens\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute b-tensor from trace, anisotropy and assymetry parameters</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bval: int or float</strong></dt><dd><p>b-value (&gt;= 0)</p>\n</dd>\n<dt><strong>bdelta: int or float</strong></dt><dd><p>normalized tensor anisotropy (&gt;= -0.5 and &lt;= 1)</p>\n</dd>\n<dt><strong>b_eta: int or float</strong></dt><dd><p>tensor assymetry (&gt;= 0 and &lt;= 1)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>(3, 3) numpy.ndarray</dt><dd><p>output b-tensor</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>Implements eq. 7.11. p. 231 in [1].</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r3ed644842521-1\"><span class=\"brackets\">1</span></dt>\n<dd><ol class=\"upperalpha simple\" start=\"4\">\n<li><p>Topgaard, NMR methods for studying microscopic diffusion</p></li>\n</ol>\n</dd>\n</dl>\n<p>anisotropy, in: R. Valiullin (Ed.), Diffusion NMR of Confined Systems: Fluid\nTransport in Porous Solids and Heterogeneous Materials, Royal Society of\nChemistry, Cambridge, UK, 2016.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"polar\">\n<h3>polar<a class=\"headerlink\" href=\"#polar\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.polar\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">polar</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">a</em>, <em class=\"sig-param\">side='right'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.polar\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compute the polar decomposition.</p>\n<p>Returns the factors of the polar decomposition <a class=\"reference internal\" href=\"#rd4832748c26d-1\" id=\"id3\">[1]</a> <cite>u</cite> and <cite>p</cite> such\nthat <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">=</span> <span class=\"pre\">up</span></code> (if <cite>side</cite> is \u201cright\u201d) or <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">=</span> <span class=\"pre\">pu</span></code> (if <cite>side</cite> is\n\u201cleft\u201d), where <cite>p</cite> is positive semidefinite. Depending on the shape\nof <cite>a</cite>, either the rows or columns of <cite>u</cite> are orthonormal. When <cite>a</cite>\nis a square array, <cite>u</cite> is a square unitary array. When <cite>a</cite> is not\nsquare, the \u201ccanonical polar decomposition\u201d <a class=\"reference internal\" href=\"#rd4832748c26d-2\" id=\"id4\">[2]</a> is computed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>a</strong><span class=\"classifier\">(m, n) array_like</span></dt><dd><p>The array to be factored.</p>\n</dd>\n<dt><strong>side</strong><span class=\"classifier\">{\u2018left\u2019, \u2018right\u2019}, optional</span></dt><dd><p>Determines whether a right or left polar decomposition is computed.\nIf <cite>side</cite> is \u201cright\u201d, then <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">=</span> <span class=\"pre\">up</span></code>.  If <cite>side</cite> is \u201cleft\u201d,  then\n<code class=\"docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">=</span> <span class=\"pre\">pu</span></code>.  The default is \u201cright\u201d.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>u</strong><span class=\"classifier\">(m, n) ndarray</span></dt><dd><p>If <cite>a</cite> is square, then <cite>u</cite> is unitary. If m &gt; n, then the columns\nof <cite>a</cite> are orthonormal, and if m &lt; n, then the rows of <cite>u</cite> are\northonormal.</p>\n</dd>\n<dt><strong>p</strong><span class=\"classifier\">ndarray</span></dt><dd><p><cite>p</cite> is Hermitian positive semidefinite. If <cite>a</cite> is nonsingular, <cite>p</cite>\nis positive definite. The shape of <cite>p</cite> is (n, n) or (m, m), depending\non whether <cite>side</cite> is \u201cright\u201d or \u201cleft\u201d, respectively.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"rd4832748c26d-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id3\">1</a></span></dt>\n<dd><p>R. A. Horn and C. R. Johnson, \u201cMatrix Analysis\u201d, Cambridge\nUniversity Press, 1985.</p>\n</dd>\n<dt class=\"label\" id=\"rd4832748c26d-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id4\">2</a></span></dt>\n<dd><p>N. J. Higham, \u201cFunctions of Matrices: Theory and Computation\u201d,\nSIAM, 2008.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy.linalg</span> <span class=\"k\">import</span> <span class=\"n\">polar</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">polar</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span>\n<span class=\"go\">array([[ 0.85749293, -0.51449576],</span>\n<span class=\"go\">       [ 0.51449576,  0.85749293]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span>\n<span class=\"go\">array([[ 1.88648444,  1.2004901 ],</span>\n<span class=\"go\">       [ 1.2004901 ,  3.94446746]])</span>\n</pre></div>\n</div>\n<p>A non-square example, with m &lt; n:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">polar</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span>\n<span class=\"go\">array([[-0.21196618, -0.42393237,  0.88054056],</span>\n<span class=\"go\">       [ 0.39378971,  0.78757942,  0.4739708 ]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span>\n<span class=\"go\">array([[ 0.48470147,  0.96940295,  1.15122648],</span>\n<span class=\"go\">       [ 0.96940295,  1.9388059 ,  2.30245295],</span>\n<span class=\"go\">       [ 1.15122648,  2.30245295,  3.65696431]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>   <span class=\"c1\"># Verify the decomposition.</span>\n<span class=\"go\">array([[ 0.5,  1. ,  2. ],</span>\n<span class=\"go\">       [ 1.5,  3. ,  4. ]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">)</span>   <span class=\"c1\"># The rows of u are orthonormal.</span>\n<span class=\"go\">array([[  1.00000000e+00,  -2.07353665e-17],</span>\n<span class=\"go\">       [ -2.07353665e-17,   1.00000000e+00]])</span>\n</pre></div>\n</div>\n<p>Another non-square example, with m &gt; n:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">T</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">polar</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span>\n<span class=\"go\">array([[-0.21196618,  0.39378971],</span>\n<span class=\"go\">       [-0.42393237,  0.78757942],</span>\n<span class=\"go\">       [ 0.88054056,  0.4739708 ]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span>\n<span class=\"go\">array([[ 1.23116567,  1.93241587],</span>\n<span class=\"go\">       [ 1.93241587,  4.84930602]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>   <span class=\"c1\"># Verify the decomposition.</span>\n<span class=\"go\">array([[ 0.5,  1.5],</span>\n<span class=\"go\">       [ 1. ,  3. ],</span>\n<span class=\"go\">       [ 2. ,  4. ]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>  <span class=\"c1\"># The columns of u are orthonormal.</span>\n<span class=\"go\">array([[  1.00000000e+00,  -1.26363763e-16],</span>\n<span class=\"go\">       [ -1.26363763e-16,   1.00000000e+00]])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"reorient-bvecs\">\n<h3>reorient_bvecs<a class=\"headerlink\" href=\"#reorient-bvecs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.reorient_bvecs\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">reorient_bvecs</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">gtab</em>, <em class=\"sig-param\">affines</em>, <em class=\"sig-param\">atol=0.01</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.reorient_bvecs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reorient the directions in a GradientTable.</p>\n<p>When correcting for motion, rotation of the diffusion-weighted volumes\nmight cause systematic bias in rotationally invariant measures, such as FA\nand MD, and also cause characteristic biases in tractography, unless the\ngradient directions are appropriately reoriented to compensate for this\neffect <a class=\"reference internal\" href=\"#re5af466232f4-leemans2009\" id=\"id7\">[Leemans2009]</a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>gtab</strong><span class=\"classifier\">GradientTable</span></dt><dd><p>The nominal gradient table with which the data were acquired.</p>\n</dd>\n<dt><strong>affines</strong><span class=\"classifier\">list or ndarray of shape (n, 4, 4) or (n, 3, 3)</span></dt><dd><p>Each entry in this list or array contain either an affine\ntransformation (4,4) or a rotation matrix (3, 3).\nIn both cases, the transformations encode the rotation that was applied\nto the image corresponding to one of the non-zero gradient directions\n(ordered according to their order in <cite>gtab.bvecs[~gtab.b0s_mask]</cite>)</p>\n</dd>\n<dt><strong>atol: see gradient_table()</strong></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>gtab</strong><span class=\"classifier\">a GradientTable class instance with the reoriented directions</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"re5af466232f4-leemans2009\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id7\">Leemans2009</a></span></dt>\n<dd><p>The B-Matrix Must Be Rotated When Correcting for\nSubject Motion in DTI Data. Leemans, A. and Jones, D.K. (2009).\nMRM, 61: 1336-1349</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"round-bvals\">\n<h3>round_bvals<a class=\"headerlink\" href=\"#round-bvals\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.round_bvals\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">round_bvals</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bmag=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.round_bvals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>\u201cThis function rounds the b-values</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the b-values</p>\n</dd>\n<dt><strong>bmag</strong><span class=\"classifier\">int</span></dt><dd><p>The order of magnitude to round the b-values. If not given b-values\nwill be rounded relative to the order of magnitude\n<span class=\"math notranslate nohighlight\">\\(bmag = (bmagmax - 1)\\)</span>, where bmaxmag is the magnitude order of the\nlarger b-value.</p>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014</strong></dt><dd></dd>\n<dt><strong>rbvals</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the rounded b-values</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"unique-bvals\">\n<h3>unique_bvals<a class=\"headerlink\" href=\"#unique-bvals\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.unique_bvals\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">unique_bvals</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bmag=None</em>, <em class=\"sig-param\">rbvals=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.unique_bvals\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This function gives the unique rounded b-values of the data</p>\n<p>dipy.core.gradients.unique_bvals is deprecated, Please use dipy.core.gradients.unique_bvals_magnitude instead</p>\n<ul class=\"simple\">\n<li><p>deprecated from version: 1.2</p></li>\n<li><p>Will raise &lt;class \u2018dipy.utils.deprecator.ExpiredDeprecationError\u2019&gt; as of version: 1.4</p></li>\n</ul>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the b-values</p>\n</dd>\n<dt><strong>bmag</strong><span class=\"classifier\">int</span></dt><dd><p>The order of magnitude that the bvalues have to differ to be\nconsidered an unique b-value. B-values are also rounded up to\nthis order of magnitude. Default: derive this value from the\nmaximal b-value provided: <span class=\"math notranslate nohighlight\">\\(bmag=log_{10}(max(bvals)) - 1\\)</span>.</p>\n</dd>\n<dt><strong>rbvals</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True function also returns all individual rounded b-values.\nDefault: False</p>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014</strong></dt><dd></dd>\n<dt><strong>ubvals</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the rounded unique b-values</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"unique-bvals-magnitude\">\n<h3>unique_bvals_magnitude<a class=\"headerlink\" href=\"#unique-bvals-magnitude\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.unique_bvals_magnitude\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">unique_bvals_magnitude</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">bmag=None</em>, <em class=\"sig-param\">rbvals=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.unique_bvals_magnitude\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This function gives the unique rounded b-values of the data</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the b-values</p>\n</dd>\n<dt><strong>bmag</strong><span class=\"classifier\">int</span></dt><dd><p>The order of magnitude that the bvalues have to differ to be\nconsidered an unique b-value. B-values are also rounded up to\nthis order of magnitude. Default: derive this value from the\nmaximal b-value provided: <span class=\"math notranslate nohighlight\">\\(bmag=log_{10}(max(bvals)) - 1\\)</span>.</p>\n</dd>\n<dt><strong>rbvals</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>If True function also returns all individual rounded b-values.\nDefault: False</p>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014</strong></dt><dd></dd>\n<dt><strong>ubvals</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the rounded unique b-values</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"unique-bvals-tolerance\">\n<h3>unique_bvals_tolerance<a class=\"headerlink\" href=\"#unique-bvals-tolerance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.unique_bvals_tolerance\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">unique_bvals_tolerance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">bvals</em>, <em class=\"sig-param\">tol=20</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.unique_bvals_tolerance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Gives the unique b-values of the data, within a tolerance gap</p>\n<p>The b-values must be regrouped in clusters easily separated by a\ndistance greater than the tolerance gap. If all the b-values of a\ncluster fit within the tolerance gap, the highest b-value is kept.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>bvals</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the b-values</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">int</span></dt><dd><p>The tolerated gap between the b-values to extract\nand the actual b-values.</p>\n</dd>\n<dt><strong>Returns</strong></dt><dd></dd>\n<dt><strong>\u2014\u2014</strong></dt><dd></dd>\n<dt><strong>ubvals</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array containing the unique b-values using the median value\nfor each cluster</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id9\">\n<h3>vec2vec_rotmat<a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.vec2vec_rotmat\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">vec2vec_rotmat</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">u</em>, <em class=\"sig-param\">v</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.vec2vec_rotmat\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>rotation matrix from 2 unit vectors</p>\n<p>u, v being unit 3d vectors return a 3x3 rotation matrix R than aligns u to\nv.</p>\n<p>In general there are many rotations that will map u to v. If S is any\nrotation using v as an axis then R.S will also map u to v since (S.R)u =\nS(Ru) = Sv = v.  The rotation R returned by vec2vec_rotmat leaves fixed the\nperpendicular to the plane spanned by u and v.</p>\n<p>The transpose of R will align v to u.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>u</strong><span class=\"classifier\">array, shape(3,)</span></dt><dd></dd>\n<dt><strong>v</strong><span class=\"classifier\">array, shape(3,)</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>R</strong><span class=\"classifier\">array, shape(3,3)</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.geometry</span> <span class=\"k\">import</span> <span class=\"n\">vec2vec_rotmat</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"n\">vec2vec_rotmat</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 0.,  1.,  0.])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dot</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"o\">.</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 1.,  0.,  0.])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id10\">\n<h3>vector_norm<a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.vector_norm\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">vector_norm</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vec</em>, <em class=\"sig-param\">axis=-1</em>, <em class=\"sig-param\">keepdims=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.vector_norm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return vector Euclidean (L2) norm</p>\n<p>See <a class=\"reference internal\" href=\"../../glossary/#term-unit-vector\"><span class=\"xref std std-term\">unit vector</span></a> and <a class=\"reference internal\" href=\"../../glossary/#term-euclidean-norm\"><span class=\"xref std std-term\">Euclidean norm</span></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vec</strong><span class=\"classifier\">array_like</span></dt><dd><p>Vectors to norm.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis over which to norm. By default norm over last axis. If <cite>axis</cite> is\nNone, <cite>vec</cite> is flattened then normed.</p>\n</dd>\n<dt><strong>keepdims</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, the output will have the same number of dimensions as <cite>vec</cite>,\nwith shape 1 on <cite>axis</cite>.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>norm</strong><span class=\"classifier\">array</span></dt><dd><p>Euclidean norms of vectors.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 17.,  85.])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 17.],</span>\n<span class=\"go\">       [ 85.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">array([  8.,  39.,  77.])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"warn\">\n<h3>warn<a class=\"headerlink\" href=\"#warn\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.gradients.warn\">\n<code class=\"sig-prename descclassname\">dipy.core.gradients.</code><code class=\"sig-name descname\">warn</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">message</em>, <em class=\"sig-param\">category=None</em>, <em class=\"sig-param\">stacklevel=1</em>, <em class=\"sig-param\">source=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.gradients.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Issue a warning, or maybe ignore it or raise an exception.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"graph\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.graph.Graph\" title=\"dipy.core.graph.Graph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Graph</span></code></a><a class=\"headerlink\" href=\"#graph\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.graph.Graph\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.graph.</code><code class=\"sig-name descname\">Graph</code><a class=\"headerlink\" href=\"#dipy.core.graph.Graph\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>A simple graph class</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 69%\" />\n<col style=\"width: 31%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>add_edge</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>add_node</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>all_paths</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>children</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>del_node</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>del_node_and_edges</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>down</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>down_short</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>parents</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>shortest_path</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>up</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>up_short</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A graph class with nodes and edges :-)</p>\n<p>This class allows us to:</p>\n<ol class=\"arabic simple\">\n<li><p>find the shortest path</p></li>\n<li><p>find all paths</p></li>\n<li><p>add/delete nodes and edges</p></li>\n<li><p>get parent &amp; children nodes</p></li>\n</ol>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.graph</span> <span class=\"k\">import</span> <span class=\"n\">Graph</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">=</span><span class=\"n\">Graph</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_node</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">g</span><span class=\"o\">.</span><span class=\"n\">up_short</span><span class=\"p\">(</span><span class=\"s1\">&#39;d&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;d&#39;, &#39;b&#39;, &#39;a&#39;]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.add_edge\">\n<code class=\"sig-name descname\">add_edge</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em>, <em class=\"sig-param\">m</em>, <em class=\"sig-param\">ws=True</em>, <em class=\"sig-param\">wp=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.add_edge\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.add_node\">\n<code class=\"sig-name descname\">add_node</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em>, <em class=\"sig-param\">attr=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.add_node\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.all_paths\">\n<code class=\"sig-name descname\">all_paths</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">graph</em>, <em class=\"sig-param\">start</em>, <em class=\"sig-param\">end=None</em>, <em class=\"sig-param\">path=[]</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.all_paths\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.children\">\n<code class=\"sig-name descname\">children</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.children\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.del_node\">\n<code class=\"sig-name descname\">del_node</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.del_node\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.del_node_and_edges\">\n<code class=\"sig-name descname\">del_node_and_edges</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.del_node_and_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.down\">\n<code class=\"sig-name descname\">down</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.down\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.down_short\">\n<code class=\"sig-name descname\">down_short</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.down_short\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.parents\">\n<code class=\"sig-name descname\">parents</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.parents\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.shortest_path\">\n<code class=\"sig-name descname\">shortest_path</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">graph</em>, <em class=\"sig-param\">start</em>, <em class=\"sig-param\">end=None</em>, <em class=\"sig-param\">path=[]</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.shortest_path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.up\">\n<code class=\"sig-name descname\">up</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.up\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.graph.Graph.up_short\">\n<code class=\"sig-name descname\">up_short</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.graph.Graph.up_short\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"histeq\">\n<h3>histeq<a class=\"headerlink\" href=\"#histeq\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.histeq.histeq\">\n<code class=\"sig-prename descclassname\">dipy.core.histeq.</code><code class=\"sig-name descname\">histeq</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">arr</em>, <em class=\"sig-param\">num_bins=256</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.histeq.histeq\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Performs an histogram equalization on <code class=\"docutils literal notranslate\"><span class=\"pre\">arr</span></code>.\nThis was taken from:\n<a class=\"reference external\" href=\"http://www.janeriksolem.net/2009/06/histogram-equalization-with-python-and.html\">http://www.janeriksolem.net/2009/06/histogram-equalization-with-python-and.html</a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>arr</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Image on which to perform histogram equalization.</p>\n</dd>\n<dt><strong>num_bins</strong><span class=\"classifier\">int</span></dt><dd><p>Number of bins used to construct the histogram.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>result</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Histogram equalized image.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"as-strided\">\n<h3>as_strided<a class=\"headerlink\" href=\"#as-strided\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.ndindex.as_strided\">\n<code class=\"sig-prename descclassname\">dipy.core.ndindex.</code><code class=\"sig-name descname\">as_strided</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">shape=None</em>, <em class=\"sig-param\">strides=None</em>, <em class=\"sig-param\">subok=False</em>, <em class=\"sig-param\">writeable=True</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.ndindex.as_strided\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a view into the array with the given shape and strides.</p>\n<div class=\"admonition warning\">\n<p class=\"admonition-title\">Warning</p>\n<p>This function has to be used with extreme care, see notes.</p>\n</div>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>x</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Array to create a new.</p>\n</dd>\n<dt><strong>shape</strong><span class=\"classifier\">sequence of int, optional</span></dt><dd><p>The shape of the new array. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">x.shape</span></code>.</p>\n</dd>\n<dt><strong>strides</strong><span class=\"classifier\">sequence of int, optional</span></dt><dd><p>The strides of the new array. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">x.strides</span></code>.</p>\n</dd>\n<dt><strong>subok</strong><span class=\"classifier\">bool, optional</span></dt><dd><div class=\"versionadded\">\n<p><span class=\"versionmodified added\">New in version 1.10.</span></p>\n</div>\n<p>If True, subclasses are preserved.</p>\n</dd>\n<dt><strong>writeable</strong><span class=\"classifier\">bool, optional</span></dt><dd><div class=\"versionadded\">\n<p><span class=\"versionmodified added\">New in version 1.12.</span></p>\n</div>\n<p>If set to False, the returned array will always be readonly.\nOtherwise it will be writable if the original array was. It\nis advisable to set this to False if possible (see Notes).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>view</strong><span class=\"classifier\">ndarray</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">broadcast_to</span></code></dt><dd><p>broadcast an array to a given shape.</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reshape</span></code></dt><dd><p>reshape an array.</p>\n</dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">as_strided</span></code> creates a view into the array given the exact strides\nand shape. This means it manipulates the internal data structure of\nndarray and, if done incorrectly, the array elements can point to\ninvalid memory and can corrupt results or crash your program.\nIt is advisable to always use the original <code class=\"docutils literal notranslate\"><span class=\"pre\">x.strides</span></code> when\ncalculating new strides to avoid reliance on a contiguous memory\nlayout.</p>\n<p>Furthermore, arrays created with this function often contain self\noverlapping memory, so that two elements are identical.\nVectorized write operations on such arrays will typically be\nunpredictable. They may even give different results for small, large,\nor transposed arrays.\nSince writing to these arrays has to be tested and done with great\ncare, you may want to use <code class=\"docutils literal notranslate\"><span class=\"pre\">writeable=False</span></code> to avoid accidental write\noperations.</p>\n<p>For these reasons it is advisable to avoid <code class=\"docutils literal notranslate\"><span class=\"pre\">as_strided</span></code> when\npossible.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"ndindex\">\n<h3>ndindex<a class=\"headerlink\" href=\"#ndindex\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.ndindex.ndindex\">\n<code class=\"sig-prename descclassname\">dipy.core.ndindex.</code><code class=\"sig-name descname\">ndindex</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">shape</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.ndindex.ndindex\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An N-dimensional iterator object to index arrays.</p>\n<p>Given the shape of an array, an <cite>ndindex</cite> instance iterates over\nthe N-dimensional index of the array. At each iteration a tuple\nof indices is returned; the last dimension is iterated over first.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>shape</strong><span class=\"classifier\">tuple of ints</span></dt><dd><p>The dimensions of the array.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.ndindex</span> <span class=\"k\">import</span> <span class=\"n\">ndindex</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"n\">ndindex</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span>\n<span class=\"go\">(0, 0, 0)</span>\n<span class=\"go\">(0, 1, 0)</span>\n<span class=\"go\">(1, 0, 0)</span>\n<span class=\"go\">(1, 1, 0)</span>\n<span class=\"go\">(2, 0, 0)</span>\n<span class=\"go\">(2, 1, 0)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"onetimeproperty\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.onetime.OneTimeProperty\" title=\"dipy.core.onetime.OneTimeProperty\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneTimeProperty</span></code></a><a class=\"headerlink\" href=\"#onetimeproperty\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.onetime.OneTimeProperty\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.onetime.</code><code class=\"sig-name descname\">OneTimeProperty</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.onetime.OneTimeProperty\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>A descriptor to make special properties that become normal attributes.</p>\n<p>This is meant to be used mostly by the auto_attr decorator in this module.</p>\n<dl class=\"method\">\n<dt id=\"dipy.core.onetime.OneTimeProperty.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.onetime.OneTimeProperty.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a OneTimeProperty instance.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>func</strong><span class=\"classifier\">method</span></dt><dd><p>The method that will be called the first time to compute a value.\nAfterwards, the method\u2019s name will be a standard attribute holding\nthe value of this computation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"resetmixin\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.onetime.ResetMixin\" title=\"dipy.core.onetime.ResetMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResetMixin</span></code></a><a class=\"headerlink\" href=\"#resetmixin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.onetime.ResetMixin\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.onetime.</code><code class=\"sig-name descname\">ResetMixin</code><a class=\"headerlink\" href=\"#dipy.core.onetime.ResetMixin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>A Mixin class to add a .reset() method to users of OneTimeProperty.</p>\n<p>By default, auto attributes once computed, become static.  If they happen\nto depend on other parts of an object and those parts change, their values\nmay now be invalid.</p>\n<p>This class offers a .reset() method that users can call <em>explicitly</em> when\nthey know the state of their objects may have changed and they want to\nensure that <em>all</em> their special attributes should be invalidated.  Once\nreset() is called, all their auto attributes are reset to their\nOneTimeProperty descriptors, and their accessor functions will be triggered\nagain.</p>\n<div class=\"admonition warning\">\n<p class=\"admonition-title\">Warning</p>\n<p>If a class has a set of attributes that are OneTimeProperty, but that\ncan be initialized from any one of them, do NOT use this mixin!  For\ninstance, UniformTimeSeries can be initialized with only sampling_rate\nand t0, sampling_interval and time are auto-computed.  But if you were\nto reset() a UniformTimeSeries, it would lose all 4, and there would be\nthen no way to break the circular dependency chains.</p>\n<p>If this becomes a problem in practice (for our analyzer objects it\nisn\u2019t, as they don\u2019t have the above pattern), we can extend reset() to\ncheck for a _no_reset set of names in the instance which are meant to be\nkept protected.  But for now this is NOT done, so caveat emptor.</p>\n</div>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">ResetMixin</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">1.0</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">... </span>    <span class=\"nd\">@auto_attr</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">y</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;*** y computation executed ***&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mf\">2.0</span>\n<span class=\"gp\">...</span>\n</pre></div>\n</div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>About to access y twice, the second time no computation is done:\n&gt;&gt;&gt; a.y\n<strong>* y computation executed *</strong>\n5.0\n&gt;&gt;&gt; a.y\n5.0</p>\n<p>Changing x\n&gt;&gt;&gt; a.x = 20</p>\n<p>a.y doesn\u2019t change to 10, since it is a static attribute:\n&gt;&gt;&gt; a.y\n5.0</p>\n<p>We now reset a, and this will then force all auto attributes to recompute\nthe next time we access them:\n&gt;&gt;&gt; a.reset()</p>\n<p>About to access y twice again after reset():\n&gt;&gt;&gt; a.y\n<strong>* y computation executed *</strong>\n10.0\n&gt;&gt;&gt; a.y\n10.0</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.onetime.ResetMixin.reset\" title=\"dipy.core.onetime.ResetMixin.reset\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">reset</span></code></a>(self)</p></td>\n<td><p>Reset all OneTimeProperty attributes that may have fired already.</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.onetime.ResetMixin.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.onetime.ResetMixin.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.onetime.ResetMixin.reset\">\n<code class=\"sig-name descname\">reset</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.onetime.ResetMixin.reset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reset all OneTimeProperty attributes that may have fired already.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id11\">\n<h3>auto_attr<a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.onetime.auto_attr\">\n<code class=\"sig-prename descclassname\">dipy.core.onetime.</code><code class=\"sig-name descname\">auto_attr</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.onetime.auto_attr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator to create OneTimeProperty attributes.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>func</strong><span class=\"classifier\">method</span></dt><dd><p>The method that will be called the first time to compute a value.\nAfterwards, the method\u2019s name will be a standard attribute holding the\nvalue of this computation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MagicProp</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nd\">@auto_attr</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"mi\">99</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MagicProp</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"go\">99</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"nonnegativeleastsquares\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.optimize.NonNegativeLeastSquares\" title=\"dipy.core.optimize.NonNegativeLeastSquares\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NonNegativeLeastSquares</span></code></a><a class=\"headerlink\" href=\"#nonnegativeleastsquares\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.optimize.NonNegativeLeastSquares\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.optimize.</code><code class=\"sig-name descname\">NonNegativeLeastSquares</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.NonNegativeLeastSquares\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.core.optimize.SKLearnLinearSolver\" title=\"dipy.core.optimize.SKLearnLinearSolver\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.core.optimize.SKLearnLinearSolver</span></code></a></p>\n<p>A sklearn-like interface to scipy.optimize.nnls</p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.NonNegativeLeastSquares.fit\" title=\"dipy.core.optimize.NonNegativeLeastSquares.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(self,\u00a0X,\u00a0y)</p></td>\n<td><p>Fit the NonNegativeLeastSquares linear model to data</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code>(self,\u00a0X)</p></td>\n<td><p>Predict using the result of the model</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.NonNegativeLeastSquares.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.NonNegativeLeastSquares.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.NonNegativeLeastSquares.fit\">\n<code class=\"sig-name descname\">fit</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">X</em>, <em class=\"sig-param\">y</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.NonNegativeLeastSquares.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Fit the NonNegativeLeastSquares linear model to data</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optimizer\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.optimize.Optimizer\" title=\"dipy.core.optimize.Optimizer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a><a class=\"headerlink\" href=\"#optimizer\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.optimize.Optimizer\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.optimize.</code><code class=\"sig-name descname\">Optimizer</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fun</em>, <em class=\"sig-param\">x0</em>, <em class=\"sig-param\">args=()</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">jac=None</em>, <em class=\"sig-param\">hess=None</em>, <em class=\"sig-param\">hessp=None</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">constraints=()</em>, <em class=\"sig-param\">tol=None</em>, <em class=\"sig-param\">callback=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>evolution</strong></dt><dd></dd>\n<dt><strong>fopt</strong></dt><dd></dd>\n<dt><strong>message</strong></dt><dd></dd>\n<dt><strong>nfev</strong></dt><dd></dd>\n<dt><strong>nit</strong></dt><dd></dd>\n<dt><strong>xopt</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 63%\" />\n<col style=\"width: 37%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>print_summary</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.Optimizer.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">fun</em>, <em class=\"sig-param\">x0</em>, <em class=\"sig-param\">args=()</em>, <em class=\"sig-param\">method='L-BFGS-B'</em>, <em class=\"sig-param\">jac=None</em>, <em class=\"sig-param\">hess=None</em>, <em class=\"sig-param\">hessp=None</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">constraints=()</em>, <em class=\"sig-param\">tol=None</em>, <em class=\"sig-param\">callback=None</em>, <em class=\"sig-param\">options=None</em>, <em class=\"sig-param\">evolution=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class for handling minimization of scalar function of one or more\nvariables.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>fun</strong><span class=\"classifier\">callable</span></dt><dd><p>Objective function.</p>\n</dd>\n<dt><strong>x0</strong><span class=\"classifier\">ndarray</span></dt><dd><p>Initial guess.</p>\n</dd>\n<dt><strong>args</strong><span class=\"classifier\">tuple, optional</span></dt><dd><p>Extra arguments passed to the objective function and its\nderivatives (Jacobian, Hessian).</p>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">str, optional</span></dt><dd><p>Type of solver.  Should be one of</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>\u2018Nelder-Mead\u2019</p></li>\n<li><p>\u2018Powell\u2019</p></li>\n<li><p>\u2018CG\u2019</p></li>\n<li><p>\u2018BFGS\u2019</p></li>\n<li><p>\u2018Newton-CG\u2019</p></li>\n<li><p>\u2018Anneal\u2019</p></li>\n<li><p>\u2018L-BFGS-B\u2019</p></li>\n<li><p>\u2018TNC\u2019</p></li>\n<li><p>\u2018COBYLA\u2019</p></li>\n<li><p>\u2018SLSQP\u2019</p></li>\n<li><p>\u2018dogleg\u2019</p></li>\n<li><p>\u2018trust-ncg\u2019</p></li>\n</ul>\n</div></blockquote>\n</dd>\n<dt><strong>jac</strong><span class=\"classifier\">bool or callable, optional</span></dt><dd><p>Jacobian of objective function. Only for CG, BFGS, Newton-CG,\ndogleg, trust-ncg.\nIf <cite>jac</cite> is a Boolean and is True, <cite>fun</cite> is assumed to return the\nvalue of Jacobian along with the objective function. If False, the\nJacobian will be estimated numerically.\n<cite>jac</cite> can also be a callable returning the Jacobian of the\nobjective. In this case, it must accept the same arguments\nas <cite>fun</cite>.</p>\n</dd>\n<dt><strong>hess, hessp</strong><span class=\"classifier\">callable, optional</span></dt><dd><p>Hessian of objective function or Hessian of objective function\ntimes an arbitrary vector p.  Only for Newton-CG,\ndogleg, trust-ncg.\nOnly one of <cite>hessp</cite> or <cite>hess</cite> needs to be given.  If <cite>hess</cite> is\nprovided, then <cite>hessp</cite> will be ignored.  If neither <cite>hess</cite> nor\n<cite>hessp</cite> is provided, then the hessian product will be approximated\nusing finite differences on <cite>jac</cite>. <cite>hessp</cite> must compute the Hessian\ntimes an arbitrary vector.</p>\n</dd>\n<dt><strong>bounds</strong><span class=\"classifier\">sequence, optional</span></dt><dd><p>Bounds for variables (only for L-BFGS-B, TNC and SLSQP).\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(min,</span> <span class=\"pre\">max)</span></code> pairs for each element in <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code>, defining\nthe bounds on that parameter. Use None for one of <code class=\"docutils literal notranslate\"><span class=\"pre\">min</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">max</span></code> when there is no bound in that direction.</p>\n</dd>\n<dt><strong>constraints</strong><span class=\"classifier\">dict or sequence of dict, optional</span></dt><dd><p>Constraints definition (only for COBYLA and SLSQP).\nEach constraint is defined in a dictionary with fields:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>type<span class=\"classifier\">str</span></dt><dd><p>Constraint type: \u2018eq\u2019 for equality, \u2018ineq\u2019 for inequality.</p>\n</dd>\n<dt>fun<span class=\"classifier\">callable</span></dt><dd><p>The function defining the constraint.</p>\n</dd>\n<dt>jac<span class=\"classifier\">callable, optional</span></dt><dd><p>The Jacobian of <cite>fun</cite> (only for SLSQP).</p>\n</dd>\n<dt>args<span class=\"classifier\">sequence, optional</span></dt><dd><p>Extra arguments to be passed to the function and Jacobian.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Equality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.\nNote that COBYLA only supports inequality constraints.</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance for termination. For detailed control, use\nsolver-specific options.</p>\n</dd>\n<dt><strong>callback</strong><span class=\"classifier\">callable, optional</span></dt><dd><p>Called after each iteration, as <code class=\"docutils literal notranslate\"><span class=\"pre\">callback(xk)</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">xk</span></code> is\nthe current parameter vector. Only available using Scipy &gt;= 0.12.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>A dictionary of solver options. All methods accept the following\ngeneric options:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>maxiter<span class=\"classifier\">int</span></dt><dd><p>Maximum number of iterations to perform.</p>\n</dd>\n<dt>disp<span class=\"classifier\">bool</span></dt><dd><p>Set to True to print convergence messages.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For method-specific options, see\n<cite>show_options(\u2018minimize\u2019, method)</cite>.</p>\n</dd>\n<dt><strong>evolution</strong><span class=\"classifier\">bool, optional</span></dt><dd><p>save history of x for each iteration. Only available using Scipy\n&gt;= 0.12.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">scipy.optimize.minimize</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.Optimizer.evolution\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">evolution</code><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer.evolution\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.Optimizer.fopt\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">fopt</code><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer.fopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.Optimizer.message\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">message</code><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer.message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.Optimizer.nfev\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">nfev</code><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer.nfev\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.Optimizer.nit\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">nit</code><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer.nit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.Optimizer.print_summary\">\n<code class=\"sig-name descname\">print_summary</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer.print_summary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.Optimizer.xopt\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">xopt</code><a class=\"headerlink\" href=\"#dipy.core.optimize.Optimizer.xopt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sklearnlinearsolver\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.optimize.SKLearnLinearSolver\" title=\"dipy.core.optimize.SKLearnLinearSolver\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SKLearnLinearSolver</span></code></a><a class=\"headerlink\" href=\"#sklearnlinearsolver\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.optimize.SKLearnLinearSolver\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.optimize.</code><code class=\"sig-name descname\">SKLearnLinearSolver</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.SKLearnLinearSolver\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Provide a sklearn-like uniform interface to algorithms that solve problems\nof the form: <span class=\"math notranslate nohighlight\">\\(y = Ax\\)</span> for <span class=\"math notranslate nohighlight\">\\(x\\)</span></p>\n<p>Sub-classes of SKLearnLinearSolver should provide a \u2018fit\u2019 method that have\nthe following signature: <cite>SKLearnLinearSolver.fit(X, y)</cite>, which would set\nan attribute <cite>SKLearnLinearSolver.coef_</cite>, with the shape (X.shape[1],),\nsuch that an estimate of y can be calculated as:\n<cite>y_hat = np.dot(X, SKLearnLinearSolver.coef_.T)</cite></p>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.SKLearnLinearSolver.fit\" title=\"dipy.core.optimize.SKLearnLinearSolver.fit\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">fit</span></code></a>(self,\u00a0X,\u00a0y)</p></td>\n<td><p>Implement for all derived classes</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.optimize.SKLearnLinearSolver.predict\" title=\"dipy.core.optimize.SKLearnLinearSolver.predict\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">predict</span></code></a>(self,\u00a0X)</p></td>\n<td><p>Predict using the result of the model</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.SKLearnLinearSolver.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.SKLearnLinearSolver.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.SKLearnLinearSolver.fit\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">fit</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">X</em>, <em class=\"sig-param\">y</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.SKLearnLinearSolver.fit\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implement for all derived classes</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.optimize.SKLearnLinearSolver.predict\">\n<code class=\"sig-name descname\">predict</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">X</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.SKLearnLinearSolver.predict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Predict using the result of the model</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>X</strong><span class=\"classifier\">array-like (n_samples, n_features)</span></dt><dd><p>Samples.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>C</strong><span class=\"classifier\">array, shape = (n_samples,)</span></dt><dd><p>Predicted values.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"minimize\">\n<h3>minimize<a class=\"headerlink\" href=\"#minimize\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.optimize.minimize\">\n<code class=\"sig-prename descclassname\">dipy.core.optimize.</code><code class=\"sig-name descname\">minimize</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fun</em>, <em class=\"sig-param\">x0</em>, <em class=\"sig-param\">args=()</em>, <em class=\"sig-param\">method=None</em>, <em class=\"sig-param\">jac=None</em>, <em class=\"sig-param\">hess=None</em>, <em class=\"sig-param\">hessp=None</em>, <em class=\"sig-param\">bounds=None</em>, <em class=\"sig-param\">constraints=()</em>, <em class=\"sig-param\">tol=None</em>, <em class=\"sig-param\">callback=None</em>, <em class=\"sig-param\">options=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.minimize\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Minimization of scalar function of one or more variables.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl>\n<dt><strong>fun</strong><span class=\"classifier\">callable</span></dt><dd><p>The objective function to be minimized.</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">fun(x,</span> <span class=\"pre\">*args)</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">float</span></code></p>\n</div></blockquote>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> is an 1-D array with shape (n,) and <code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code>\nis a tuple of the fixed parameters needed to completely\nspecify the function.</p>\n</dd>\n<dt><strong>x0</strong><span class=\"classifier\">ndarray, shape (n,)</span></dt><dd><p>Initial guess. Array of real elements of size (n,),\nwhere \u2018n\u2019 is the number of independent variables.</p>\n</dd>\n<dt><strong>args</strong><span class=\"classifier\">tuple, optional</span></dt><dd><p>Extra arguments passed to the objective function and its\nderivatives (<cite>fun</cite>, <cite>jac</cite> and <cite>hess</cite> functions).</p>\n</dd>\n<dt><strong>method</strong><span class=\"classifier\">str or callable, optional</span></dt><dd><p>Type of solver.  Should be one of</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p>\u2018Nelder-Mead\u2019 <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018Powell\u2019      <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018CG\u2019          <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018BFGS\u2019        <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018Newton-CG\u2019   <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018L-BFGS-B\u2019    <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018TNC\u2019         <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018COBYLA\u2019      <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018SLSQP\u2019       <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018trust-constr\u2019<span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018dogleg\u2019      <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018trust-ncg\u2019   <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018trust-exact\u2019 <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>\u2018trust-krylov\u2019 <span class=\"xref std std-ref\">(see here)</span></p></li>\n<li><p>custom - a callable object (added in version 0.14.0),\nsee below for description.</p></li>\n</ul>\n</div></blockquote>\n<p>If not given, chosen to be one of <code class=\"docutils literal notranslate\"><span class=\"pre\">BFGS</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">L-BFGS-B</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">SLSQP</span></code>,\ndepending if the problem has constraints or bounds.</p>\n</dd>\n<dt><strong>jac</strong><span class=\"classifier\">{callable,  \u20182-point\u2019, \u20183-point\u2019, \u2018cs\u2019, bool}, optional</span></dt><dd><p>Method for computing the gradient vector. Only for CG, BFGS,\nNewton-CG, L-BFGS-B, TNC, SLSQP, dogleg, trust-ncg, trust-krylov,\ntrust-exact and trust-constr.\nIf it is a callable, it should be a function that returns the gradient\nvector:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">jac(x,</span> <span class=\"pre\">*args)</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">array_like,</span> <span class=\"pre\">shape</span> <span class=\"pre\">(n,)</span></code></p>\n</div></blockquote>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> is an array with shape (n,) and <code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code> is a tuple with\nthe fixed parameters. If <cite>jac</cite> is a Boolean and is True, <cite>fun</cite> is\nassumed to return and objective and gradient as and <code class=\"docutils literal notranslate\"><span class=\"pre\">(f,</span> <span class=\"pre\">g)</span></code> tuple.\nMethods \u2018Newton-CG\u2019, \u2018trust-ncg\u2019, \u2018dogleg\u2019, \u2018trust-exact\u2019, and\n\u2018trust-krylov\u2019 require that either a callable be supplied, or that\n<cite>fun</cite> return the objective and gradient.\nIf None or False, the gradient will be estimated using 2-point finite\ndifference estimation with an absolute step size.\nAlternatively, the keywords  {\u20182-point\u2019, \u20183-point\u2019, \u2018cs\u2019} can be used\nto select a finite difference scheme for numerical estimation of the\ngradient with a relative step size. These finite difference schemes\nobey any specified <cite>bounds</cite>.</p>\n</dd>\n<dt><strong>hess</strong><span class=\"classifier\">{callable, \u20182-point\u2019, \u20183-point\u2019, \u2018cs\u2019, HessianUpdateStrategy}, optional</span></dt><dd><p>Method for computing the Hessian matrix. Only for Newton-CG, dogleg,\ntrust-ncg,  trust-krylov, trust-exact and trust-constr. If it is\ncallable, it should return the  Hessian matrix:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">hess(x,</span> <span class=\"pre\">*args)</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">{LinearOperator,</span> <span class=\"pre\">spmatrix,</span> <span class=\"pre\">array},</span> <span class=\"pre\">(n,</span> <span class=\"pre\">n)</span></code></p>\n</div></blockquote>\n<p>where x is a (n,) ndarray and <cite>args</cite> is a tuple with the fixed\nparameters. LinearOperator and sparse matrix returns are\nallowed only for \u2018trust-constr\u2019 method. Alternatively, the keywords\n{\u20182-point\u2019, \u20183-point\u2019, \u2018cs\u2019} select a finite difference scheme\nfor numerical estimation. Or, objects implementing\n<cite>HessianUpdateStrategy</cite> interface can be used to approximate\nthe Hessian. Available quasi-Newton methods implementing\nthis interface are:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p><cite>BFGS</cite>;</p></li>\n<li><p><cite>SR1</cite>.</p></li>\n</ul>\n</div></blockquote>\n<p>Whenever the gradient is estimated via finite-differences,\nthe Hessian cannot be estimated with options\n{\u20182-point\u2019, \u20183-point\u2019, \u2018cs\u2019} and needs to be\nestimated using one of the quasi-Newton strategies.\nFinite-difference options {\u20182-point\u2019, \u20183-point\u2019, \u2018cs\u2019} and\n<cite>HessianUpdateStrategy</cite> are available only for \u2018trust-constr\u2019 method.</p>\n</dd>\n<dt><strong>hessp</strong><span class=\"classifier\">callable, optional</span></dt><dd><p>Hessian of objective function times an arbitrary vector p. Only for\nNewton-CG, trust-ncg, trust-krylov, trust-constr.\nOnly one of <cite>hessp</cite> or <cite>hess</cite> needs to be given.  If <cite>hess</cite> is\nprovided, then <cite>hessp</cite> will be ignored.  <cite>hessp</cite> must compute the\nHessian times an arbitrary vector:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">hessp(x,</span> <span class=\"pre\">p,</span> <span class=\"pre\">*args)</span> <span class=\"pre\">-&gt;</span>&#160; <span class=\"pre\">ndarray</span> <span class=\"pre\">shape</span> <span class=\"pre\">(n,)</span></code></p>\n</div></blockquote>\n<p>where x is a (n,) ndarray, p is an arbitrary vector with\ndimension (n,) and <cite>args</cite> is a tuple with the fixed\nparameters.</p>\n</dd>\n<dt><strong>bounds</strong><span class=\"classifier\">sequence or <cite>Bounds</cite>, optional</span></dt><dd><p>Bounds on variables for L-BFGS-B, TNC, SLSQP, Powell, and\ntrust-constr methods. There are two ways to specify the bounds:</p>\n<blockquote>\n<div><ol class=\"arabic simple\">\n<li><p>Instance of <cite>Bounds</cite> class.</p></li>\n<li><p>Sequence of <code class=\"docutils literal notranslate\"><span class=\"pre\">(min,</span> <span class=\"pre\">max)</span></code> pairs for each element in <cite>x</cite>. None\nis used to specify no bound.</p></li>\n</ol>\n</div></blockquote>\n</dd>\n<dt><strong>constraints</strong><span class=\"classifier\">{Constraint, dict} or List of {Constraint, dict}, optional</span></dt><dd><p>Constraints definition (only for COBYLA, SLSQP and trust-constr).\nConstraints for \u2018trust-constr\u2019 are defined as a single object or a\nlist of objects specifying constraints to the optimization problem.\nAvailable constraints are:</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p><cite>LinearConstraint</cite></p></li>\n<li><p><cite>NonlinearConstraint</cite></p></li>\n</ul>\n</div></blockquote>\n<p>Constraints for COBYLA, SLSQP are defined as a list of dictionaries.\nEach dictionary with fields:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>type<span class=\"classifier\">str</span></dt><dd><p>Constraint type: \u2018eq\u2019 for equality, \u2018ineq\u2019 for inequality.</p>\n</dd>\n<dt>fun<span class=\"classifier\">callable</span></dt><dd><p>The function defining the constraint.</p>\n</dd>\n<dt>jac<span class=\"classifier\">callable, optional</span></dt><dd><p>The Jacobian of <cite>fun</cite> (only for SLSQP).</p>\n</dd>\n<dt>args<span class=\"classifier\">sequence, optional</span></dt><dd><p>Extra arguments to be passed to the function and Jacobian.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>Equality constraint means that the constraint function result is to\nbe zero whereas inequality means that it is to be non-negative.\nNote that COBYLA only supports inequality constraints.</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">float, optional</span></dt><dd><p>Tolerance for termination. For detailed control, use solver-specific\noptions.</p>\n</dd>\n<dt><strong>options</strong><span class=\"classifier\">dict, optional</span></dt><dd><p>A dictionary of solver options. All methods accept the following\ngeneric options:</p>\n<blockquote>\n<div><dl class=\"simple\">\n<dt>maxiter<span class=\"classifier\">int</span></dt><dd><p>Maximum number of iterations to perform. Depending on the\nmethod each iteration may use several function evaluations.</p>\n</dd>\n<dt>disp<span class=\"classifier\">bool</span></dt><dd><p>Set to True to print convergence messages.</p>\n</dd>\n</dl>\n</div></blockquote>\n<p>For method-specific options, see <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">show_options()</span></code>.</p>\n</dd>\n<dt><strong>callback</strong><span class=\"classifier\">callable, optional</span></dt><dd><p>Called after each iteration. For \u2018trust-constr\u2019 it is a callable with\nthe signature:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">callback(xk,</span> <span class=\"pre\">OptimizeResult</span> <span class=\"pre\">state)</span> <span class=\"pre\">-&gt;</span> <span class=\"pre\">bool</span></code></p>\n</div></blockquote>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">xk</span></code> is the current parameter vector. and <code class=\"docutils literal notranslate\"><span class=\"pre\">state</span></code>\nis an <cite>OptimizeResult</cite> object, with the same fields\nas the ones from the return. If callback returns True\nthe algorithm execution is terminated.\nFor all the other methods, the signature is:</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">callback(xk)</span></code></p>\n</div></blockquote>\n<p>where <code class=\"docutils literal notranslate\"><span class=\"pre\">xk</span></code> is the current parameter vector.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>res</strong><span class=\"classifier\">OptimizeResult</span></dt><dd><p>The optimization result represented as a <code class=\"docutils literal notranslate\"><span class=\"pre\">OptimizeResult</span></code> object.\nImportant attributes are: <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> the solution array, <code class=\"docutils literal notranslate\"><span class=\"pre\">success</span></code> a\nBoolean flag indicating if the optimizer exited successfully and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> which describes the cause of the termination. See\n<cite>OptimizeResult</cite> for a description of other attributes.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">minimize_scalar</span></code></dt><dd><p>Interface to minimization algorithms for scalar univariate functions</p>\n</dd>\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">show_options</span></code></dt><dd><p>Additional options accepted by the solvers</p>\n</dd>\n</dl>\n</div>\n<p class=\"rubric\">Notes</p>\n<p>This section describes the available solvers that can be selected by the\n\u2018method\u2019 parameter. The default method is <em>BFGS</em>.</p>\n<p><strong>Unconstrained minimization</strong></p>\n<p>Method <span class=\"xref std std-ref\">Nelder-Mead</span> uses the\nSimplex algorithm <a class=\"reference internal\" href=\"#r397802e85ee1-1\" id=\"id12\">[1]</a>, <a class=\"reference internal\" href=\"#r397802e85ee1-2\" id=\"id13\">[2]</a>. This algorithm is robust in many\napplications. However, if numerical computation of derivative can be\ntrusted, other algorithms using the first and/or second derivatives\ninformation might be preferred for their better performance in\ngeneral.</p>\n<p>Method <span class=\"xref std std-ref\">CG</span> uses a nonlinear conjugate\ngradient algorithm by Polak and Ribiere, a variant of the\nFletcher-Reeves method described in <a class=\"reference internal\" href=\"#r397802e85ee1-5\" id=\"id14\">[5]</a> pp.120-122. Only the\nfirst derivatives are used.</p>\n<p>Method <span class=\"xref std std-ref\">BFGS</span> uses the quasi-Newton\nmethod of Broyden, Fletcher, Goldfarb, and Shanno (BFGS) <a class=\"reference internal\" href=\"#r397802e85ee1-5\" id=\"id15\">[5]</a>\npp. 136. It uses the first derivatives only. BFGS has proven good\nperformance even for non-smooth optimizations. This method also\nreturns an approximation of the Hessian inverse, stored as\n<cite>hess_inv</cite> in the OptimizeResult object.</p>\n<p>Method <span class=\"xref std std-ref\">Newton-CG</span> uses a\nNewton-CG algorithm <a class=\"reference internal\" href=\"#r397802e85ee1-5\" id=\"id16\">[5]</a> pp. 168 (also known as the truncated\nNewton method). It uses a CG method to the compute the search\ndirection. See also <em>TNC</em> method for a box-constrained\nminimization with a similar algorithm. Suitable for large-scale\nproblems.</p>\n<p>Method <span class=\"xref std std-ref\">dogleg</span> uses the dog-leg\ntrust-region algorithm <a class=\"reference internal\" href=\"#r397802e85ee1-5\" id=\"id17\">[5]</a> for unconstrained minimization. This\nalgorithm requires the gradient and Hessian; furthermore the\nHessian is required to be positive definite.</p>\n<p>Method <span class=\"xref std std-ref\">trust-ncg</span> uses the\nNewton conjugate gradient trust-region algorithm <a class=\"reference internal\" href=\"#r397802e85ee1-5\" id=\"id18\">[5]</a> for\nunconstrained minimization. This algorithm requires the gradient\nand either the Hessian or a function that computes the product of\nthe Hessian with a given vector. Suitable for large-scale problems.</p>\n<p>Method <span class=\"xref std std-ref\">trust-krylov</span> uses\nthe Newton GLTR trust-region algorithm <a class=\"reference internal\" href=\"#r397802e85ee1-14\" id=\"id19\">[14]</a>, <a class=\"reference internal\" href=\"#r397802e85ee1-15\" id=\"id20\">[15]</a> for unconstrained\nminimization. This algorithm requires the gradient\nand either the Hessian or a function that computes the product of\nthe Hessian with a given vector. Suitable for large-scale problems.\nOn indefinite problems it requires usually less iterations than the\n<cite>trust-ncg</cite> method and is recommended for medium and large-scale problems.</p>\n<p>Method <span class=\"xref std std-ref\">trust-exact</span>\nis a trust-region method for unconstrained minimization in which\nquadratic subproblems are solved almost exactly <a class=\"reference internal\" href=\"#r397802e85ee1-13\" id=\"id21\">[13]</a>. This\nalgorithm requires the gradient and the Hessian (which is\n<em>not</em> required to be positive definite). It is, in many\nsituations, the Newton method to converge in fewer iteraction\nand the most recommended for small and medium-size problems.</p>\n<p><strong>Bound-Constrained minimization</strong></p>\n<p>Method <span class=\"xref std std-ref\">L-BFGS-B</span> uses the L-BFGS-B\nalgorithm <a class=\"reference internal\" href=\"#r397802e85ee1-6\" id=\"id22\">[6]</a>, <a class=\"reference internal\" href=\"#r397802e85ee1-7\" id=\"id23\">[7]</a> for bound constrained minimization.</p>\n<p>Method <span class=\"xref std std-ref\">Powell</span> is a modification\nof Powell\u2019s method <a class=\"reference internal\" href=\"#r397802e85ee1-3\" id=\"id24\">[3]</a>, <a class=\"reference internal\" href=\"#r397802e85ee1-4\" id=\"id25\">[4]</a> which is a conjugate direction\nmethod. It performs sequential one-dimensional minimizations along\neach vector of the directions set (<cite>direc</cite> field in <cite>options</cite> and\n<cite>info</cite>), which is updated at each iteration of the main\nminimization loop. The function need not be differentiable, and no\nderivatives are taken. If bounds are not provided, then an\nunbounded line search will be used. If bounds are provided and\nthe initial guess is within the bounds, then every function\nevaluation throughout the minimization procedure will be within\nthe bounds. If bounds are provided, the initial guess is outside\nthe bounds, and <cite>direc</cite> is full rank (default has full rank), then\nsome function evaluations during the first iteration may be\noutside the bounds, but every function evaluation after the first\niteration will be within the bounds. If <cite>direc</cite> is not full rank,\nthen some parameters may not be optimized and the solution is not\nguaranteed to be within the bounds.</p>\n<p>Method <span class=\"xref std std-ref\">TNC</span> uses a truncated Newton\nalgorithm <a class=\"reference internal\" href=\"#r397802e85ee1-5\" id=\"id26\">[5]</a>, <a class=\"reference internal\" href=\"#r397802e85ee1-8\" id=\"id27\">[8]</a> to minimize a function with variables subject\nto bounds. This algorithm uses gradient information; it is also\ncalled Newton Conjugate-Gradient. It differs from the <em>Newton-CG</em>\nmethod described above as it wraps a C implementation and allows\neach variable to be given upper and lower bounds.</p>\n<p><strong>Constrained Minimization</strong></p>\n<p>Method <span class=\"xref std std-ref\">COBYLA</span> uses the\nConstrained Optimization BY Linear Approximation (COBYLA) method\n<a class=\"reference internal\" href=\"#r397802e85ee1-9\" id=\"id28\">[9]</a>, <a class=\"reference internal\" href=\"#r397802e85ee1-10\" id=\"id29\">[10]</a>, <a class=\"reference internal\" href=\"#r397802e85ee1-11\" id=\"id30\">[11]</a>. The algorithm is based on linear\napproximations to the objective function and each constraint. The\nmethod wraps a FORTRAN implementation of the algorithm. The\nconstraints functions \u2018fun\u2019 may return either a single number\nor an array or list of numbers.</p>\n<p>Method <span class=\"xref std std-ref\">SLSQP</span> uses Sequential\nLeast SQuares Programming to minimize a function of several\nvariables with any combination of bounds, equality and inequality\nconstraints. The method wraps the SLSQP Optimization subroutine\noriginally implemented by Dieter Kraft <a class=\"reference internal\" href=\"#r397802e85ee1-12\" id=\"id31\">[12]</a>. Note that the\nwrapper handles infinite values in bounds by converting them into\nlarge floating values.</p>\n<p>Method <span class=\"xref std std-ref\">trust-constr</span> is a\ntrust-region algorithm for constrained optimization. It swiches\nbetween two implementations depending on the problem definition.\nIt is the most versatile constrained minimization algorithm\nimplemented in SciPy and the most appropriate for large-scale problems.\nFor equality constrained problems it is an implementation of Byrd-Omojokun\nTrust-Region SQP method described in <a class=\"reference internal\" href=\"#r397802e85ee1-17\" id=\"id32\">[17]</a> and in <a class=\"reference internal\" href=\"#r397802e85ee1-5\" id=\"id33\">[5]</a>, p. 549. When\ninequality constraints  are imposed as well, it swiches to the trust-region\ninterior point  method described in <a class=\"reference internal\" href=\"#r397802e85ee1-16\" id=\"id34\">[16]</a>. This interior point algorithm,\nin turn, solves inequality constraints by introducing slack variables\nand solving a sequence of equality-constrained barrier problems\nfor progressively smaller values of the barrier parameter.\nThe previously described equality constrained SQP method is\nused to solve the subproblems with increasing levels of accuracy\nas the iterate gets closer to a solution.</p>\n<p><strong>Finite-Difference Options</strong></p>\n<p>For Method <span class=\"xref std std-ref\">trust-constr</span>\nthe gradient and the Hessian may be approximated using\nthree finite-difference schemes: {\u20182-point\u2019, \u20183-point\u2019, \u2018cs\u2019}.\nThe scheme \u2018cs\u2019 is, potentially, the most accurate but it\nrequires the function to correctly handles complex inputs and to\nbe differentiable in the complex plane. The scheme \u20183-point\u2019 is more\naccurate than \u20182-point\u2019 but requires twice as many operations.</p>\n<p><strong>Custom minimizers</strong></p>\n<p>It may be useful to pass a custom minimization method, for example\nwhen using a frontend to this method such as <cite>scipy.optimize.basinhopping</cite>\nor a different library.  You can simply pass a callable as the <code class=\"docutils literal notranslate\"><span class=\"pre\">method</span></code>\nparameter.</p>\n<p>The callable is called as <code class=\"docutils literal notranslate\"><span class=\"pre\">method(fun,</span> <span class=\"pre\">x0,</span> <span class=\"pre\">args,</span> <span class=\"pre\">**kwargs,</span> <span class=\"pre\">**options)</span></code>\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> corresponds to any other parameters passed to <cite>minimize</cite>\n(such as <cite>callback</cite>, <cite>hess</cite>, etc.), except the <cite>options</cite> dict, which has\nits contents also passed as <cite>method</cite> parameters pair by pair.  Also, if\n<cite>jac</cite> has been passed as a bool type, <cite>jac</cite> and <cite>fun</cite> are mangled so that\n<cite>fun</cite> returns just the function values and <cite>jac</cite> is converted to a function\nreturning the Jacobian.  The method shall return an <cite>OptimizeResult</cite>\nobject.</p>\n<p>The provided <cite>method</cite> callable must be able to accept (and possibly ignore)\narbitrary parameters; the set of parameters accepted by <cite>minimize</cite> may\nexpand in future versions and then these parameters will be passed to\nthe method.  You can find an example in the scipy.optimize tutorial.</p>\n<div class=\"versionadded\">\n<p><span class=\"versionmodified added\">New in version 0.11.0.</span></p>\n</div>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r397802e85ee1-1\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id12\">1</a></span></dt>\n<dd><p>Nelder, J A, and R Mead. 1965. A Simplex Method for Function\nMinimization. The Computer Journal 7: 308-13.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-2\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id13\">2</a></span></dt>\n<dd><p>Wright M H. 1996. Direct search methods: Once scorned, now\nrespectable, in Numerical Analysis 1995: Proceedings of the 1995\nDundee Biennial Conference in Numerical Analysis (Eds. D F\nGriffiths and G A Watson). Addison Wesley Longman, Harlow, UK.\n191-208.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-3\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id24\">3</a></span></dt>\n<dd><p>Powell, M J D. 1964. An efficient method for finding the minimum of\na function of several variables without calculating derivatives. The\nComputer Journal 7: 155-162.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-4\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id25\">4</a></span></dt>\n<dd><p>Press W, S A Teukolsky, W T Vetterling and B P Flannery.\nNumerical Recipes (any edition), Cambridge University Press.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-5\"><span class=\"brackets\">5</span><span class=\"fn-backref\">(<a href=\"#id14\">1</a>,<a href=\"#id15\">2</a>,<a href=\"#id16\">3</a>,<a href=\"#id17\">4</a>,<a href=\"#id18\">5</a>,<a href=\"#id26\">6</a>,<a href=\"#id33\">7</a>,<a href=\"#id52\">8</a>)</span></dt>\n<dd><p>Nocedal, J, and S J Wright. 2006. Numerical Optimization.\nSpringer New York.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-6\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id22\">6</a></span></dt>\n<dd><p>Byrd, R H and P Lu and J. Nocedal. 1995. A Limited Memory\nAlgorithm for Bound Constrained Optimization. SIAM Journal on\nScientific and Statistical Computing 16 (5): 1190-1208.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-7\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id23\">7</a></span></dt>\n<dd><p>Zhu, C and R H Byrd and J Nocedal. 1997. L-BFGS-B: Algorithm\n778: L-BFGS-B, FORTRAN routines for large scale bound constrained\noptimization. ACM Transactions on Mathematical Software 23 (4):\n550-560.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-8\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id27\">8</a></span></dt>\n<dd><p>Nash, S G. Newton-Type Minimization Via the Lanczos Method.\n1984. SIAM Journal of Numerical Analysis 21: 770-778.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-9\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id28\">9</a></span></dt>\n<dd><p>Powell, M J D. A direct search optimization method that models\nthe objective and constraint functions by linear interpolation.\n1994. Advances in Optimization and Numerical Analysis, eds. S. Gomez\nand J-P Hennart, Kluwer Academic (Dordrecht), 51-67.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-10\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id29\">10</a></span></dt>\n<dd><p>Powell M J D. Direct search algorithms for optimization\ncalculations. 1998. Acta Numerica 7: 287-336.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-11\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id30\">11</a></span></dt>\n<dd><p>Powell M J D. A view of algorithms for optimization without\nderivatives. 2007.Cambridge University Technical Report DAMTP\n2007/NA03</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-12\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id31\">12</a></span></dt>\n<dd><p>Kraft, D. A software package for sequential quadratic\nprogramming. 1988. Tech. Rep. DFVLR-FB 88-28, DLR German Aerospace\nCenter \u2013 Institute for Flight Mechanics, Koln, Germany.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-13\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id21\">13</a></span></dt>\n<dd><p>Conn, A. R., Gould, N. I., and Toint, P. L.\nTrust region methods. 2000. Siam. pp. 169-200.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-14\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id19\">14</a></span></dt>\n<dd><p>F. Lenders, C. Kirches, A. Potschka: \u201ctrlib: A vector-free\nimplementation of the GLTR method for iterative solution of\nthe trust region problem\u201d, <a class=\"reference external\" href=\"https://arxiv.org/abs/1611.04718\">https://arxiv.org/abs/1611.04718</a></p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-15\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id20\">15</a></span></dt>\n<dd><p>N. Gould, S. Lucidi, M. Roma, P. Toint: \u201cSolving the\nTrust-Region Subproblem using the Lanczos Method\u201d,\nSIAM J. Optim., 9(2), 504\u2013525, (1999).</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-16\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id34\">16</a></span></dt>\n<dd><p>Byrd, Richard H., Mary E. Hribar, and Jorge Nocedal. 1999.\nAn interior point algorithm for large-scale nonlinear  programming.\nSIAM Journal on Optimization 9.4: 877-900.</p>\n</dd>\n<dt class=\"label\" id=\"r397802e85ee1-17\"><span class=\"brackets\"><a class=\"fn-backref\" href=\"#id32\">17</a></span></dt>\n<dd><p>Lalee, Marucha, Jorge Nocedal, and Todd Plantega. 1998. On the\nimplementation of an algorithm for large-scale equality constrained\noptimization. SIAM Journal on Optimization 8.3: 682-706.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>Let us consider the problem of minimizing the Rosenbrock function. This\nfunction (and its respective derivatives) is implemented in <cite>rosen</cite>\n(resp. <cite>rosen_der</cite>, <cite>rosen_hess</cite>) in the <cite>scipy.optimize</cite>.</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">scipy.optimize</span> <span class=\"k\">import</span> <span class=\"n\">minimize</span><span class=\"p\">,</span> <span class=\"n\">rosen</span><span class=\"p\">,</span> <span class=\"n\">rosen_der</span>\n</pre></div>\n</div>\n<p>A simple application of the <em>Nelder-Mead</em> method is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.3</span><span class=\"p\">,</span> <span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">1.9</span><span class=\"p\">,</span> <span class=\"mf\">1.2</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">minimize</span><span class=\"p\">(</span><span class=\"n\">rosen</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;Nelder-Mead&#39;</span><span class=\"p\">,</span> <span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mf\">1e-6</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">x</span>\n<span class=\"go\">array([ 1.,  1.,  1.,  1.,  1.])</span>\n</pre></div>\n</div>\n<p>Now using the <em>BFGS</em> algorithm, using the first derivative and a few\noptions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">minimize</span><span class=\"p\">(</span><span class=\"n\">rosen</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;BFGS&#39;</span><span class=\"p\">,</span> <span class=\"n\">jac</span><span class=\"o\">=</span><span class=\"n\">rosen_der</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>               <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;gtol&#39;</span><span class=\"p\">:</span> <span class=\"mf\">1e-6</span><span class=\"p\">,</span> <span class=\"s1\">&#39;disp&#39;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"go\">Optimization terminated successfully.</span>\n<span class=\"go\">         Current function value: 0.000000</span>\n<span class=\"go\">         Iterations: 26</span>\n<span class=\"go\">         Function evaluations: 31</span>\n<span class=\"go\">         Gradient evaluations: 31</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">x</span>\n<span class=\"go\">array([ 1.,  1.,  1.,  1.,  1.])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)</span>\n<span class=\"go\">Optimization terminated successfully.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">hess_inv</span>\n<span class=\"go\">array([[ 0.00749589,  0.01255155,  0.02396251,  0.04750988,  0.09495377],  # may vary</span>\n<span class=\"go\">       [ 0.01255155,  0.02510441,  0.04794055,  0.09502834,  0.18996269],</span>\n<span class=\"go\">       [ 0.02396251,  0.04794055,  0.09631614,  0.19092151,  0.38165151],</span>\n<span class=\"go\">       [ 0.04750988,  0.09502834,  0.19092151,  0.38341252,  0.7664427 ],</span>\n<span class=\"go\">       [ 0.09495377,  0.18996269,  0.38165151,  0.7664427,   1.53713523]])</span>\n</pre></div>\n</div>\n<p>Next, consider a minimization problem with several constraints (namely\nExample 16.4 from <a class=\"reference internal\" href=\"#r397802e85ee1-5\" id=\"id52\">[5]</a>). The objective function is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fun</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mf\">2.5</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p>There are three constraints defined as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cons</span> <span class=\"o\">=</span> <span class=\"p\">({</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ineq&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fun&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span>  <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>        <span class=\"p\">{</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ineq&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fun&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">6</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>        <span class=\"p\">{</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ineq&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fun&#39;</span><span class=\"p\">:</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>And variables must be positive, hence the following bounds:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">bnds</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>The optimization problem is solved using the SLSQP method as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">minimize</span><span class=\"p\">(</span><span class=\"n\">fun</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;SLSQP&#39;</span><span class=\"p\">,</span> <span class=\"n\">bounds</span><span class=\"o\">=</span><span class=\"n\">bnds</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>               <span class=\"n\">constraints</span><span class=\"o\">=</span><span class=\"n\">cons</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>It should converge to the theoretical solution (1.4 ,1.7).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sparse-nnls\">\n<h3>sparse_nnls<a class=\"headerlink\" href=\"#sparse-nnls\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.optimize.sparse_nnls\">\n<code class=\"sig-prename descclassname\">dipy.core.optimize.</code><code class=\"sig-name descname\">sparse_nnls</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">y</em>, <em class=\"sig-param\">X</em>, <em class=\"sig-param\">momentum=1</em>, <em class=\"sig-param\">step_size=0.01</em>, <em class=\"sig-param\">non_neg=True</em>, <em class=\"sig-param\">check_error_iter=10</em>, <em class=\"sig-param\">max_error_checks=10</em>, <em class=\"sig-param\">converge_on_sse=0.99</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.sparse_nnls\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Solve y=Xh for h, using gradient descent, with X a sparse matrix.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>y</strong><span class=\"classifier\">1-d array of shape (N)</span></dt><dd><p>The data. Needs to be dense.</p>\n</dd>\n<dt><strong>X</strong><span class=\"classifier\">ndarray. May be either sparse or dense. Shape (N, M)</span></dt><dd><p>The regressors</p>\n</dd>\n<dt><strong>momentum</strong><span class=\"classifier\">float, optional (default: 1).</span></dt><dd><p>The persistence of the gradient.</p>\n</dd>\n<dt><strong>step_size</strong><span class=\"classifier\">float, optional (default: 0.01).</span></dt><dd><p>The increment of parameter update in each iteration</p>\n</dd>\n<dt><strong>non_neg</strong><span class=\"classifier\">Boolean, optional (default: True)</span></dt><dd><p>Whether to enforce non-negativity of the solution.</p>\n</dd>\n<dt><strong>check_error_iter</strong><span class=\"classifier\">int (default:10)</span></dt><dd><p>How many rounds to run between error evaluation for\nconvergence-checking.</p>\n</dd>\n<dt><strong>max_error_checks</strong><span class=\"classifier\">int (default: 10)</span></dt><dd><p>Don\u2019t check errors more than this number of times if no improvement in\nr-squared is seen.</p>\n</dd>\n<dt><strong>converge_on_sse</strong><span class=\"classifier\">float (default: 0.99)</span></dt><dd><p>a percentage improvement in SSE that is required each time to say\nthat things are still going well.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>h_best</strong><span class=\"classifier\">The best estimate of the parameters.</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"spdot\">\n<h3>spdot<a class=\"headerlink\" href=\"#spdot\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.optimize.spdot\">\n<code class=\"sig-prename descclassname\">dipy.core.optimize.</code><code class=\"sig-name descname\">spdot</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">A</em>, <em class=\"sig-param\">B</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.optimize.spdot\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The same as np.dot(A, B), except it works even if A or B or both\nare sparse matrices.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>A, B</strong><span class=\"classifier\">arrays of shape (m, n), (n, k)</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>The matrix product AB. If both A and B are sparse, the result will be a</dt><dd></dd>\n<dt>sparse matrix. Otherwise, a dense result is returned</dt><dd></dd>\n<dt>See discussion here:</dt><dd></dd>\n<dt><a class=\"reference external\" href=\"http://mail.scipy.org/pipermail/scipy-user/2010-November/027700.html\">http://mail.scipy.org/pipermail/scipy-user/2010-November/027700.html</a></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"profiler\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.profile.Profiler\" title=\"dipy.core.profile.Profiler\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Profiler</span></code></a><a class=\"headerlink\" href=\"#profiler\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.profile.Profiler\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.profile.</code><code class=\"sig-name descname\">Profiler</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">call=None</em>, <em class=\"sig-param\">*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.profile.Profiler\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Profile python/cython files or functions</p>\n<p>If you are profiling cython code you need to add\n# cython: profile=True on the top of your .pyx file</p>\n<p>and for the functions that you do not want to profile you can use\nthis decorator in your cython files</p>\n<p>&#64;cython.profile(False)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>caller</strong><span class=\"classifier\">file or function call</span></dt><dd></dd>\n<dt><strong>args</strong><span class=\"classifier\">function arguments</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">References</p>\n<p><a class=\"reference external\" href=\"http://docs.cython.org/src/tutorial/profiling_tutorial.html\">http://docs.cython.org/src/tutorial/profiling_tutorial.html</a>\n<a class=\"reference external\" href=\"http://docs.python.org/library/profile.html\">http://docs.python.org/library/profile.html</a>\n<a class=\"reference external\" href=\"http://packages.python.org/line_profiler/\">http://packages.python.org/line_profiler/</a></p>\n<p class=\"rubric\">Examples</p>\n<p>from dipy.core.profile import Profiler\nimport numpy as np\np=Profiler(np.sum,np.random.rand(1000000,3))\nfname=\u2019test.py\u2019\np=Profiler(fname)\np.print_stats(10)\np.print_stats(\u2018det\u2019)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>stats</strong><span class=\"classifier\">function, stats.print_stats(10) will prin the 10 slower functions</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.profile.Profiler.print_stats\" title=\"dipy.core.profile.Profiler.print_stats\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">print_stats</span></code></a>(self[,\u00a0N])</p></td>\n<td><p>Print stats for profiling</p></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.profile.Profiler.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">call=None</em>, <em class=\"sig-param\">*args</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.profile.Profiler.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.profile.Profiler.print_stats\">\n<code class=\"sig-name descname\">print_stats</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">N=10</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.profile.Profiler.print_stats\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Print stats for profiling</p>\n<p>You can use it in all different ways developed in pstats\nfor example\nprint_stats(10) will give you the 10 slowest calls\nor\nprint_stats(\u2018function_name\u2019)\nwill give you the stats for all the calls with name \u2018function_name\u2019</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>N</strong><span class=\"classifier\">stats.print_stats argument</span></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"optional-package\">\n<h3>optional_package<a class=\"headerlink\" href=\"#optional-package\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.profile.optional_package\">\n<code class=\"sig-prename descclassname\">dipy.core.profile.</code><code class=\"sig-name descname\">optional_package</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">trip_msg=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.profile.optional_package\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return package-like thing and module setup for package <cite>name</cite></p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>name</strong><span class=\"classifier\">str</span></dt><dd><p>package name</p>\n</dd>\n<dt><strong>trip_msg</strong><span class=\"classifier\">None or str</span></dt><dd><p>message to give when someone tries to use the return package, but we\ncould not import it, and have returned a TripWire object instead.\nDefault message if None.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>pkg_like</strong><span class=\"classifier\">module or <code class=\"docutils literal notranslate\"><span class=\"pre\">TripWire</span></code> instance</span></dt><dd><p>If we can import the package, return it.  Otherwise return an object\nraising an error when accessed</p>\n</dd>\n<dt><strong>have_pkg</strong><span class=\"classifier\">bool</span></dt><dd><p>True if import for package was successful, false otherwise</p>\n</dd>\n<dt><strong>module_setup</strong><span class=\"classifier\">function</span></dt><dd><p>callable usually set as <code class=\"docutils literal notranslate\"><span class=\"pre\">setup_module</span></code> in calling namespace, to allow\nskipping tests.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<p>Typical use would be something like this at the top of a module using an\noptional package:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.utils.optpkg</span> <span class=\"k\">import</span> <span class=\"n\">optional_package</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">have_pkg</span><span class=\"p\">,</span> <span class=\"n\">setup_module</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;not_a_package&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Of course in this case the package doesn\u2019t exist, and so, in the module:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">have_pkg</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n<p>and</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">some_function</span><span class=\"p\">()</span> \n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">TripWireError</span>: <span class=\"n\">We need package not_a_package for these functions, but</span>\n<span class=\"go\">``import not_a_package`` raised an ImportError</span>\n</pre></div>\n</div>\n<p>If the module does exist - we get the module</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Or a submodule if that\u2019s what we asked for</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">optional_package</span><span class=\"p\">(</span><span class=\"s1\">&#39;os.path&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">subpkg</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dirname&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"lecuyer\">\n<h3>LEcuyer<a class=\"headerlink\" href=\"#lecuyer\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.rng.LEcuyer\">\n<code class=\"sig-prename descclassname\">dipy.core.rng.</code><code class=\"sig-name descname\">LEcuyer</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">s1=100001</em>, <em class=\"sig-param\">s2=200002</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.rng.LEcuyer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a LEcuyer random number generator.</p>\n<p>Generate uniformly distributed random numbers using the 32-bit\ngenerator from figure 3 of:</p>\n<blockquote>\n<div><p>L\u2019Ecuyer, P. Efficient and portable combined random number\ngenerators, C.A.C.M., vol. 31, 742-749 &amp; 774-?, June 1988.</p>\n</div></blockquote>\n<p>The cycle length is claimed to be 2.30584E+18</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>s1: int</strong></dt><dd><p>First seed value. Should not be null. (default 100001)</p>\n</dd>\n<dt><strong>s2: int</strong></dt><dd><p>Second seed value. Should not be null. (default 200002)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>r_number</strong><span class=\"classifier\">float</span></dt><dd><p>pseudo-random number uniformly distributed between [0-1]</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core</span> <span class=\"k\">import</span> <span class=\"n\">rng</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">LEcuyer</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"wichmannhill1982\">\n<h3>WichmannHill1982<a class=\"headerlink\" href=\"#wichmannhill1982\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.rng.WichmannHill1982\">\n<code class=\"sig-prename descclassname\">dipy.core.rng.</code><code class=\"sig-name descname\">WichmannHill1982</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ix=100001</em>, <em class=\"sig-param\">iy=200002</em>, <em class=\"sig-param\">iz=300003</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.rng.WichmannHill1982\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Algorithm AS 183 Appl. Statist. (1982) vol.31, no.2.</p>\n<p>Returns a pseudo-random number rectangularly distributed\nbetween 0 and 1.   The cycle length is 6.95E+12 (See page 123\nof Applied Statistics (1984) vol.33), not as claimed in the\noriginal article.</p>\n<p>ix, iy and iz should be set to integer values between 1 and\n30000 before the first entry.</p>\n<p>Integer arithmetic up to 5212632 is required.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>ix: int</strong></dt><dd><p>First seed value. Should not be null. (default 100001)</p>\n</dd>\n<dt><strong>iy: int</strong></dt><dd><p>Second seed value. Should not be null. (default 200002)</p>\n</dd>\n<dt><strong>iz: int</strong></dt><dd><p>Third seed value. Should not be null. (default 300003)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>r_number</strong><span class=\"classifier\">float</span></dt><dd><p>pseudo-random number uniformly distributed between [0-1]</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core</span> <span class=\"k\">import</span> <span class=\"n\">rng</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">WichmannHill1982</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"wichmannhill2006\">\n<h3>WichmannHill2006<a class=\"headerlink\" href=\"#wichmannhill2006\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.rng.WichmannHill2006\">\n<code class=\"sig-prename descclassname\">dipy.core.rng.</code><code class=\"sig-name descname\">WichmannHill2006</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">ix=100001</em>, <em class=\"sig-param\">iy=200002</em>, <em class=\"sig-param\">iz=300003</em>, <em class=\"sig-param\">it=400004</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.rng.WichmannHill2006\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Wichmann Hill (2006) random number generator.</p>\n<p>B.A. Wichmann, I.D. Hill, Generating good pseudo-random numbers,\nComputational Statistics &amp; Data Analysis, Volume 51, Issue 3, 1\nDecember 2006, Pages 1614-1622, ISSN 0167-9473, DOI:\n10.1016/j.csda.2006.05.019.\n(<a class=\"reference external\" href=\"http://www.sciencedirect.com/science/article/B6V8V-4K7F86W-2/2/a3a33291b8264e4c882a8f21b6e43351\">http://www.sciencedirect.com/science/article/B6V8V-4K7F86W-2/2/a3a33291b8264e4c882a8f21b6e43351</a>)\nfor advice on generating many sequences for use together, and on\nalternative algorithms and codes</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>ix: int</strong></dt><dd><p>First seed value. Should not be null. (default 100001)</p>\n</dd>\n<dt><strong>iy: int</strong></dt><dd><p>Second seed value. Should not be null. (default 200002)</p>\n</dd>\n<dt><strong>iz: int</strong></dt><dd><p>Third seed value. Should not be null. (default 300003)</p>\n</dd>\n<dt><strong>it: int</strong></dt><dd><p>Fourth seed value. Should not be null. (default 400004)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>r_number</strong><span class=\"classifier\">float</span></dt><dd><p>pseudo-random number uniformly distributed between [0-1]</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core</span> <span class=\"k\">import</span> <span class=\"n\">rng</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">rng</span><span class=\"o\">.</span><span class=\"n\">WichmannHill2006</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"architecture\">\n<h3>architecture<a class=\"headerlink\" href=\"#architecture\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.rng.architecture\">\n<code class=\"sig-prename descclassname\">dipy.core.rng.</code><code class=\"sig-name descname\">architecture</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">executable='/Users/koudoro/miniconda3/envs/dipy-env-37/bin/python'</em>, <em class=\"sig-param\">bits=''</em>, <em class=\"sig-param\">linkage=''</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.rng.architecture\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Queries the given executable (defaults to the Python interpreter\nbinary) for various architecture information.</p>\n<p>Returns a tuple (bits, linkage) which contains information about\nthe bit architecture and the linkage format used for the\nexecutable. Both values are returned as strings.</p>\n<p>Values that cannot be determined are returned as given by the\nparameter presets. If bits is given as \u2018\u2019, the sizeof(pointer)\n(or sizeof(long) on Python version &lt; 1.5.2) is used as\nindicator for the supported pointer size.</p>\n<p>The function relies on the system\u2019s \u201cfile\u201d command to do the\nactual work. This is available on most if not all Unix\nplatforms. On some non-Unix platforms where the \u201cfile\u201d command\ndoes not exist and the executable is set to the Python interpreter\nbinary defaults from _default_architecture are used.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"floor\">\n<h3>floor<a class=\"headerlink\" href=\"#floor\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.rng.floor\">\n<code class=\"sig-prename descclassname\">dipy.core.rng.</code><code class=\"sig-name descname\">floor</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">/</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.rng.floor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return the floor of x as an Integral.</p>\n<p>This is the largest integer &lt;= x.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id53\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.sphere.HemiSphere\" title=\"dipy.core.sphere.HemiSphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a><a class=\"headerlink\" href=\"#id53\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.sphere.HemiSphere\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">HemiSphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.HemiSphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.core.sphere.Sphere\" title=\"dipy.core.sphere.Sphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.core.sphere.Sphere</span></code></a></p>\n<p>Points on the unit sphere.</p>\n<p>A HemiSphere is similar to a Sphere but it takes antipodal symmetry into\naccount. Antipodal symmetry means that point v on a HemiSphere is the same\nas the point -v. Duplicate points are discarded when constructing a\nHemiSphere (including antipodal duplicates). <cite>edges</cite> and <cite>faces</cite> are\nremapped to the remaining points as closely as possible.</p>\n<p>The HemiSphere can be constructed using one of three conventions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"n\">xyz</span><span class=\"p\">)</span>\n<span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x, y, z</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>theta, phi</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as spherical coordinates.  Theta and phi are the inclination\nand azimuth angles respectively.</p>\n</dd>\n<dt><strong>xyz</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>faces</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Indices into vertices that form triangular faces.  If unspecified,\nthe faces are computed using a Delaunay triangulation.</p>\n</dd>\n<dt><strong>edges</strong><span class=\"classifier\">(N, 2) ndarray</span></dt><dd><p>Edges between vertices.  If unspecified, the edges are\nderived from the faces.</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">float</span></dt><dd><p>Angle in degrees. Vertices that are less than tol degrees apart are\ntreated as duplicates.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.core.sphere.Sphere\" title=\"dipy.core.sphere.Sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a></dt><dd></dd>\n</dl>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong></dt><dd></dd>\n<dt><strong>y</strong></dt><dd></dd>\n<dt><strong>z</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.HemiSphere.find_closest\" title=\"dipy.core.sphere.HemiSphere.find_closest\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">find_closest</span></code></a>(self,\u00a0xyz)</p></td>\n<td><p>Find the index of the vertex in the Sphere closest to the input vector, taking into account antipodal symmetry</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.HemiSphere.from_sphere\" title=\"dipy.core.sphere.HemiSphere.from_sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_sphere</span></code></a>(sphere[,\u00a0tol])</p></td>\n<td><p>Create instance from a Sphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.HemiSphere.mirror\" title=\"dipy.core.sphere.HemiSphere.mirror\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mirror</span></code></a>(self)</p></td>\n<td><p>Create a full Sphere from a HemiSphere</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.HemiSphere.subdivide\" title=\"dipy.core.sphere.HemiSphere.subdivide\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">subdivide</span></code></a>(self[,\u00a0n])</p></td>\n<td><p>Create a more subdivided HemiSphere</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 55%\" />\n<col style=\"width: 45%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>edges</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>faces</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>vertices</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.HemiSphere.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.HemiSphere.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a HemiSphere from points</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.HemiSphere.faces\">\n<code class=\"sig-name descname\">faces</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.HemiSphere.faces\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.HemiSphere.find_closest\">\n<code class=\"sig-name descname\">find_closest</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">xyz</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.HemiSphere.find_closest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the index of the vertex in the Sphere closest to the input vector,\ntaking into account antipodal symmetry</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xyz</strong><span class=\"classifier\">array-like, 3 elements</span></dt><dd><p>A unit vector</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>idx</strong><span class=\"classifier\">int</span></dt><dd><p>The index into the Sphere.vertices array that gives the closest\nvertex (in angle).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.HemiSphere.from_sphere\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">from_sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sphere</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.HemiSphere.from_sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create instance from a Sphere</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.HemiSphere.mirror\">\n<code class=\"sig-name descname\">mirror</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.HemiSphere.mirror\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a full Sphere from a HemiSphere</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.HemiSphere.subdivide\">\n<code class=\"sig-name descname\">subdivide</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.HemiSphere.subdivide\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a more subdivided HemiSphere</p>\n<p>See Sphere.subdivide for full documentation.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sphere\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.sphere.Sphere\" title=\"dipy.core.sphere.Sphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a><a class=\"headerlink\" href=\"#sphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.sphere.Sphere\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">Sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>Points on the unit sphere.</p>\n<p>The sphere can be constructed using one of three conventions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"n\">xyz</span><span class=\"p\">)</span>\n<span class=\"n\">Sphere</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x, y, z</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>theta, phi</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as spherical coordinates.  Theta and phi are the inclination\nand azimuth angles respectively.</p>\n</dd>\n<dt><strong>xyz</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>faces</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Indices into vertices that form triangular faces.  If unspecified,\nthe faces are computed using a Delaunay triangulation.</p>\n</dd>\n<dt><strong>edges</strong><span class=\"classifier\">(N, 2) ndarray</span></dt><dd><p>Edges between vertices.  If unspecified, the edges are\nderived from the faces.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Attributes</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>x</strong></dt><dd></dd>\n<dt><strong>y</strong></dt><dd></dd>\n<dt><strong>z</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.Sphere.find_closest\" title=\"dipy.core.sphere.Sphere.find_closest\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">find_closest</span></code></a>(self,\u00a0xyz)</p></td>\n<td><p>Find the index of the vertex in the Sphere closest to the input vector</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.sphere.Sphere.subdivide\" title=\"dipy.core.sphere.Sphere.subdivide\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">subdivide</span></code></a>(self[,\u00a0n])</p></td>\n<td><p>Subdivides each face of the sphere into four new faces.</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 55%\" />\n<col style=\"width: 45%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>edges</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>faces</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>vertices</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.edges\">\n<code class=\"sig-name descname\">edges</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.faces\">\n<code class=\"sig-name descname\">faces</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.faces\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.find_closest\">\n<code class=\"sig-name descname\">find_closest</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">xyz</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.find_closest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the index of the vertex in the Sphere closest to the input vector</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xyz</strong><span class=\"classifier\">array-like, 3 elements</span></dt><dd><p>A unit vector</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>idx</strong><span class=\"classifier\">int</span></dt><dd><p>The index into the Sphere.vertices array that gives the closest\nvertex (in angle).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.subdivide\">\n<code class=\"sig-name descname\">subdivide</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.subdivide\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subdivides each face of the sphere into four new faces.</p>\n<p>New vertices are created at a, b, and c. Then each face [x, y, z] is\ndivided into faces [x, a, c], [y, a, b], [z, b, c], and [a, b, c].</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>   y\n   /               /               a/____\b\n/\\    /            /  \\  /             /____\\/____          x      c     z\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>n</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The number of subdivisions to preform.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>new_sphere</strong><span class=\"classifier\">Sphere</span></dt><dd><p>The subdivided sphere.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.vertices\">\n<code class=\"sig-name descname\">vertices</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.vertices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.x\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">x</code><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.x\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.y\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">y</code><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.y\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere.Sphere.z\">\n<em class=\"property\">property </em><code class=\"sig-name descname\">z</code><a class=\"headerlink\" href=\"#dipy.core.sphere.Sphere.z\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id54\">\n<h3>auto_attr<a class=\"headerlink\" href=\"#id54\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.auto_attr\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">auto_attr</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">func</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.auto_attr\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator to create OneTimeProperty attributes.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>func</strong><span class=\"classifier\">method</span></dt><dd><p>The method that will be called the first time to compute a value.\nAfterwards, the method\u2019s name will be a standard attribute holding the\nvalue of this computation.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MagicProp</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nd\">@auto_attr</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">a</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"mi\">99</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">MagicProp</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"go\">99</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s1\">&#39;a&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id55\">\n<h3>cart2sphere<a class=\"headerlink\" href=\"#id55\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.cart2sphere\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">cart2sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">y</em>, <em class=\"sig-param\">z</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.cart2sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return angles for Cartesian 3D coordinates <cite>x</cite>, <cite>y</cite>, and <cite>z</cite></p>\n<p>See doc for <code class=\"docutils literal notranslate\"><span class=\"pre\">sphere2cart</span></code> for angle conventions and derivation\nof the formulae.</p>\n<p><span class=\"math notranslate nohighlight\">\\(0\\le\\theta\\mathrm{(theta)}\\le\\pi\\)</span> and <span class=\"math notranslate nohighlight\">\\(-\\pi\\le\\phi\\mathrm{(phi)}\\le\\pi\\)</span></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">array_like</span></dt><dd><p>x coordinate in Cartesian space</p>\n</dd>\n<dt><strong>y</strong><span class=\"classifier\">array_like</span></dt><dd><p>y coordinate in Cartesian space</p>\n</dd>\n<dt><strong>z</strong><span class=\"classifier\">array_like</span></dt><dd><p>z coordinate</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>r</strong><span class=\"classifier\">array</span></dt><dd><p>radius</p>\n</dd>\n<dt><strong>theta</strong><span class=\"classifier\">array</span></dt><dd><p>inclination (polar) angle</p>\n</dd>\n<dt><strong>phi</strong><span class=\"classifier\">array</span></dt><dd><p>azimuth angle</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id56\">\n<h3>disperse_charges<a class=\"headerlink\" href=\"#id56\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.disperse_charges\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">disperse_charges</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">hemi</em>, <em class=\"sig-param\">iters</em>, <em class=\"sig-param\">const=0.2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.disperse_charges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Models electrostatic repulsion on the unit sphere</p>\n<p>Places charges on a sphere and simulates the repulsive forces felt by each\none. Allows the charges to move for some number of iterations and returns\ntheir final location as well as the total potential of the system at each\nstep.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>hemi</strong><span class=\"classifier\">HemiSphere</span></dt><dd><p>Points on a unit sphere.</p>\n</dd>\n<dt><strong>iters</strong><span class=\"classifier\">int</span></dt><dd><p>Number of iterations to run.</p>\n</dd>\n<dt><strong>const</strong><span class=\"classifier\">float</span></dt><dd><p>Using a smaller const could provide a more accurate result, but will\nneed more iterations to converge.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>hemi</strong><span class=\"classifier\">HemiSphere</span></dt><dd><p>Distributed points on a unit sphere.</p>\n</dd>\n<dt><strong>potential</strong><span class=\"classifier\">ndarray</span></dt><dd><p>The electrostatic potential at each iteration. This can be useful to\ncheck if the repulsion converged to a minimum.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>This function is meant to be used with diffusion imaging so antipodal\nsymmetry is assumed. Therefor each charge must not only be unique, but if\nthere is a charge at +x, there cannot be a charge at -x. These are treated\nas the same location and because the distance between the two charges will\nbe zero, the result will be unstable.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"disperse-charges-alt\">\n<h3>disperse_charges_alt<a class=\"headerlink\" href=\"#disperse-charges-alt\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.disperse_charges_alt\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">disperse_charges_alt</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">init_pointset</em>, <em class=\"sig-param\">iters</em>, <em class=\"sig-param\">tol=0.001</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.disperse_charges_alt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reimplementation of disperse_charges making use of\n<cite>scipy.optimize.fmin_slsqp</cite>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>init_pointset</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Points on a unit sphere.</p>\n</dd>\n<dt><strong>iters</strong><span class=\"classifier\">int</span></dt><dd><p>Number of iterations to run.</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">float</span></dt><dd><p>Tolerance for the optimization.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>array-like (N, 3)</dt><dd><p>Distributed points on a unit sphere.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"euler-characteristic-check\">\n<h3>euler_characteristic_check<a class=\"headerlink\" href=\"#euler-characteristic-check\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.euler_characteristic_check\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">euler_characteristic_check</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sphere</em>, <em class=\"sig-param\">chi=2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.euler_characteristic_check\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks the euler characteristic of a sphere</p>\n<p>If <span class=\"math notranslate nohighlight\">\\(f\\)</span> = number of faces, <span class=\"math notranslate nohighlight\">\\(e\\)</span> = number_of_edges and <span class=\"math notranslate nohighlight\">\\(v\\)</span> = number of\nvertices, the Euler formula says <span class=\"math notranslate nohighlight\">\\(f-e+v = 2\\)</span> for a mesh on a sphere. More\ngenerally, whether <span class=\"math notranslate nohighlight\">\\(f -e + v == \\chi\\)</span> where <span class=\"math notranslate nohighlight\">\\(\\chi\\)</span> is the Euler\ncharacteristic of the mesh.</p>\n<ul class=\"simple\">\n<li><p>Open chain (track) has <span class=\"math notranslate nohighlight\">\\(\\chi=1\\)</span></p></li>\n<li><p>Closed chain (loop) has <span class=\"math notranslate nohighlight\">\\(\\chi=0\\)</span></p></li>\n<li><p>Disk has <span class=\"math notranslate nohighlight\">\\(\\chi=1\\)</span></p></li>\n<li><p>Sphere has <span class=\"math notranslate nohighlight\">\\(\\chi=2\\)</span></p></li>\n<li><p>HemiSphere has <span class=\"math notranslate nohighlight\">\\(\\chi=1\\)</span></p></li>\n</ul>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sphere</strong><span class=\"classifier\">Sphere</span></dt><dd><p>A Sphere instance with vertices, edges and faces attributes.</p>\n</dd>\n<dt><strong>chi</strong><span class=\"classifier\">int, optional</span></dt><dd><p>The Euler characteristic of the mesh to be checked</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>check</strong><span class=\"classifier\">bool</span></dt><dd><p>True if the mesh has Euler characteristic <span class=\"math notranslate nohighlight\">\\(\\chi\\)</span></p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler_characteristic_check</span><span class=\"p\">(</span><span class=\"n\">unit_octahedron</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">hemisphere</span> <span class=\"o\">=</span> <span class=\"n\">HemiSphere</span><span class=\"o\">.</span><span class=\"n\">from_sphere</span><span class=\"p\">(</span><span class=\"n\">unit_icosahedron</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">euler_characteristic_check</span><span class=\"p\">(</span><span class=\"n\">hemisphere</span><span class=\"p\">,</span> <span class=\"n\">chi</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"faces-from-sphere-vertices\">\n<h3>faces_from_sphere_vertices<a class=\"headerlink\" href=\"#faces-from-sphere-vertices\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.faces_from_sphere_vertices\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">faces_from_sphere_vertices</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vertices</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.faces_from_sphere_vertices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Triangulate a set of vertices on the sphere.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vertices</strong><span class=\"classifier\">(M, 3) ndarray</span></dt><dd><p>XYZ coordinates of vertices on the sphere.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>faces</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Indices into vertices; forms triangular faces.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"remove-similar-vertices\">\n<h3>remove_similar_vertices<a class=\"headerlink\" href=\"#remove-similar-vertices\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.remove_similar_vertices\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">remove_similar_vertices</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.remove_similar_vertices\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove vertices that are less than <cite>theta</cite> degrees from any other</p>\n<p>Returns vertices that are at least theta degrees from any other vertex.\nVertex v and -v are considered the same so if v and -v are both in\n<cite>vertices</cite> only one is kept. Also if v and w are both in vertices, w must\nbe separated by theta degrees from both v and -v to be unique.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vertices</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>N unit vectors.</p>\n</dd>\n<dt><strong>theta</strong><span class=\"classifier\">float</span></dt><dd><p>The minimum separation between vertices in degrees.</p>\n</dd>\n<dt><strong>return_mapping</strong><span class=\"classifier\">{False, True}, optional</span></dt><dd><p>If True, return <cite>mapping</cite> as well as <cite>vertices</cite> and maybe <cite>indices</cite>\n(see below).</p>\n</dd>\n<dt><strong>return_indices</strong><span class=\"classifier\">{False, True}, optional</span></dt><dd><p>If True, return <cite>indices</cite> as well as <cite>vertices</cite> and maybe <cite>mapping</cite>\n(see below).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>unique_vertices</strong><span class=\"classifier\">(M, 3) ndarray</span></dt><dd><p>Vertices sufficiently separated from one another.</p>\n</dd>\n<dt><strong>mapping</strong><span class=\"classifier\">(N,) ndarray</span></dt><dd><p>For each element <code class=\"docutils literal notranslate\"><span class=\"pre\">vertices[i]</span></code> (<span class=\"math notranslate nohighlight\">\\(i \\in 0..N-1\\)</span>), the index <span class=\"math notranslate nohighlight\">\\(j\\)</span> to a\nvertex in <cite>unique_vertices</cite> that is less than <cite>theta</cite> degrees from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">vertices[i]</span></code>.  Only returned if <cite>return_mapping</cite> is True.</p>\n</dd>\n<dt><strong>indices</strong><span class=\"classifier\">(N,) ndarray</span></dt><dd><p><cite>indices</cite> gives the reverse of <cite>mapping</cite>.  For each element\n<code class=\"docutils literal notranslate\"><span class=\"pre\">unique_vertices[j]</span></code> (<span class=\"math notranslate nohighlight\">\\(j \\in 0..M-1\\)</span>), the index <span class=\"math notranslate nohighlight\">\\(i\\)</span> to a vertex in\n<cite>vertices</cite> that is less than <cite>theta</cite> degrees from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">unique_vertices[j]</span></code>.  If there is more than one element of\n<cite>vertices</cite> that is less than theta degrees from <cite>unique_vertices[j]</cite>,\nreturn the first (lowest index) matching value.  Only return if\n<cite>return_indices</cite> is True.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id57\">\n<h3>sphere2cart<a class=\"headerlink\" href=\"#id57\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.sphere2cart\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">sphere2cart</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">r</em>, <em class=\"sig-param\">theta</em>, <em class=\"sig-param\">phi</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.sphere2cart\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Spherical to Cartesian coordinates</p>\n<p>This is the standard physics convention where <cite>theta</cite> is the\ninclination (polar) angle, and <cite>phi</cite> is the azimuth angle.</p>\n<p>Imagine a sphere with center (0,0,0).  Orient it with the z axis\nrunning south-north, the y axis running west-east and the x axis\nfrom posterior to anterior.  <cite>theta</cite> (the inclination angle) is the\nangle to rotate from the z-axis (the zenith) around the y-axis,\ntowards the x axis.  Thus the rotation is counter-clockwise from the\npoint of view of positive y.  <cite>phi</cite> (azimuth) gives the angle of\nrotation around the z-axis towards the y axis.  The rotation is\ncounter-clockwise from the point of view of positive z.</p>\n<p>Equivalently, given a point P on the sphere, with coordinates x, y,\nz, <cite>theta</cite> is the angle between P and the z-axis, and <cite>phi</cite> is\nthe angle between the projection of P onto the XY plane, and the X\naxis.</p>\n<p>Geographical nomenclature designates theta as \u2018co-latitude\u2019, and phi\nas \u2018longitude\u2019</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>r</strong><span class=\"classifier\">array_like</span></dt><dd><p>radius</p>\n</dd>\n<dt><strong>theta</strong><span class=\"classifier\">array_like</span></dt><dd><p>inclination or polar angle</p>\n</dd>\n<dt><strong>phi</strong><span class=\"classifier\">array_like</span></dt><dd><p>azimuth angle</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">array</span></dt><dd><p>x coordinate(s) in Cartesion space</p>\n</dd>\n<dt><strong>y</strong><span class=\"classifier\">array</span></dt><dd><p>y coordinate(s) in Cartesian space</p>\n</dd>\n<dt><strong>z</strong><span class=\"classifier\">array</span></dt><dd><p>z coordinate</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>See these pages:</p>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Spherical_coordinate_system\">http://en.wikipedia.org/wiki/Spherical_coordinate_system</a></p></li>\n<li><p><a class=\"reference external\" href=\"http://mathworld.wolfram.com/SphericalCoordinates.html\">http://mathworld.wolfram.com/SphericalCoordinates.html</a></p></li>\n</ul>\n<p>for excellent discussion of the many different conventions\npossible.  Here we use the physics conventions, used in the\nwikipedia page.</p>\n<p>Derivations of the formulae are simple. Consider a vector x, y, z of\nlength r (norm of x, y, z).  The inclination angle (theta) can be\nfound from: cos(theta) == z / r -&gt; z == r * cos(theta).  This gives\nthe hypotenuse of the projection onto the XY plane, which we will\ncall Q. Q == r*sin(theta). Now x / Q == cos(phi) -&gt; x == r *\nsin(theta) * cos(phi) and so on.</p>\n<p>We have deliberately named this function <code class=\"docutils literal notranslate\"><span class=\"pre\">sphere2cart</span></code> rather than\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sph2cart</span></code> to distinguish it from the Matlab function of that\nname, because the Matlab function uses an unusual convention for the\nangles that we did not want to replicate.  The Matlab function is\ntrivial to implement with the formulae given in the Matlab help.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"unique-edges\">\n<h3>unique_edges<a class=\"headerlink\" href=\"#unique-edges\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.unique_edges\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">unique_edges</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">faces</em>, <em class=\"sig-param\">return_mapping=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.unique_edges\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Extract all unique edges from given triangular faces.</p>\n<dl class=\"field-list\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>faces</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Vertex indices forming triangular faces.</p>\n</dd>\n<dt><strong>return_mapping</strong><span class=\"classifier\">bool</span></dt><dd><p>If true, a mapping to the edges of each face is returned.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl>\n<dt><strong>edges</strong><span class=\"classifier\">(N, 2) ndarray</span></dt><dd><p>Unique edges.</p>\n</dd>\n<dt><strong>mapping</strong><span class=\"classifier\">(N, 3)</span></dt><dd><p>For each face, [x, y, z], a mapping to it\u2019s edges [a, b, c].</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>   y\n   /               /               a/    \b\n/                  /                   /__________          x      c     z\n</pre></div>\n</div>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"unique-sets\">\n<h3>unique_sets<a class=\"headerlink\" href=\"#unique-sets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.unique_sets\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">unique_sets</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sets</em>, <em class=\"sig-param\">return_inverse=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.unique_sets\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Remove duplicate sets.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>sets</strong><span class=\"classifier\">array (N, k)</span></dt><dd><p>N sets of size k.</p>\n</dd>\n<dt><strong>return_inverse</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, also returns the indices of unique_sets that can be used\nto reconstruct <cite>sets</cite> (the original ordering of each set may not be\npreserved).</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>unique_sets</strong><span class=\"classifier\">array</span></dt><dd><p>Unique sets.</p>\n</dd>\n<dt><strong>inverse</strong><span class=\"classifier\">array (N,)</span></dt><dd><p>The indices to reconstruct <cite>sets</cite> from <cite>unique_sets</cite>.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id58\">\n<h3>vector_norm<a class=\"headerlink\" href=\"#id58\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere.vector_norm\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere.</code><code class=\"sig-name descname\">vector_norm</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">vec</em>, <em class=\"sig-param\">axis=-1</em>, <em class=\"sig-param\">keepdims=False</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere.vector_norm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return vector Euclidean (L2) norm</p>\n<p>See <a class=\"reference internal\" href=\"../../glossary/#term-unit-vector\"><span class=\"xref std std-term\">unit vector</span></a> and <a class=\"reference internal\" href=\"../../glossary/#term-euclidean-norm\"><span class=\"xref std std-term\">Euclidean norm</span></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>vec</strong><span class=\"classifier\">array_like</span></dt><dd><p>Vectors to norm.</p>\n</dd>\n<dt><strong>axis</strong><span class=\"classifier\">int</span></dt><dd><p>Axis over which to norm. By default norm over last axis. If <cite>axis</cite> is\nNone, <cite>vec</cite> is flattened then normed.</p>\n</dd>\n<dt><strong>keepdims</strong><span class=\"classifier\">bool</span></dt><dd><p>If True, the output will have the same number of dimensions as <cite>vec</cite>,\nwith shape 1 on <cite>axis</cite>.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>norm</strong><span class=\"classifier\">array</span></dt><dd><p>Euclidean norms of vectors.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vec</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">77</span><span class=\"p\">]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">)</span>\n<span class=\"go\">array([ 17.,  85.])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"n\">keepdims</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">array([[ 17.],</span>\n<span class=\"go\">       [ 85.]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector_norm</span><span class=\"p\">(</span><span class=\"n\">vec</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">array([  8.,  39.,  77.])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"permutations\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.sphere_stats.permutations\" title=\"dipy.core.sphere_stats.permutations\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">permutations</span></code></a><a class=\"headerlink\" href=\"#permutations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.sphere_stats.permutations\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.sphere_stats.</code><code class=\"sig-name descname\">permutations</code><a class=\"headerlink\" href=\"#dipy.core.sphere_stats.permutations\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#object\" title=\"(in Python v3.8)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">object</span></code></a></p>\n<p>permutations(iterable[, r]) \u2013&gt; permutations object</p>\n<p>Return successive r-length permutations of elements in the iterable.</p>\n<p>permutations(range(3), 2) \u2013&gt; (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)</p>\n<dl class=\"method\">\n<dt id=\"dipy.core.sphere_stats.permutations.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">/</em>, <em class=\"sig-param\">*args</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere_stats.permutations.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"angular-similarity\">\n<h3>angular_similarity<a class=\"headerlink\" href=\"#angular-similarity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere_stats.angular_similarity\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere_stats.</code><code class=\"sig-name descname\">angular_similarity</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">S</em>, <em class=\"sig-param\">T</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere_stats.angular_similarity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the cosine distance of the best match between\npoints of two sets of vectors S and T</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>S</strong><span class=\"classifier\">array, shape (m,d)</span></dt><dd></dd>\n<dt><strong>T</strong><span class=\"classifier\">array, shape (n,d)</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>max_cosine_distance:float</dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.sphere_stats</span> <span class=\"k\">import</span> <span class=\"n\">angular_similarity</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">2.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">2.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">2.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">3.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">2.7071067811865475</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">1.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">0.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.</span><span class=\"p\">]])</span>\n</pre></div>\n</div>\n<p>Now we use <code class=\"docutils literal notranslate\"><span class=\"pre\">print</span></code> to reduce the precision of of the printed output\n(so the doctests don\u2019t detect unimportant differences)</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%.12f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">))</span>\n<span class=\"go\">0.707106781187</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%.12f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">))</span>\n<span class=\"go\">0.707106781187</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.</span><span class=\"p\">,</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mf\">2.</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"si\">%.12f</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"n\">angular_similarity</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">))</span>\n<span class=\"go\">0.707106781187</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"compare-orientation-sets\">\n<h3>compare_orientation_sets<a class=\"headerlink\" href=\"#compare-orientation-sets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere_stats.compare_orientation_sets\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere_stats.</code><code class=\"sig-name descname\">compare_orientation_sets</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">S</em>, <em class=\"sig-param\">T</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere_stats.compare_orientation_sets\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the mean cosine distance of the best match between\npoints of two sets of vectors S and T (angular similarity)</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>S</strong><span class=\"classifier\">array, shape (m,d)</span></dt><dd><p>First set of vectors.</p>\n</dd>\n<dt><strong>T</strong><span class=\"classifier\">array, shape (n,d)</span></dt><dd><p>Second set of vectors.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>max_mean_cosine</strong><span class=\"classifier\">float</span></dt><dd><p>Maximum mean cosine distance.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.sphere_stats</span> <span class=\"k\">import</span> <span class=\"n\">compare_orientation_sets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compare_orientation_sets</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">1.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compare_orientation_sets</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">1.0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.sphere_stats</span> <span class=\"k\">import</span> <span class=\"n\">compare_orientation_sets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">S</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">],[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">compare_orientation_sets</span><span class=\"p\">(</span><span class=\"n\">S</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"p\">)</span>\n<span class=\"go\">1.0</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"eigenstats\">\n<h3>eigenstats<a class=\"headerlink\" href=\"#eigenstats\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere_stats.eigenstats\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere_stats.</code><code class=\"sig-name descname\">eigenstats</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">points</em>, <em class=\"sig-param\">alpha=0.05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere_stats.eigenstats\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Principal direction and confidence ellipse</p>\n<p>Implements equations in section 6.3.1(ii) of Fisher, Lewis and\nEmbleton, supplemented by equations in section 3.2.5.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>points</strong><span class=\"classifier\">arraey_like (N,3)</span></dt><dd><p>array of points on the sphere of radius 1 in <span class=\"math notranslate nohighlight\">\\(\\mathbb{R}^3\\)</span></p>\n</dd>\n<dt><strong>alpha</strong><span class=\"classifier\">real or None</span></dt><dd><p>1 minus the coverage for the confidence ellipsoid, e.g. 0.05 for 95%\ncoverage.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>centre</strong><span class=\"classifier\">vector (3,)</span></dt><dd><p>centre of ellipsoid</p>\n</dd>\n<dt><strong>b1</strong><span class=\"classifier\">vector (2,)</span></dt><dd><p>lengths of semi-axes of ellipsoid</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"random-uniform-on-sphere\">\n<h3>random_uniform_on_sphere<a class=\"headerlink\" href=\"#random-uniform-on-sphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.sphere_stats.random_uniform_on_sphere\">\n<code class=\"sig-prename descclassname\">dipy.core.sphere_stats.</code><code class=\"sig-name descname\">random_uniform_on_sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">n=1</em>, <em class=\"sig-param\">coords='xyz'</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.sphere_stats.random_uniform_on_sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Random unit vectors from a uniform distribution on the sphere.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>n</strong><span class=\"classifier\">int</span></dt><dd><p>Number of random vectors</p>\n</dd>\n<dt><strong>coords</strong><span class=\"classifier\">{\u2018xyz\u2019, \u2018radians\u2019, \u2018degrees\u2019}</span></dt><dd><p>\u2018xyz\u2019 for cartesian form\n\u2018radians\u2019 for spherical form in rads\n\u2018degrees\u2019 for spherical form in degrees</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>X</strong><span class=\"classifier\">array, shape (n,3) if coords=\u2019xyz\u2019 or shape (n,2) otherwise</span></dt><dd><p>Uniformly distributed vectors on the unit sphere.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Notes</p>\n<p>The uniform distribution on the sphere, parameterized by spherical\ncoordinates <span class=\"math notranslate nohighlight\">\\((\\theta, \\phi)\\)</span>, should verify <span class=\"math notranslate nohighlight\">\\(\\phi\\sim U[0,2\\pi]\\)</span>, while\n<span class=\"math notranslate nohighlight\">\\(z=\\cos(\\theta)\\sim U[-1,1]\\)</span>.</p>\n<p class=\"rubric\">References</p>\n<dl class=\"citation\">\n<dt class=\"label\" id=\"r855e1bb248b7-1\"><span class=\"brackets\">1</span></dt>\n<dd><p><a class=\"reference external\" href=\"http://mathworld.wolfram.com/SpherePointPicking.html\">http://mathworld.wolfram.com/SpherePointPicking.html</a>.</p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">dipy.core.sphere_stats</span> <span class=\"k\">import</span> <span class=\"n\">random_uniform_on_sphere</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">random_uniform_on_sphere</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;radians&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">random_uniform_on_sphere</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;xyz&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"id60\">\n<h3><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.HemiSphere\" title=\"dipy.core.subdivide_octahedron.HemiSphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a><a class=\"headerlink\" href=\"#id60\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dipy.core.subdivide_octahedron.HemiSphere\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dipy.core.subdivide_octahedron.</code><code class=\"sig-name descname\">HemiSphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.HemiSphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Bases: <a class=\"reference internal\" href=\"#dipy.core.sphere.Sphere\" title=\"dipy.core.sphere.Sphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dipy.core.sphere.Sphere</span></code></a></p>\n<p>Points on the unit sphere.</p>\n<p>A HemiSphere is similar to a Sphere but it takes antipodal symmetry into\naccount. Antipodal symmetry means that point v on a HemiSphere is the same\nas the point -v. Duplicate points are discarded when constructing a\nHemiSphere (including antipodal duplicates). <cite>edges</cite> and <cite>faces</cite> are\nremapped to the remaining points as closely as possible.</p>\n<p>The HemiSphere can be constructed using one of three conventions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">xyz</span><span class=\"o\">=</span><span class=\"n\">xyz</span><span class=\"p\">)</span>\n<span class=\"n\">HemiSphere</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"o\">=</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"n\">phi</span><span class=\"o\">=</span><span class=\"n\">phi</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x, y, z</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>theta, phi</strong><span class=\"classifier\">1-D array_like</span></dt><dd><p>Vertices as spherical coordinates.  Theta and phi are the inclination\nand azimuth angles respectively.</p>\n</dd>\n<dt><strong>xyz</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Vertices as x-y-z coordinates.</p>\n</dd>\n<dt><strong>faces</strong><span class=\"classifier\">(N, 3) ndarray</span></dt><dd><p>Indices into vertices that form triangular faces.  If unspecified,\nthe faces are computed using a Delaunay triangulation.</p>\n</dd>\n<dt><strong>edges</strong><span class=\"classifier\">(N, 2) ndarray</span></dt><dd><p>Edges between vertices.  If unspecified, the edges are\nderived from the faces.</p>\n</dd>\n<dt><strong>tol</strong><span class=\"classifier\">float</span></dt><dd><p>Angle in degrees. Vertices that are less than tol degrees apart are\ntreated as duplicates.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></dt><dd></dd>\n</dl>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Attributes</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong></dt><dd></dd>\n<dt><strong>y</strong></dt><dd></dd>\n<dt><strong>z</strong></dt><dd></dd>\n</dl>\n</dd>\n</dl>\n<p class=\"rubric\">Methods</p>\n<table class=\"longtable docutils align-default\">\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 90%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.find_closest\" title=\"dipy.core.subdivide_octahedron.HemiSphere.find_closest\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">find_closest</span></code></a>(self,\u00a0xyz)</p></td>\n<td><p>Find the index of the vertex in the Sphere closest to the input vector, taking into account antipodal symmetry</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.from_sphere\" title=\"dipy.core.subdivide_octahedron.HemiSphere.from_sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">from_sphere</span></code></a>(sphere[,\u00a0tol])</p></td>\n<td><p>Create instance from a Sphere</p></td>\n</tr>\n<tr class=\"row-odd\"><td><p><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.mirror\" title=\"dipy.core.subdivide_octahedron.HemiSphere.mirror\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">mirror</span></code></a>(self)</p></td>\n<td><p>Create a full Sphere from a HemiSphere</p></td>\n</tr>\n<tr class=\"row-even\"><td><p><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.subdivide\" title=\"dipy.core.subdivide_octahedron.HemiSphere.subdivide\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">subdivide</span></code></a>(self[,\u00a0n])</p></td>\n<td><p>Create a more subdivided HemiSphere</p></td>\n</tr>\n</tbody>\n</table>\n<table class=\"docutils align-default\">\n<colgroup>\n<col style=\"width: 55%\" />\n<col style=\"width: 45%\" />\n</colgroup>\n<tbody>\n<tr class=\"row-odd\"><td><p><strong>edges</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-even\"><td><p><strong>faces</strong></p></td>\n<td></td>\n</tr>\n<tr class=\"row-odd\"><td><p><strong>vertices</strong></p></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<dl class=\"method\">\n<dt id=\"dipy.core.subdivide_octahedron.HemiSphere.__init__\">\n<code class=\"sig-name descname\">__init__</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">x=None</em>, <em class=\"sig-param\">y=None</em>, <em class=\"sig-param\">z=None</em>, <em class=\"sig-param\">theta=None</em>, <em class=\"sig-param\">phi=None</em>, <em class=\"sig-param\">xyz=None</em>, <em class=\"sig-param\">faces=None</em>, <em class=\"sig-param\">edges=None</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a HemiSphere from points</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.subdivide_octahedron.HemiSphere.faces\">\n<code class=\"sig-name descname\">faces</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.faces\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.subdivide_octahedron.HemiSphere.find_closest\">\n<code class=\"sig-name descname\">find_closest</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">xyz</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.find_closest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Find the index of the vertex in the Sphere closest to the input vector,\ntaking into account antipodal symmetry</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>xyz</strong><span class=\"classifier\">array-like, 3 elements</span></dt><dd><p>A unit vector</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>idx</strong><span class=\"classifier\">int</span></dt><dd><p>The index into the Sphere.vertices array that gives the closest\nvertex (in angle).</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.subdivide_octahedron.HemiSphere.from_sphere\">\n<em class=\"property\">classmethod </em><code class=\"sig-name descname\">from_sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">sphere</em>, <em class=\"sig-param\">tol=1e-05</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.from_sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create instance from a Sphere</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.subdivide_octahedron.HemiSphere.mirror\">\n<code class=\"sig-name descname\">mirror</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.mirror\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a full Sphere from a HemiSphere</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dipy.core.subdivide_octahedron.HemiSphere.subdivide\">\n<code class=\"sig-name descname\">subdivide</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">self</em>, <em class=\"sig-param\">n=1</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.HemiSphere.subdivide\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a more subdivided HemiSphere</p>\n<p>See Sphere.subdivide for full documentation.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"create-unit-hemisphere\">\n<h3>create_unit_hemisphere<a class=\"headerlink\" href=\"#create-unit-hemisphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.subdivide_octahedron.create_unit_hemisphere\">\n<code class=\"sig-prename descclassname\">dipy.core.subdivide_octahedron.</code><code class=\"sig-name descname\">create_unit_hemisphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">recursion_level=2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.create_unit_hemisphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a unit sphere by subdividing a unit octahedron, returns half\nthe sphere.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>recursion_level</strong><span class=\"classifier\">int</span></dt><dd><p>Level of subdivision, recursion_level=1 will return an octahedron,\nanything bigger will return a more subdivided sphere. The sphere will\nhave <span class=\"math notranslate nohighlight\">\\((4^recursion_level+2)/2\\)</span> vertices.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>HemiSphere :</dt><dd><p>Half of a unit sphere.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.create_unit_sphere\" title=\"dipy.core.subdivide_octahedron.create_unit_sphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_unit_sphere</span></code></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Sphere</span></code>, <a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.HemiSphere\" title=\"dipy.core.subdivide_octahedron.HemiSphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"create-unit-sphere\">\n<h3>create_unit_sphere<a class=\"headerlink\" href=\"#create-unit-sphere\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.subdivide_octahedron.create_unit_sphere\">\n<code class=\"sig-prename descclassname\">dipy.core.subdivide_octahedron.</code><code class=\"sig-name descname\">create_unit_sphere</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">recursion_level=2</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.subdivide_octahedron.create_unit_sphere\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a unit sphere by subdividing a unit octahedron.</p>\n<p>Starts with a unit octahedron and subdivides the faces, projecting the\nresulting points onto the surface of a unit sphere.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>recursion_level</strong><span class=\"classifier\">int</span></dt><dd><p>Level of subdivision, recursion_level=1 will return an octahedron,\nanything bigger will return a more subdivided sphere. The sphere will\nhave <span class=\"math notranslate nohighlight\">\\(4^recursion_level+2\\)</span> vertices.</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt>Sphere :</dt><dd><p>The unit sphere.</p>\n</dd>\n</dl>\n</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"admonition-title\">See also</p>\n<dl class=\"simple\">\n<dt><a class=\"reference internal\" href=\"#dipy.core.subdivide_octahedron.create_unit_hemisphere\" title=\"dipy.core.subdivide_octahedron.create_unit_hemisphere\"><code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">create_unit_hemisphere</span></code></a>, <code class=\"xref py py-obj docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></dt><dd></dd>\n</dl>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"afb3d\">\n<h3>afb3D<a class=\"headerlink\" href=\"#afb3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.wavelet.afb3D\">\n<code class=\"sig-prename descclassname\">dipy.core.wavelet.</code><code class=\"sig-name descname\">afb3D</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">af1</em>, <em class=\"sig-param\">af2=None</em>, <em class=\"sig-param\">af3=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.wavelet.afb3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>3D Analysis Filter Bank</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>N1 by N2 by N3 array matrix, where\n1) N1, N2, N3 all even\n2) N1 &gt;= 2*len(af1)\n3) N2 &gt;= 2*len(af2)\n4) N3 &gt;= 2*len(af3)</p>\n</dd>\n<dt><strong>afi</strong><span class=\"classifier\">2D ndarray</span></dt><dd><p>analysis filters for dimension i\nafi[:, 1] - lowpass filter\nafi[:, 2] - highpass filter</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>lo</strong><span class=\"classifier\">1D array</span></dt><dd><p>lowpass subband</p>\n</dd>\n<dt><strong>hi</strong><span class=\"classifier\">1D array</span></dt><dd><p>highpass subbands, h[d]- d = 1..7</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"afb3d-a\">\n<h3>afb3D_A<a class=\"headerlink\" href=\"#afb3d-a\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.wavelet.afb3D_A\">\n<code class=\"sig-prename descclassname\">dipy.core.wavelet.</code><code class=\"sig-name descname\">afb3D_A</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">af</em>, <em class=\"sig-param\">d</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.wavelet.afb3D_A\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>3D Analysis Filter Bank</dt><dd><p>(along one dimension only)</p>\n</dd>\n</dl>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">3D ndarray</span></dt><dd><dl class=\"simple\">\n<dt>N1xN2xN2 matrix, where min(N1,N2,N3) &gt; 2*length(filter)</dt><dd><p>(Ni are even)</p>\n</dd>\n</dl>\n</dd>\n<dt><strong>af</strong><span class=\"classifier\">2D ndarray</span></dt><dd><p>analysis filter for the columns\naf[:, 1] - lowpass filter\naf[:, 2] - highpass filter</p>\n</dd>\n<dt><strong>d</strong><span class=\"classifier\">int</span></dt><dd><p>dimension of filtering (d = 1, 2 or 3)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>lo</strong><span class=\"classifier\">1D array</span></dt><dd><p>lowpass subbands</p>\n</dd>\n<dt><strong>hi</strong><span class=\"classifier\">1D array</span></dt><dd><p>highpass subbands</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"cshift3d\">\n<h3>cshift3D<a class=\"headerlink\" href=\"#cshift3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.wavelet.cshift3D\">\n<code class=\"sig-prename descclassname\">dipy.core.wavelet.</code><code class=\"sig-name descname\">cshift3D</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">m</em>, <em class=\"sig-param\">d</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.wavelet.cshift3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>3D Circular Shift</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>N1 by N2 by N3 array</p>\n</dd>\n<dt><strong>m</strong><span class=\"classifier\">int</span></dt><dd><p>amount of shift</p>\n</dd>\n<dt><strong>d</strong><span class=\"classifier\">int</span></dt><dd><p>dimension of shift (d = 1,2,3)</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>y</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>array x will be shifed by m samples down\nalong dimension d</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"dwt3d\">\n<h3>dwt3D<a class=\"headerlink\" href=\"#dwt3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.wavelet.dwt3D\">\n<code class=\"sig-prename descclassname\">dipy.core.wavelet.</code><code class=\"sig-name descname\">dwt3D</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">x</em>, <em class=\"sig-param\">J</em>, <em class=\"sig-param\">af</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.wavelet.dwt3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>3-D Discrete Wavelet Transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>x</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>N1 x N2 x N3 matrix\n1) Ni all even\n2) min(Ni) &gt;= 2^(J-1)*length(af)</p>\n</dd>\n<dt><strong>J</strong><span class=\"classifier\">int</span></dt><dd><p>number of stages</p>\n</dd>\n<dt><strong>af</strong><span class=\"classifier\">2D ndarray</span></dt><dd><p>analysis filters</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>w</strong><span class=\"classifier\">cell array</span></dt><dd><p>wavelet coefficients</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"idwt3d\">\n<h3>idwt3D<a class=\"headerlink\" href=\"#idwt3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.wavelet.idwt3D\">\n<code class=\"sig-prename descclassname\">dipy.core.wavelet.</code><code class=\"sig-name descname\">idwt3D</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">w</em>, <em class=\"sig-param\">J</em>, <em class=\"sig-param\">sf</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.wavelet.idwt3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Inverse 3-D Discrete Wavelet Transform</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>w</strong><span class=\"classifier\">cell array</span></dt><dd><p>wavelet coefficient</p>\n</dd>\n<dt><strong>J</strong><span class=\"classifier\">int</span></dt><dd><p>number of stages</p>\n</dd>\n<dt><strong>sf</strong><span class=\"classifier\">2D ndarray</span></dt><dd><p>synthesis filters</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>y</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>output array</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"permutationinverse\">\n<h3>permutationinverse<a class=\"headerlink\" href=\"#permutationinverse\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.wavelet.permutationinverse\">\n<code class=\"sig-prename descclassname\">dipy.core.wavelet.</code><code class=\"sig-name descname\">permutationinverse</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">perm</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.wavelet.permutationinverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Function generating inverse of the permutation</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>perm</strong><span class=\"classifier\">1D array</span></dt><dd></dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>inverse</strong><span class=\"classifier\">1D array</span></dt><dd><p>permutation inverse of the input</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sfb3d\">\n<h3>sfb3D<a class=\"headerlink\" href=\"#sfb3d\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.wavelet.sfb3D\">\n<code class=\"sig-prename descclassname\">dipy.core.wavelet.</code><code class=\"sig-name descname\">sfb3D</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">lo</em>, <em class=\"sig-param\">hi</em>, <em class=\"sig-param\">sf1</em>, <em class=\"sig-param\">sf2=None</em>, <em class=\"sig-param\">sf3=None</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.wavelet.sfb3D\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>3D Synthesis Filter Bank</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>lo</strong><span class=\"classifier\">1D array</span></dt><dd><p>lowpass subbands</p>\n</dd>\n<dt><strong>hi</strong><span class=\"classifier\">1D array</span></dt><dd><p>highpass subbands</p>\n</dd>\n<dt><strong>sfi</strong><span class=\"classifier\">2D ndarray</span></dt><dd><p>synthesis filters for dimension i</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>y</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>output array</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"sfb3d-a\">\n<h3>sfb3D_A<a class=\"headerlink\" href=\"#sfb3d-a\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dipy.core.wavelet.sfb3D_A\">\n<code class=\"sig-prename descclassname\">dipy.core.wavelet.</code><code class=\"sig-name descname\">sfb3D_A</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">lo</em>, <em class=\"sig-param\">hi</em>, <em class=\"sig-param\">sf</em>, <em class=\"sig-param\">d</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dipy.core.wavelet.sfb3D_A\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"simple\">\n<dt>3D Synthesis Filter Bank</dt><dd><p>(along single dimension only)</p>\n</dd>\n</dl>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><dl class=\"simple\">\n<dt><strong>lo</strong><span class=\"classifier\">1D array</span></dt><dd><p>lowpass subbands</p>\n</dd>\n<dt><strong>hi</strong><span class=\"classifier\">1D array</span></dt><dd><p>highpass subbands</p>\n</dd>\n<dt><strong>sf</strong><span class=\"classifier\">2D ndarray</span></dt><dd><p>synthesis filters</p>\n</dd>\n<dt><strong>d</strong><span class=\"classifier\">int</span></dt><dd><p>dimension of filtering</p>\n</dd>\n</dl>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><dl class=\"simple\">\n<dt><strong>y</strong><span class=\"classifier\">3D ndarray</span></dt><dd><p>the N1xN2xN3 matrix</p>\n</dd>\n</dl>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["reference/dipy.data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">data</span></code>", "N", "next"], ["reference/dipy.boots", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">boots</span></code>", "P", "previous"]], "sourcename": "reference/dipy.core.rst.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.benchmarks\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.benchmarks</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.benchmarks.bench_sphere\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.benchmarks.bench_sphere</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.geometry\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.geometry</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.gradients\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.gradients</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.graph\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.graph</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.histeq\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.histeq</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.ndindex\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.ndindex</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.onetime\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.onetime</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.optimize\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.optimize</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.profile\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.profile</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.rng\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.rng</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.sphere\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.sphere</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.sphere_stats\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.sphere_stats</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.subdivide_octahedron\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.subdivide_octahedron</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#module-dipy.core.wavelet\">Module: <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">core.wavelet</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#test\">test</a></li>\n<li><a class=\"reference internal\" href=\"#timer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Timer</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bench-disperse-charges-alt\">bench_disperse_charges_alt</a></li>\n<li><a class=\"reference internal\" href=\"#func-minimize-adhoc\">func_minimize_adhoc</a></li>\n<li><a class=\"reference internal\" href=\"#func-minimize-scipy\">func_minimize_scipy</a></li>\n<li><a class=\"reference internal\" href=\"#cart2sphere\">cart2sphere</a></li>\n<li><a class=\"reference internal\" href=\"#cart-distance\">cart_distance</a></li>\n<li><a class=\"reference internal\" href=\"#circumradius\">circumradius</a></li>\n<li><a class=\"reference internal\" href=\"#compose-matrix\">compose_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#compose-transformations\">compose_transformations</a></li>\n<li><a class=\"reference internal\" href=\"#decompose-matrix\">decompose_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#dist-to-corner\">dist_to_corner</a></li>\n<li><a class=\"reference internal\" href=\"#euler-matrix\">euler_matrix</a></li>\n<li><a class=\"reference internal\" href=\"#is-hemispherical\">is_hemispherical</a></li>\n<li><a class=\"reference internal\" href=\"#lambert-equal-area-projection-cart\">lambert_equal_area_projection_cart</a></li>\n<li><a class=\"reference internal\" href=\"#lambert-equal-area-projection-polar\">lambert_equal_area_projection_polar</a></li>\n<li><a class=\"reference internal\" href=\"#nearest-pos-semi-def\">nearest_pos_semi_def</a></li>\n<li><a class=\"reference internal\" href=\"#normalized-vector\">normalized_vector</a></li>\n<li><a class=\"reference internal\" href=\"#perpendicular-directions\">perpendicular_directions</a></li>\n<li><a class=\"reference internal\" href=\"#rodrigues-axis-rotation\">rodrigues_axis_rotation</a></li>\n<li><a class=\"reference internal\" href=\"#sph2latlon\">sph2latlon</a></li>\n<li><a class=\"reference internal\" href=\"#sphere2cart\">sphere2cart</a></li>\n<li><a class=\"reference internal\" href=\"#sphere-distance\">sphere_distance</a></li>\n<li><a class=\"reference internal\" href=\"#vec2vec-rotmat\">vec2vec_rotmat</a></li>\n<li><a class=\"reference internal\" href=\"#vector-cosine\">vector_cosine</a></li>\n<li><a class=\"reference internal\" href=\"#vector-norm\">vector_norm</a></li>\n<li><a class=\"reference internal\" href=\"#gradienttable\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GradientTable</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#hemisphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#auto-attr\">auto_attr</a></li>\n<li><a class=\"reference internal\" href=\"#btens-to-params\">btens_to_params</a></li>\n<li><a class=\"reference internal\" href=\"#check-multi-b\">check_multi_b</a></li>\n<li><a class=\"reference internal\" href=\"#deprecate-with-version\">deprecate_with_version</a></li>\n<li><a class=\"reference internal\" href=\"#disperse-charges\">disperse_charges</a></li>\n<li><a class=\"reference internal\" href=\"#generate-bvecs\">generate_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#get-bval-indices\">get_bval_indices</a></li>\n<li><a class=\"reference internal\" href=\"#gradient-table\">gradient_table</a></li>\n<li><a class=\"reference internal\" href=\"#gradient-table-from-bvals-bvecs\">gradient_table_from_bvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#gradient-table-from-gradient-strength-bvecs\">gradient_table_from_gradient_strength_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#gradient-table-from-qvals-bvecs\">gradient_table_from_qvals_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#inv\">inv</a></li>\n<li><a class=\"reference internal\" href=\"#params-to-btens\">params_to_btens</a></li>\n<li><a class=\"reference internal\" href=\"#polar\">polar</a></li>\n<li><a class=\"reference internal\" href=\"#reorient-bvecs\">reorient_bvecs</a></li>\n<li><a class=\"reference internal\" href=\"#round-bvals\">round_bvals</a></li>\n<li><a class=\"reference internal\" href=\"#unique-bvals\">unique_bvals</a></li>\n<li><a class=\"reference internal\" href=\"#unique-bvals-magnitude\">unique_bvals_magnitude</a></li>\n<li><a class=\"reference internal\" href=\"#unique-bvals-tolerance\">unique_bvals_tolerance</a></li>\n<li><a class=\"reference internal\" href=\"#id9\">vec2vec_rotmat</a></li>\n<li><a class=\"reference internal\" href=\"#id10\">vector_norm</a></li>\n<li><a class=\"reference internal\" href=\"#warn\">warn</a></li>\n<li><a class=\"reference internal\" href=\"#graph\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Graph</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#histeq\">histeq</a></li>\n<li><a class=\"reference internal\" href=\"#as-strided\">as_strided</a></li>\n<li><a class=\"reference internal\" href=\"#ndindex\">ndindex</a></li>\n<li><a class=\"reference internal\" href=\"#onetimeproperty\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneTimeProperty</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#resetmixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResetMixin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id11\">auto_attr</a></li>\n<li><a class=\"reference internal\" href=\"#nonnegativeleastsquares\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">NonNegativeLeastSquares</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#optimizer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Optimizer</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#sklearnlinearsolver\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SKLearnLinearSolver</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#minimize\">minimize</a></li>\n<li><a class=\"reference internal\" href=\"#sparse-nnls\">sparse_nnls</a></li>\n<li><a class=\"reference internal\" href=\"#spdot\">spdot</a></li>\n<li><a class=\"reference internal\" href=\"#profiler\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Profiler</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#optional-package\">optional_package</a></li>\n<li><a class=\"reference internal\" href=\"#lecuyer\">LEcuyer</a></li>\n<li><a class=\"reference internal\" href=\"#wichmannhill1982\">WichmannHill1982</a></li>\n<li><a class=\"reference internal\" href=\"#wichmannhill2006\">WichmannHill2006</a></li>\n<li><a class=\"reference internal\" href=\"#architecture\">architecture</a></li>\n<li><a class=\"reference internal\" href=\"#floor\">floor</a></li>\n<li><a class=\"reference internal\" href=\"#id53\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#sphere\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Sphere</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id54\">auto_attr</a></li>\n<li><a class=\"reference internal\" href=\"#id55\">cart2sphere</a></li>\n<li><a class=\"reference internal\" href=\"#id56\">disperse_charges</a></li>\n<li><a class=\"reference internal\" href=\"#disperse-charges-alt\">disperse_charges_alt</a></li>\n<li><a class=\"reference internal\" href=\"#euler-characteristic-check\">euler_characteristic_check</a></li>\n<li><a class=\"reference internal\" href=\"#faces-from-sphere-vertices\">faces_from_sphere_vertices</a></li>\n<li><a class=\"reference internal\" href=\"#remove-similar-vertices\">remove_similar_vertices</a></li>\n<li><a class=\"reference internal\" href=\"#id57\">sphere2cart</a></li>\n<li><a class=\"reference internal\" href=\"#unique-edges\">unique_edges</a></li>\n<li><a class=\"reference internal\" href=\"#unique-sets\">unique_sets</a></li>\n<li><a class=\"reference internal\" href=\"#id58\">vector_norm</a></li>\n<li><a class=\"reference internal\" href=\"#permutations\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">permutations</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#angular-similarity\">angular_similarity</a></li>\n<li><a class=\"reference internal\" href=\"#compare-orientation-sets\">compare_orientation_sets</a></li>\n<li><a class=\"reference internal\" href=\"#eigenstats\">eigenstats</a></li>\n<li><a class=\"reference internal\" href=\"#random-uniform-on-sphere\">random_uniform_on_sphere</a></li>\n<li><a class=\"reference internal\" href=\"#id60\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HemiSphere</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#create-unit-hemisphere\">create_unit_hemisphere</a></li>\n<li><a class=\"reference internal\" href=\"#create-unit-sphere\">create_unit_sphere</a></li>\n<li><a class=\"reference internal\" href=\"#afb3d\">afb3D</a></li>\n<li><a class=\"reference internal\" href=\"#afb3d-a\">afb3D_A</a></li>\n<li><a class=\"reference internal\" href=\"#cshift3d\">cshift3D</a></li>\n<li><a class=\"reference internal\" href=\"#dwt3d\">dwt3D</a></li>\n<li><a class=\"reference internal\" href=\"#idwt3d\">idwt3D</a></li>\n<li><a class=\"reference internal\" href=\"#permutationinverse\">permutationinverse</a></li>\n<li><a class=\"reference internal\" href=\"#sfb3d\">sfb3D</a></li>\n<li><a class=\"reference internal\" href=\"#sfb3d-a\">sfb3D_A</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".rst", "current_page_name": "reference/dipy.core", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "alabaster_version": "0.7.12"}